/**
 * ðŸ¦•
 * Please refrain from importing anything into this utility to keep it Deno-compatible
 */

const IMPORTS_REG_EXP = new RegExp(
  '/// <generated-imports[\\d\\D]*?/generated-imports>',
  'g',
);

const exportsRegExp = new RegExp(
  '/// <generated-exports[\\d\\D]*?/generated-exports>',
  'g',
);

export function generateIndexForFramework({
  code,
  filenames: allFilenames,
}: {
  code: string;
  filenames: string[];
}) {
  // Filter out main since it's hardcoded
  const filenames = allFilenames.filter((f) => f !== 'main.ts');

  const generatedImports = [
    '/// <generated-imports>',
    '/// ðŸ›‘ DO NOT MODIFY THIS PART ///',
    '/// GENERATED BY packages/@zipper-utils/src/utils/generate-index-for-framework.ts',
    ...filenames.map((f, i) => `import * as module${i} from '../src/${f}';`),
    '/// </generated-imports>',
  ].join(`\n`);

  const generatedExports = [
    '/// <generated-exports>',
    '/// ðŸ›‘ DO NOT MODIFY THIS PART ///',
    '/// GENERATED BY packages/@zipper-utils/src/utils/generate-index-for-framework.ts',
    ...filenames.map(
      (f, i) => `'${f.replace(/\.(ts|tsx)$|$/, '.ts')}': module${i},`,
    ),
    '/// </generated-exports>',
  ].join('\n');

  return code
    .replace(IMPORTS_REG_EXP, generatedImports)
    .replace(exportsRegExp, generatedExports);
}
