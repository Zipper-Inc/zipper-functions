// aifunctions route
import { NextResponse } from 'next/server';
import { Configuration, OpenAIApi } from 'openai';

export type ChatGPTAgent = 'user' | 'system' | 'assistant';
export interface ChatGPTMessage {
  role: ChatGPTAgent;
  content: string;
}

export interface ChatGPTFunction {
  name: string;
  description: string;
  parameters: {
    type: string;
    properties: {
      [key: string]: {
        type: string;
        description: string;
        enum?: string[];
      };
    };
    required: string[];
  };
}

const functions: ChatGPTFunction[] = [
  {
    name: 'generateAppletTypescriptCode',
    description:
      'Generates a basic typescript code that implements the user request using OpenAI',
    parameters: {
      type: 'object',
      properties: {
        userRequest: {
          type: 'string',
          description:
            "The user request. Example: I want a applet that can greet the user by it's name",
        },
      },
      required: ['userRequest'],
    },
  },
  {
    name: 'generateZipperAppletVersion',
    description:
      'Reimplementation of previous generated code but using Zipper functionalities',
    parameters: {
      type: 'object',
      properties: {
        userRequest: {
          type: 'string',
          description:
            "The user request. Example: I want a applet that can greet the user by it's name",
        },
        rawTypescriptCode: {
          type: 'string',
          description:
            'The raw typescript code generated by the previous function',
        },
      },
      required: ['userRequest', 'rawTypescriptCode'],
    },
  },
];

export const conf = new Configuration({
  apiKey: process.env.OPENAI,
});

export const systemPrompt = `
    You are a high skilled typescript developer, your task is to take the user request and generate typescript code. 
    Your code must export a handler function. You are not allowed to use classes. 
    Your final output should be a handler function that implements the user request.
    You should always only respond with the desired code, no additional text.
    Example: 
    User request: I want a applet that can greet the user by it's name
    Code: 
    export async function handler({name} : {name: string}){
      return \`Hello \${name}\`
    }

`;

export async function POST(req: Request) {
  const { userRequest, previousMessages } = await req.json();
  try {
    const newApplet = await chat({ previousMessages, userRequest });
    return NextResponse.json({ message: newApplet });
  } catch (error: any) {
    return NextResponse.json({ error: error.message });
  }
}

async function chat({
  previousMessages,
}: {
  previousMessages: ChatGPTMessage[];
  userRequest: string;
}) {
  const conf = new Configuration({
    apiKey: process.env.OPENAI,
  });

  if (conf.apiKey === undefined) {
    console.log('No API key provided.');
    return { error: 'No API key provided.' };
  }

  const openai = new OpenAIApi(conf);
  try {
    console.log('Creating chat completion...');
    const completion = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo-16k-0613',
      messages: [
        {
          role: 'system',
          content: systemPrompt,
        },
        ...previousMessages,
      ],
      functions,
      temperature: 0.1,
      function_call: {
        name: 'generateAppletTypescriptCode',
      },
    });

    console.log(completion.data.choices[0]);

    return completion.data.choices[0]?.message;
  } catch (error: any) {
    console.log(error);
    if (error.response) {
      console.log(error.response.status);
      console.log(error.response.data);
      return {
        message: error.response.data?.error?.message ?? 'Unknown error',
      };
    } else {
      console.log(error);
      return {
        message: error.error?.message ?? 'Unknown error',
      };
    }
  }
}
