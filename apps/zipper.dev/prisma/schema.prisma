// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model App {
  id                    String    @id @default(uuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @default(now())
  deletedAt             DateTime?
  slug                  String    @unique @db.VarChar(60)
  name                  String?
  description           String?
  datastore             Json?     @db.JsonB
  isPrivate             Boolean   @default(true)
  submissionState       Int       @default(0)
  categories            String[]
  parentId              String?
  publishedVersionHash  String?   @unique
  playgroundVersionHash String?   @unique
  organizationId        String?
  createdById           String?
  requiresAuthToRun     Boolean   @default(false)
  isDataSensitive       Boolean   @default(false)
  isTemplate            Boolean   @default(false)
  dailyRunLimit         Int       @default(1000)
  secretsHash           String?

  scriptMain ScriptMain?

  scripts        Script[]
  secrets        Secret[]
  schedules      Schedule[]
  runs           AppRun[]
  editors        AppEditor[]
  pendingEditors PendingAppEditor[]

  parent            App?             @relation("AppForks", fields: [parentId], references: [id])
  forks             App[]            @relation("AppForks")
  settings          AppSetting[]
  connectors        AppConnector[]
  accessTokens      AppAccessToken[]
  versions          Version[]
  publishedVersion  Version?         @relation("PublishedVersion", fields: [publishedVersionHash], references: [hash])
  playgroundVersion Version?         @relation("PlaygroundVersion", fields: [playgroundVersionHash], references: [hash])
  logs              AppLog[]

  @@map("apps")
}

// token will be zaat.identier.secret
model AppAccessToken {
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @default(now())
  deletedAt    DateTime? @db.Timestamp(6)
  identifier   String    @unique
  hashedSecret String    @unique
  appId        String
  userId       String
  description  String?

  app App @relation(fields: [appId], references: [id])

  @@id([identifier, appId])
  @@map("app_access_tokens")
}

model AppSetting {
  settingName  String    @db.VarChar
  settingValue String    @db.VarChar
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  appId        String

  app App @relation(fields: [appId], references: [id])

  @@id([settingName, appId])
  @@unique([appId, settingName])
  @@map("app_settings")
}

model UserSetting {
  settingName  String    @db.VarChar
  settingValue String    @db.VarChar
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  userId       String

  user User @relation(fields: [userId], references: [id])

  @@id([settingName, userId])
  @@unique([userId, settingName])
  @@map("user_settings")
}

model AppEditor {
  userId  String
  appId   String
  isOwner Boolean

  app App @relation(fields: [appId], references: [id])

  @@id([userId, appId])
  @@map("app_editors")
}

model PendingAppEditor {
  appId         String
  email         String
  isOwner       Boolean
  inviterUserId String

  app App @relation(fields: [appId], references: [id])

  @@id([email, appId])
  @@map("pending_app_editors")
}

model AppEvent {
  id           String @id @default(uuid())
  timestamp    String
  deploymentId String
  eventType    String
  eventPayload Json

  @@map("apps_events")
}

model AppRun {
  id                    String    @id @default(uuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @default(now())
  success               Boolean
  deploymentId          String
  scheduleId            String?
  path                  String    @default("main.ts")
  result                Json?
  inputs                Json?
  userId                String?
  originalRequestUrl    String?
  originalRequestMethod String?
  appId                 String
  version               String?

  app      App?      @relation(fields: [appId], references: [id])
  schedule Schedule? @relation(fields: [scheduleId], references: [id])
  logs     AppLog[]

  @@map("apps_runs")
}

model AppConnector {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @default(now())
  deletedAt          DateTime? @db.Timestamp(6)
  type               String
  appId              String
  clientId           String?
  metadata           Json?
  isUserAuthRequired Boolean   @default(false)
  userScopes         String[]
  workspaceScopes    String[]
  events             String[]

  app                   App                    @relation(fields: [appId], references: [id])
  appConnectorUserAuths AppConnectorUserAuth[]

  @@unique([appId, type])
  @@map("app_connectors")
}

model AppConnectorUserAuth {
  id                   String    @id @default(uuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @default(now())
  deletedAt            DateTime? @db.Timestamp(6)
  encryptedAccessToken String
  appId                String
  connectorType        String
  userIdOrTempId       String
  metadata             Json

  connector AppConnector @relation(fields: [appId, connectorType], references: [appId, type], onDelete: Cascade)

  @@unique([appId, connectorType, userIdOrTempId])
  @@map("app_connector_user_auth")
}

model ResourceOwnerSlug {
  slug              String    @id @unique()
  resourceOwnerType Int
  resourceOwnerId   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @default(now())
  deletedAt         DateTime? @db.Timestamp(6)

  @@map("resource_owner_slugs")
}

model Secret {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @default(now())
  key            String
  encryptedValue String

  appId String
  app   App?   @relation(fields: [appId], references: [id])

  @@unique([appId, key])
  @@map("secrets")
}

model Schedule {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  filename  String    @default("main.ts")
  crontab   String
  inputs    Json?
  userId    String?

  appId   String
  app     App?     @relation(fields: [appId], references: [id])
  appRuns AppRun[]

  @@map("schedules")
}

model Script {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())
  name        String
  filename    String
  code        String
  order       Int?      @default(0)
  appId       String
  connectorId String?
  hash        String?
  isRunnable  Boolean   @default(false)

  app        App         @relation(fields: [appId], references: [id])
  scriptMain ScriptMain?

  @@unique([appId, filename])
  @@map("scripts")
}

model Version {
  hash        String   @id
  appId       String
  buildFile   Bytes?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String?

  app App @relation(fields: [appId], references: [id])

  publishedForApp  App? @relation("PublishedVersion")
  playgroundForApp App? @relation("PlaygroundVersion")

  @@unique([appId, hash])
  @@map("versions")
}

model ScriptMain {
  appId    String @id
  scriptId String @unique

  app    App    @relation(fields: [appId], references: [id])
  script Script @relation(fields: [scriptId], references: [id])

  @@map("script_main")
}

model ZipperAuthCode {
  code      String  @id @default(uuid())
  userId    String
  used      Boolean @default(false)
  expiresAt BigInt

  @@map("zipper_auth_code")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  currentOrganizationId String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  slug          String        @unique
  accounts      Account[]
  sessions      Session[]
  settings      UserSetting[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  organizationMemberships OrganizationMembership[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  organizationMemberships OrganizationMembership[]
  organizationInvitations OrganizationInvitation[]

  @@map("organizations")
}

model OrganizationMembership {
  organizationId String
  userId         String
  role           String
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@id([organizationId, userId])
  @@map("organization_memberships")
}

model OrganizationInvitation {
  organizationId String
  email          String
  role           String
  redirectUrl    String?
  token          String   @unique
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, email])
  @@map("organization_invitations")
}

model AllowListIdentifier {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  value                 String
  defaultOrganizationId String?
  inviterName           String?

  @@map("allow_list_identifiers")
}

model SlackZipperSlashCommandInstall {
  teamId            String
  appId             String
  encryptedBotToken String
  createdAt         DateTime @default(now())
  installers        String[]
  teamName          String
  botUserId         String

  @@unique([teamId, appId])
  @@map("slack_zipper_slash_command_installs")
}

model DiscordZipperSlashCommandInstall {
  guildId           String
  encryptedBotToken String
  createdAt         DateTime @default(now())
  guildName         String

  @@unique([guildId])
  @@map("discord_zipper_slash_command_installs")
}

model AppLog {
  id        String   @id @default(uuid())
  method    String
  data      Json
  timestamp DateTime
  appId     String
  version   String
  runId     String?

  app App     @relation(fields: [appId], references: [id])
  run AppRun? @relation(fields: [runId], references: [id])

  @@map("app_logs")
}
