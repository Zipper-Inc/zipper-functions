{"lib.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es5\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n","lib.deno.ns.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"deno.net\" />\n\n/** Deno provides extra properties on `import.meta`. These are included here\n * to ensure that these are still available when using the Deno namespace in\n * conjunction with other type libs, like `dom`.\n *\n * @category ES Modules\n */\ndeclare interface ImportMeta {\n  /** A string representation of the fully qualified module URL. When the\n   * module is loaded locally, the value will be a file URL (e.g.\n   * `file:///path/module.ts`).\n   *\n   * You can also parse the string as a URL to determine more information about\n   * how the current module was loaded. For example to determine if a module was\n   * local or not:\n   *\n   * ```ts\n   * const url = new URL(import.meta.url);\n   * if (url.protocol === \"file:\") {\n   *   console.log(\"this module was loaded locally\");\n   * }\n   * ```\n   */\n  url: string;\n\n  /** A flag that indicates if the current module is the main module that was\n   * called when starting the program under Deno.\n   *\n   * ```ts\n   * if (import.meta.main) {\n   *   // this was loaded as the main module, maybe do some bootstrapping\n   * }\n   * ```\n   */\n  main: boolean;\n\n  /** A function that returns resolved specifier as if it would be imported\n   * using `import(specifier)`.\n   *\n   * ```ts\n   * console.log(import.meta.resolve(\"./foo.js\"));\n   * // file:///dev/foo.js\n   * ```\n   */\n  resolve(specifier: string): string;\n}\n\n/** Deno supports [User Timing Level 3](https://w3c.github.io/user-timing)\n * which is not widely supported yet in other runtimes.\n *\n * Check out the\n * [Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\n * documentation on MDN for further information about how to use the API.\n *\n * @category Performance\n */\ndeclare interface Performance {\n  /** Stores a timestamp with the associated name (a \"mark\"). */\n  mark(markName: string, options?: PerformanceMarkOptions): PerformanceMark;\n\n  /** Stores the `DOMHighResTimeStamp` duration between two marks along with the\n   * associated name (a \"measure\"). */\n  measure(\n    measureName: string,\n    options?: PerformanceMeasureOptions,\n  ): PerformanceMeasure;\n}\n\n/**\n * Options which are used in conjunction with `performance.mark`. Check out the\n * MDN\n * [`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark#markoptions)\n * documentation for more details.\n *\n * @category Performance\n */\ndeclare interface PerformanceMarkOptions {\n  /** Metadata to be included in the mark. */\n  // deno-lint-ignore no-explicit-any\n  detail?: any;\n\n  /** Timestamp to be used as the mark time. */\n  startTime?: number;\n}\n\n/**\n * Options which are used in conjunction with `performance.measure`. Check out the\n * MDN\n * [`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure#measureoptions)\n * documentation for more details.\n *\n * @category Performance\n */\ndeclare interface PerformanceMeasureOptions {\n  /** Metadata to be included in the measure. */\n  // deno-lint-ignore no-explicit-any\n  detail?: any;\n\n  /** Timestamp to be used as the start time or string to be used as start\n   * mark. */\n  start?: string | number;\n\n  /** Duration between the start and end times. */\n  duration?: number;\n\n  /** Timestamp to be used as the end time or string to be used as end mark. */\n  end?: string | number;\n}\n\n/** The global namespace where Deno specific, non-standard APIs are located. */\ndeclare namespace Deno {\n  /** A set of error constructors that are raised by Deno APIs.\n   *\n   * Can be used to provide more specific handling of failures within code\n   * which is using Deno APIs. For example, handling attempting to open a file\n   * which does not exist:\n   *\n   * ```ts\n   * try {\n   *   const file = await Deno.open(\"./some/file.txt\");\n   * } catch (error) {\n   *   if (error instanceof Deno.errors.NotFound) {\n   *     console.error(\"the file was not found\");\n   *   } else {\n   *     // otherwise re-throw\n   *     throw error;\n   *   }\n   * }\n   * ```\n   *\n   * @category Errors\n   */\n  export namespace errors {\n    /**\n     * Raised when the underlying operating system indicates that the file\n     * was not found.\n     *\n     * @category Errors */\n    export class NotFound extends Error {}\n    /**\n     * Raised when the underlying operating system indicates the current user\n     * which the Deno process is running under does not have the appropriate\n     * permissions to a file or resource, or the user _did not_ provide required\n     * `--allow-*` flag.\n     *\n     * @category Errors */\n    export class PermissionDenied extends Error {}\n    /**\n     * Raised when the underlying operating system reports that a connection to\n     * a resource is refused.\n     *\n     * @category Errors */\n    export class ConnectionRefused extends Error {}\n    /**\n     * Raised when the underlying operating system reports that a connection has\n     * been reset. With network servers, it can be a _normal_ occurrence where a\n     * client will abort a connection instead of properly shutting it down.\n     *\n     * @category Errors */\n    export class ConnectionReset extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `ECONNABORTED`\n     * error.\n     *\n     * @category Errors */\n    export class ConnectionAborted extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `ENOTCONN` error.\n     *\n     * @category Errors */\n    export class NotConnected extends Error {}\n    /**\n     * Raised when attempting to open a server listener on an address and port\n     * that already has a listener.\n     *\n     * @category Errors */\n    export class AddrInUse extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `EADDRNOTAVAIL`\n     * error.\n     *\n     * @category Errors */\n    export class AddrNotAvailable extends Error {}\n    /**\n     * Raised when trying to write to a resource and a broken pipe error occurs.\n     * This can happen when trying to write directly to `stdout` or `stderr`\n     * and the operating system is unable to pipe the output for a reason\n     * external to the Deno runtime.\n     *\n     * @category Errors */\n    export class BrokenPipe extends Error {}\n    /**\n     * Raised when trying to create a resource, like a file, that already\n     * exits.\n     *\n     * @category Errors */\n    export class AlreadyExists extends Error {}\n    /**\n     * Raised when an operation to returns data that is invalid for the\n     * operation being performed.\n     *\n     * @category Errors */\n    export class InvalidData extends Error {}\n    /**\n     * Raised when the underlying operating system reports that an I/O operation\n     * has timed out (`ETIMEDOUT`).\n     *\n     * @category Errors */\n    export class TimedOut extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `EINTR` error. In\n     * many cases, this underlying IO error will be handled internally within\n     * Deno, or result in an @{link BadResource} error instead.\n     *\n     * @category Errors */\n    export class Interrupted extends Error {}\n    /**\n     * Raised when expecting to write to a IO buffer resulted in zero bytes\n     * being written.\n     *\n     * @category Errors */\n    export class WriteZero extends Error {}\n    /**\n     * Raised when attempting to read bytes from a resource, but the EOF was\n     * unexpectedly encountered.\n     *\n     * @category Errors */\n    export class UnexpectedEof extends Error {}\n    /**\n     * The underlying IO resource is invalid or closed, and so the operation\n     * could not be performed.\n     *\n     * @category Errors */\n    export class BadResource extends Error {}\n    /**\n     * Raised in situations where when attempting to load a dynamic import,\n     * too many redirects were encountered.\n     *\n     * @category Errors */\n    export class Http extends Error {}\n    /**\n     * Raised when the underlying IO resource is not available because it is\n     * being awaited on in another block of code.\n     *\n     * @category Errors */\n    export class Busy extends Error {}\n    /**\n     * Raised when the underlying Deno API is asked to perform a function that\n     * is not currently supported.\n     *\n     * @category Errors */\n    export class NotSupported extends Error {}\n  }\n\n  /** The current process ID of this instance of the Deno CLI.\n   *\n   * ```ts\n   * console.log(Deno.pid);\n   * ```\n   *\n   * @category Runtime Environment\n   */\n  export const pid: number;\n\n  /**\n   * The process ID of parent process of this instance of the Deno CLI.\n   *\n   * ```ts\n   * console.log(Deno.ppid);\n   * ```\n   *\n   * @category Runtime Environment\n   */\n  export const ppid: number;\n\n  /** @category Runtime Environment */\n  export interface MemoryUsage {\n    /** The number of bytes of the current Deno's process resident set size,\n     * which is the amount of memory occupied in main memory (RAM). */\n    rss: number;\n    /** The total size of the heap for V8, in bytes. */\n    heapTotal: number;\n    /** The amount of the heap used for V8, in bytes. */\n    heapUsed: number;\n    /** Memory, in bytes, associated with JavaScript objects outside of the\n     * JavaScript isolate. */\n    external: number;\n  }\n\n  /**\n   * Returns an object describing the memory usage of the Deno process and the\n   * V8 subsystem measured in bytes.\n   *\n   * @category Runtime Environment\n   */\n  export function memoryUsage(): MemoryUsage;\n\n  /**\n   * Get the `hostname` of the machine the Deno process is running on.\n   *\n   * ```ts\n   * console.log(Deno.hostname());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function hostname(): string;\n\n  /**\n   * Returns an array containing the 1, 5, and 15 minute load averages. The\n   * load average is a measure of CPU and IO utilization of the last one, five,\n   * and 15 minute periods expressed as a fractional number.  Zero means there\n   * is no load. On Windows, the three values are always the same and represent\n   * the current load, not the 1, 5 and 15 minute load averages.\n   *\n   * ```ts\n   * console.log(Deno.loadavg());  // e.g. [ 0.71, 0.44, 0.44 ]\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Observability\n   */\n  export function loadavg(): number[];\n\n  /**\n   * The information for a network interface returned from a call to\n   * {@linkcode Deno.networkInterfaces}.\n   *\n   * @category Network\n   */\n  export interface NetworkInterfaceInfo {\n    /** The network interface name. */\n    name: string;\n    /** The IP protocol version. */\n    family: \"IPv4\" | \"IPv6\";\n    /** The IP address bound to the interface. */\n    address: string;\n    /** The netmask applied to the interface. */\n    netmask: string;\n    /** The IPv6 scope id or `null`. */\n    scopeid: number | null;\n    /** The CIDR range. */\n    cidr: string;\n    /** The MAC address. */\n    mac: string;\n  }\n\n  /**\n   * Returns an array of the network interface information.\n   *\n   * ```ts\n   * console.log(Deno.networkInterfaces());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Network\n   */\n  export function networkInterfaces(): NetworkInterfaceInfo[];\n\n  /**\n   * Displays the total amount of free and used physical and swap memory in the\n   * system, as well as the buffers and caches used by the kernel.\n   *\n   * This is similar to the `free` command in Linux\n   *\n   * ```ts\n   * console.log(Deno.systemMemoryInfo());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function systemMemoryInfo(): SystemMemoryInfo;\n\n  /**\n   * Information returned from a call to {@linkcode Deno.systemMemoryInfo}.\n   *\n   * @category Runtime Environment\n   */\n  export interface SystemMemoryInfo {\n    /** Total installed memory in bytes. */\n    total: number;\n    /** Unused memory in bytes. */\n    free: number;\n    /** Estimation of how much memory, in bytes, is available for starting new\n     * applications, without swapping. Unlike the data provided by the cache or\n     * free fields, this field takes into account page cache and also that not\n     * all reclaimable memory will be reclaimed due to items being in use.\n     */\n    available: number;\n    /** Memory used by kernel buffers. */\n    buffers: number;\n    /** Memory used by the page cache and slabs. */\n    cached: number;\n    /** Total swap memory. */\n    swapTotal: number;\n    /** Unused swap memory. */\n    swapFree: number;\n  }\n\n  /** Reflects the `NO_COLOR` environment variable at program start.\n   *\n   * When the value is `true`, the Deno CLI will attempt to not send color codes\n   * to `stderr` or `stdout` and other command line programs should also attempt\n   * to respect this value.\n   *\n   * See: https://no-color.org/\n   *\n   * @category Runtime Environment\n   */\n  export const noColor: boolean;\n\n  /**\n   * Returns the release version of the Operating System.\n   *\n   * ```ts\n   * console.log(Deno.osRelease());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   * Under consideration to possibly move to Deno.build or Deno.versions and if\n   * it should depend sys-info, which may not be desirable.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function osRelease(): string;\n\n  /**\n   * Options which define the permissions within a test or worker context.\n   *\n   * `\"inherit\"` ensures that all permissions of the parent process will be\n   * applied to the test context. `\"none\"` ensures the test context has no\n   * permissions. A `PermissionOptionsObject` provides a more specific\n   * set of permissions to the test context.\n   *\n   * @category Permissions */\n  export type PermissionOptions =\n    | \"inherit\"\n    | \"none\"\n    | PermissionOptionsObject;\n\n  /**\n   * A set of options which can define the permissions within a test or worker\n   * context at a highly specific level.\n   *\n   * @category Permissions */\n  export interface PermissionOptionsObject {\n    /** Specifies if the `env` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `env` permission will be inherited.\n     * If set to `true`, the global `env` permission will be requested.\n     * If set to `false`, the global `env` permission will be revoked.\n     *\n     * Defaults to `false`.\n     */\n    env?: \"inherit\" | boolean | string[];\n\n    /** Specifies if the `sys` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `sys` permission will be inherited.\n     * If set to `true`, the global `sys` permission will be requested.\n     * If set to `false`, the global `sys` permission will be revoked.\n     *\n     * Defaults to `false`.\n     */\n    sys?: \"inherit\" | boolean | string[];\n\n    /** Specifies if the `hrtime` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `hrtime` permission will be inherited.\n     * If set to `true`, the global `hrtime` permission will be requested.\n     * If set to `false`, the global `hrtime` permission will be revoked.\n     *\n     * Defaults to `false`.\n     */\n    hrtime?: \"inherit\" | boolean;\n\n    /** Specifies if the `net` permission should be requested or revoked.\n     * if set to `\"inherit\"`, the current `net` permission will be inherited.\n     * if set to `true`, the global `net` permission will be requested.\n     * if set to `false`, the global `net` permission will be revoked.\n     * if set to `string[]`, the `net` permission will be requested with the\n     * specified host strings with the format `\"<host>[:<port>]`.\n     *\n     * Defaults to `false`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"inherit\",\n     *   permissions: {\n     *     net: \"inherit\",\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" })\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"true\",\n     *   permissions: {\n     *     net: true,\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" });\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"false\",\n     *   permissions: {\n     *     net: false,\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" });\n     *     assertEquals(status.state, \"denied\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"localhost:8080\",\n     *   permissions: {\n     *     net: [\"localhost:8080\"],\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\", host: \"localhost:8080\" });\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     */\n    net?: \"inherit\" | boolean | string[];\n\n    /** Specifies if the `ffi` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `ffi` permission will be inherited.\n     * If set to `true`, the global `ffi` permission will be requested.\n     * If set to `false`, the global `ffi` permission will be revoked.\n     *\n     * Defaults to `false`.\n     */\n    ffi?: \"inherit\" | boolean | Array<string | URL>;\n\n    /** Specifies if the `read` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `read` permission will be inherited.\n     * If set to `true`, the global `read` permission will be requested.\n     * If set to `false`, the global `read` permission will be revoked.\n     * If set to `Array<string | URL>`, the `read` permission will be requested with the\n     * specified file paths.\n     *\n     * Defaults to `false`.\n     */\n    read?: \"inherit\" | boolean | Array<string | URL>;\n\n    /** Specifies if the `run` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `run` permission will be inherited.\n     * If set to `true`, the global `run` permission will be requested.\n     * If set to `false`, the global `run` permission will be revoked.\n     *\n     * Defaults to `false`.\n     */\n    run?: \"inherit\" | boolean | Array<string | URL>;\n\n    /** Specifies if the `write` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `write` permission will be inherited.\n     * If set to `true`, the global `write` permission will be requested.\n     * If set to `false`, the global `write` permission will be revoked.\n     * If set to `Array<string | URL>`, the `write` permission will be requested with the\n     * specified file paths.\n     *\n     * Defaults to `false`.\n     */\n    write?: \"inherit\" | boolean | Array<string | URL>;\n  }\n\n  /**\n   * Context that is passed to a testing function, which can be used to either\n   * gain information about the current test, or register additional test\n   * steps within the current test.\n   *\n   * @category Testing */\n  export interface TestContext {\n    /** The current test name. */\n    name: string;\n    /** The string URL of the current test. */\n    origin: string;\n    /** If the current test is a step of another test, the parent test context\n     * will be set here. */\n    parent?: TestContext;\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test({\n     *   name: \"a parent test\",\n     *   async fn(t) {\n     *     console.log(\"before the step\");\n     *     await t.step({\n     *       name: \"step 1\",\n     *       fn(t) {\n     *         console.log(\"current step:\", t.name);\n     *       }\n     *     });\n     *     console.log(\"after the step\");\n     *   }\n     * });\n     * ```\n     */\n    step(definition: TestStepDefinition): Promise<boolean>;\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test(\n     *   \"a parent test\",\n     *   async (t) => {\n     *     console.log(\"before the step\");\n     *     await t.step(\n     *       \"step 1\",\n     *       (t) => {\n     *         console.log(\"current step:\", t.name);\n     *       }\n     *     );\n     *     console.log(\"after the step\");\n     *   }\n     * );\n     * ```\n     */\n    step(\n      name: string,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): Promise<boolean>;\n  }\n\n  /** @category Testing */\n  export interface TestStepDefinition {\n    /** The test function that will be tested when this step is executed. The\n     * function can take an argument which will provide information about the\n     * current step's context. */\n    fn: (t: TestContext) => void | Promise<void>;\n    /** The name of the step. */\n    name: string;\n    /** If truthy the current test step will be ignored.\n     *\n     * This is a quick way to skip over a step, but also can be used for\n     * conditional logic, like determining if an environment feature is present.\n     */\n    ignore?: boolean;\n    /** Check that the number of async completed operations after the test step\n     * is the same as number of dispatched operations. This ensures that the\n     * code tested does not start async operations which it then does\n     * not await. This helps in preventing logic errors and memory leaks\n     * in the application code.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeOps?: boolean;\n    /** Ensure the test step does not \"leak\" resources - like open files or\n     * network connections - by ensuring the open resources at the start of the\n     * step match the open resources at the end of the step.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeResources?: boolean;\n    /** Ensure the test step does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeExit?: boolean;\n  }\n\n  /** @category Testing */\n  export interface TestDefinition {\n    fn: (t: TestContext) => void | Promise<void>;\n    /** The name of the test. */\n    name: string;\n    /** If truthy the current test step will be ignored.\n     *\n     * It is a quick way to skip over a step, but also can be used for\n     * conditional logic, like determining if an environment feature is present.\n     */\n    ignore?: boolean;\n    /** If at least one test has `only` set to `true`, only run tests that have\n     * `only` set to `true` and fail the test suite. */\n    only?: boolean;\n    /** Check that the number of async completed operations after the test step\n     * is the same as number of dispatched operations. This ensures that the\n     * code tested does not start async operations which it then does\n     * not await. This helps in preventing logic errors and memory leaks\n     * in the application code.\n     *\n     * Defaults to `true`. */\n    sanitizeOps?: boolean;\n    /** Ensure the test step does not \"leak\" resources - like open files or\n     * network connections - by ensuring the open resources at the start of the\n     * test match the open resources at the end of the test.\n     *\n     * Defaults to `true`. */\n    sanitizeResources?: boolean;\n    /** Ensure the test case does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * Defaults to `true`. */\n    sanitizeExit?: boolean;\n    /** Specifies the permissions that should be used to run the test.\n     *\n     * Set this to \"inherit\" to keep the calling runtime permissions, set this\n     * to \"none\" to revoke all permissions, or set a more specific set of\n     * permissions using a {@linkcode PermissionOptionsObject}.\n     *\n     * Defaults to `\"inherit\"`. */\n    permissions?: PermissionOptions;\n  }\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test({\n   *   name: \"example test\",\n   *   fn() {\n   *     assertEquals(\"world\", \"world\");\n   *   },\n   * });\n   *\n   * Deno.test({\n   *   name: \"example ignored test\",\n   *   ignore: Deno.build.os === \"windows\",\n   *   fn() {\n   *     // This test is ignored only on Windows machines\n   *   },\n   * });\n   *\n   * Deno.test({\n   *   name: \"example async test\",\n   *   async fn() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(t: TestDefinition): void;\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\"My test description\", () => {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.test(\"My async test description\", async () => {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    name: string,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required. Declared function must have a name.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(function myTestName() {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.test(async function myOtherTestName() {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(fn: (t: TestContext) => void | Promise<void>): void;\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    name: string,\n    options: Omit<TestDefinition, \"fn\" | \"name\">,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\n   *   {\n   *     name: \"My test description\",\n   *     permissions: { read: true },\n   *   },\n   *   () => {\n   *     assertEquals(\"hello\", \"hello\");\n   *   },\n   * );\n   *\n   * Deno.test(\n   *   {\n   *     name: \"My async test description\",\n   *     permissions: { read: false },\n   *   },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   },\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    options: Omit<TestDefinition, \"fn\">,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required. Declared function must have a name.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\n   *   { permissions: { read: true } },\n   *   function myTestName() {\n   *     assertEquals(\"hello\", \"hello\");\n   *   },\n   * );\n   *\n   * Deno.test(\n   *   { permissions: { read: false } },\n   *   async function myOtherTestName() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   },\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    options: Omit<TestDefinition, \"fn\" | \"name\">,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;\n\n  /**\n   * The interface for defining a benchmark test using {@linkcode Deno.bench}.\n   *\n   * @category Testing\n   */\n  export interface BenchDefinition {\n    /** The test function which will be benchmarked. */\n    fn: () => void | Promise<void>;\n    /** The name of the test, which will be used in displaying the results. */\n    name: string;\n    /** If truthy, the benchmark test will be ignored/skipped. */\n    ignore?: boolean;\n    /** Group name for the benchmark.\n     *\n     * Grouped benchmarks produce a group time summary, where the difference\n     * in performance between each test of the group is compared. */\n    group?: string;\n    /** Benchmark should be used as the baseline for other benchmarks.\n     *\n     * If there are multiple baselines in a group, the first one is used as the\n     * baseline. */\n    baseline?: boolean;\n    /** If at least one bench has `only` set to true, only run benches that have\n     * `only` set to `true` and fail the bench suite. */\n    only?: boolean;\n    /** Ensure the bench case does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}. Defaults to `true`. */\n    sanitizeExit?: boolean;\n    /** Specifies the permissions that should be used to run the bench.\n     *\n     * Set this to `\"inherit\"` to keep the calling thread's permissions.\n     *\n     * Set this to `\"none\"` to revoke all permissions.\n     *\n     * Defaults to \"inherit\".\n     */\n    permissions?: PermissionOptions;\n  }\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench({\n   *   name: \"example test\",\n   *   fn() {\n   *     assertEquals(\"world\", \"world\");\n   *   },\n   * });\n   *\n   * Deno.bench({\n   *   name: \"example ignored test\",\n   *   ignore: Deno.build.os === \"windows\",\n   *   fn() {\n   *     // This test is ignored only on Windows machines\n   *   },\n   * });\n   *\n   * Deno.bench({\n   *   name: \"example async test\",\n   *   async fn() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(t: BenchDefinition): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\"My test description\", () => {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.bench(\"My async test description\", async () => {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    name: string,\n    fn: () => void | Promise<void>,\n  ): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(function myTestName() {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.bench(async function myOtherTestName() {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(fn: () => void | Promise<void>): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\n   *   \"My test description\",\n   *   { permissions: { read: true } },\n   *   () => {\n   *    assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   \"My async test description\",\n   *   { permissions: { read: false } },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    name: string,\n    options: Omit<BenchDefinition, \"fn\" | \"name\">,\n    fn: () => void | Promise<void>,\n  ): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\n   *   { name: \"My test description\", permissions: { read: true } },\n   *   () => {\n   *     assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   { name: \"My async test description\", permissions: { read: false } },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    options: Omit<BenchDefinition, \"fn\">,\n    fn: () => void | Promise<void>,\n  ): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\n   *   { permissions: { read: true } },\n   *   function myTestName() {\n   *     assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   { permissions: { read: false } },\n   *   async function myOtherTestName() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    options: Omit<BenchDefinition, \"fn\" | \"name\">,\n    fn: () => void | Promise<void>,\n  ): void;\n\n  /** Exit the Deno process with optional exit code.\n   *\n   * If no exit code is supplied then Deno will exit with return code of `0`.\n   *\n   * In worker contexts this is an alias to `self.close();`.\n   *\n   * ```ts\n   * Deno.exit(5);\n   * ```\n   *\n   * @category Runtime Environment\n   */\n  export function exit(code?: number): never;\n\n  /** An interface containing methods to interact with the process environment\n   * variables.\n   *\n   * @tags allow-env\n   * @category Runtime Environment\n   */\n  export interface Env {\n    /** Retrieve the value of an environment variable.\n     *\n     * Returns `undefined` if the supplied environment variable is not defined.\n     *\n     * ```ts\n     * console.log(Deno.env.get(\"HOME\"));  // e.g. outputs \"/home/alice\"\n     * console.log(Deno.env.get(\"MADE_UP_VAR\"));  // outputs \"undefined\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    get(key: string): string | undefined;\n\n    /** Set the value of an environment variable.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.get(\"SOME_VAR\");  // outputs \"Value\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    set(key: string, value: string): void;\n\n    /** Delete the value of an environment variable.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.delete(\"SOME_VAR\");  // outputs \"undefined\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    delete(key: string): void;\n\n    /** Returns a snapshot of the environment variables at invocation as a\n     * simple object of keys and values.\n     *\n     * ```ts\n     * Deno.env.set(\"TEST_VAR\", \"A\");\n     * const myEnv = Deno.env.toObject();\n     * console.log(myEnv.SHELL);\n     * Deno.env.set(\"TEST_VAR\", \"B\");\n     * console.log(myEnv.TEST_VAR);  // outputs \"A\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    toObject(): { [index: string]: string };\n  }\n\n  /** An interface containing methods to interact with the process environment\n   * variables.\n   *\n   * @tags allow-env\n   * @category Runtime Environment\n   */\n  export const env: Env;\n\n  /**\n   * Returns the path to the current deno executable.\n   *\n   * ```ts\n   * console.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime Environment\n   */\n  export function execPath(): string;\n\n  /**\n   * Change the current working directory to the specified path.\n   *\n   * ```ts\n   * Deno.chdir(\"/home/userA\");\n   * Deno.chdir(\"../userB\");\n   * Deno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n   * ```\n   *\n   * Throws {@linkcode Deno.errors.NotFound} if directory not found.\n   *\n   * Throws {@linkcode Deno.errors.PermissionDenied} if the user does not have\n   * operating system file access rights.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime Environment\n   */\n  export function chdir(directory: string | URL): void;\n\n  /**\n   * Return a string representing the current working directory.\n   *\n   * If the current directory can be reached via multiple paths (due to symbolic\n   * links), `cwd()` may return any one of them.\n   *\n   * ```ts\n   * const currentWorkingDirectory = Deno.cwd();\n   * ```\n   *\n   * Throws {@linkcode Deno.errors.NotFound} if directory not available.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime Environment\n   */\n  export function cwd(): string;\n\n  /**\n   * Creates `newpath` as a hard link to `oldpath`.\n   *\n   * ```ts\n   * await Deno.link(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function link(oldpath: string, newpath: string): Promise<void>;\n\n  /**\n   * Synchronously creates `newpath` as a hard link to `oldpath`.\n   *\n   * ```ts\n   * Deno.linkSync(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function linkSync(oldpath: string, newpath: string): void;\n\n  /**\n   * A enum which defines the seek mode for IO related APIs that support\n   * seeking.\n   *\n   * @category I/O */\n  export enum SeekMode {\n    /* Seek from the start of the file/resource. */\n    Start = 0,\n    /* Seek from the current position within the file/resource. */\n    Current = 1,\n    /* Seek from the end of the current file/resource. */\n    End = 2,\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to read\n   * bytes into an array buffer asynchronously.\n   *\n   * @category I/O */\n  export interface Reader {\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\n     * bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\n     * use all of `p` as scratch space during the call. If some data is\n     * available but not `p.byteLength` bytes, `read()` conventionally resolves\n     * to what is available instead of waiting for more.\n     *\n     * When `read()` encounters end-of-file condition, it resolves to EOF\n     * (`null`).\n     *\n     * When `read()` encounters an error, it rejects with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the EOF (`null`). Doing so correctly handles I/O errors that\n     * happen after reading some bytes and also both of the allowed EOF\n     * behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     *\n     * Use\n     * [`itereateReader`](https://deno.land/std/streams/conversion.ts?s=iterateReader)\n     * from\n     * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n     * to turn a `Reader` into an {@linkcode AsyncIterator}.\n     */\n    read(p: Uint8Array): Promise<number | null>;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to read\n   * bytes into an array buffer synchronously.\n   *\n   * @category I/O */\n  export interface ReaderSync {\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number\n     * of bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `readSync()` returns `n` < `p.byteLength`, it may use\n     * all of `p` as scratch space during the call. If some data is available\n     * but not `p.byteLength` bytes, `readSync()` conventionally returns what is\n     * available instead of waiting for more.\n     *\n     * When `readSync()` encounters end-of-file condition, it returns EOF\n     * (`null`).\n     *\n     * When `readSync()` encounters an error, it throws with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the EOF (`null`). Doing so correctly handles I/O errors that\n     * happen after reading some bytes and also both of the allowed EOF\n     * behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     *\n     * Use\n     * [`itereateReaderSync`](https://deno.land/std/streams/conversion.ts?s=iterateReaderSync)\n     * from from\n     * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n     * to turn a `ReaderSync` into an {@linkcode Iterator}.\n     */\n    readSync(p: Uint8Array): number | null;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to write\n   * bytes from an array buffer to a file/resource asynchronously.\n   *\n   * @category I/O */\n  export interface Writer {\n    /** Writes `p.byteLength` bytes from `p` to the underlying data stream. It\n     * resolves to the number of bytes written from `p` (`0` <= `n` <=\n     * `p.byteLength`) or reject with the error encountered that caused the\n     * write to stop early. `write()` must reject with a non-null error if\n     * would resolve to `n` < `p.byteLength`. `write()` must not modify the\n     * slice data, even temporarily.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    write(p: Uint8Array): Promise<number>;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to write\n   * bytes from an array buffer to a file/resource synchronously.\n   *\n   * @category I/O */\n  export interface WriterSync {\n    /** Writes `p.byteLength` bytes from `p` to the underlying data\n     * stream. It returns the number of bytes written from `p` (`0` <= `n`\n     * <= `p.byteLength`) and any error encountered that caused the write to\n     * stop early. `writeSync()` must throw a non-null error if it returns `n` <\n     * `p.byteLength`. `writeSync()` must not modify the slice data, even\n     * temporarily.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    writeSync(p: Uint8Array): number;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to close\n   * files/resources that were previously opened.\n   *\n   * @category I/O */\n  export interface Closer {\n    /** Closes the resource, \"freeing\" the backing file/resource. */\n    close(): void;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to seek\n   * within an open file/resource asynchronously.\n   *\n   * @category I/O */\n  export interface Seeker {\n    /** Seek sets the offset for the next `read()` or `write()` to offset,\n     * interpreted according to `whence`: `Start` means relative to the\n     * start of the file, `Current` means relative to the current offset,\n     * and `End` means relative to the end. Seek resolves to the new offset\n     * relative to the start of the file.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     *\n     * It resolves with the updated offset.\n     */\n    seek(offset: number, whence: SeekMode): Promise<number>;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to seek\n   * within an open file/resource synchronously.\n   *\n   * @category I/O */\n  export interface SeekerSync {\n    /** Seek sets the offset for the next `readSync()` or `writeSync()` to\n     * offset, interpreted according to `whence`: `Start` means relative\n     * to the start of the file, `Current` means relative to the current\n     * offset, and `End` means relative to the end.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     *\n     * It returns the updated offset.\n     */\n    seekSync(offset: number, whence: SeekMode): number;\n  }\n\n  /**\n   * Copies from `src` to `dst` until either EOF (`null`) is read from `src` or\n   * an error occurs. It resolves to the number of bytes copied or rejects with\n   * the first error encountered while copying.\n   *\n   * @deprecated Use\n   * [`copy`](https://deno.land/std/streams/conversion.ts?s=copy) from\n   * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   * instead. `Deno.copy` will be removed in the future.\n   *\n   * @category I/O\n   *\n   * @param src The source to copy from\n   * @param dst The destination to copy to\n   * @param options Can be used to tune size of the buffer. Default size is 32kB\n   */\n  export function copy(\n    src: Reader,\n    dst: Writer,\n    options?: { bufSize?: number },\n  ): Promise<number>;\n\n  /**\n   * Turns a Reader, `r`, into an async iterator.\n   *\n   * @deprecated Use\n   * [`iterateReader`](https://deno.land/std/streams/conversion.ts?s=iterateReader)\n   * from\n   * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   * instead. `Deno.iter` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function iter(\n    r: Reader,\n    options?: { bufSize?: number },\n  ): AsyncIterableIterator<Uint8Array>;\n\n  /**\n   * Turns a ReaderSync, `r`, into an iterator.\n   *\n   * @deprecated Use\n   * [`iterateReaderSync`](https://deno.land/std/streams/conversion.ts?s=iterateReaderSync)\n   * from\n   * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   * instead. `Deno.iterSync` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function iterSync(\n    r: ReaderSync,\n    options?: {\n      bufSize?: number;\n    },\n  ): IterableIterator<Uint8Array>;\n\n  /** Open a file and resolve to an instance of {@linkcode Deno.FsFile}. The\n   * file does not need to previously exist if using the `create` or `createNew`\n   * open options. It is the caller's responsibility to close the file when\n   * finished with it.\n   *\n   * ```ts\n   * const file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * Deno.close(file.rid);\n   * ```\n   *\n   * Requires `allow-read` and/or `allow-write` permissions depending on\n   * options.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function open(\n    path: string | URL,\n    options?: OpenOptions,\n  ): Promise<FsFile>;\n\n  /** Synchronously open a file and return an instance of\n   * {@linkcode Deno.FsFile}. The file does not need to previously exist if\n   * using the `create` or `createNew` open options. It is the caller's\n   * responsibility to close the file when finished with it.\n   *\n   * ```ts\n   * const file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * Deno.close(file.rid);\n   * ```\n   *\n   * Requires `allow-read` and/or `allow-write` permissions depending on\n   * options.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function openSync(path: string | URL, options?: OpenOptions): FsFile;\n\n  /** Creates a file if none exists or truncates an existing file and resolves to\n   *  an instance of {@linkcode Deno.FsFile}.\n   *\n   * ```ts\n   * const file = await Deno.create(\"/foo/bar.txt\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function create(path: string | URL): Promise<FsFile>;\n\n  /** Creates a file if none exists or truncates an existing file and returns\n   *  an instance of {@linkcode Deno.FsFile}.\n   *\n   * ```ts\n   * const file = Deno.createSync(\"/foo/bar.txt\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function createSync(path: string | URL): FsFile;\n\n  /** Read from a resource ID (`rid`) into an array buffer (`buffer`).\n   *\n   * Resolves to either the number of bytes read during the operation or EOF\n   * (`null`) if there was nothing more to read.\n   *\n   * It is possible for a read to successfully return with `0` bytes. This does\n   * not indicate EOF.\n   *\n   * This function is one of the lowest level APIs and most users should not\n   * work with this directly, but rather use\n   * [`readAll()`](https://deno.land/std/streams/conversion.ts?s=readAll) from\n   * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be read in a single call.**\n   *\n   * ```ts\n   * // if \"/foo/bar.txt\" contains the text \"hello world\":\n   * const file = await Deno.open(\"/foo/bar.txt\");\n   * const buf = new Uint8Array(100);\n   * const numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes\n   * const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function read(rid: number, buffer: Uint8Array): Promise<number | null>;\n\n  /** Synchronously read from a resource ID (`rid`) into an array buffer\n   * (`buffer`).\n   *\n   * Returns either the number of bytes read during the operation or EOF\n   * (`null`) if there was nothing more to read.\n   *\n   * It is possible for a read to successfully return with `0` bytes. This does\n   * not indicate EOF.\n   *\n   * This function is one of the lowest level APIs and most users should not\n   * work with this directly, but rather use\n   * [`readAllSync()`](https://deno.land/std/streams/conversion.ts?s=readAllSync)\n   * from\n   * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be read in a single\n   * call.**\n   *\n   * ```ts\n   * // if \"/foo/bar.txt\" contains the text \"hello world\":\n   * const file = Deno.openSync(\"/foo/bar.txt\");\n   * const buf = new Uint8Array(100);\n   * const numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes\n   * const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function readSync(rid: number, buffer: Uint8Array): number | null;\n\n  /** Write to the resource ID (`rid`) the contents of the array buffer (`data`).\n   *\n   * Resolves to the number of bytes written. This function is one of the lowest\n   * level APIs and most users should not work with this directly, but rather use\n   * [`writeAll()`](https://deno.land/std/streams/conversion.ts?s=writeAll) from\n   * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be written in a single\n   * call.**\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\");\n   * const file = await Deno.open(\"/foo/bar.txt\", { write: true });\n   * const bytesWritten = await Deno.write(file.rid, data); // 11\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function write(rid: number, data: Uint8Array): Promise<number>;\n\n  /** Synchronously write to the resource ID (`rid`) the contents of the array\n   * buffer (`data`).\n   *\n   * Returns the number of bytes written. This function is one of the lowest\n   * level APIs and most users should not work with this directly, but rather\n   * use\n   * [`writeAllSync()`](https://deno.land/std/streams/conversion.ts?s=writeAllSync)\n   * from\n   * [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be written in a single\n   * call.**\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\");\n   * const file = Deno.openSync(\"/foo/bar.txt\", { write: true });\n   * const bytesWritten = Deno.writeSync(file.rid, data); // 11\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function writeSync(rid: number, data: Uint8Array): number;\n\n  /** Seek a resource ID (`rid`) to the given `offset` under mode given by `whence`.\n   * The call resolves to the new position within the resource (bytes from the start).\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * const file = await Deno.open(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // advance cursor 6 bytes\n   * const cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);\n   * console.log(cursorPosition);  // 6\n   * const buf = new Uint8Array(100);\n   * await file.read(buf);\n   * console.log(new TextDecoder().decode(buf)); // \"world\"\n   * file.close();\n   * ```\n   *\n   * The seek modes work as follows:\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * const file = await Deno.open(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // Seek 6 bytes from the start of the file\n   * console.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n   * // Seek 2 more bytes from the current position\n   * console.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n   * // Seek backwards 2 bytes from the end of the file\n   * console.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n   * file.close();\n   * ```\n   *\n   * @category I/O\n   */\n  export function seek(\n    rid: number,\n    offset: number,\n    whence: SeekMode,\n  ): Promise<number>;\n\n  /** Synchronously seek a resource ID (`rid`) to the given `offset` under mode\n   * given by `whence`. The new position within the resource (bytes from the\n   * start) is returned.\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // advance cursor 6 bytes\n   * const cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);\n   * console.log(cursorPosition);  // 6\n   * const buf = new Uint8Array(100);\n   * file.readSync(buf);\n   * console.log(new TextDecoder().decode(buf)); // \"world\"\n   * file.close();\n   * ```\n   *\n   * The seek modes work as follows:\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * const file = Deno.openSync(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // Seek 6 bytes from the start of the file\n   * console.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n   * // Seek 2 more bytes from the current position\n   * console.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n   * // Seek backwards 2 bytes from the end of the file\n   * console.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n   * file.close();\n   * ```\n   *\n   * @category I/O\n   */\n  export function seekSync(\n    rid: number,\n    offset: number,\n    whence: SeekMode,\n  ): number;\n\n  /**\n   * Flushes any pending data and metadata operations of the given file stream\n   * to disk.\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.ftruncate(file.rid, 1);\n   * await Deno.fsync(file.rid);\n   * console.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // H\n   * ```\n   *\n   * @category I/O\n   */\n  export function fsync(rid: number): Promise<void>;\n\n  /**\n   * Synchronously flushes any pending data and metadata operations of the given\n   * file stream to disk.\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * Deno.ftruncateSync(file.rid, 1);\n   * Deno.fsyncSync(file.rid);\n   * console.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // H\n   * ```\n   *\n   * @category I/O\n   */\n  export function fsyncSync(rid: number): void;\n\n  /**\n   * Flushes any pending data operations of the given file stream to disk.\n   *  ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.fdatasync(file.rid);\n   * console.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // Hello World\n   * ```\n   *\n   * @category I/O\n   */\n  export function fdatasync(rid: number): Promise<void>;\n\n  /**\n   * Synchronously flushes any pending data operations of the given file stream\n   * to disk.\n   *\n   *  ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * Deno.fdatasyncSync(file.rid);\n   * console.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // Hello World\n   * ```\n   *\n   * @category I/O\n   */\n  export function fdatasyncSync(rid: number): void;\n\n  /** Close the given resource ID (`rid`) which has been previously opened, such\n   * as via opening or creating a file. Closing a file when you are finished\n   * with it is important to avoid leaking resources.\n   *\n   * ```ts\n   * const file = await Deno.open(\"my_file.txt\");\n   * // do work with \"file\" object\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function close(rid: number): void;\n\n  /** The Deno abstraction for reading and writing files.\n   *\n   * This is the most straight forward way of handling files within Deno and is\n   * recommended over using the discreet functions within the `Deno` namespace.\n   *\n   * ```ts\n   * const file = await Deno.open(\"/foo/bar.txt\", { read: true });\n   * const fileInfo = await file.stat();\n   * if (fileInfo.isFile) {\n   *   const buf = new Uint8Array(100);\n   *   const numberOfBytesRead = await file.read(buf); // 11 bytes\n   *   const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * }\n   * file.close();\n   * ```\n   *\n   * @category File System\n   */\n  export class FsFile\n    implements\n      Reader,\n      ReaderSync,\n      Writer,\n      WriterSync,\n      Seeker,\n      SeekerSync,\n      Closer {\n    /** The resource ID associated with the file instance. The resource ID\n     * should be considered an opaque reference to resource. */\n    readonly rid: number;\n    /** A {@linkcode ReadableStream} instance representing to the byte contents\n     * of the file. This makes it easy to interoperate with other web streams\n     * based APIs.\n     *\n     * ```ts\n     * const file = await Deno.open(\"my_file.txt\", { read: true });\n     * const decoder = new TextDecoder();\n     * for await (const chunk of file.readable) {\n     *   console.log(decoder.decode(chunk));\n     * }\n     * file.close();\n     * ```\n     */\n    readonly readable: ReadableStream<Uint8Array>;\n    /** A {@linkcode WritableStream} instance to write the contents of the\n     * file. This makes it easy to interoperate with other web streams based\n     * APIs.\n     *\n     * ```ts\n     * const items = [\"hello\", \"world\"];\n     * const file = await Deno.open(\"my_file.txt\", { write: true });\n     * const encoder = new TextEncoder();\n     * const writer = file.writable.getWriter();\n     * for (const item of items) {\n     *   await writer.write(encoder.encode(item));\n     * }\n     * file.close();\n     * ```\n     */\n    readonly writable: WritableStream<Uint8Array>;\n    /** The constructor which takes a resource ID. Generally `FsFile` should\n     * not be constructed directly. Instead use {@linkcode Deno.open} or\n     * {@linkcode Deno.openSync} to create a new instance of `FsFile`. */\n    constructor(rid: number);\n    /** Write the contents of the array buffer (`p`) to the file.\n     *\n     * Resolves to the number of bytes written.\n     *\n     * **It is not guaranteed that the full buffer will be written in a single\n     * call.**\n     *\n     * ```ts\n     * const encoder = new TextEncoder();\n     * const data = encoder.encode(\"Hello world\");\n     * const file = await Deno.open(\"/foo/bar.txt\", { write: true });\n     * const bytesWritten = await file.write(data); // 11\n     * file.close();\n     * ```\n     *\n     * @category I/O\n     */\n    write(p: Uint8Array): Promise<number>;\n    /** Synchronously write the contents of the array buffer (`p`) to the file.\n     *\n     * Returns the number of bytes written.\n     *\n     * **It is not guaranteed that the full buffer will be written in a single\n     * call.**\n     *\n     * ```ts\n     * const encoder = new TextEncoder();\n     * const data = encoder.encode(\"Hello world\");\n     * const file = Deno.openSync(\"/foo/bar.txt\", { write: true });\n     * const bytesWritten = file.writeSync(data); // 11\n     * file.close();\n     * ```\n     */\n    writeSync(p: Uint8Array): number;\n    /** Truncates (or extends) the file to reach the specified `len`. If `len`\n     * is not specified, then the entire file contents are truncated.\n     *\n     * ### Truncate the entire file\n     *\n     * ```ts\n     * const file = await Deno.open(\"my_file.txt\", { write: true });\n     * await file.truncate();\n     * file.close();\n     * ```\n     *\n     * ### Truncate part of the file\n     *\n     * ```ts\n     * // if \"my_file.txt\" contains the text \"hello world\":\n     * const file = await Deno.open(\"my_file.txt\", { write: true });\n     * await file.truncate(7);\n     * const buf = new Uint8Array(100);\n     * await file.read(buf);\n     * const text = new TextDecoder().decode(buf); // \"hello w\"\n     * file.close();\n     * ```\n     */\n    truncate(len?: number): Promise<void>;\n    /** Synchronously truncates (or extends) the file to reach the specified\n     * `len`. If `len` is not specified, then the entire file contents are\n     * truncated.\n     *\n     * ### Truncate the entire file\n     *\n     * ```ts\n     * const file = Deno.openSync(\"my_file.txt\", { write: true });\n     * file.truncateSync();\n     * file.close();\n     * ```\n     *\n     * ### Truncate part of the file\n     *\n     * ```ts\n     * // if \"my_file.txt\" contains the text \"hello world\":\n     * const file = Deno.openSync(\"my_file.txt\", { write: true });\n     * file.truncateSync(7);\n     * const buf = new Uint8Array(100);\n     * file.readSync(buf);\n     * const text = new TextDecoder().decode(buf); // \"hello w\"\n     * file.close();\n     * ```\n     */\n    truncateSync(len?: number): void;\n    /** Read the file into an array buffer (`p`).\n     *\n     * Resolves to either the number of bytes read during the operation or EOF\n     * (`null`) if there was nothing more to read.\n     *\n     * It is possible for a read to successfully return with `0` bytes. This\n     * does not indicate EOF.\n     *\n     * **It is not guaranteed that the full buffer will be read in a single\n     * call.**\n     *\n     * ```ts\n     * // if \"/foo/bar.txt\" contains the text \"hello world\":\n     * const file = await Deno.open(\"/foo/bar.txt\");\n     * const buf = new Uint8Array(100);\n     * const numberOfBytesRead = await file.read(buf); // 11 bytes\n     * const text = new TextDecoder().decode(buf);  // \"hello world\"\n     * file.close();\n     * ```\n     */\n    read(p: Uint8Array): Promise<number | null>;\n    /** Synchronously read from the file into an array buffer (`p`).\n     *\n     * Returns either the number of bytes read during the operation or EOF\n     * (`null`) if there was nothing more to read.\n     *\n     * It is possible for a read to successfully return with `0` bytes. This\n     * does not indicate EOF.\n     *\n     * **It is not guaranteed that the full buffer will be read in a single\n     * call.**\n     *\n     * ```ts\n     * // if \"/foo/bar.txt\" contains the text \"hello world\":\n     * const file = Deno.openSync(\"/foo/bar.txt\");\n     * const buf = new Uint8Array(100);\n     * const numberOfBytesRead = file.readSync(buf); // 11 bytes\n     * const text = new TextDecoder().decode(buf);  // \"hello world\"\n     * file.close();\n     * ```\n     */\n    readSync(p: Uint8Array): number | null;\n    /** Seek to the given `offset` under mode given by `whence`. The call\n     * resolves to the new position within the resource (bytes from the start).\n     *\n     * ```ts\n     * // Given file pointing to file with \"Hello world\", which is 11 bytes long:\n     * const file = await Deno.open(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // advance cursor 6 bytes\n     * const cursorPosition = await file.seek(6, Deno.SeekMode.Start);\n     * console.log(cursorPosition);  // 6\n     * const buf = new Uint8Array(100);\n     * await file.read(buf);\n     * console.log(new TextDecoder().decode(buf)); // \"world\"\n     * file.close();\n     * ```\n     *\n     * The seek modes work as follows:\n     *\n     * ```ts\n     * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n     * const file = await Deno.open(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // Seek 6 bytes from the start of the file\n     * console.log(await file.seek(6, Deno.SeekMode.Start)); // \"6\"\n     * // Seek 2 more bytes from the current position\n     * console.log(await file.seek(2, Deno.SeekMode.Current)); // \"8\"\n     * // Seek backwards 2 bytes from the end of the file\n     * console.log(await file.seek(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n     * ```\n     */\n    seek(offset: number, whence: SeekMode): Promise<number>;\n    /** Synchronously seek to the given `offset` under mode given by `whence`.\n     * The new position within the resource (bytes from the start) is returned.\n     *\n     * ```ts\n     * const file = Deno.openSync(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // advance cursor 6 bytes\n     * const cursorPosition = file.seekSync(6, Deno.SeekMode.Start);\n     * console.log(cursorPosition);  // 6\n     * const buf = new Uint8Array(100);\n     * file.readSync(buf);\n     * console.log(new TextDecoder().decode(buf)); // \"world\"\n     * file.close();\n     * ```\n     *\n     * The seek modes work as follows:\n     *\n     * ```ts\n     * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n     * const file = Deno.openSync(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // Seek 6 bytes from the start of the file\n     * console.log(file.seekSync(6, Deno.SeekMode.Start)); // \"6\"\n     * // Seek 2 more bytes from the current position\n     * console.log(file.seekSync(2, Deno.SeekMode.Current)); // \"8\"\n     * // Seek backwards 2 bytes from the end of the file\n     * console.log(file.seekSync(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n     * file.close();\n     * ```\n     */\n    seekSync(offset: number, whence: SeekMode): number;\n    /** Resolves to a {@linkcode Deno.FileInfo} for the file.\n     *\n     * ```ts\n     * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * const file = await Deno.open(\"hello.txt\");\n     * const fileInfo = await file.stat();\n     * assert(fileInfo.isFile);\n     * file.close();\n     * ```\n     */\n    stat(): Promise<FileInfo>;\n    /** Synchronously returns a {@linkcode Deno.FileInfo} for the file.\n     *\n     * ```ts\n     * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * const file = Deno.openSync(\"hello.txt\")\n     * const fileInfo = file.statSync();\n     * assert(fileInfo.isFile);\n     * file.close();\n     * ```\n     */\n    statSync(): FileInfo;\n    /** Close the file. Closing a file when you are finished with it is\n     * important to avoid leaking resources.\n     *\n     * ```ts\n     * const file = await Deno.open(\"my_file.txt\");\n     * // do work with \"file\" object\n     * file.close();\n     * ```\n     */\n    close(): void;\n  }\n\n  /**\n   * The Deno abstraction for reading and writing files.\n   *\n   * @deprecated Use {@linkcode Deno.FsFile} instead. `Deno.File` will be\n   *   removed in the future.\n   * @category File System\n   */\n  export const File: typeof FsFile;\n\n  /** Gets the size of the console as columns/rows.\n   *\n   * ```ts\n   * const { columns, rows } = Deno.consoleSize();\n   * ```\n   *\n   * @category I/O\n   */\n  export function consoleSize(): {\n    columns: number;\n    rows: number;\n  };\n\n  /** @category I/O */\n  export interface SetRawOptions {\n    /**\n     * The `cbreak` option can be used to indicate that characters that\n     * correspond to a signal should still be generated. When disabling raw\n     * mode, this option is ignored. This functionality currently only works on\n     * Linux and Mac OS.\n     */\n    cbreak: boolean;\n  }\n\n  /** A reference to `stdin` which can be used to read directly from `stdin`.\n   * It implements the Deno specific {@linkcode Reader}, {@linkcode ReaderSync},\n   * and {@linkcode Closer} interfaces as well as provides a\n   * {@linkcode ReadableStream} interface.\n   *\n   * ### Reading chunks from the readable stream\n   *\n   * ```ts\n   * const decoder = new TextDecoder();\n   * for await (const chunk of Deno.stdin.readable) {\n   *   const text = decoder.decode(chunk);\n   *   // do something with the text\n   * }\n   * ```\n   *\n   * @category I/O\n   */\n  export const stdin: Reader & ReaderSync & Closer & {\n    /** The resource ID assigned to `stdin`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A readable stream interface to `stdin`. */\n    readonly readable: ReadableStream<Uint8Array>;\n    /**\n     * Set TTY to be under raw mode or not. In raw mode, characters are read and\n     * returned as is, without being processed. All special processing of\n     * characters by the terminal is disabled, including echoing input\n     * characters. Reading from a TTY device in raw mode is faster than reading\n     * from a TTY device in canonical mode.\n     *\n     * ```ts\n     * Deno.stdin.setRaw(true, { cbreak: true });\n     * ```\n     *\n     * @category I/O\n     */\n    setRaw(mode: boolean, options?: SetRawOptions): void;\n  };\n  /** A reference to `stdout` which can be used to write directly to `stdout`.\n   * It implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\n   * and {@linkcode Closer} interfaces as well as provides a\n   * {@linkcode WritableStream} interface.\n   *\n   * These are low level constructs, and the {@linkcode console} interface is a\n   * more straight forward way to interact with `stdout` and `stderr`.\n   *\n   * @category I/O\n   */\n  export const stdout: Writer & WriterSync & Closer & {\n    /** The resource ID assigned to `stdout`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stdout`. */\n    readonly writable: WritableStream<Uint8Array>;\n  };\n  /** A reference to `stderr` which can be used to write directly to `stderr`.\n   * It implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\n   * and {@linkcode Closer} interfaces as well as provides a\n   * {@linkcode WritableStream} interface.\n   *\n   * These are low level constructs, and the {@linkcode console} interface is a\n   * more straight forward way to interact with `stdout` and `stderr`.\n   *\n   * @category I/O\n   */\n  export const stderr: Writer & WriterSync & Closer & {\n    /** The resource ID assigned to `stderr`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stderr`. */\n    readonly writable: WritableStream<Uint8Array>;\n  };\n\n  /**\n   * Options which can be set when doing {@linkcode Deno.open} and\n   * {@linkcode Deno.openSync}.\n   *\n   * @category File System */\n  export interface OpenOptions {\n    /** Defaults to `true`. Sets the option for read access. This option, when `true`, means that\n     * the file should be read-able if opened. */\n    read?: boolean;\n    /** Defaults to `false`. Sets the option for write access. This option, when `true`, means that\n     * the file should be write-able if opened. If the file already exists,\n     * any write calls on it will overwrite its contents, by default without\n     * truncating it. */\n    write?: boolean;\n    /** Defaults to `false`. Sets the option for the append mode. This option, when `true`, means\n     * that writes will append to a file instead of overwriting previous\n     * contents.\n     *\n     * Note that setting `{ write: true, append: true }` has the same effect as\n     * setting only `{ append: true }`. */\n    append?: boolean;\n    /** Defaults to `false`. Sets the option for truncating a previous file. If a file is\n     * successfully opened with this option set it will truncate the file to `0`\n     * size if it already exists. The file must be opened with write access\n     * for truncate to work. */\n    truncate?: boolean;\n    /** Defaults to `false`. Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path. Requires write or append access to be\n     * used. */\n    create?: boolean;\n    /** Defaults to `false`. If set to `true`, no file, directory, or symlink is\n     * allowed to exist at the target location. Requires write or append\n     * access to be used. When createNew is set to `true`, create and truncate\n     * are ignored. */\n    createNew?: boolean;\n    /** Permissions to use if creating the file (defaults to `0o666`, before\n     * the process's umask).\n     *\n     * Ignored on Windows. */\n    mode?: number;\n  }\n\n  /**\n   * Options which can be set when using {@linkcode Deno.readFile} or\n   * {@linkcode Deno.readFileSync}.\n   *\n   * @category File System */\n  export interface ReadFileOptions {\n    /**\n     * An abort signal to allow cancellation of the file read operation.\n     * If the signal becomes aborted the readFile operation will be stopped\n     * and the promise returned will be rejected with an AbortError.\n     */\n    signal?: AbortSignal;\n  }\n\n  /**\n   *  Check if a given resource id (`rid`) is a TTY (a terminal).\n   *\n   * ```ts\n   * // This example is system and context specific\n   * const nonTTYRid = Deno.openSync(\"my_file.txt\").rid;\n   * const ttyRid = Deno.openSync(\"/dev/tty6\").rid;\n   * console.log(Deno.isatty(nonTTYRid)); // false\n   * console.log(Deno.isatty(ttyRid)); // true\n   * Deno.close(nonTTYRid);\n   * Deno.close(ttyRid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function isatty(rid: number): boolean;\n\n  /**\n   * A variable-sized buffer of bytes with `read()` and `write()` methods.\n   *\n   * @deprecated Use [`Buffer`](https://deno.land/std/io/buffer.ts?s=Buffer)\n   *   from [`std/io/buffer.ts`](https://deno.land/std/io/buffer.ts) instead.\n   *   `Deno.Buffer` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export class Buffer implements Reader, ReaderSync, Writer, WriterSync {\n    constructor(ab?: ArrayBuffer);\n    /** Returns a slice holding the unread portion of the buffer.\n     *\n     * The slice is valid for use only until the next buffer modification (that\n     * is, only until the next call to a method like `read()`, `write()`,\n     * `reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at\n     * least until the next buffer modification, so immediate changes to the\n     * slice will affect the result of future reads.\n     * @param options Defaults to `{ copy: true }`\n     */\n    bytes(options?: { copy?: boolean }): Uint8Array;\n    /** Returns whether the unread portion of the buffer is empty. */\n    empty(): boolean;\n    /** A read only number of bytes of the unread portion of the buffer. */\n    readonly length: number;\n    /** The read only capacity of the buffer's underlying byte slice, that is,\n     * the total space allocated for the buffer's data. */\n    readonly capacity: number;\n    /** Discards all but the first `n` unread bytes from the buffer but\n     * continues to use the same allocated storage. It throws if `n` is\n     * negative or greater than the length of the buffer. */\n    truncate(n: number): void;\n    /** Resets the buffer to be empty, but it retains the underlying storage for\n     * use by future writes. `.reset()` is the same as `.truncate(0)`. */\n    reset(): void;\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Returns the number of bytes read. If the buffer has no data to\n     * return, the return is EOF (`null`). */\n    readSync(p: Uint8Array): number | null;\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Resolves to the number of bytes read. If the buffer has no\n     * data to return, resolves to EOF (`null`).\n     *\n     * NOTE: This methods reads bytes synchronously; it's provided for\n     * compatibility with `Reader` interfaces.\n     */\n    read(p: Uint8Array): Promise<number | null>;\n    writeSync(p: Uint8Array): number;\n    /** NOTE: This methods writes bytes synchronously; it's provided for\n     * compatibility with `Writer` interface. */\n    write(p: Uint8Array): Promise<number>;\n    /** Grows the buffer's capacity, if necessary, to guarantee space for\n     * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\n     * the buffer without another allocation. If `n` is negative, `.grow()` will\n     * throw. If the buffer can't grow it will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */\n    grow(n: number): void;\n    /** Reads data from `r` until EOF (`null`) and appends it to the buffer,\n     * growing the buffer as needed. It resolves to the number of bytes read.\n     * If the buffer becomes too large, `.readFrom()` will reject with an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFrom(r: Reader): Promise<number>;\n    /** Reads data from `r` until EOF (`null`) and appends it to the buffer,\n     * growing the buffer as needed. It returns the number of bytes read. If the\n     * buffer becomes too large, `.readFromSync()` will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFromSync(r: ReaderSync): number;\n  }\n\n  /**\n   * Read Reader `r` until EOF (`null`) and resolve to the content as\n   * Uint8Array`.\n   *\n   * @deprecated Use\n   *   [`readAll`](https://deno.land/std/streams/conversion.ts?s=readAll) from\n   *   [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   *   instead. `Deno.readAll` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function readAll(r: Reader): Promise<Uint8Array>;\n\n  /**\n   * Synchronously reads Reader `r` until EOF (`null`) and returns the content\n   * as `Uint8Array`.\n   *\n   * @deprecated Use\n   *   [`readAllSync`](https://deno.land/std/streams/conversion.ts?s=readAllSync)\n   *   from\n   *   [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   *   instead. `Deno.readAllSync` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function readAllSync(r: ReaderSync): Uint8Array;\n\n  /**\n   * Write all the content of the array buffer (`arr`) to the writer (`w`).\n   *\n   * @deprecated Use\n   *   [`writeAll`](https://deno.land/std/streams/conversion.ts?s=writeAll) from\n   *   [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   *   instead. `Deno.writeAll` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function writeAll(w: Writer, arr: Uint8Array): Promise<void>;\n\n  /**\n   * Synchronously write all the content of the array buffer (`arr`) to the\n   * writer (`w`).\n   *\n   * @deprecated Use\n   *   [`writeAllSync`](https://deno.land/std/streams/conversion.ts?s=writeAllSync)\n   *   from\n   *   [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts)\n   *   instead. `Deno.writeAllSync` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function writeAllSync(w: WriterSync, arr: Uint8Array): void;\n\n  /**\n   * Options which can be set when using {@linkcode Deno.mkdir} and\n   * {@linkcode Deno.mkdirSync}.\n   *\n   * @category File System */\n  export interface MkdirOptions {\n    /** Defaults to `false`. If set to `true`, means that any intermediate\n     * directories will also be created (as with the shell command `mkdir -p`).\n     *\n     * Intermediate directories are created with the same permissions.\n     *\n     * When recursive is set to `true`, succeeds silently (without changing any\n     * permissions) if a directory already exists at the path, or if the path\n     * is a symlink to an existing directory. */\n    recursive?: boolean;\n    /** Permissions to use when creating the directory (defaults to `0o777`,\n     * before the process's umask).\n     *\n     * Ignored on Windows. */\n    mode?: number;\n  }\n\n  /** Creates a new directory with the specified path.\n   *\n   * ```ts\n   * await Deno.mkdir(\"new_dir\");\n   * await Deno.mkdir(\"nested/directories\", { recursive: true });\n   * await Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n   * ```\n   *\n   * Defaults to throwing error if the directory already exists.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function mkdir(\n    path: string | URL,\n    options?: MkdirOptions,\n  ): Promise<void>;\n\n  /** Synchronously creates a new directory with the specified path.\n   *\n   * ```ts\n   * Deno.mkdirSync(\"new_dir\");\n   * Deno.mkdirSync(\"nested/directories\", { recursive: true });\n   * Deno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n   * ```\n   *\n   * Defaults to throwing error if the directory already exists.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function mkdirSync(path: string | URL, options?: MkdirOptions): void;\n\n  /**\n   * Options which can be set when using {@linkcode Deno.makeTempDir},\n   * {@linkcode Deno.makeTempDirSync}, {@linkcode Deno.makeTempFile}, and\n   * {@linkcode Deno.makeTempFileSync}.\n   *\n   * @category File System */\n  export interface MakeTempOptions {\n    /** Directory where the temporary directory should be created (defaults to\n     * the env variable `TMPDIR`, or the system's default, usually `/tmp`).\n     *\n     * Note that if the passed `dir` is relative, the path returned by\n     * `makeTempFile()` and `makeTempDir()` will also be relative. Be mindful of\n     * this when changing working directory. */\n    dir?: string;\n    /** String that should precede the random portion of the temporary\n     * directory's name. */\n    prefix?: string;\n    /** String that should follow the random portion of the temporary\n     * directory's name. */\n    suffix?: string;\n  }\n\n  /** Creates a new temporary directory in the default directory for temporary\n   * files, unless `dir` is specified. Other optional options include\n   * prefixing and suffixing the directory name with `prefix` and `suffix`\n   * respectively.\n   *\n   * This call resolves to the full path to the newly created directory.\n   *\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\n   * const tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDir(options?: MakeTempOptions): Promise<string>;\n\n  /** Synchronously creates a new temporary directory in the default directory\n   * for temporary files, unless `dir` is specified. Other optional options\n   * include prefixing and suffixing the directory name with `prefix` and\n   * `suffix` respectively.\n   *\n   * The full path to the newly created directory is returned.\n   *\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\n   * const tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDirSync(options?: MakeTempOptions): string;\n\n  /** Creates a new temporary file in the default directory for temporary\n   * files, unless `dir` is specified.\n   *\n   * Other options include prefixing and suffixing the directory name with\n   * `prefix` and `suffix` respectively.\n   *\n   * This call resolves to the full path to the newly created file.\n   *\n   * Multiple programs calling this function simultaneously will create\n   * different files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   * ```ts\n   * const tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\n   * const tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function makeTempFile(options?: MakeTempOptions): Promise<string>;\n\n  /** Synchronously creates a new temporary file in the default directory for\n   * temporary files, unless `dir` is specified.\n   *\n   * Other options include prefixing and suffixing the directory name with\n   * `prefix` and `suffix` respectively.\n   *\n   * The full path to the newly created file is returned.\n   *\n   * Multiple programs calling this function simultaneously will create\n   * different files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\n   * const tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function makeTempFileSync(options?: MakeTempOptions): string;\n\n  /** Changes the permission of a specific file/directory of specified path.\n   * Ignores the process's umask.\n   *\n   * ```ts\n   * await Deno.chmod(\"/path/to/file\", 0o666);\n   * ```\n   *\n   * The mode is a sequence of 3 octal numbers. The first/left-most number\n   * specifies the permissions for the owner. The second number specifies the\n   * permissions for the group. The last/right-most number specifies the\n   * permissions for others. For example, with a mode of 0o764, the owner (7)\n   * can read/write/execute, the group (6) can read/write and everyone else (4)\n   * can read only.\n   *\n   * | Number | Description |\n   * | ------ | ----------- |\n   * | 7      | read, write, and execute |\n   * | 6      | read and write |\n   * | 5      | read and execute |\n   * | 4      | read only |\n   * | 3      | write and execute |\n   * | 2      | write only |\n   * | 1      | execute only |\n   * | 0      | no permission |\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function chmod(path: string | URL, mode: number): Promise<void>;\n\n  /** Synchronously changes the permission of a specific file/directory of\n   * specified path. Ignores the process's umask.\n   *\n   * ```ts\n   * Deno.chmodSync(\"/path/to/file\", 0o666);\n   * ```\n   *\n   * For a full description, see {@linkcode Deno.chmod}.\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function chmodSync(path: string | URL, mode: number): void;\n\n  /** Change owner of a regular file or directory.\n   *\n   * This functionality is not available on Windows.\n   *\n   * ```ts\n   * await Deno.chown(\"myFile.txt\", 1000, 1002);\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * Throws Error (not implemented) if executed on Windows.\n   *\n   * @tags allow-write\n   * @category File System\n   *\n   * @param path path to the file\n   * @param uid user id (UID) of the new owner, or `null` for no change\n   * @param gid group id (GID) of the new owner, or `null` for no change\n   */\n  export function chown(\n    path: string | URL,\n    uid: number | null,\n    gid: number | null,\n  ): Promise<void>;\n\n  /** Synchronously change owner of a regular file or directory.\n   *\n   * This functionality is not available on Windows.\n   *\n   * ```ts\n   * Deno.chownSync(\"myFile.txt\", 1000, 1002);\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * Throws Error (not implemented) if executed on Windows.\n   *\n   * @tags allow-write\n   * @category File System\n   *\n   * @param path path to the file\n   * @param uid user id (UID) of the new owner, or `null` for no change\n   * @param gid group id (GID) of the new owner, or `null` for no change\n   */\n  export function chownSync(\n    path: string | URL,\n    uid: number | null,\n    gid: number | null,\n  ): void;\n\n  /**\n   * Options which can be set when using {@linkcode Deno.remove} and\n   * {@linkcode Deno.removeSync}.\n   *\n   * @category File System */\n  export interface RemoveOptions {\n    /** Defaults to `false`. If set to `true`, path will be removed even if\n     * it's a non-empty directory. */\n    recursive?: boolean;\n  }\n\n  /** Removes the named file or directory.\n   *\n   * ```ts\n   * await Deno.remove(\"/path/to/empty_dir/or/file\");\n   * await Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n   * ```\n   *\n   * Throws error if permission denied, path not found, or path is a non-empty\n   * directory and the `recursive` option isn't set to `true`.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function remove(\n    path: string | URL,\n    options?: RemoveOptions,\n  ): Promise<void>;\n\n  /** Synchronously removes the named file or directory.\n   *\n   * ```ts\n   * Deno.removeSync(\"/path/to/empty_dir/or/file\");\n   * Deno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n   * ```\n   *\n   * Throws error if permission denied, path not found, or path is a non-empty\n   * directory and the `recursive` option isn't set to `true`.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function removeSync(path: string | URL, options?: RemoveOptions): void;\n\n  /** Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or\n   * directories. If `newpath` already exists and is not a directory,\n   * `renameSync()` replaces it. OS-specific restrictions may apply when\n   * `oldpath` and `newpath` are in different directories.\n   *\n   * ```ts\n   * Deno.renameSync(\"old/path\", \"new/path\");\n   * ```\n   *\n   * On Unix-like OSes, this operation does not follow symlinks at either path.\n   *\n   * It varies between platforms when the operation throws errors, and if so what\n   * they are. It's always an error to rename anything to a non-empty directory.\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function renameSync(\n    oldpath: string | URL,\n    newpath: string | URL,\n  ): void;\n\n  /** Renames (moves) `oldpath` to `newpath`. Paths may be files or directories.\n   * If `newpath` already exists and is not a directory, `rename()` replaces it.\n   * OS-specific restrictions may apply when `oldpath` and `newpath` are in\n   * different directories.\n   *\n   * ```ts\n   * await Deno.rename(\"old/path\", \"new/path\");\n   * ```\n   *\n   * On Unix-like OSes, this operation does not follow symlinks at either path.\n   *\n   * It varies between platforms when the operation throws errors, and if so\n   * what they are. It's always an error to rename anything to a non-empty\n   * directory.\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function rename(\n    oldpath: string | URL,\n    newpath: string | URL,\n  ): Promise<void>;\n\n  /** Asynchronously reads and returns the entire contents of a file as an UTF-8\n   *  decoded string. Reading a directory throws an error.\n   *\n   * ```ts\n   * const data = await Deno.readTextFile(\"hello.txt\");\n   * console.log(data);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readTextFile(\n    path: string | URL,\n    options?: ReadFileOptions,\n  ): Promise<string>;\n\n  /** Synchronously reads and returns the entire contents of a file as an UTF-8\n   *  decoded string. Reading a directory throws an error.\n   *\n   * ```ts\n   * const data = Deno.readTextFileSync(\"hello.txt\");\n   * console.log(data);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readTextFileSync(path: string | URL): string;\n\n  /** Reads and resolves to the entire contents of a file as an array of bytes.\n   * `TextDecoder` can be used to transform the bytes to string if required.\n   * Reading a directory returns an empty data array.\n   *\n   * ```ts\n   * const decoder = new TextDecoder(\"utf-8\");\n   * const data = await Deno.readFile(\"hello.txt\");\n   * console.log(decoder.decode(data));\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readFile(\n    path: string | URL,\n    options?: ReadFileOptions,\n  ): Promise<Uint8Array>;\n\n  /** Synchronously reads and returns the entire contents of a file as an array\n   * of bytes. `TextDecoder` can be used to transform the bytes to string if\n   * required. Reading a directory returns an empty data array.\n   *\n   * ```ts\n   * const decoder = new TextDecoder(\"utf-8\");\n   * const data = Deno.readFileSync(\"hello.txt\");\n   * console.log(decoder.decode(data));\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readFileSync(path: string | URL): Uint8Array;\n\n  /** Provides information about a file and is returned by\n   * {@linkcode Deno.stat}, {@linkcode Deno.lstat}, {@linkcode Deno.statSync},\n   * and {@linkcode Deno.lstatSync} or from calling `stat()` and `statSync()`\n   * on an {@linkcode Deno.FsFile} instance.\n   *\n   * @category File System\n   */\n  export interface FileInfo {\n    /** True if this is info for a regular file. Mutually exclusive to\n     * `FileInfo.isDirectory` and `FileInfo.isSymlink`. */\n    isFile: boolean;\n    /** True if this is info for a regular directory. Mutually exclusive to\n     * `FileInfo.isFile` and `FileInfo.isSymlink`. */\n    isDirectory: boolean;\n    /** True if this is info for a symlink. Mutually exclusive to\n     * `FileInfo.isFile` and `FileInfo.isDirectory`. */\n    isSymlink: boolean;\n    /** The size of the file, in bytes. */\n    size: number;\n    /** The last modification time of the file. This corresponds to the `mtime`\n     * field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\n     * may not be available on all platforms. */\n    mtime: Date | null;\n    /** The last access time of the file. This corresponds to the `atime`\n     * field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\n     * be available on all platforms. */\n    atime: Date | null;\n    /** The creation time of the file. This corresponds to the `birthtime`\n     * field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may\n     * not be available on all platforms. */\n    birthtime: Date | null;\n    /** ID of the device containing the file.\n     *\n     * _Linux/Mac OS only._ */\n    dev: number | null;\n    /** Inode number.\n     *\n     * _Linux/Mac OS only._ */\n    ino: number | null;\n    /** **UNSTABLE**: Match behavior with Go on Windows for `mode`.\n     *\n     * The underlying raw `st_mode` bits that contain the standard Unix\n     * permissions for this file/directory. */\n    mode: number | null;\n    /** Number of hard links pointing to this file.\n     *\n     * _Linux/Mac OS only._ */\n    nlink: number | null;\n    /** User ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    uid: number | null;\n    /** Group ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    gid: number | null;\n    /** Device ID of this file.\n     *\n     * _Linux/Mac OS only._ */\n    rdev: number | null;\n    /** Blocksize for filesystem I/O.\n     *\n     * _Linux/Mac OS only._ */\n    blksize: number | null;\n    /** Number of blocks allocated to the file, in 512-byte units.\n     *\n     * _Linux/Mac OS only._ */\n    blocks: number | null;\n  }\n\n  /** Resolves to the absolute normalized path, with symbolic links resolved.\n   *\n   * ```ts\n   * // e.g. given /home/alice/file.txt and current directory /home/alice\n   * await Deno.symlink(\"file.txt\", \"symlink_file.txt\");\n   * const realPath = await Deno.realPath(\"./file.txt\");\n   * const realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\n   * console.log(realPath);  // outputs \"/home/alice/file.txt\"\n   * console.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n   * ```\n   *\n   * Requires `allow-read` permission for the target path.\n   *\n   * Also requires `allow-read` permission for the `CWD` if the target path is\n   * relative.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function realPath(path: string | URL): Promise<string>;\n\n  /** Synchronously returns absolute normalized path, with symbolic links\n   * resolved.\n   *\n   * ```ts\n   * // e.g. given /home/alice/file.txt and current directory /home/alice\n   * Deno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\n   * const realPath = Deno.realPathSync(\"./file.txt\");\n   * const realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\n   * console.log(realPath);  // outputs \"/home/alice/file.txt\"\n   * console.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n   * ```\n   *\n   * Requires `allow-read` permission for the target path.\n   *\n   * Also requires `allow-read` permission for the `CWD` if the target path is\n   * relative.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function realPathSync(path: string | URL): string;\n\n  /**\n   * Information about a directory entry returned from {@linkcode Deno.readDir}\n   * and {@linkcode Deno.readDirSync}.\n   *\n   * @category File System */\n  export interface DirEntry {\n    /** The file name of the entry. It is just the entity name and does not\n     * include the full path. */\n    name: string;\n    /** True if this is info for a regular file. Mutually exclusive to\n     * `DirEntry.isDirectory` and `DirEntry.isSymlink`. */\n    isFile: boolean;\n    /** True if this is info for a regular directory. Mutually exclusive to\n     * `DirEntry.isFile` and `DirEntry.isSymlink`. */\n    isDirectory: boolean;\n    /** True if this is info for a symlink. Mutually exclusive to\n     * `DirEntry.isFile` and `DirEntry.isDirectory`. */\n    isSymlink: boolean;\n  }\n\n  /** Reads the directory given by `path` and returns an async iterable of\n   * {@linkcode Deno.DirEntry}.\n   *\n   * ```ts\n   * for await (const dirEntry of Deno.readDir(\"/\")) {\n   *   console.log(dirEntry.name);\n   * }\n   * ```\n   *\n   * Throws error if `path` is not a directory.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readDir(path: string | URL): AsyncIterable<DirEntry>;\n\n  /** Synchronously reads the directory given by `path` and returns an iterable\n   * of `Deno.DirEntry`.\n   *\n   * ```ts\n   * for (const dirEntry of Deno.readDirSync(\"/\")) {\n   *   console.log(dirEntry.name);\n   * }\n   * ```\n   *\n   * Throws error if `path` is not a directory.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readDirSync(path: string | URL): Iterable<DirEntry>;\n\n  /** Copies the contents and permissions of one file to another specified path,\n   * by default creating a new file if needed, else overwriting. Fails if target\n   * path is a directory or is unwritable.\n   *\n   * ```ts\n   * await Deno.copyFile(\"from.txt\", \"to.txt\");\n   * ```\n   *\n   * Requires `allow-read` permission on `fromPath`.\n   *\n   * Requires `allow-write` permission on `toPath`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function copyFile(\n    fromPath: string | URL,\n    toPath: string | URL,\n  ): Promise<void>;\n\n  /** Synchronously copies the contents and permissions of one file to another\n   * specified path, by default creating a new file if needed, else overwriting.\n   * Fails if target path is a directory or is unwritable.\n   *\n   * ```ts\n   * Deno.copyFileSync(\"from.txt\", \"to.txt\");\n   * ```\n   *\n   * Requires `allow-read` permission on `fromPath`.\n   *\n   * Requires `allow-write` permission on `toPath`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function copyFileSync(\n    fromPath: string | URL,\n    toPath: string | URL,\n  ): void;\n\n  /** Resolves to the full path destination of the named symbolic link.\n   *\n   * ```ts\n   * await Deno.symlink(\"./test.txt\", \"./test_link.txt\");\n   * const target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n   * ```\n   *\n   * Throws TypeError if called with a hard link.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readLink(path: string | URL): Promise<string>;\n\n  /** Synchronously returns the full path destination of the named symbolic\n   * link.\n   *\n   * ```ts\n   * Deno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\n   * const target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n   * ```\n   *\n   * Throws TypeError if called with a hard link.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readLinkSync(path: string | URL): string;\n\n  /** Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. If\n   * `path` is a symlink, information for the symlink will be returned instead\n   * of what it points to.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = await Deno.lstat(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function lstat(path: string | URL): Promise<FileInfo>;\n\n  /** Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n   * `path`. If `path` is a symlink, information for the symlink will be\n   * returned instead of what it points to.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = Deno.lstatSync(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function lstatSync(path: string | URL): FileInfo;\n\n  /** Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. Will\n   * always follow symlinks.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = await Deno.stat(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function stat(path: string | URL): Promise<FileInfo>;\n\n  /** Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n   * `path`. Will always follow symlinks.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = Deno.statSync(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function statSync(path: string | URL): FileInfo;\n\n  /** Options for writing to a file.\n   *\n   * @category File System\n   */\n  export interface WriteFileOptions {\n    /** Defaults to `false`. If set to `true`, will append to a file instead of\n     * overwriting previous contents. */\n    append?: boolean;\n    /** Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path (defaults to `true`). */\n    create?: boolean;\n    /** Permissions always applied to file. */\n    mode?: number;\n    /** An abort signal to allow cancellation of the file write operation.\n     *\n     * If the signal becomes aborted the write file operation will be stopped\n     * and the promise returned will be rejected with an {@linkcode AbortError}.\n     */\n    signal?: AbortSignal;\n  }\n\n  /** Write `data` to the given `path`, by default creating a new file if\n   * needed, else overwriting.\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\\n\");\n   * await Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\n   * await Deno.writeFile(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\n   * await Deno.writeFile(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\n   * await Deno.writeFile(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeFile(\n    path: string | URL,\n    data: Uint8Array,\n    options?: WriteFileOptions,\n  ): Promise<void>;\n\n  /** Synchronously write `data` to the given `path`, by default creating a new\n   * file if needed, else overwriting.\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\\n\");\n   * Deno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\n   * Deno.writeFileSync(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\n   * Deno.writeFileSync(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\n   * Deno.writeFileSync(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeFileSync(\n    path: string | URL,\n    data: Uint8Array,\n    options?: WriteFileOptions,\n  ): void;\n\n  /** Write string `data` to the given `path`, by default creating a new file if\n   * needed, else overwriting.\n   *\n   * ```ts\n   * await Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeTextFile(\n    path: string | URL,\n    data: string,\n    options?: WriteFileOptions,\n  ): Promise<void>;\n\n  /** Synchronously write string `data` to the given `path`, by default creating\n   * a new file if needed, else overwriting.\n   *\n   * ```ts\n   * Deno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeTextFileSync(\n    path: string | URL,\n    data: string,\n    options?: WriteFileOptions,\n  ): void;\n\n  /** Truncates (or extends) the specified file, to reach the specified `len`.\n   * If `len` is not specified then the entire file contents are truncated.\n   *\n   * ### Truncate the entire file\n   * ```ts\n   * await Deno.truncate(\"my_file.txt\");\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```\n   * const file = await Deno.makeTempFile();\n   * await Deno.writeFile(file, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.truncate(file, 7);\n   * const data = await Deno.readFile(file);\n   * console.log(new TextDecoder().decode(data));  // \"Hello W\"\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function truncate(name: string, len?: number): Promise<void>;\n\n  /** Synchronously truncates (or extends) the specified file, to reach the\n   * specified `len`. If `len` is not specified then the entire file contents\n   * are truncated.\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * Deno.truncateSync(\"my_file.txt\");\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = Deno.makeTempFileSync();\n   * Deno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\n   * Deno.truncateSync(file, 7);\n   * const data = Deno.readFileSync(file);\n   * console.log(new TextDecoder().decode(data));\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function truncateSync(name: string, len?: number): void;\n\n  /** @category Observability */\n  export interface OpMetrics {\n    opsDispatched: number;\n    opsDispatchedSync: number;\n    opsDispatchedAsync: number;\n    opsDispatchedAsyncUnref: number;\n    opsCompleted: number;\n    opsCompletedSync: number;\n    opsCompletedAsync: number;\n    opsCompletedAsyncUnref: number;\n    bytesSentControl: number;\n    bytesSentData: number;\n    bytesReceived: number;\n  }\n\n  /** @category Observability */\n  export interface Metrics extends OpMetrics {\n    ops: Record<string, OpMetrics>;\n  }\n\n  /** Receive metrics from the privileged side of Deno. This is primarily used\n   * in the development of Deno. _Ops_, also called _bindings_, are the\n   * go-between between Deno JavaScript sandbox and the rest of Deno.\n   *\n   * ```shell\n   * > console.table(Deno.metrics())\n   * ┌─────────────────────────┬────────┐\n   * │         (index)         │ Values │\n   * ├─────────────────────────┼────────┤\n   * │      opsDispatched      │   3    │\n   * │    opsDispatchedSync    │   2    │\n   * │   opsDispatchedAsync    │   1    │\n   * │ opsDispatchedAsyncUnref │   0    │\n   * │      opsCompleted       │   3    │\n   * │    opsCompletedSync     │   2    │\n   * │    opsCompletedAsync    │   1    │\n   * │ opsCompletedAsyncUnref  │   0    │\n   * │    bytesSentControl     │   73   │\n   * │      bytesSentData      │   0    │\n   * │      bytesReceived      │  375   │\n   * └─────────────────────────┴────────┘\n   * ```\n   *\n   * @category Observability\n   */\n  export function metrics(): Metrics;\n\n  /**\n   * A map of open resources that Deno is tracking. The key is the resource ID\n   * (_rid_) and the value is its representation.\n   *\n   * @category Observability */\n  interface ResourceMap {\n    [rid: number]: unknown;\n  }\n\n  /** Returns a map of open resource IDs (_rid_) along with their string\n   * representations. This is an internal API and as such resource\n   * representation has `unknown` type; that means it can change any time and\n   * should not be depended upon.\n   *\n   * ```ts\n   * console.log(Deno.resources());\n   * // { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\n   * Deno.openSync('../test.file');\n   * console.log(Deno.resources());\n   * // { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\", 3: \"fsFile\" }\n   * ```\n   *\n   * @category Observability\n   */\n  export function resources(): ResourceMap;\n\n  /**\n   * Additional information for FsEvent objects with the \"other\" kind.\n   *\n   * - `\"rescan\"`: rescan notices indicate either a lapse in the events or a\n   *    change in the filesystem such that events received so far can no longer\n   *    be relied on to represent the state of the filesystem now. An\n   *    application that simply reacts to file changes may not care about this.\n   *    An application that keeps an in-memory representation of the filesystem\n   *    will need to care, and will need to refresh that representation directly\n   *    from the filesystem.\n   *\n   * @category File System\n   */\n  export type FsEventFlag = \"rescan\";\n\n  /**\n   * Represents a unique file system event yielded by a\n   * {@linkcode Deno.FsWatcher}.\n   *\n   * @category File System */\n  export interface FsEvent {\n    /** The kind/type of the file system event. */\n    kind: \"any\" | \"access\" | \"create\" | \"modify\" | \"remove\" | \"other\";\n    /** An array of paths that are associated with the file system event. */\n    paths: string[];\n    /** Any additional flags associated with the event. */\n    flag?: FsEventFlag;\n  }\n\n  /**\n   * Returned by {@linkcode Deno.watchFs}. It is an async iterator yielding up\n   * system events. To stop watching the file system by calling `.close()`\n   * method.\n   *\n   * @category File System\n   */\n  export interface FsWatcher extends AsyncIterable<FsEvent> {\n    /** The resource id. */\n    readonly rid: number;\n    /** Stops watching the file system and closes the watcher resource. */\n    close(): void;\n    /**\n     * Stops watching the file system and closes the watcher resource.\n     *\n     * @deprecated Will be removed in the future.\n     */\n    return?(value?: any): Promise<IteratorResult<FsEvent>>;\n    [Symbol.asyncIterator](): AsyncIterableIterator<FsEvent>;\n  }\n\n  /** Watch for file system events against one or more `paths`, which can be\n   * files or directories. These paths must exist already. One user action (e.g.\n   * `touch test.file`) can generate multiple file system events. Likewise,\n   * one user action can result in multiple file paths in one event (e.g. `mv\n   * old_name.txt new_name.txt`).\n   *\n   * The recursive option is `true` by default and, for directories, will watch\n   * the specified directory and all sub directories.\n   *\n   * Note that the exact ordering of the events can vary between operating\n   * systems.\n   *\n   * ```ts\n   * const watcher = Deno.watchFs(\"/\");\n   * for await (const event of watcher) {\n   *    console.log(\">>>> event\", event);\n   *    // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n   * }\n   * ```\n   *\n   * Call `watcher.close()` to stop watching.\n   *\n   * ```ts\n   * const watcher = Deno.watchFs(\"/\");\n   *\n   * setTimeout(() => {\n   *   watcher.close();\n   * }, 5000);\n   *\n   * for await (const event of watcher) {\n   *    console.log(\">>>> event\", event);\n   * }\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function watchFs(\n    paths: string | string[],\n    options?: { recursive: boolean },\n  ): FsWatcher;\n\n  /** Options which can be used with {@linkcode Deno.run}.\n   *\n   * @category Sub Process */\n  export interface RunOptions {\n    /** Arguments to pass.\n     *\n     * _Note_: the first element needs to be a path to the executable that is\n     * being run. */\n    cmd: readonly string[] | [string | URL, ...string[]];\n    /** The current working directory that should be used when running the\n     * sub-process. */\n    cwd?: string;\n    /** Any environment variables to be set when running the sub-process. */\n    env?: Record<string, string>;\n    /** By default subprocess inherits `stdout` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   write to a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stdout?: \"inherit\" | \"piped\" | \"null\" | number;\n    /** By default subprocess inherits `stderr` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   write to a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stderr?: \"inherit\" | \"piped\" | \"null\" | number;\n    /** By default subprocess inherits `stdin` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   read from a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stdin?: \"inherit\" | \"piped\" | \"null\" | number;\n  }\n\n  /** The status resolved from the `.status()` method of a\n   * {@linkcode Deno.Process} instance.\n   *\n   * If `success` is `true`, then `code` will be `0`, but if `success` is\n   * `false`, the sub-process exit code will be set in `code`.\n   *\n   * @category Sub Process */\n  export type ProcessStatus =\n    | {\n      success: true;\n      code: 0;\n      signal?: undefined;\n    }\n    | {\n      success: false;\n      code: number;\n      signal?: number;\n    };\n\n  /**\n   * Represents an instance of a sub process that is returned from\n   * {@linkcode Deno.run} which can be used to manage the sub-process.\n   *\n   * @category Sub Process */\n  export class Process<T extends RunOptions = RunOptions> {\n    /** The resource ID of the sub-process. */\n    readonly rid: number;\n    /** The operating system's process ID for the sub-process. */\n    readonly pid: number;\n    /** A reference to the sub-processes `stdin`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stdin: T[\"stdin\"] extends \"piped\" ? Writer & Closer & {\n        writable: WritableStream<Uint8Array>;\n      }\n      : (Writer & Closer & { writable: WritableStream<Uint8Array> }) | null;\n    /** A reference to the sub-processes `stdout`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stdout: T[\"stdout\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null;\n    /** A reference to the sub-processes `stderr`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stderr: T[\"stderr\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null;\n    /** Wait for the process to exit and return its exit status.\n     *\n     * Calling this function multiple times will return the same status.\n     *\n     * The `stdin` reference to the process will be closed before waiting to\n     * avoid a deadlock.\n     *\n     * If `stdout` and/or `stderr` were set to `\"piped\"`, they must be closed\n     * manually before the process can exit.\n     *\n     * To run process to completion and collect output from both `stdout` and\n     * `stderr` use:\n     *\n     * ```ts\n     * const p = Deno.run({ cmd: [ \"echo\", \"hello world\" ], stderr: 'piped', stdout: 'piped' });\n     * const [status, stdout, stderr] = await Promise.all([\n     *   p.status(),\n     *   p.output(),\n     *   p.stderrOutput()\n     * ]);\n     * p.close();\n     * ```\n     */\n    status(): Promise<ProcessStatus>;\n    /** Buffer the stdout until EOF and return it as `Uint8Array`.\n     *\n     * You must set `stdout` to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stdout after its done. */\n    output(): Promise<Uint8Array>;\n    /** Buffer the stderr until EOF and return it as `Uint8Array`.\n     *\n     * You must set `stderr` to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stderr after its done. */\n    stderrOutput(): Promise<Uint8Array>;\n    /** Clean up resources associated with the sub-process instance. */\n    close(): void;\n    /** Send a signal to process.\n     * Default signal is `\"SIGTERM\"`.\n     *\n     * ```ts\n     * const p = Deno.run({ cmd: [ \"sleep\", \"20\" ]});\n     * p.kill(\"SIGTERM\");\n     * p.close();\n     * ```\n     */\n    kill(signo?: Signal): void;\n  }\n\n  /** Operating signals which can be listened for or sent to sub-processes. What\n   * signals and what their standard behaviors are OS dependent.\n   *\n   * @category Runtime Environment */\n  export type Signal =\n    | \"SIGABRT\"\n    | \"SIGALRM\"\n    | \"SIGBREAK\"\n    | \"SIGBUS\"\n    | \"SIGCHLD\"\n    | \"SIGCONT\"\n    | \"SIGEMT\"\n    | \"SIGFPE\"\n    | \"SIGHUP\"\n    | \"SIGILL\"\n    | \"SIGINFO\"\n    | \"SIGINT\"\n    | \"SIGIO\"\n    | \"SIGKILL\"\n    | \"SIGPIPE\"\n    | \"SIGPROF\"\n    | \"SIGPWR\"\n    | \"SIGQUIT\"\n    | \"SIGSEGV\"\n    | \"SIGSTKFLT\"\n    | \"SIGSTOP\"\n    | \"SIGSYS\"\n    | \"SIGTERM\"\n    | \"SIGTRAP\"\n    | \"SIGTSTP\"\n    | \"SIGTTIN\"\n    | \"SIGTTOU\"\n    | \"SIGURG\"\n    | \"SIGUSR1\"\n    | \"SIGUSR2\"\n    | \"SIGVTALRM\"\n    | \"SIGWINCH\"\n    | \"SIGXCPU\"\n    | \"SIGXFSZ\";\n\n  /** Registers the given function as a listener of the given signal event.\n   *\n   * ```ts\n   * Deno.addSignalListener(\n   *   \"SIGTERM\",\n   *   () => {\n   *     console.log(\"SIGTERM!\")\n   *   }\n   * );\n   * ```\n   *\n   * _Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\n   * are supported.\n   *\n   * @category Runtime Environment\n   */\n  export function addSignalListener(signal: Signal, handler: () => void): void;\n\n  /** Removes the given signal listener that has been registered with\n   * {@linkcode Deno.addSignalListener}.\n   *\n   * ```ts\n   * const listener = () => {\n   *   console.log(\"SIGTERM!\")\n   * };\n   * Deno.addSignalListener(\"SIGTERM\", listener);\n   * Deno.removeSignalListener(\"SIGTERM\", listener);\n   * ```\n   *\n   * _Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\n   * are supported.\n   *\n   * @category Runtime Environment\n   */\n  export function removeSignalListener(\n    signal: Signal,\n    handler: () => void,\n  ): void;\n\n  /** Spawns new subprocess. RunOptions must contain at a minimum the `opt.cmd`,\n   * an array of program arguments, the first of which is the binary.\n   *\n   * ```ts\n   * const p = Deno.run({\n   *   cmd: [\"curl\", \"https://example.com\"],\n   * });\n   * const status = await p.status();\n   * ```\n   *\n   * Subprocess uses same working directory as parent process unless `opt.cwd`\n   * is specified.\n   *\n   * Environmental variables from parent process can be cleared using `opt.clearEnv`.\n   * Doesn't guarantee that only `opt.env` variables are present,\n   * as the OS may set environmental variables for processes.\n   *\n   * Environmental variables for subprocess can be specified using `opt.env`\n   * mapping.\n   *\n   * `opt.uid` sets the child process’s user ID. This translates to a setuid call\n   * in the child process. Failure in the setuid call will cause the spawn to fail.\n   *\n   * `opt.gid` is similar to `opt.uid`, but sets the group ID of the child process.\n   * This has the same semantics as the uid field.\n   *\n   * By default subprocess inherits stdio of parent process. To change\n   * this this, `opt.stdin`, `opt.stdout`, and `opt.stderr` can be set\n   * independently to a resource ID (_rid_) of an open file, `\"inherit\"`,\n   * `\"piped\"`, or `\"null\"`:\n   *\n   * - _number_: the resource ID of an open file/resource. This allows you to\n   *   read or write to a file.\n   * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n   *   parent.\n   * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n   *   sub-process.\n   * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n   *   the stream to `/dev/null`.\n   *\n   * Details of the spawned process are returned as an instance of\n   * {@linkcode Deno.Process}.\n   *\n   * Requires `allow-run` permission.\n   *\n   * @tags allow-run\n   * @category Sub Process\n   */\n  export function run<T extends RunOptions = RunOptions>(opt: T): Process<T>;\n\n  /** Option which can be specified when performing {@linkcode Deno.inspect}.\n   *\n   * @category Console and Debugging */\n  export interface InspectOptions {\n    /** Stylize output with ANSI colors. Defaults to `false`. */\n    colors?: boolean;\n    /** Try to fit more than one entry of a collection on the same line.\n     * Defaults to `true`. */\n    compact?: boolean;\n    /** Traversal depth for nested objects. Defaults to `4`. */\n    depth?: number;\n    /** The maximum number of iterable entries to print. Defaults to `100`. */\n    iterableLimit?: number;\n    /** Show a Proxy's target and handler. Defaults to `false`. */\n    showProxy?: boolean;\n    /** Sort Object, Set and Map entries by key. Defaults to `false`. */\n    sorted?: boolean;\n    /** Add a trailing comma for multiline collections. Defaults to `false`. */\n    trailingComma?: boolean;\n    /*** Evaluate the result of calling getters. Defaults to `false`. */\n    getters?: boolean;\n    /** Show an object's non-enumerable properties. Defaults to `false`. */\n    showHidden?: boolean;\n    /** The maximum length of a string before it is truncated with an\n     * ellipsis. */\n    strAbbreviateSize?: number;\n  }\n\n  /** Converts the input into a string that has the same format as printed by\n   * `console.log()`.\n   *\n   * ```ts\n   * const obj = {\n   *   a: 10,\n   *   b: \"hello\",\n   * };\n   * const objAsString = Deno.inspect(obj); // { a: 10, b: \"hello\" }\n   * console.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: \"hello\" }\n   * ```\n   *\n   * A custom inspect functions can be registered on objects, via the symbol\n   * `Symbol.for(\"Deno.customInspect\")`, to control and customize the output\n   * of `inspect()` or when using `console` logging:\n   *\n   * ```ts\n   * class A {\n   *   x = 10;\n   *   y = \"hello\";\n   *   [Symbol.for(\"Deno.customInspect\")]() {\n   *     return `x=${this.x}, y=${this.y}`;\n   *   }\n   * }\n   *\n   * const inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\n   * console.log(inStringFormat);  // prints \"x=10, y=hello\"\n   * ```\n   *\n   * A depth can be specified by using the `depth` option:\n   *\n   * ```ts\n   * Deno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }\n   * ```\n   *\n   * @category Console and Debugging\n   */\n  export function inspect(value: unknown, options?: InspectOptions): string;\n\n  /** The name of a privileged feature which needs permission.\n   *\n   * @category Permissions\n   */\n  export type PermissionName =\n    | \"run\"\n    | \"read\"\n    | \"write\"\n    | \"net\"\n    | \"env\"\n    | \"sys\"\n    | \"ffi\"\n    | \"hrtime\";\n\n  /** The current status of the permission:\n   *\n   * - `\"granted\"` - the permission has been granted.\n   * - `\"denied\"` - the permission has been explicitly denied.\n   * - `\"prompt\"` - the permission has not explicitly granted nor denied.\n   *\n   * @category Permissions\n   */\n  export type PermissionState = \"granted\" | \"denied\" | \"prompt\";\n\n  /** The permission descriptor for the `allow-run` permission, which controls\n   * access to what sub-processes can be executed by Deno. The option `command`\n   * allows scoping the permission to a specific executable.\n   *\n   * **Warning, in practice, `allow-run` is effectively the same as `allow-all`\n   * in the sense that malicious code could execute any arbitrary code on the\n   * host.**\n   *\n   * @category Permissions */\n  export interface RunPermissionDescriptor {\n    name: \"run\";\n    /** The `allow-run` permission can be scoped to a specific executable,\n     * which would be relative to the start-up CWD of the Deno CLI. */\n    command?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-read` permissions, which controls\n   * access to reading resources from the local host. The option `path` allows\n   * scoping the permission to a specific path (and if the path is a directory\n   * any sub paths).\n   *\n   * Permission granted under `allow-read` only allows runtime code to attempt\n   * to read, the underlying operating system may apply additional permissions.\n   *\n   * @category Permissions */\n  export interface ReadPermissionDescriptor {\n    name: \"read\";\n    /** The `allow-read` permission can be scoped to a specific path (and if\n     * the path is a directory, any sub paths). */\n    path?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-write` permissions, which\n   * controls access to writing to resources from the local host. The option\n   * `path` allow scoping the permission to a specific path (and if the path is\n   * a directory any sub paths).\n   *\n   * Permission granted under `allow-write` only allows runtime code to attempt\n   * to write, the underlying operating system may apply additional permissions.\n   *\n   * @category Permissions */\n  export interface WritePermissionDescriptor {\n    name: \"write\";\n    /** The `allow-write` permission can be scoped to a specific path (and if\n     * the path is a directory, any sub paths). */\n    path?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-net` permissions, which controls\n   * access to opening network ports and connecting to remote hosts via the\n   * network. The option `host` allows scoping the permission for outbound\n   * connection to a specific host and port.\n   *\n   * @category Permissions */\n  export interface NetPermissionDescriptor {\n    name: \"net\";\n    /** Optional host string of the form `\"<hostname>[:<port>]\"`. Examples:\n     *\n     *      \"github.com\"\n     *      \"deno.land:8080\"\n     */\n    host?: string;\n  }\n\n  /** The permission descriptor for the `allow-env` permissions, which controls\n   * access to being able to read and write to the process environment variables\n   * as well as access other information about the environment. The option\n   * `variable` allows scoping the permission to a specific environment\n   * variable.\n   *\n   * @category Permissions */\n  export interface EnvPermissionDescriptor {\n    name: \"env\";\n    /** Optional environment variable name (e.g. `PATH`). */\n    variable?: string;\n  }\n\n  /** The permission descriptor for the `allow-sys` permissions, which controls\n   * access to sensitive host system information, which malicious code might\n   * attempt to exploit. The option `kind` allows scoping the permission to a\n   * specific piece of information.\n   *\n   * @category Permissions */\n  export interface SysPermissionDescriptor {\n    name: \"sys\";\n    /** The specific information to scope the permission to. */\n    kind?:\n      | \"loadavg\"\n      | \"hostname\"\n      | \"systemMemoryInfo\"\n      | \"networkInterfaces\"\n      | \"osRelease\"\n      | \"uid\"\n      | \"gid\";\n  }\n\n  /** The permission descriptor for the `allow-ffi` permissions, which controls\n   * access to loading _foreign_ code and interfacing with it via the\n   * [Foreign Function Interface API](https://deno.land/manual/runtime/ffi_api)\n   * available in Deno.  The option `path` allows scoping the permission to a\n   * specific path on the host.\n   *\n   * @category Permissions */\n  export interface FfiPermissionDescriptor {\n    name: \"ffi\";\n    /** Optional path on the local host to scope the permission to. */\n    path?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-hrtime` permission, which\n   * controls if the runtime code has access to high resolution time. High\n   * resolution time is consider sensitive information, because it can be used\n   * by malicious code to gain information about the host that it might\n   * otherwise have access to.\n   *\n   * @category Permissions */\n  export interface HrtimePermissionDescriptor {\n    name: \"hrtime\";\n  }\n\n  /** Permission descriptors which define a permission and can be queried,\n   * requested, or revoked.\n   *\n   * View the specifics of the individual descriptors for more information about\n   * each permission kind.\n   *\n   * @category Permissions\n   */\n  export type PermissionDescriptor =\n    | RunPermissionDescriptor\n    | ReadPermissionDescriptor\n    | WritePermissionDescriptor\n    | NetPermissionDescriptor\n    | EnvPermissionDescriptor\n    | SysPermissionDescriptor\n    | FfiPermissionDescriptor\n    | HrtimePermissionDescriptor;\n\n  /** The interface which defines what event types are supported by\n   * {@linkcode PermissionStatus} instances.\n   *\n   * @category Permissions */\n  export interface PermissionStatusEventMap {\n    \"change\": Event;\n  }\n\n  /** An {@linkcode EventTarget} returned from the {@linkcode Deno.permissions}\n   * API which can provide updates to any state changes of the permission.\n   *\n   * @category Permissions */\n  export class PermissionStatus extends EventTarget {\n    // deno-lint-ignore no-explicit-any\n    onchange: ((this: PermissionStatus, ev: Event) => any) | null;\n    readonly state: PermissionState;\n    addEventListener<K extends keyof PermissionStatusEventMap>(\n      type: K,\n      listener: (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any,\n      options?: boolean | AddEventListenerOptions,\n    ): void;\n    addEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): void;\n    removeEventListener<K extends keyof PermissionStatusEventMap>(\n      type: K,\n      listener: (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any,\n      options?: boolean | EventListenerOptions,\n    ): void;\n    removeEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ): void;\n  }\n\n  /**\n   * Deno's permission management API.\n   *\n   * The class which provides the interface for the {@linkcode Deno.permissions}\n   * global instance and is based on the web platform\n   * [Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\n   * though some proposed parts of the API which are useful in a server side\n   * runtime context were removed or abandoned in the web platform specification\n   * which is why it was chosen to locate it in the {@linkcode Deno} namespace\n   * instead.\n   *\n   * By default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\n   * send and receive text), then the CLI will prompt the user to grant\n   * permission when an un-granted permission is requested. This behavior can\n   * be changed by using the `--no-prompt` command at startup. When prompting\n   * the CLI will request the narrowest permission possible, potentially making\n   * it annoying to the user. The permissions APIs allow the code author to\n   * request a wider set of permissions at one time in order to provide a better\n   * user experience.\n   *\n   * @category Permissions */\n  export class Permissions {\n    /** Resolves to the current status of a permission.\n     *\n     * Note, if the permission is already granted, `request()` will not prompt\n     * the user again, therefore `query()` is only necessary if you are going\n     * to react differently existing permissions without wanting to modify them\n     * or prompt the user to modify them.\n     *\n     * ```ts\n     * const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n     * console.log(status.state);\n     * ```\n     */\n    query(desc: PermissionDescriptor): Promise<PermissionStatus>;\n\n    /** Revokes a permission, and resolves to the state of the permission.\n     *\n     * ```ts\n     * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * const status = await Deno.permissions.revoke({ name: \"run\" });\n     * assert(status.state !== \"granted\")\n     * ```\n     */\n    revoke(desc: PermissionDescriptor): Promise<PermissionStatus>;\n\n    /** Requests the permission, and resolves to the state of the permission.\n     *\n     * If the permission is already granted, the user will not be prompted to\n     * grant the permission again.\n     *\n     * ```ts\n     * const status = await Deno.permissions.request({ name: \"env\" });\n     * if (status.state === \"granted\") {\n     *   console.log(\"'env' permission is granted.\");\n     * } else {\n     *   console.log(\"'env' permission is denied.\");\n     * }\n     * ```\n     */\n    request(desc: PermissionDescriptor): Promise<PermissionStatus>;\n  }\n\n  /** Deno's permission management API.\n   *\n   * It is a singleton instance of the {@linkcode Permissions} object and is\n   * based on the web platform\n   * [Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\n   * though some proposed parts of the API which are useful in a server side\n   * runtime context were removed or abandoned in the web platform specification\n   * which is why it was chosen to locate it in the {@linkcode Deno} namespace\n   * instead.\n   *\n   * By default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\n   * send and receive text), then the CLI will prompt the user to grant\n   * permission when an un-granted permission is requested. This behavior can\n   * be changed by using the `--no-prompt` command at startup. When prompting\n   * the CLI will request the narrowest permission possible, potentially making\n   * it annoying to the user. The permissions APIs allow the code author to\n   * request a wider set of permissions at one time in order to provide a better\n   * user experience.\n   *\n   * Requesting already granted permissions will not prompt the user and will\n   * return that the permission was granted.\n   *\n   * ### Querying\n   *\n   * ```ts\n   * const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n   * console.log(status.state);\n   * ```\n   *\n   * ### Revoking\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * const status = await Deno.permissions.revoke({ name: \"run\" });\n   * assert(status.state !== \"granted\")\n   * ```\n   *\n   * ### Requesting\n   *\n   * ```ts\n   * const status = await Deno.permissions.request({ name: \"env\" });\n   * if (status.state === \"granted\") {\n   *   console.log(\"'env' permission is granted.\");\n   * } else {\n   *   console.log(\"'env' permission is denied.\");\n   * }\n   * ```\n   *\n   * @category Permissions\n   */\n  export const permissions: Permissions;\n\n  /** Information related to the build of the current Deno runtime.\n   *\n   * Users are discouraged from code branching based on this information, as\n   * assumptions about what is available in what build environment might change\n   * over time. Developers should specifically sniff out the features they\n   * intend to use.\n   *\n   * The intended use for the information is for logging and debugging purposes.\n   *\n   * @category Runtime Environment\n   */\n  export const build: {\n    /** The [LLVM](https://llvm.org/) target triple, which is the combination\n     * of `${arch}-${vendor}-${os}` and represent the specific build target that\n     * the current runtime was built for. */\n    target: string;\n    /** Instruction set architecture that the Deno CLI was built for. */\n    arch: \"x86_64\" | \"aarch64\";\n    /** The operating system that the Deno CLI was built for. `\"darwin\"` is\n     * also known as OSX or MacOS. */\n    os: \"darwin\" | \"linux\" | \"windows\";\n    /** The computer vendor that the Deno CLI was built for. */\n    vendor: string;\n    /** Optional environment flags that were set for this build of Deno CLI. */\n    env?: string;\n  };\n\n  /** Version information related to the current Deno CLI runtime environment.\n   *\n   * Users are discouraged from code branching based on this information, as\n   * assumptions about what is available in what build environment might change\n   * over time. Developers should specifically sniff out the features they\n   * intend to use.\n   *\n   * The intended use for the information is for logging and debugging purposes.\n   *\n   * @category Runtime Environment\n   */\n  export const version: {\n    /** Deno CLI's version. For example: `\"1.26.0\"`. */\n    deno: string;\n    /** The V8 version used by Deno. For example: `\"10.7.100.0\"`.\n     *\n     * V8 is the underlying JavaScript runtime platform that Deno is built on\n     * top of. */\n    v8: string;\n    /** The TypeScript version used by Deno. For example: `\"4.8.3\"`.\n     *\n     * A version of the TypeScript type checker and language server is built-in\n     * to the Deno CLI. */\n    typescript: string;\n  };\n\n  /** Returns the script arguments to the program.\n   *\n   * Give the following command line invocation of Deno:\n   *\n   * ```sh\n   * deno run --allow-read https://deno.land/std/examples/cat.ts /etc/passwd\n   * ```\n   *\n   * Then `Deno.args` will contain:\n   *\n   * ```\n   * [ \"/etc/passwd\" ]\n   * ```\n   *\n   * If you are looking for a structured way to parse arguments, there is the\n   * [`std/flags`](https://deno.land/std/flags) module as part of the Deno\n   * standard library.\n   *\n   * @category Runtime Environment\n   */\n  export const args: string[];\n\n  /**\n   * A symbol which can be used as a key for a custom method which will be\n   * called when `Deno.inspect()` is called, or when the object is logged to\n   * the console.\n   *\n   * @deprecated This symbol is deprecated since 1.9. Use\n   * `Symbol.for(\"Deno.customInspect\")` instead.\n   *\n   * @category Console and Debugging\n   */\n  export const customInspect: unique symbol;\n\n  /** The URL of the entrypoint module entered from the command-line. It\n   * requires read permission to the CWD.\n   *\n   * Also see {@linkcode ImportMeta} for other related information.\n   *\n   * @tags allow-read\n   * @category Runtime Environment\n   */\n  export const mainModule: string;\n\n  /** Options that can be used with {@linkcode symlink} and\n   * {@linkcode symlinkSync}.\n   *\n   * @category File System */\n  export interface SymlinkOptions {\n    /** If the symbolic link should be either a file or directory. This option\n     * only applies to Windows and is ignored on other operating systems. */\n    type: \"file\" | \"dir\";\n  }\n\n  /**\n   * Creates `newpath` as a symbolic link to `oldpath`.\n   *\n   * The `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\n   * argument is only available on Windows and ignored on other platforms.\n   *\n   * ```ts\n   * await Deno.symlink(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires full `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function symlink(\n    oldpath: string | URL,\n    newpath: string | URL,\n    options?: SymlinkOptions,\n  ): Promise<void>;\n\n  /**\n   * Creates `newpath` as a symbolic link to `oldpath`.\n   *\n   * The `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\n   * argument is only available on Windows and ignored on other platforms.\n   *\n   * ```ts\n   * Deno.symlinkSync(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires full `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function symlinkSync(\n    oldpath: string | URL,\n    newpath: string | URL,\n    options?: SymlinkOptions,\n  ): void;\n\n  /**\n   * Truncates or extends the specified file stream, to reach the specified\n   * `len`.\n   *\n   * If `len` is not specified then the entire file contents are truncated as if\n   * `len` was set to `0`.\n   *\n   * If the file previously was larger than this new length, the extra data is\n   * lost.\n   *\n   * If the file previously was shorter, it is extended, and the extended part\n   * reads as null bytes ('\\0').\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true }\n   * );\n   * await Deno.ftruncate(file.rid);\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true }\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.ftruncate(file.rid, 7);\n   * const data = new Uint8Array(32);\n   * await Deno.read(file.rid, data);\n   * console.log(new TextDecoder().decode(data)); // Hello W\n   * ```\n   *\n   * @category File System\n   */\n  export function ftruncate(rid: number, len?: number): Promise<void>;\n\n  /**\n   * Synchronously truncates or extends the specified file stream, to reach the\n   * specified `len`.\n   *\n   * If `len` is not specified then the entire file contents are truncated as if\n   * `len` was set to `0`.\n   *\n   * If the file previously was larger than this new length, the extra data is\n   * lost.\n   *\n   * If the file previously was shorter, it is extended, and the extended part\n   * reads as null bytes ('\\0').\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, truncate: true, create: true }\n   * );\n   * Deno.ftruncateSync(file.rid);\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *  \"my_file.txt\",\n   *  { read: true, write: true, create: true }\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * Deno.ftruncateSync(file.rid, 7);\n   * Deno.seekSync(file.rid, 0, Deno.SeekMode.Start);\n   * const data = new Uint8Array(32);\n   * Deno.readSync(file.rid, data);\n   * console.log(new TextDecoder().decode(data)); // Hello W\n   * ```\n   *\n   * @category File System\n   */\n  export function ftruncateSync(rid: number, len?: number): void;\n\n  /**\n   * Synchronously changes the access (`atime`) and modification (`mtime`) times\n   * of a file stream resource referenced by `rid`. Given times are either in\n   * seconds (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * const file = Deno.openSync(\"file.txt\", { create: true, write: true });\n   * Deno.futimeSync(file.rid, 1556495550, new Date());\n   * ```\n   *\n   * @category File System\n   */\n  export function futimeSync(\n    rid: number,\n    atime: number | Date,\n    mtime: number | Date,\n  ): void;\n\n  /**\n   * Changes the access (`atime`) and modification (`mtime`) times of a file\n   * stream resource referenced by `rid`. Given times are either in seconds\n   * (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * const file = await Deno.open(\"file.txt\", { create: true, write: true });\n   * await Deno.futime(file.rid, 1556495550, new Date());\n   * ```\n   *\n   * @category File System\n   */\n  export function futime(\n    rid: number,\n    atime: number | Date,\n    mtime: number | Date,\n  ): Promise<void>;\n\n  /**\n   * Returns a `Deno.FileInfo` for the given file stream.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * const file = await Deno.open(\"file.txt\", { read: true });\n   * const fileInfo = await Deno.fstat(file.rid);\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * @category File System\n   */\n  export function fstat(rid: number): Promise<FileInfo>;\n\n  /**\n   * Synchronously returns a {@linkcode Deno.FileInfo} for the given file\n   * stream.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * const file = Deno.openSync(\"file.txt\", { read: true });\n   * const fileInfo = Deno.fstatSync(file.rid);\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * @category File System\n   */\n  export function fstatSync(rid: number): FileInfo;\n\n  /**\n   * Synchronously changes the access (`atime`) and modification (`mtime`) times\n   * of a file system object referenced by `path`. Given times are either in\n   * seconds (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * Deno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function utimeSync(\n    path: string | URL,\n    atime: number | Date,\n    mtime: number | Date,\n  ): void;\n\n  /**\n   * Changes the access (`atime`) and modification (`mtime`) times of a file\n   * system object referenced by `path`. Given times are either in seconds\n   * (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * await Deno.utime(\"myfile.txt\", 1556495550, new Date());\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function utime(\n    path: string | URL,\n    atime: number | Date,\n    mtime: number | Date,\n  ): Promise<void>;\n\n  /** The event yielded from an {@linkcode HttpConn} which represents an HTTP\n   * request from a remote client.\n   *\n   * @category HTTP Server */\n  export interface RequestEvent {\n    /** The request from the client in the form of the web platform\n     * {@linkcode Request}. */\n    readonly request: Request;\n    /** The method to be used to respond to the event. The response needs to\n     * either be an instance of {@linkcode Response} or a promise that resolves\n     * with an instance of `Response`.\n     *\n     * When the response is successfully processed then the promise returned\n     * will be resolved. If there are any issues with sending the response,\n     * the promise will be rejected. */\n    respondWith(r: Response | PromiseLike<Response>): Promise<void>;\n  }\n\n  /** The async iterable that is returned from {@linkcode Deno.serveHttp} which\n   * yields up {@linkcode RequestEvent} events, representing individual\n   * requests on the HTTP server connection.\n   *\n   * @category HTTP Server */\n  export interface HttpConn extends AsyncIterable<RequestEvent> {\n    /** The resource ID associated with this connection. Generally users do not\n     * need to be aware of this identifier. */\n    readonly rid: number;\n\n    /** An alternative to the async iterable interface which provides promises\n     * which resolve with either a {@linkcode RequestEvent} when there is\n     * another request or `null` when the client has closed the connection. */\n    nextRequest(): Promise<RequestEvent | null>;\n    /** Initiate a server side closure of the connection, indicating to the\n     * client that you refuse to accept any more requests on this connection.\n     *\n     * Typically the client closes the connection, which will result in the\n     * async iterable terminating or the `nextRequest()` method returning\n     * `null`. */\n    close(): void;\n  }\n\n  /**\n   * Provides an interface to handle HTTP request and responses over TCP or TLS\n   * connections. The method returns an {@linkcode HttpConn} which yields up\n   * {@linkcode RequestEvent} events, which utilize the web platform standard\n   * {@linkcode Request} and {@linkcode Response} objects to handle the request.\n   *\n   * ```ts\n   * const conn = Deno.listen({ port: 80 });\n   * const httpConn = Deno.serveHttp(await conn.accept());\n   * const e = await httpConn.nextRequest();\n   * if (e) {\n   *   e.respondWith(new Response(\"Hello World\"));\n   * }\n   * ```\n   *\n   * Alternatively, you can also use the async iterator approach:\n   *\n   * ```ts\n   * async function handleHttp(conn: Deno.Conn) {\n   *   for await (const e of Deno.serveHttp(conn)) {\n   *     e.respondWith(new Response(\"Hello World\"));\n   *   }\n   * }\n   *\n   * for await (const conn of Deno.listen({ port: 80 })) {\n   *   handleHttp(conn);\n   * }\n   * ```\n   *\n   * If `httpConn.nextRequest()` encounters an error or returns `null` then the\n   * underlying {@linkcode HttpConn} resource is closed automatically.\n   *\n   * Also see the experimental Flash HTTP server {@linkcode Deno.serve} which\n   * provides a ground up rewrite of handling of HTTP requests and responses\n   * within the Deno CLI.\n   *\n   * Note that this function *consumes* the given connection passed to it, thus\n   * the original connection will be unusable after calling this. Additionally,\n   * you need to ensure that the connection is not being used elsewhere when\n   * calling this function in order for the connection to be consumed properly.\n   *\n   * For instance, if there is a `Promise` that is waiting for read operation on\n   * the connection to complete, it is considered that the connection is being\n   * used elsewhere. In such a case, this function will fail.\n   *\n   * @category HTTP Server\n   */\n  export function serveHttp(conn: Conn): HttpConn;\n\n  /** The object that is returned from a {@linkcode Deno.upgradeWebSocket}\n   * request.\n   *\n   * @category Web Sockets */\n  export interface WebSocketUpgrade {\n    /** The response object that represents the HTTP response to the client,\n     * which should be used to the {@linkcode RequestEvent} `.respondWith()` for\n     * the upgrade to be successful. */\n    response: Response;\n    /** The {@linkcode WebSocket} interface to communicate to the client via a\n     * web socket. */\n    socket: WebSocket;\n  }\n\n  /** Options which can be set when performing a\n   * {@linkcode Deno.upgradeWebSocket} upgrade of a {@linkcode Request}\n   *\n   * @category Web Sockets */\n  export interface UpgradeWebSocketOptions {\n    /** Sets the `.protocol` property on the client side web socket to the\n     * value provided here, which should be one of the strings specified in the\n     * `protocols` parameter when requesting the web socket. This is intended\n     * for clients and servers to specify sub-protocols to use to communicate to\n     * each other. */\n    protocol?: string;\n    /** If the client does not respond to this frame with a\n     * `pong` within the timeout specified, the connection is deemed\n     * unhealthy and is closed. The `close` and `error` event will be emitted.\n     *\n     * The default is 120 seconds. Set to `0` to disable timeouts. */\n    idleTimeout?: number;\n  }\n\n  /**\n   * Upgrade an incoming HTTP request to a WebSocket.\n   *\n   * Given a {@linkcode Request}, returns a pair of {@linkcode WebSocket} and\n   * {@linkcode Response} instances. The original request must be responded to\n   * with the returned response for the websocket upgrade to be successful.\n   *\n   * ```ts\n   * const conn = Deno.listen({ port: 80 });\n   * const httpConn = Deno.serveHttp(await conn.accept());\n   * const e = await httpConn.nextRequest();\n   * if (e) {\n   *   const { socket, response } = Deno.upgradeWebSocket(e.request);\n   *   socket.onopen = () => {\n   *     socket.send(\"Hello World!\");\n   *   };\n   *   socket.onmessage = (e) => {\n   *     console.log(e.data);\n   *     socket.close();\n   *   };\n   *   socket.onclose = () => console.log(\"WebSocket has been closed.\");\n   *   socket.onerror = (e) => console.error(\"WebSocket error:\", e);\n   *   e.respondWith(response);\n   * }\n   * ```\n   *\n   * If the request body is disturbed (read from) before the upgrade is\n   * completed, upgrading fails.\n   *\n   * This operation does not yet consume the request or open the websocket. This\n   * only happens once the returned response has been passed to `respondWith()`.\n   *\n   * @category Web Sockets\n   */\n  export function upgradeWebSocket(\n    request: Request,\n    options?: UpgradeWebSocketOptions,\n  ): WebSocketUpgrade;\n\n  /** Send a signal to process under given `pid`. The value and meaning of the\n   * `signal` to the process is operating system and process dependant.\n   * {@linkcode Signal} provides the most common signals. Default signal\n   * is `\"SIGTERM\"`.\n   *\n   * The term `kill` is adopted from the UNIX-like command line command `kill`\n   * which also signals processes.\n   *\n   * If `pid` is negative, the signal will be sent to the process group\n   * identified by `pid`. An error will be thrown if a negative `pid` is used on\n   * Windows.\n   *\n   * ```ts\n   * const p = Deno.run({\n   *   cmd: [\"sleep\", \"10000\"]\n   * });\n   *\n   * Deno.kill(p.pid, \"SIGINT\");\n   * ```\n   *\n   * Requires `allow-run` permission.\n   *\n   * @tags allow-run\n   * @category Sub Process\n   */\n  export function kill(pid: number, signo?: Signal): void;\n\n  /** The type of the resource record to resolve via DNS using\n   * {@linkcode Deno.resolveDns}.\n   *\n   * Only the listed types are supported currently.\n   *\n   * @category Network\n   */\n  export type RecordType =\n    | \"A\"\n    | \"AAAA\"\n    | \"ANAME\"\n    | \"CAA\"\n    | \"CNAME\"\n    | \"MX\"\n    | \"NAPTR\"\n    | \"NS\"\n    | \"PTR\"\n    | \"SOA\"\n    | \"SRV\"\n    | \"TXT\";\n\n  /**\n   * Options which can be set when using {@linkcode Deno.resolveDns}.\n   *\n   * @category Network */\n  export interface ResolveDnsOptions {\n    /** The name server to be used for lookups.\n     *\n     * If not specified, defaults to the system configuration. For example\n     * `/etc/resolv.conf` on Unix-like systems. */\n    nameServer?: {\n      /** The IP address of the name server. */\n      ipAddr: string;\n      /** The port number the query will be sent to.\n       *\n       * If not specified, defaults to `53`. */\n      port?: number;\n    };\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"CAA\"` record type\n   * specified, it will resolve with an array of objects with this interface.\n   *\n   * @category Network\n   */\n  export interface CAARecord {\n    /** If `true`, indicates that the corresponding property tag **must** be\n     * understood if the semantics of the CAA record are to be correctly\n     * interpreted by an issuer.\n     *\n     * Issuers **must not** issue certificates for a domain if the relevant CAA\n     * Resource Record set contains unknown property tags that have `critical`\n     * set. */\n    critical: boolean;\n    /** An string that represents the identifier of the property represented by\n     * the record. */\n    tag: string;\n    /** The value associated with the tag. */\n    value: string;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"MX\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network */\n  export interface MXRecord {\n    /** A priority value, which is a relative value compared to the other\n     * preferences of MX records for the domain. */\n    preference: number;\n    /** The server that mail should be delivered to. */\n    exchange: string;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"NAPTR\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network */\n  export interface NAPTRRecord {\n    order: number;\n    preference: number;\n    flags: string;\n    services: string;\n    regexp: string;\n    replacement: string;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"SOA\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network */\n  export interface SOARecord {\n    mname: string;\n    rname: string;\n    serial: number;\n    refresh: number;\n    retry: number;\n    expire: number;\n    minimum: number;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"SRV\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network\n   */\n  export interface SRVRecord {\n    priority: number;\n    weight: number;\n    port: number;\n    target: string;\n  }\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"A\" | \"AAAA\" | \"ANAME\" | \"CNAME\" | \"NS\" | \"PTR\",\n    options?: ResolveDnsOptions,\n  ): Promise<string[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"CAA\",\n    options?: ResolveDnsOptions,\n  ): Promise<CAARecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"MX\",\n    options?: ResolveDnsOptions,\n  ): Promise<MXRecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"NAPTR\",\n    options?: ResolveDnsOptions,\n  ): Promise<NAPTRRecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"SOA\",\n    options?: ResolveDnsOptions,\n  ): Promise<SOARecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"SRV\",\n    options?: ResolveDnsOptions,\n  ): Promise<SRVRecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"TXT\",\n    options?: ResolveDnsOptions,\n  ): Promise<string[][]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: RecordType,\n    options?: ResolveDnsOptions,\n  ): Promise<\n    | string[]\n    | CAARecord[]\n    | MXRecord[]\n    | NAPTRRecord[]\n    | SOARecord[]\n    | SRVRecord[]\n    | string[][]\n  >;\n\n  /**\n   * Make the timer of the given `id` block the event loop from finishing.\n   *\n   * @category Timers\n   */\n  export function refTimer(id: number): void;\n\n  /**\n   * Make the timer of the given `id` not block the event loop from finishing.\n   *\n   * @category Timers\n   */\n  export function unrefTimer(id: number): void;\n\n  /**\n   * Returns the user id of the process on POSIX platforms. Returns null on Windows.\n   *\n   * ```ts\n   * console.log(Deno.uid());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function uid(): number | null;\n\n  /**\n   * Returns the group id of the process on POSIX platforms. Returns null on windows.\n   *\n   * ```ts\n   * console.log(Deno.gid());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function gid(): number | null;\n}\n","lib.deno.shared_globals.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n// Documentation partially adapted from [MDN](https://developer.mozilla.org/),\n// by Mozilla Contributors, which is licensed under CC-BY-SA 2.5.\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"deno.console\" />\n/// <reference lib=\"deno.url\" />\n/// <reference lib=\"deno.web\" />\n/// <reference lib=\"deno.fetch\" />\n/// <reference lib=\"deno.websocket\" />\n/// <reference lib=\"deno.crypto\" />\n/// <reference lib=\"deno.broadcast_channel\" />\n\n/** @category WebAssembly */\ndeclare namespace WebAssembly {\n  /**\n   * The `WebAssembly.CompileError` object indicates an error during WebAssembly decoding or validation.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError)\n   *\n   * @category WebAssembly\n   */\n  export class CompileError extends Error {\n    /** Creates a new `WebAssembly.CompileError` object. */\n    constructor(message?: string, options?: ErrorOptions);\n  }\n\n  /**\n   * A `WebAssembly.Global` object represents a global variable instance, accessible from\n   * both JavaScript and importable/exportable across one or more `WebAssembly.Module`\n   * instances. This allows dynamic linking of multiple modules.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global)\n   *\n   * @category WebAssembly\n   */\n  export class Global {\n    /** Creates a new `Global` object. */\n    constructor(descriptor: GlobalDescriptor, v?: any);\n\n    /**\n     * The value contained inside the global variable — this can be used to directly set\n     * and get the global's value.\n     */\n    value: any;\n\n    /** Old-style method that returns the value contained inside the global variable. */\n    valueOf(): any;\n  }\n\n  /**\n   * A `WebAssembly.Instance` object is a stateful, executable instance of a `WebAssembly.Module`.\n   * Instance objects contain all the Exported WebAssembly functions that allow calling into\n   * WebAssembly code from JavaScript.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance)\n   *\n   * @category WebAssembly\n   */\n  export class Instance {\n    /** Creates a new Instance object. */\n    constructor(module: Module, importObject?: Imports);\n\n    /**\n     * Returns an object containing as its members all the functions exported from the\n     * WebAssembly module instance, to allow them to be accessed and used by JavaScript.\n     * Read-only.\n     */\n    readonly exports: Exports;\n  }\n\n  /**\n   * The `WebAssembly.LinkError` object indicates an error during module instantiation\n   * (besides traps from the start function).\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError)\n   *\n   * @category WebAssembly\n   */\n  export class LinkError extends Error {\n    /** Creates a new WebAssembly.LinkError object. */\n    constructor(message?: string, options?: ErrorOptions);\n  }\n\n  /**\n   * The `WebAssembly.Memory` object is a resizable `ArrayBuffer` or `SharedArrayBuffer` that\n   * holds the raw bytes of memory accessed by a WebAssembly Instance.\n   *\n   * A memory created by JavaScript or in WebAssembly code will be accessible and mutable\n   * from both JavaScript and WebAssembly.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)\n   *\n   * @category WebAssembly\n   */\n  export class Memory {\n    /** Creates a new `Memory` object. */\n    constructor(descriptor: MemoryDescriptor);\n\n    /** An accessor property that returns the buffer contained in the memory. */\n    readonly buffer: ArrayBuffer | SharedArrayBuffer;\n\n    /**\n     * Increases the size of the memory instance by a specified number of WebAssembly\n     * pages (each one is 64KB in size).\n     */\n    grow(delta: number): number;\n  }\n\n  /**\n   * A `WebAssembly.Module` object contains stateless WebAssembly code that has already been compiled\n   * by the browser — this can be efficiently shared with Workers, and instantiated multiple times.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module)\n   *\n   * @category WebAssembly\n   */\n  export class Module {\n    /** Creates a new `Module` object. */\n    constructor(bytes: BufferSource);\n\n    /**\n     * Given a `Module` and string, returns a copy of the contents of all custom sections in the\n     * module with the given string name.\n     */\n    static customSections(\n      moduleObject: Module,\n      sectionName: string,\n    ): ArrayBuffer[];\n\n    /** Given a `Module`, returns an array containing descriptions of all the declared exports. */\n    static exports(moduleObject: Module): ModuleExportDescriptor[];\n\n    /** Given a `Module`, returns an array containing descriptions of all the declared imports. */\n    static imports(moduleObject: Module): ModuleImportDescriptor[];\n  }\n\n  /**\n   * The `WebAssembly.RuntimeError` object is the error type that is thrown whenever WebAssembly\n   * specifies a trap.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError)\n   *\n   * @category WebAssembly\n   */\n  export class RuntimeError extends Error {\n    /** Creates a new `WebAssembly.RuntimeError` object. */\n    constructor(message?: string, options?: ErrorOptions);\n  }\n\n  /**\n   * The `WebAssembly.Table()` object is a JavaScript wrapper object — an array-like structure\n   * representing a WebAssembly Table, which stores function references. A table created by\n   * JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript\n   * and WebAssembly.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table)\n   *\n   * @category WebAssembly\n   */\n  export class Table {\n    /** Creates a new `Table` object. */\n    constructor(descriptor: TableDescriptor);\n\n    /** Returns the length of the table, i.e. the number of elements. */\n    readonly length: number;\n\n    /** Accessor function — gets the element stored at a given index. */\n    get(index: number): Function | null;\n\n    /** Increases the size of the `Table` instance by a specified number of elements. */\n    grow(delta: number): number;\n\n    /** Sets an element stored at a given index to a given value. */\n    set(index: number, value: Function | null): void;\n  }\n\n  /** The `GlobalDescriptor` describes the options you can pass to\n   * `new WebAssembly.Global()`.\n   *\n   * @category WebAssembly\n   */\n  export interface GlobalDescriptor {\n    mutable?: boolean;\n    value: ValueType;\n  }\n\n  /** The `MemoryDescriptor` describes the options you can pass to\n   * `new WebAssembly.Memory()`.\n   *\n   * @category WebAssembly\n   */\n  export interface MemoryDescriptor {\n    initial: number;\n    maximum?: number;\n    shared?: boolean;\n  }\n\n  /** A `ModuleExportDescriptor` is the description of a declared export in a\n   * `WebAssembly.Module`.\n   *\n   * @category WebAssembly\n   */\n  export interface ModuleExportDescriptor {\n    kind: ImportExportKind;\n    name: string;\n  }\n\n  /** A `ModuleImportDescriptor` is the description of a declared import in a\n   * `WebAssembly.Module`.\n   *\n   * @category WebAssembly\n   */\n  export interface ModuleImportDescriptor {\n    kind: ImportExportKind;\n    module: string;\n    name: string;\n  }\n\n  /** The `TableDescriptor` describes the options you can pass to\n   * `new WebAssembly.Table()`.\n   *\n   * @category WebAssembly\n   */\n  export interface TableDescriptor {\n    element: TableKind;\n    initial: number;\n    maximum?: number;\n  }\n\n  /** The value returned from `WebAssembly.instantiate`.\n   *\n   * @category WebAssembly\n   */\n  export interface WebAssemblyInstantiatedSource {\n    /* A `WebAssembly.Instance` object that contains all the exported WebAssembly functions. */\n    instance: Instance;\n\n    /**\n     * A `WebAssembly.Module` object representing the compiled WebAssembly module.\n     * This `Module` can be instantiated again, or shared via postMessage().\n     */\n    module: Module;\n  }\n\n  /** @category WebAssembly */\n  export type ImportExportKind = \"function\" | \"global\" | \"memory\" | \"table\";\n  /** @category WebAssembly */\n  export type TableKind = \"anyfunc\";\n  /** @category WebAssembly */\n  export type ValueType = \"f32\" | \"f64\" | \"i32\" | \"i64\";\n  /** @category WebAssembly */\n  export type ExportValue = Function | Global | Memory | Table;\n  /** @category WebAssembly */\n  export type Exports = Record<string, ExportValue>;\n  /** @category WebAssembly */\n  export type ImportValue = ExportValue | number;\n  /** @category WebAssembly */\n  export type ModuleImports = Record<string, ImportValue>;\n  /** @category WebAssembly */\n  export type Imports = Record<string, ModuleImports>;\n\n  /**\n   * The `WebAssembly.compile()` function compiles WebAssembly binary code into a\n   * `WebAssembly.Module` object. This function is useful if it is necessary to compile\n   * a module before it can be instantiated (otherwise, the `WebAssembly.instantiate()`\n   * function should be used).\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)\n   *\n   * @category WebAssembly\n   */\n  export function compile(bytes: BufferSource): Promise<Module>;\n\n  /**\n   * The `WebAssembly.compileStreaming()` function compiles a `WebAssembly.Module`\n   * directly from a streamed underlying source. This function is useful if it is\n   * necessary to a compile a module before it can be instantiated (otherwise, the\n   * `WebAssembly.instantiateStreaming()` function should be used).\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming)\n   *\n   * @category WebAssembly\n   */\n  export function compileStreaming(\n    source: Response | Promise<Response>,\n  ): Promise<Module>;\n\n  /**\n   * The WebAssembly.instantiate() function allows you to compile and instantiate\n   * WebAssembly code.\n   *\n   * This overload takes the WebAssembly binary code, in the form of a typed\n   * array or ArrayBuffer, and performs both compilation and instantiation in one step.\n   * The returned Promise resolves to both a compiled WebAssembly.Module and its first\n   * WebAssembly.Instance.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n   *\n   * @category WebAssembly\n   */\n  export function instantiate(\n    bytes: BufferSource,\n    importObject?: Imports,\n  ): Promise<WebAssemblyInstantiatedSource>;\n\n  /**\n   * The WebAssembly.instantiate() function allows you to compile and instantiate\n   * WebAssembly code.\n   *\n   * This overload takes an already-compiled WebAssembly.Module and returns\n   * a Promise that resolves to an Instance of that Module. This overload is useful\n   * if the Module has already been compiled.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n   *\n   * @category WebAssembly\n   */\n  export function instantiate(\n    moduleObject: Module,\n    importObject?: Imports,\n  ): Promise<Instance>;\n\n  /**\n   * The `WebAssembly.instantiateStreaming()` function compiles and instantiates a\n   * WebAssembly module directly from a streamed underlying source. This is the most\n   * efficient, optimized way to load wasm code.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)\n   *\n   * @category WebAssembly\n   */\n  export function instantiateStreaming(\n    response: Response | PromiseLike<Response>,\n    importObject?: Imports,\n  ): Promise<WebAssemblyInstantiatedSource>;\n\n  /**\n   * The `WebAssembly.validate()` function validates a given typed array of\n   * WebAssembly binary code, returning whether the bytes form a valid wasm\n   * module (`true`) or not (`false`).\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate)\n   *\n   * @category WebAssembly\n   */\n  export function validate(bytes: BufferSource): boolean;\n}\n\n/** Sets a timer which executes a function once after the timer expires. Returns\n * an id which may be used to cancel the timeout.\n *\n * ```ts\n * setTimeout(() => { console.log('hello'); }, 500);\n * ```\n *\n * @category Timers\n */\ndeclare function setTimeout(\n  /** callback function to execute when timer expires */\n  cb: (...args: any[]) => void,\n  /** delay in ms */\n  delay?: number,\n  /** arguments passed to callback function */\n  ...args: any[]\n): number;\n\n/** Repeatedly calls a function , with a fixed time delay between each call.\n *\n * ```ts\n * // Outputs 'hello' to the console every 500ms\n * setInterval(() => { console.log('hello'); }, 500);\n * ```\n *\n * @category Timers\n */\ndeclare function setInterval(\n  /** callback function to execute when timer expires */\n  cb: (...args: any[]) => void,\n  /** delay in ms */\n  delay?: number,\n  /** arguments passed to callback function */\n  ...args: any[]\n): number;\n\n/** Cancels a timed, repeating action which was previously started by a call\n * to `setInterval()`\n *\n * ```ts\n * const id = setInterval(() => {console.log('hello');}, 500);\n * // ...\n * clearInterval(id);\n * ```\n *\n * @category Timers\n */\ndeclare function clearInterval(id?: number): void;\n\n/** Cancels a scheduled action initiated by `setTimeout()`\n *\n * ```ts\n * const id = setTimeout(() => {console.log('hello');}, 500);\n * // ...\n * clearTimeout(id);\n * ```\n *\n * @category Timers\n */\ndeclare function clearTimeout(id?: number): void;\n\n/** @category Scheduling */\ninterface VoidFunction {\n  (): void;\n}\n\n/** A microtask is a short function which is executed after the function or\n * module which created it exits and only if the JavaScript execution stack is\n * empty, but before returning control to the event loop being used to drive the\n * script's execution environment. This event loop may be either the main event\n * loop or the event loop driving a web worker.\n *\n * ```ts\n * queueMicrotask(() => { console.log('This event loop stack is complete'); });\n * ```\n *\n * @category Scheduling\n */\ndeclare function queueMicrotask(func: VoidFunction): void;\n\n/** Dispatches an event in the global scope, synchronously invoking any\n * registered event listeners for this event in the appropriate order. Returns\n * false if event is cancelable and at least one of the event handlers which\n * handled this event called Event.preventDefault(). Otherwise it returns true.\n *\n * ```ts\n * dispatchEvent(new Event('unload'));\n * ```\n *\n * @category DOM Events\n */\ndeclare function dispatchEvent(event: Event): boolean;\n\n/** @category DOM APIs */\ninterface DOMStringList {\n  /** Returns the number of strings in strings. */\n  readonly length: number;\n  /** Returns true if strings contains string, and false otherwise. */\n  contains(string: string): boolean;\n  /** Returns the string with index index from strings. */\n  item(index: number): string | null;\n  [index: number]: string;\n}\n\n/** @category Typed Arrays */\ntype BufferSource = ArrayBufferView | ArrayBuffer;\n\n/** @category Console and Debugging */\ndeclare var console: Console;\n\n/** @category DOM Events */\ninterface ErrorEventInit extends EventInit {\n  message?: string;\n  filename?: string;\n  lineno?: number;\n  colno?: number;\n  error?: any;\n}\n\n/** @category DOM Events */\ndeclare class ErrorEvent extends Event {\n  readonly message: string;\n  readonly filename: string;\n  readonly lineno: number;\n  readonly colno: number;\n  readonly error: any;\n  constructor(type: string, eventInitDict?: ErrorEventInit);\n}\n\n/** @category Observability */\ninterface PromiseRejectionEventInit extends EventInit {\n  promise: Promise<any>;\n  reason?: any;\n}\n\n/** @category Observability */\ndeclare class PromiseRejectionEvent extends Event {\n  readonly promise: Promise<any>;\n  readonly reason: any;\n  constructor(type: string, eventInitDict?: PromiseRejectionEventInit);\n}\n\n/** @category Web Workers */\ninterface AbstractWorkerEventMap {\n  \"error\": ErrorEvent;\n}\n\n/** @category Web Workers */\ninterface WorkerEventMap extends AbstractWorkerEventMap {\n  \"message\": MessageEvent;\n  \"messageerror\": MessageEvent;\n}\n\n/** @category Web Workers */\ninterface WorkerOptions {\n  type?: \"classic\" | \"module\";\n  name?: string;\n}\n\n/** @category Web Workers */\ndeclare class Worker extends EventTarget {\n  onerror?: (e: ErrorEvent) => void;\n  onmessage?: (e: MessageEvent) => void;\n  onmessageerror?: (e: MessageEvent) => void;\n  constructor(\n    specifier: string | URL,\n    options?: WorkerOptions,\n  );\n  postMessage(message: any, transfer: Transferable[]): void;\n  postMessage(message: any, options?: StructuredSerializeOptions): void;\n  addEventListener<K extends keyof WorkerEventMap>(\n    type: K,\n    listener: (this: Worker, ev: WorkerEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  removeEventListener<K extends keyof WorkerEventMap>(\n    type: K,\n    listener: (this: Worker, ev: WorkerEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  terminate(): void;\n}\n\n/** @category Performance */\ndeclare type PerformanceEntryList = PerformanceEntry[];\n\n/** @category Performance */\ndeclare class Performance extends EventTarget {\n  /** Returns a timestamp representing the start of the performance measurement. */\n  readonly timeOrigin: number;\n  constructor();\n\n  /** Removes the stored timestamp with the associated name. */\n  clearMarks(markName?: string): void;\n\n  /** Removes stored timestamp with the associated name. */\n  clearMeasures(measureName?: string): void;\n\n  getEntries(): PerformanceEntryList;\n  getEntriesByName(name: string, type?: string): PerformanceEntryList;\n  getEntriesByType(type: string): PerformanceEntryList;\n\n  /** Stores a timestamp with the associated name (a \"mark\"). */\n  mark(markName: string, options?: PerformanceMarkOptions): PerformanceMark;\n\n  /** Stores the `DOMHighResTimeStamp` duration between two marks along with the\n   * associated name (a \"measure\"). */\n  measure(\n    measureName: string,\n    options?: PerformanceMeasureOptions,\n  ): PerformanceMeasure;\n  /** Stores the `DOMHighResTimeStamp` duration between two marks along with the\n   * associated name (a \"measure\"). */\n  measure(\n    measureName: string,\n    startMark?: string,\n    endMark?: string,\n  ): PerformanceMeasure;\n\n  /** Returns a current time from Deno's start in milliseconds.\n   *\n   * Use the permission flag `--allow-hrtime` return a precise value.\n   *\n   * ```ts\n   * const t = performance.now();\n   * console.log(`${t} ms since start!`);\n   * ```\n   *\n   * @tags allow-hrtime\n   */\n  now(): number;\n\n  /** Returns a JSON representation of the performance object. */\n  toJSON(): any;\n}\n\n/** @category Performance */\ndeclare var performance: Performance;\n\n/** @category Performance */\ndeclare interface PerformanceMarkOptions {\n  /** Metadata to be included in the mark. */\n  detail?: any;\n\n  /** Timestamp to be used as the mark time. */\n  startTime?: number;\n}\n\ndeclare interface PerformanceMeasureOptions {\n  /** Metadata to be included in the measure. */\n  detail?: any;\n\n  /** Timestamp to be used as the start time or string to be used as start\n   * mark. */\n  start?: string | number;\n\n  /** Duration between the start and end times. */\n  duration?: number;\n\n  /** Timestamp to be used as the end time or string to be used as end mark. */\n  end?: string | number;\n}\n\n/** Encapsulates a single performance metric that is part of the performance\n * timeline. A performance entry can be directly created by making a performance\n * mark or measure (for example by calling the `.mark()` method) at an explicit\n * point in an application.\n *\n * @category Performance\n */\ndeclare class PerformanceEntry {\n  readonly duration: number;\n  readonly entryType: string;\n  readonly name: string;\n  readonly startTime: number;\n  toJSON(): any;\n}\n\n/** `PerformanceMark` is an abstract interface for `PerformanceEntry` objects\n * with an entryType of `\"mark\"`. Entries of this type are created by calling\n * `performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the\n * performance timeline.\n *\n * @category Performance\n */\ndeclare class PerformanceMark extends PerformanceEntry {\n  readonly detail: any;\n  readonly entryType: \"mark\";\n  constructor(name: string, options?: PerformanceMarkOptions);\n}\n\n/** `PerformanceMeasure` is an abstract interface for `PerformanceEntry` objects\n * with an entryType of `\"measure\"`. Entries of this type are created by calling\n * `performance.measure()` to add a named `DOMHighResTimeStamp` (the measure)\n * between two marks to the performance timeline.\n *\n * @category Performance\n */\ndeclare class PerformanceMeasure extends PerformanceEntry {\n  readonly detail: any;\n  readonly entryType: \"measure\";\n}\n\n/** @category DOM Events */\ndeclare interface CustomEventInit<T = any> extends EventInit {\n  detail?: T;\n}\n\n/** @category DOM Events */\ndeclare class CustomEvent<T = any> extends Event {\n  constructor(typeArg: string, eventInitDict?: CustomEventInit<T>);\n  /** Returns any custom data event was created with. Typically used for\n   * synthetic events. */\n  readonly detail: T;\n}\n\n/** @category DOM APIs */\ninterface ErrorConstructor {\n  /** See https://v8.dev/docs/stack-trace-api#stack-trace-collection-for-custom-exceptions. */\n  captureStackTrace(error: Object, constructor?: Function): void;\n  // TODO(nayeemrmn): Support `Error.prepareStackTrace()`. We currently use this\n  // internally in a way that makes it unavailable for users.\n}\n","lib.deno.unstable.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"deno.ns\" />\n\ndeclare namespace Deno {\n  export {}; // stop default export type behavior\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Retrieve the process umask.  If `mask` is provided, sets the process umask.\n   * This call always returns what the umask was before the call.\n   *\n   * ```ts\n   * console.log(Deno.umask());  // e.g. 18 (0o022)\n   * const prevUmaskValue = Deno.umask(0o077);  // e.g. 18 (0o022)\n   * console.log(Deno.umask());  // e.g. 63 (0o077)\n   * ```\n   *\n   * This API is under consideration to determine if permissions are required to\n   * call it.\n   *\n   * *Note*: This API is not implemented on Windows\n   *\n   * @category File System\n   */\n  export function umask(mask?: number): number;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * All plain number types for interfacing with foreign functions.\n   *\n   * @category FFI\n   */\n  type NativeNumberType =\n    | \"u8\"\n    | \"i8\"\n    | \"u16\"\n    | \"i16\"\n    | \"u32\"\n    | \"i32\"\n    | \"f32\"\n    | \"f64\";\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * All BigInt number types for interfacing with foreign functions.\n   *\n   * @category FFI\n   */\n  type NativeBigIntType =\n    | \"u64\"\n    | \"i64\"\n    | \"usize\"\n    | \"isize\";\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The native boolean type for interfacing to foreign functions.\n   *\n   * @category FFI\n   */\n  type NativeBooleanType = \"bool\";\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The native pointer type for interfacing to foreign functions.\n   *\n   * @category FFI\n   */\n  type NativePointerType = \"pointer\";\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The native buffer type for interfacing to foreign functions.\n   *\n   * @category FFI\n   */\n  type NativeBufferType = \"buffer\";\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The native function type for interfacing with foreign functions.\n   *\n   * @category FFI\n   */\n  type NativeFunctionType = \"function\";\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The native void type for interfacing with foreign functions.\n   *\n   * @category FFI\n   */\n  type NativeVoidType = \"void\";\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * All supported types for interfacing with foreign functions.\n   *\n   * @category FFI\n   */\n  export type NativeType =\n    | NativeNumberType\n    | NativeBigIntType\n    | NativeBooleanType\n    | NativePointerType\n    | NativeBufferType\n    | NativeFunctionType;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category FFI\n   */\n  export type NativeResultType = NativeType | NativeVoidType;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A utility type conversion for foreign symbol parameters and unsafe callback\n   * return types.\n   *\n   * @category FFI\n   */\n  type ToNativeTypeMap =\n    & Record<NativeNumberType, number>\n    & Record<NativeBigIntType, PointerValue>\n    & Record<NativeBooleanType, boolean>\n    & Record<NativePointerType, PointerValue | null>\n    & Record<NativeFunctionType, PointerValue | null>\n    & Record<NativeBufferType, BufferSource | null>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Type conversion for foreign symbol parameters and unsafe callback return\n   * types.\n   *\n   * @category FFI\n   */\n  type ToNativeType<T extends NativeType = NativeType> = ToNativeTypeMap[T];\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A utility type for conversion for unsafe callback return types.\n   *\n   * @category FFI\n   */\n  type ToNativeResultTypeMap = ToNativeTypeMap & Record<NativeVoidType, void>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Type conversion for unsafe callback return types.\n   *\n   * @category FFI\n   */\n  type ToNativeResultType<T extends NativeResultType = NativeResultType> =\n    ToNativeResultTypeMap[T];\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A utility type for conversion of parameter types of foreign functions.\n   *\n   * @category FFI\n   */\n  type ToNativeParameterTypes<T extends readonly NativeType[]> =\n    //\n    [(T[number])[]] extends [T] ? ToNativeType<T[number]>[]\n      : [readonly (T[number])[]] extends [T]\n        ? readonly ToNativeType<T[number]>[]\n      : T extends readonly [...NativeType[]] ? {\n          [K in keyof T]: ToNativeType<T[K]>;\n        }\n      : never;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A utility type for conversion of foreign symbol return types and unsafe\n   * callback parameters.\n   *\n   * @category FFI\n   */\n  type FromNativeTypeMap =\n    & Record<NativeNumberType, number>\n    & Record<NativeBigIntType, PointerValue>\n    & Record<NativeBooleanType, boolean>\n    & Record<NativePointerType, PointerValue>\n    & Record<NativeBufferType, PointerValue>\n    & Record<NativeFunctionType, PointerValue>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Type conversion for foreign symbol return types and unsafe callback\n   * parameters.\n   *\n   * @category FFI\n   */\n  type FromNativeType<T extends NativeType = NativeType> = FromNativeTypeMap[T];\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A utility type for conversion for foreign symbol return types.\n   *\n   * @category FFI\n   */\n  type FromNativeResultTypeMap =\n    & FromNativeTypeMap\n    & Record<NativeVoidType, void>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Type conversion for foreign symbol return types.\n   *\n   * @category FFI\n   */\n  type FromNativeResultType<T extends NativeResultType = NativeResultType> =\n    FromNativeResultTypeMap[T];\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category FFI\n   */\n  type FromNativeParameterTypes<\n    T extends readonly NativeType[],\n  > =\n    //\n    [(T[number])[]] extends [T] ? FromNativeType<T[number]>[]\n      : [readonly (T[number])[]] extends [T]\n        ? readonly FromNativeType<T[number]>[]\n      : T extends readonly [...NativeType[]] ? {\n          [K in keyof T]: FromNativeType<T[K]>;\n        }\n      : never;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The interface for a foreign function as defined by its parameter and result\n   * types.\n   *\n   * @category FFI\n   */\n  export interface ForeignFunction<\n    Parameters extends readonly NativeType[] = readonly NativeType[],\n    Result extends NativeResultType = NativeResultType,\n    NonBlocking extends boolean = boolean,\n  > {\n    /** Name of the symbol.\n     *\n     * Defaults to the key name in symbols object. */\n    name?: string;\n    /** The parameters of the foreign function. */\n    parameters: Parameters;\n    /** The result (return value) of the foreign function. */\n    result: Result;\n    /** When `true`, function calls will run on a dedicated blocking thread and\n     * will return a `Promise` resolving to the `result`. */\n    nonblocking?: NonBlocking;\n    /** When `true`, function calls can safely callback into JavaScript or\n     * trigger a garbage collection event.\n     *\n     * Default is `false`. */\n    callback?: boolean;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category FFI\n   */\n  export interface ForeignStatic<Type extends NativeType = NativeType> {\n    /** Name of the symbol, defaults to the key name in symbols object. */\n    name?: string;\n    /** The type of the foreign static value. */\n    type: Type;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A foreign library interface descriptor.\n   *\n   * @category FFI\n   */\n  export interface ForeignLibraryInterface {\n    [name: string]: ForeignFunction | ForeignStatic;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A utility type that infers a foreign symbol.\n   *\n   * @category FFI\n   */\n  type StaticForeignSymbol<T extends ForeignFunction | ForeignStatic> =\n    T extends ForeignFunction ? FromForeignFunction<T>\n      : T extends ForeignStatic ? FromNativeType<T[\"type\"]>\n      : never;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   *  @category FFI\n   */\n  type FromForeignFunction<T extends ForeignFunction> = T[\"parameters\"] extends\n    readonly [] ? () => StaticForeignSymbolReturnType<T>\n    : (\n      ...args: ToNativeParameterTypes<T[\"parameters\"]>\n    ) => StaticForeignSymbolReturnType<T>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category FFI\n   */\n  type StaticForeignSymbolReturnType<T extends ForeignFunction> =\n    ConditionalAsync<T[\"nonblocking\"], FromNativeResultType<T[\"result\"]>>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category FFI\n   */\n  type ConditionalAsync<IsAsync extends boolean | undefined, T> =\n    IsAsync extends true ? Promise<T> : T;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A utility type that infers a foreign library interface.\n   *\n   * @category FFI\n   */\n  type StaticForeignLibraryInterface<T extends ForeignLibraryInterface> = {\n    [K in keyof T]: StaticForeignSymbol<T[K]>;\n  };\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Pointer type depends on the architecture and actual pointer value.\n   *\n   * On a 32 bit host system all pointer values are plain numbers. On a 64 bit\n   * host system pointer values are represented as numbers if the value is below\n   * `Number.MAX_SAFE_INTEGER`, otherwise they are provided as bigints.\n   *\n   * @category FFI\n   */\n  export type PointerValue = number | bigint;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * An unsafe pointer to a memory location for passing and returning pointers\n   * to and from the FFI.\n   *\n   * @category FFI\n   */\n  export class UnsafePointer {\n    /** Return the direct memory pointer to the typed array in memory. */\n    static of(value: Deno.UnsafeCallback | BufferSource): PointerValue;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * An unsafe pointer view to a memory location as specified by the `pointer`\n   * value. The `UnsafePointerView` API follows the standard built in interface\n   * {@linkcode DataView} for accessing the underlying types at an memory\n   * location (numbers, strings and raw bytes).\n   *\n   * @category FFI\n   */\n  export class UnsafePointerView {\n    constructor(pointer: PointerValue);\n\n    pointer: PointerValue;\n\n    /** Gets a boolean at the specified byte offset from the pointer. */\n    getBool(offset?: number): boolean;\n    /** Gets an unsigned 8-bit integer at the specified byte offset from the\n     * pointer. */\n    getUint8(offset?: number): number;\n    /** Gets a signed 8-bit integer at the specified byte offset from the\n     * pointer. */\n    getInt8(offset?: number): number;\n    /** Gets an unsigned 16-bit integer at the specified byte offset from the\n     * pointer. */\n    getUint16(offset?: number): number;\n    /** Gets a signed 16-bit integer at the specified byte offset from the\n     * pointer. */\n    getInt16(offset?: number): number;\n    /** Gets an unsigned 32-bit integer at the specified byte offset from the\n     * pointer. */\n    getUint32(offset?: number): number;\n    /** Gets a signed 32-bit integer at the specified byte offset from the\n     * pointer. */\n    getInt32(offset?: number): number;\n    /** Gets an unsigned 64-bit integer at the specified byte offset from the\n     * pointer. */\n    getBigUint64(offset?: number): PointerValue;\n    /** Gets a signed 64-bit integer at the specified byte offset from the\n     * pointer. */\n    getBigInt64(offset?: number): PointerValue;\n    /** Gets a signed 32-bit float at the specified byte offset from the\n     * pointer. */\n    getFloat32(offset?: number): number;\n    /** Gets a signed 64-bit float at the specified byte offset from the\n     * pointer. */\n    getFloat64(offset?: number): number;\n    /** Gets a C string (`null` terminated string) at the specified byte offset\n     * from the pointer. */\n    getCString(offset?: number): string;\n    /** Gets a C string (`null` terminated string) at the specified byte offset\n     * from the specified pointer. */\n    static getCString(pointer: PointerValue, offset?: number): string;\n    /** Gets an `ArrayBuffer` of length `byteLength` at the specified byte\n     * offset from the pointer. */\n    getArrayBuffer(byteLength: number, offset?: number): ArrayBuffer;\n    /** Gets an `ArrayBuffer` of length `byteLength` at the specified byte\n     * offset from the specified pointer. */\n    static getArrayBuffer(\n      pointer: PointerValue,\n      byteLength: number,\n      offset?: number,\n    ): ArrayBuffer;\n    /** Copies the memory of the pointer into a typed array.\n     *\n     * Length is determined from the typed array's `byteLength`.\n     *\n     * Also takes optional byte offset from the pointer. */\n    copyInto(destination: BufferSource, offset?: number): void;\n    /** Copies the memory of the specified pointer into a typed array.\n     *\n     * Length is determined from the typed array's `byteLength`.\n     *\n     * Also takes optional byte offset from the pointer. */\n    static copyInto(\n      pointer: PointerValue,\n      destination: BufferSource,\n      offset?: number,\n    ): void;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * An unsafe pointer to a function, for calling functions that are not present\n   * as symbols.\n   *\n   * @category FFI\n   */\n  export class UnsafeFnPointer<Fn extends ForeignFunction> {\n    /** The pointer to the function. */\n    pointer: PointerValue;\n    /** The definition of the function. */\n    definition: Fn;\n\n    constructor(pointer: PointerValue, definition: Const<Fn>);\n\n    /** Call the foreign function. */\n    call: FromForeignFunction<Fn>;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Definition of a unsafe callback function.\n   *\n   * @category FFI\n   */\n  export interface UnsafeCallbackDefinition<\n    Parameters extends readonly NativeType[] = readonly NativeType[],\n    Result extends NativeResultType = NativeResultType,\n  > {\n    /** The parameters of the callbacks. */\n    parameters: Parameters;\n    /** The current result of the callback. */\n    result: Result;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * An unsafe callback function.\n   *\n   * @category FFI\n   */\n  type UnsafeCallbackFunction<\n    Parameters extends readonly NativeType[] = readonly NativeType[],\n    Result extends NativeResultType = NativeResultType,\n  > = Parameters extends readonly [] ? () => ToNativeResultType<Result> : (\n    ...args: FromNativeParameterTypes<Parameters>\n  ) => ToNativeResultType<Result>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * An unsafe function pointer for passing JavaScript functions as C function\n   * pointers to foreign function calls.\n   *\n   * The function pointer remains valid until the `close()` method is called.\n   *\n   * The callback can be explicitly referenced via `ref()` and dereferenced via\n   * `deref()` to stop Deno's process from exiting.\n   *\n   * @category FFI\n   */\n  export class UnsafeCallback<\n    Definition extends UnsafeCallbackDefinition = UnsafeCallbackDefinition,\n  > {\n    constructor(\n      definition: Const<Definition>,\n      callback: UnsafeCallbackFunction<\n        Definition[\"parameters\"],\n        Definition[\"result\"]\n      >,\n    );\n\n    /** The pointer to the unsafe callback. */\n    pointer: PointerValue;\n    /** The definition of the unsafe callback. */\n    definition: Definition;\n    /** The callback function. */\n    callback: UnsafeCallbackFunction<\n      Definition[\"parameters\"],\n      Definition[\"result\"]\n    >;\n\n    /**\n     * Adds one to this callback's reference counting and returns the new\n     * reference count.\n     *\n     * If the callback's reference count is non-zero, it will keep Deno's\n     * process from exiting.\n     */\n    ref(): number;\n\n    /**\n     * Removes one from this callback's reference counting and returns the new\n     * reference count.\n     *\n     * If the callback's reference counter is zero, it will no longer keep\n     * Deno's process from exiting.\n     */\n    unref(): number;\n\n    /**\n     * Removes the C function pointer associated with this instance.\n     *\n     * Continuing to use the instance after calling this object will lead to\n     * errors and crashes.\n     *\n     * Calling this method will also immediately set the callback's reference\n     * counting to zero and it will no longer keep Deno's process from exiting.\n     */\n    close(): void;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A dynamic library resource.  Use {@linkcode Deno.dlopen} to load a dynamic\n   * library and return this interface.\n   *\n   * @category FFI\n   */\n  export interface DynamicLibrary<S extends ForeignLibraryInterface> {\n    /** All of the registered library along with functions for calling them. */\n    symbols: StaticForeignLibraryInterface<S>;\n    /** Removes the pointers associated with the library symbols.\n     *\n     * Continuing to use symbols that are part of the library will lead to\n     * errors and crashes.\n     *\n     * Calling this method will also immediately set any references to zero and\n     * will no longer keep Deno's process from exiting.\n     */\n    close(): void;\n  }\n\n  /**\n   *  This magic code used to implement better type hints for {@linkcode Deno.dlopen}\n   */\n  type Cast<A, B> = A extends B ? A : B;\n  type Const<T> = Cast<\n    T,\n    | (T extends string | number | bigint | boolean ? T : never)\n    | { [K in keyof T]: Const<T[K]> }\n    | []\n  >;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Opens an external dynamic library and registers symbols, making foreign\n   * functions available to be called.\n   *\n   * Requires `allow-ffi` permission. Loading foreign dynamic libraries can in\n   * theory bypass all of the sandbox permissions. While it is a separate\n   * permission users should acknowledge in practice that is effectively the\n   * same as running with the `allow-all` permission.\n   *\n   * An example, given a C library which exports a foreign function named\n   * `add()`:\n   *\n   * ```ts\n   * // Determine library extension based on\n   * // your OS.\n   * let libSuffix = \"\";\n   * switch (Deno.build.os) {\n   *   case \"windows\":\n   *     libSuffix = \"dll\";\n   *     break;\n   *   case \"darwin\":\n   *     libSuffix = \"dylib\";\n   *     break;\n   *   default:\n   *     libSuffix = \"so\";\n   *     break;\n   * }\n   *\n   * const libName = `./libadd.${libSuffix}`;\n   * // Open library and define exported symbols\n   * const dylib = Deno.dlopen(\n   *   libName,\n   *   {\n   *     \"add\": { parameters: [\"isize\", \"isize\"], result: \"isize\" },\n   *   } as const,\n   * );\n   *\n   * // Call the symbol `add`\n   * const result = dylib.symbols.add(35, 34); // 69\n   *\n   * console.log(`Result from external addition of 35 and 34: ${result}`);\n   * ```\n   *\n   * @tags allow-ffi\n   * @category FFI\n   */\n  export function dlopen<S extends ForeignLibraryInterface>(\n    filename: string | URL,\n    symbols: Const<S>,\n  ): DynamicLibrary<S>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * These are unstable options which can be used with {@linkcode Deno.run}.\n   *\n   * @category Sub Process\n   */\n  interface UnstableRunOptions extends RunOptions {\n    /** If `true`, clears the environment variables before executing the\n     * sub-process.  Defaults to `false`. */\n    clearEnv?: boolean;\n    /** For POSIX systems, sets the group ID for the sub process. */\n    gid?: number;\n    /** For POSIX systems, sets the user ID for the sub process. */\n    uid?: number;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Spawns new subprocess. RunOptions must contain at a minimum the `opt.cmd`,\n   * an array of program arguments, the first of which is the binary.\n   *\n   * ```ts\n   * const p = Deno.run({\n   *   cmd: [\"curl\", \"https://example.com\"],\n   * });\n   * const status = await p.status();\n   * ```\n   *\n   * Subprocess uses same working directory as parent process unless `opt.cwd`\n   * is specified.\n   *\n   * Environmental variables from parent process can be cleared using `opt.clearEnv`.\n   * Doesn't guarantee that only `opt.env` variables are present,\n   * as the OS may set environmental variables for processes.\n   *\n   * Environmental variables for subprocess can be specified using `opt.env`\n   * mapping.\n   *\n   * `opt.uid` sets the child process’s user ID. This translates to a setuid call\n   * in the child process. Failure in the setuid call will cause the spawn to fail.\n   *\n   * `opt.gid` is similar to `opt.uid`, but sets the group ID of the child process.\n   * This has the same semantics as the uid field.\n   *\n   * By default subprocess inherits stdio of parent process. To change\n   * this this, `opt.stdin`, `opt.stdout`, and `opt.stderr` can be set\n   * independently to a resource ID (_rid_) of an open file, `\"inherit\"`,\n   * `\"piped\"`, or `\"null\"`:\n   *\n   * - _number_: the resource ID of an open file/resource. This allows you to\n   *   read or write to a file.\n   * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n   *   parent.\n   * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n   *   sub-process.\n   * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n   *   the stream to `/dev/null`.\n   *\n   * Details of the spawned process are returned as an instance of\n   * {@linkcode Deno.Process}.\n   *\n   * Requires `allow-run` permission.\n   *\n   * @tags allow-run\n   * @category Sub Process\n   */\n  export function run<T extends UnstableRunOptions = UnstableRunOptions>(\n    opt: T,\n  ): Process<T>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A custom `HttpClient` for use with {@linkcode fetch} function. This is\n   * designed to allow custom certificates or proxies to be used with `fetch()`.\n   *\n   * ```ts\n   * const caCert = await Deno.readTextFile(\"./ca.pem\");\n   * const client = Deno.createHttpClient({ caCerts: [ caCert ] });\n   * const req = await fetch(\"https://myserver.com\", { client });\n   * ```\n   *\n   * @category Fetch API\n   */\n  export interface HttpClient {\n    /** The resource ID associated with the client. */\n    rid: number;\n    /** Close the HTTP client. */\n    close(): void;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The options used when creating a {@linkcode Deno.HttpClient}.\n   *\n   * @category Fetch API\n   */\n  export interface CreateHttpClientOptions {\n    /** A list of root certificates that will be used in addition to the\n     * default root certificates to verify the peer's certificate.\n     *\n     * Must be in PEM format. */\n    caCerts?: string[];\n    /** A HTTP proxy to use for new connections. */\n    proxy?: Proxy;\n    /** PEM formatted client certificate chain. */\n    certChain?: string;\n    /** PEM formatted (RSA or PKCS8) private key of client certificate. */\n    privateKey?: string;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The definition of a proxy when specifying\n   * {@linkcode Deno.CreateHttpClientOptions}.\n   *\n   * @category Fetch API\n   */\n  export interface Proxy {\n    /** The string URL of the proxy server to use. */\n    url: string;\n    /** The basic auth credentials to be used against the proxy server. */\n    basicAuth?: BasicAuth;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Basic authentication credentials to be used with a {@linkcode Deno.Proxy}\n   * server when specifying {@linkcode Deno.CreateHttpClientOptions}.\n   *\n   * @category Fetch API\n   */\n  export interface BasicAuth {\n    /** The username to be used against the proxy server. */\n    username: string;\n    /** The password to be used against the proxy server. */\n    password: string;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Create a custom HttpClient for to use with {@linkcode fetch}. This is an\n   * extension of the web platform Fetch API which allows Deno to use custom\n   * TLS certificates and connect via a proxy while using `fetch()`.\n   *\n   * ```ts\n   * const caCert = await Deno.readTextFile(\"./ca.pem\");\n   * const client = Deno.createHttpClient({ caCerts: [ caCert ] });\n   * const response = await fetch(\"https://myserver.com\", { client });\n   * ```\n   *\n   * ```ts\n   * const client = Deno.createHttpClient({\n   *   proxy: { url: \"http://myproxy.com:8080\" }\n   * });\n   * const response = await fetch(\"https://myserver.com\", { client });\n   * ```\n   *\n   * @category Fetch API\n   */\n  export function createHttpClient(\n    options: CreateHttpClientOptions,\n  ): HttpClient;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A generic transport listener for message-oriented protocols.\n   *\n   * @category Network\n   */\n  export interface DatagramConn extends AsyncIterable<[Uint8Array, Addr]> {\n    /** Waits for and resolves to the next message to the instance.\n     *\n     * Messages are received in the format of a tuple containing the data array\n     * and the address information.\n     */\n    receive(p?: Uint8Array): Promise<[Uint8Array, Addr]>;\n    /** Sends a message to the target via the connection. The method resolves\n     * with the number of bytes sent. */\n    send(p: Uint8Array, addr: Addr): Promise<number>;\n    /** Close closes the socket. Any pending message promises will be rejected\n     * with errors. */\n    close(): void;\n    /** Return the address of the instance. */\n    readonly addr: Addr;\n    [Symbol.asyncIterator](): AsyncIterableIterator<[Uint8Array, Addr]>;\n  }\n\n  /**\n   * @category Network\n   */\n  export interface TcpListenOptions extends ListenOptions {\n    /** When `true` the SO_REUSEPORT flag will be set on the listener. This\n     * allows multiple processes to listen on the same address and port.\n     *\n     * On Linux this will cause the kernel to distribute incoming connections\n     * across the different processes that are listening on the same address and\n     * port.\n     *\n     * This flag is only supported on Linux. It is silently ignored on other\n     * platforms. Defaults to `false`. */\n    reusePort?: boolean;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Unstable options which can be set when opening a Unix listener via\n   * {@linkcode Deno.listen} or {@linkcode Deno.listenDatagram}.\n   *\n   * @category Network\n   */\n  export interface UnixListenOptions {\n    /** A path to the Unix Socket. */\n    path: string;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Unstable options which can be set when opening a datagram listener via\n   * {@linkcode Deno.listenDatagram}.\n   *\n   * @category Network\n   */\n  export interface UdpListenOptions extends ListenOptions {\n    /** When `true` the specified address will be reused, even if another\n     * process has already bound a socket on it. This effectively steals the\n     * socket from the listener.\n     *\n     * Defaults to `false`. */\n    reuseAddress?: boolean;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Listen announces on the local transport address.\n   *\n   * ```ts\n   * const listener = Deno.listen({ path: \"/foo/bar.sock\", transport: \"unix\" })\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permission.\n   *\n   * @tags allow-read, allow-write\n   * @category Network\n   */\n  export function listen(\n    options: UnixListenOptions & { transport: \"unix\" },\n  ): Listener;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Listen announces on the local transport address.\n   *\n   * ```ts\n   * const listener1 = Deno.listenDatagram({\n   *   port: 80,\n   *   transport: \"udp\"\n   * });\n   * const listener2 = Deno.listenDatagram({\n   *   hostname: \"golang.org\",\n   *   port: 80,\n   *   transport: \"udp\"\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function listenDatagram(\n    options: UdpListenOptions & { transport: \"udp\" },\n  ): DatagramConn;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Listen announces on the local transport address.\n   *\n   * ```ts\n   * const listener = Deno.listenDatagram({\n   *   path: \"/foo/bar.sock\",\n   *   transport: \"unixpacket\"\n   * });\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permission.\n   *\n   * @tags allow-read, allow-write\n   * @category Network\n   */\n  export function listenDatagram(\n    options: UnixListenOptions & { transport: \"unixpacket\" },\n  ): DatagramConn;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category Network\n   */\n  export interface UnixConnectOptions {\n    transport: \"unix\";\n    path: string;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Connects to the hostname (default is \"127.0.0.1\") and port on the named\n   * transport (default is \"tcp\"), and resolves to the connection (`Conn`).\n   *\n   * ```ts\n   * const conn1 = await Deno.connect({ port: 80 });\n   * const conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\n   * const conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\n   * const conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n   * const conn5 = await Deno.connect({ path: \"/foo/bar.sock\", transport: \"unix\" });\n   * ```\n   *\n   * Requires `allow-net` permission for \"tcp\" and `allow-read` for \"unix\".\n   *\n   * @tags allow-net, allow-read\n   * @category Network\n   */\n  export function connect(options: ConnectOptions): Promise<TcpConn>;\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Connects to the hostname (default is \"127.0.0.1\") and port on the named\n   * transport (default is \"tcp\"), and resolves to the connection (`Conn`).\n   *\n   * ```ts\n   * const conn1 = await Deno.connect({ port: 80 });\n   * const conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\n   * const conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\n   * const conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n   * const conn5 = await Deno.connect({ path: \"/foo/bar.sock\", transport: \"unix\" });\n   * ```\n   *\n   * Requires `allow-net` permission for \"tcp\" and `allow-read` for \"unix\".\n   *\n   * @tags allow-net, allow-read\n   * @category Network\n   */\n  export function connect(options: UnixConnectOptions): Promise<UnixConn>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category Network\n   */\n  export interface ConnectTlsOptions {\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * PEM formatted client certificate chain.\n     */\n    certChain?: string;\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * PEM formatted (RSA or PKCS8) private key of client certificate.\n     */\n    privateKey?: string;\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Application-Layer Protocol Negotiation (ALPN) protocols supported by\n     * the client. If not specified, no ALPN extension will be included in the\n     * TLS handshake.\n     */\n    alpnProtocols?: string[];\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category Network\n   */\n  export interface TlsHandshakeInfo {\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Contains the ALPN protocol selected during negotiation with the server.\n     * If no ALPN protocol selected, returns `null`.\n     */\n    alpnProtocol: string | null;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category Network\n   */\n  export interface TlsConn extends Conn {\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Runs the client or server handshake protocol to completion if that has\n     * not happened yet. Calling this method is optional; the TLS handshake\n     * will be completed automatically as soon as data is sent or received.\n     */\n    handshake(): Promise<TlsHandshakeInfo>;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Create a TLS connection with an attached client certificate.\n   *\n   * ```ts\n   * const conn = await Deno.connectTls({\n   *   hostname: \"deno.land\",\n   *   port: 443,\n   *   certChain: \"---- BEGIN CERTIFICATE ----\\n ...\",\n   *   privateKey: \"---- BEGIN PRIVATE KEY ----\\n ...\",\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function connectTls(options: ConnectTlsOptions): Promise<TlsConn>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category Network\n   */\n  export interface ListenTlsOptions {\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Application-Layer Protocol Negotiation (ALPN) protocols to announce to\n     * the client. If not specified, no ALPN extension will be included in the\n     * TLS handshake.\n     */\n    alpnProtocols?: string[];\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category Network\n   */\n  export interface StartTlsOptions {\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Application-Layer Protocol Negotiation (ALPN) protocols to announce to\n     * the client. If not specified, no ALPN extension will be included in the\n     * TLS handshake.\n     */\n    alpnProtocols?: string[];\n  }\n\n  /** @category Network */\n  export interface Listener extends AsyncIterable<Conn> {\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Make the listener block the event loop from finishing.\n     *\n     * Note: the listener blocks the event loop from finishing by default.\n     * This method is only meaningful after `.unref()` is called.\n     */\n    ref(): void;\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Make the listener not block the event loop from finishing.\n     */\n    unref(): void;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Acquire an advisory file-system lock for the provided file. `exclusive`\n   * defaults to `false`.\n   *\n   * @category File System\n   */\n  export function flock(rid: number, exclusive?: boolean): Promise<void>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Acquire an advisory file-system lock synchronously for the provided file.\n   * `exclusive` defaults to `false`.\n   *\n   * @category File System\n   */\n  export function flockSync(rid: number, exclusive?: boolean): void;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Release an advisory file-system lock for the provided file.\n   *\n   * @category File System\n   */\n  export function funlock(rid: number): Promise<void>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Release an advisory file-system lock for the provided file synchronously.\n   *\n   * @category File System\n   */\n  export function funlockSync(rid: number): void;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * A handler for HTTP requests. Consumes a request and returns a response.\n   *\n   * If a handler throws, the server calling the handler will assume the impact\n   * of the error is isolated to the individual request. It will catch the error\n   * and if necessary will close the underlying connection.\n   *\n   * @category HTTP Server\n   */\n  export type ServeHandler = (request: Request) => Response | Promise<Response>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Options which can be set when calling {@linkcode Deno.serve}.\n   *\n   * @category HTTP Server\n   */\n  export interface ServeOptions extends Partial<Deno.ListenOptions> {\n    /** An {@linkcode AbortSignal} to close the server and all connections. */\n    signal?: AbortSignal;\n\n    /** Sets `SO_REUSEPORT` on POSIX systems. */\n    reusePort?: boolean;\n\n    /** The handler to invoke when route handlers throw an error. */\n    onError?: (error: unknown) => Response | Promise<Response>;\n\n    /** The callback which is called when the server starts listening. */\n    onListen?: (params: { hostname: string; port: number }) => void;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Additional options which are used when opening a TLS (HTTPS) server.\n   *\n   * @category HTTP Server\n   */\n  export interface ServeTlsOptions extends ServeOptions {\n    /** Server private key in PEM format */\n    cert: string;\n\n    /** Cert chain in PEM format */\n    key: string;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category HTTP Server\n   */\n  export interface ServeInit {\n    /** The handler to invoke to process each incoming request. */\n    handler: ServeHandler;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Serves HTTP requests with the given handler.\n   *\n   * You can specify an object with a port and hostname option, which is the\n   * address to listen on. The default is port `9000` on hostname `\"127.0.0.1\"`.\n   *\n   * The below example serves with the port `9000`.\n   *\n   * ```ts\n   * Deno.serve((_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * You can change the address to listen on using the `hostname` and `port`\n   * options. The below example serves on port `3000`.\n   *\n   * ```ts\n   * Deno.serve({ port: 3000 }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * You can stop the server with an {@linkcode AbortSignal}. The abort signal\n   * needs to be passed as the `signal` option in the options bag. The server\n   * aborts when the abort signal is aborted. To wait for the server to close,\n   * await the promise returned from the `Deno.serve` API.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * Deno.serve({ signal: ac.signal }, (_req) => new Response(\"Hello, world\"))\n   *  .then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * By default `Deno.serve` prints the message\n   * `Listening on http://<hostname>:<port>/` on listening. If you like to\n   * change this behavior, you can specify a custom `onListen` callback.\n   *\n   * ```ts\n   * Deno.serve({\n   *   onListen({ port, hostname }) {\n   *     console.log(`Server started at http://${hostname}:${port}`);\n   *     // ... more info specific to your server ..\n   *   },\n   *   handler: (_req) => new Response(\"Hello, world\"),\n   * });\n   * ```\n   *\n   * To enable TLS you must specify the `key` and `cert` options.\n   *\n   * ```ts\n   * const cert = \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\\n\";\n   * const key = \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\";\n   * Deno.serve({ cert, key }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    handler: ServeHandler,\n    options?: ServeOptions | ServeTlsOptions,\n  ): Promise<void>;\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Serves HTTP requests with the given handler.\n   *\n   * You can specify an object with a port and hostname option, which is the\n   * address to listen on. The default is port `9000` on hostname `\"127.0.0.1\"`.\n   *\n   * The below example serves with the port `9000`.\n   *\n   * ```ts\n   * Deno.serve((_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * You can change the address to listen on using the `hostname` and `port`\n   * options. The below example serves on port `3000`.\n   *\n   * ```ts\n   * Deno.serve({ port: 3000 }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * You can stop the server with an {@linkcode AbortSignal}. The abort signal\n   * needs to be passed as the `signal` option in the options bag. The server\n   * aborts when the abort signal is aborted. To wait for the server to close,\n   * await the promise returned from the `Deno.serve` API.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * Deno.serve({ signal: ac.signal }, (_req) => new Response(\"Hello, world\"))\n   *  .then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * By default `Deno.serve` prints the message\n   * `Listening on http://<hostname>:<port>/` on listening. If you like to\n   * change this behavior, you can specify a custom `onListen` callback.\n   *\n   * ```ts\n   * Deno.serve({\n   *   onListen({ port, hostname }) {\n   *     console.log(`Server started at http://${hostname}:${port}`);\n   *     // ... more info specific to your server ..\n   *   },\n   *   handler: (_req) => new Response(\"Hello, world\"),\n   * });\n   * ```\n   *\n   * To enable TLS you must specify the `key` and `cert` options.\n   *\n   * ```ts\n   * const cert = \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\\n\";\n   * const key = \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\";\n   * Deno.serve({ cert, key }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options: ServeOptions | ServeTlsOptions,\n    handler: ServeHandler,\n  ): Promise<void>;\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Serves HTTP requests with the given handler.\n   *\n   * You can specify an object with a port and hostname option, which is the\n   * address to listen on. The default is port `9000` on hostname `\"127.0.0.1\"`.\n   *\n   * The below example serves with the port `9000`.\n   *\n   * ```ts\n   * Deno.serve((_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * You can change the address to listen on using the `hostname` and `port`\n   * options. The below example serves on port `3000`.\n   *\n   * ```ts\n   * Deno.serve({ port: 3000 }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * You can stop the server with an {@linkcode AbortSignal}. The abort signal\n   * needs to be passed as the `signal` option in the options bag. The server\n   * aborts when the abort signal is aborted. To wait for the server to close,\n   * await the promise returned from the `Deno.serve` API.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * Deno.serve({ signal: ac.signal }, (_req) => new Response(\"Hello, world\"))\n   *  .then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * By default `Deno.serve` prints the message\n   * `Listening on http://<hostname>:<port>/` on listening. If you like to\n   * change this behavior, you can specify a custom `onListen` callback.\n   *\n   * ```ts\n   * Deno.serve({\n   *   onListen({ port, hostname }) {\n   *     console.log(`Server started at http://${hostname}:${port}`);\n   *     // ... more info specific to your server ..\n   *   },\n   *   handler: (_req) => new Response(\"Hello, world\"),\n   * });\n   * ```\n   *\n   * To enable TLS you must specify the `key` and `cert` options.\n   *\n   * ```ts\n   * const cert = \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\\n\";\n   * const key = \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\";\n   * Deno.serve({ cert, key }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options: ServeInit & (ServeOptions | ServeTlsOptions),\n  ): Promise<void>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Allows \"hijacking\" the connection that the request is associated with. This\n   * can be used to implement protocols that build on top of HTTP (eg.\n   * {@linkcode WebSocket}).\n   *\n   * The returned promise returns underlying connection and first packet\n   * received. The promise shouldn't be awaited before responding to the\n   * `request`, otherwise event loop might deadlock.\n   *\n   * ```ts\n   * function handler(req: Request): Response {\n   *   Deno.upgradeHttp(req).then(([conn, firstPacket]) => {\n   *     // ...\n   *   });\n   *   return new Response(null, { status: 101 });\n   * }\n   * ```\n   *\n   * This method can only be called on requests originating the\n   * {@linkcode Deno.serveHttp} server.\n   *\n   * @category HTTP Server\n   */\n  export function upgradeHttp(\n    request: Request,\n  ): Promise<[Deno.Conn, Uint8Array]>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Allows \"hijacking\" the connection that the request is associated with.\n   * This can be used to implement protocols that build on top of HTTP (eg.\n   * {@linkcode WebSocket}).\n   *\n   * Unlike {@linkcode Deno.upgradeHttp} this function does not require that you\n   * respond to the request with a {@linkcode Response} object. Instead this\n   * function returns the underlying connection and first packet received\n   * immediately, and then the caller is responsible for writing the response to\n   * the connection.\n   *\n   * This method can only be called on requests originating the\n   * {@linkcode Deno.serve} server.\n   *\n   * @category HTTP Server\n   */\n  export function upgradeHttpRaw(request: Request): [Deno.Conn, Uint8Array];\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @deprecated Use the Deno.Command API instead.\n   *\n   * Options which can be set when calling {@linkcode Deno.spawn},\n   * {@linkcode Deno.spawnSync}, and {@linkcode Deno.spawnChild}.\n   *\n   * @category Sub Process\n   */\n  export interface SpawnOptions {\n    /** Arguments to pass to the process. */\n    args?: string[];\n    /**\n     * The working directory of the process.\n     *\n     * If not specified, the `cwd` of the parent process is used.\n     */\n    cwd?: string | URL;\n    /**\n     * Clear environmental variables from parent process.\n     *\n     * Doesn't guarantee that only `env` variables are present, as the OS may\n     * set environmental variables for processes.\n     */\n    clearEnv?: boolean;\n    /** Environmental variables to pass to the subprocess. */\n    env?: Record<string, string>;\n    /**\n     * Sets the child process’s user ID. This translates to a setuid call in the\n     * child process. Failure in the set uid call will cause the spawn to fail.\n     */\n    uid?: number;\n    /** Similar to `uid`, but sets the group ID of the child process. */\n    gid?: number;\n    /**\n     * An {@linkcode AbortSignal} that allows closing the process using the\n     * corresponding {@linkcode AbortController} by sending the process a\n     * SIGTERM signal.\n     *\n     * Not supported in {@linkcode Deno.spawnSync}.\n     */\n    signal?: AbortSignal;\n\n    /** How `stdin` of the spawned process should be handled.\n     *\n     * Defaults to `\"null\"`. */\n    stdin?: \"piped\" | \"inherit\" | \"null\";\n    /**  How `stdout` of the spawned process should be handled.\n     *\n     * Defaults to `\"piped\"`. */\n    stdout?: \"piped\" | \"inherit\" | \"null\";\n    /**  How `stderr` of the spawned process should be handled.\n     *\n     * Defaults to \"piped\". */\n    stderr?: \"piped\" | \"inherit\" | \"null\";\n\n    /** Skips quoting and escaping of the arguments on windows. This option\n     * is ignored on non-windows platforms. Defaults to `false`. */\n    windowsRawArguments?: boolean;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @deprecated Use the Deno.Command API instead.\n   *\n   * Spawns a child process.\n   *\n   * If any stdio options are not set to `\"piped\"`, accessing the corresponding\n   * field on the `Child` or its `SpawnOutput` will throw a `TypeError`.\n   *\n   * If `stdin` is set to `\"piped\"`, the `stdin` {@linkcode WritableStream}\n   * needs to be closed manually.\n   *\n   * ```ts\n   * const child = Deno.spawnChild(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('Hello World')\",\n   *   ],\n   *   stdin: \"piped\",\n   * });\n   *\n   * // open a file and pipe the subprocess output to it.\n   * child.stdout.pipeTo(Deno.openSync(\"output\").writable);\n   *\n   * // manually close stdin\n   * child.stdin.close();\n   * const status = await child.status;\n   * ```\n   *\n   * @category Sub Process\n   */\n  export function spawnChild(\n    command: string | URL,\n    options?: SpawnOptions,\n  ): Child;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @deprecated Use the Deno.Command API instead.\n   *\n   * The interface for handling a child process returned from\n   * {@linkcode Deno.spawnChild}.\n   *\n   * @category Sub Process\n   */\n  export class Child {\n    get stdin(): WritableStream<Uint8Array>;\n    get stdout(): ReadableStream<Uint8Array>;\n    get stderr(): ReadableStream<Uint8Array>;\n    readonly pid: number;\n    /** Get the status of the child. */\n    readonly status: Promise<ChildStatus>;\n\n    /** Waits for the child to exit completely, returning all its output and\n     * status. */\n    output(): Promise<SpawnOutput>;\n    /** Kills the process with given {@linkcode Deno.Signal}. Defaults to\n     * `\"SIGTERM\"`. */\n    kill(signo?: Signal): void;\n\n    /** Ensure that the status of the child process prevents the Deno process\n     * from exiting. */\n    ref(): void;\n    /** Ensure that the status of the child process does not block the Deno\n     * process from exiting. */\n    unref(): void;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @deprecated Use the Deno.Command API instead.\n   *\n   * Executes a subprocess, waiting for it to finish and collecting all of its\n   * output.\n   *\n   * Will throw an error if `stdin: \"piped\"` is passed.\n   *\n   * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n   * corresponding field on `SpawnOutput` will throw a `TypeError`.\n   *\n   * ```ts\n   * const { code, stdout, stderr } = await Deno.spawn(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('hello'); console.error('world')\",\n   *   ],\n   * });\n   * console.assert(code === 0);\n   * console.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\n   * console.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n   * ```\n   *\n   * @category Sub Process\n   */\n  export function spawn(\n    command: string | URL,\n    options?: SpawnOptions,\n  ): Promise<SpawnOutput>;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @deprecated Use the Deno.Command API instead.\n   *\n   * Synchronously executes a subprocess, waiting for it to finish and\n   * collecting all of its output.\n   *\n   * Will throw an error if `stdin: \"piped\"` is passed.\n   *\n   * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n   * corresponding field on `SpawnOutput` will throw a `TypeError`.\n   *\n   * ```ts\n   * const { code, stdout, stderr } = Deno.spawnSync(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('hello'); console.error('world')\",\n   *   ],\n   * });\n   * console.assert(code === 0);\n   * console.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\n   * console.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n   * ```\n   *\n   * @category Sub Process\n   */\n  export function spawnSync(\n    command: string | URL,\n    options?: SpawnOptions,\n  ): SpawnOutput;\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @deprecated Use the Deno.Command API instead.\n   *\n   * @category Sub Process\n   */\n  export interface ChildStatus {\n    /** If the child process exits with a 0 status code, `success` will be set\n     * to `true`, otherwise `false`. */\n    success: boolean;\n    /** The exit code of the child process. */\n    code: number;\n    /** The signal associated with the child process, present if\n     * {@linkcode Deno.spawn} was called. */\n    signal: Signal | null;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @deprecated Use the Deno.Command API instead.\n   *\n   * The interface returned from calling {@linkcode Deno.spawn} or\n   * {@linkcode Deno.spawnSync} which represents the result of spawning the\n   * child process.\n   *\n   * @category Sub Process\n   */\n  export interface SpawnOutput extends ChildStatus {\n    /** The buffered output from the child processes `stdout`. */\n    readonly stdout: Uint8Array;\n    /** The buffered output from the child processes `stderr`. */\n    readonly stderr: Uint8Array;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Create a child process.\n   *\n   * If any stdio options are not set to `\"piped\"`, accessing the corresponding\n   * field on the `Command` or its `CommandOutput` will throw a `TypeError`.\n   *\n   * If `stdin` is set to `\"piped\"`, the `stdin` {@linkcode WritableStream}\n   * needs to be closed manually.\n   *\n   * ```ts\n   * const command = new Deno.Command(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('Hello World')\",\n   *   ],\n   *   stdin: \"piped\",\n   * });\n   * const child = command.spawn();\n   *\n   * // open a file and pipe the subprocess output to it.\n   * child.stdout.pipeTo(Deno.openSync(\"output\").writable);\n   *\n   * // manually close stdin\n   * child.stdin.close();\n   * const status = await child.status;\n   * ```\n   *\n   * ```ts\n   * const command = new Deno.Command(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('hello'); console.error('world')\",\n   *   ],\n   * });\n   * const { code, stdout, stderr } = await command.output();\n   * console.assert(code === 0);\n   * console.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\n   * console.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n   * ```\n   *\n   * ```ts\n   * const command = new Deno.Command(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('hello'); console.error('world')\",\n   *   ],\n   * });\n   * const { code, stdout, stderr } = command.outputSync();\n   * console.assert(code === 0);\n   * console.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\n   * console.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n   * ```\n   *\n   * @category Sub Process\n   */\n  export class Command {\n    constructor(command: string | URL, options?: CommandOptions);\n    /**\n     * Executes the {@linkcode Deno.Command}, waiting for it to finish and\n     * collecting all of its output.\n     * If `spawn()` was called, calling this function will collect the remaining\n     * output.\n     *\n     * Will throw an error if `stdin: \"piped\"` is set.\n     *\n     * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n     * corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.\n     */\n    output(): Promise<CommandOutput>;\n    /**\n     * Synchronously executes the {@linkcode Deno.Command}, waiting for it to\n     * finish and collecting all of its output.\n     *\n     * Will throw an error if `stdin: \"piped\"` is set.\n     *\n     * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n     * corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.\n     */\n    outputSync(): CommandOutput;\n    /**\n     * Spawns a streamable subprocess, allowing to use the other methods.\n     */\n    spawn(): ChildProcess;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The interface for handling a child process returned from\n   * {@linkcode Deno.Command.spawn}.\n   *\n   * @category Sub Process\n   */\n  export class ChildProcess {\n    get stdin(): WritableStream<Uint8Array>;\n    get stdout(): ReadableStream<Uint8Array>;\n    get stderr(): ReadableStream<Uint8Array>;\n    readonly pid: number;\n    /** Get the status of the child. */\n    readonly status: Promise<CommandStatus>;\n\n    /** Waits for the child to exit completely, returning all its output and\n     * status. */\n    output(): Promise<CommandOutput>;\n    /** Kills the process with given {@linkcode Deno.Signal}. Defaults to\n     * `\"SIGTERM\"`. */\n    kill(signo?: Signal): void;\n\n    /** Ensure that the status of the child process prevents the Deno process\n     * from exiting. */\n    ref(): void;\n    /** Ensure that the status of the child process does not block the Deno\n     * process from exiting. */\n    unref(): void;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Options which can be set when calling {@linkcode Deno.command}.\n   *\n   * @category Sub Process\n   */\n  export interface CommandOptions {\n    /** Arguments to pass to the process. */\n    args?: string[];\n    /**\n     * The working directory of the process.\n     *\n     * If not specified, the `cwd` of the parent process is used.\n     */\n    cwd?: string | URL;\n    /**\n     * Clear environmental variables from parent process.\n     *\n     * Doesn't guarantee that only `env` variables are present, as the OS may\n     * set environmental variables for processes.\n     */\n    clearEnv?: boolean;\n    /** Environmental variables to pass to the subprocess. */\n    env?: Record<string, string>;\n    /**\n     * Sets the child process’s user ID. This translates to a setuid call in the\n     * child process. Failure in the set uid call will cause the spawn to fail.\n     */\n    uid?: number;\n    /** Similar to `uid`, but sets the group ID of the child process. */\n    gid?: number;\n    /**\n     * An {@linkcode AbortSignal} that allows closing the process using the\n     * corresponding {@linkcode AbortController} by sending the process a\n     * SIGTERM signal.\n     *\n     * Ignored by {@linkcode Command.outputSync}.\n     */\n    signal?: AbortSignal;\n\n    /** How `stdin` of the spawned process should be handled.\n     *\n     * Defaults to `\"null\"`. */\n    stdin?: \"piped\" | \"inherit\" | \"null\";\n    /** How `stdout` of the spawned process should be handled.\n     *\n     * Defaults to `\"piped\"`. */\n    stdout?: \"piped\" | \"inherit\" | \"null\";\n    /** How `stderr` of the spawned process should be handled.\n     *\n     * Defaults to \"piped\". */\n    stderr?: \"piped\" | \"inherit\" | \"null\";\n\n    /** Skips quoting and escaping of the arguments on Windows. This option\n     * is ignored on non-windows platforms. Defaults to `false`. */\n    windowsRawArguments?: boolean;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * @category Sub Process\n   */\n  export interface CommandStatus {\n    /** If the child process exits with a 0 status code, `success` will be set\n     * to `true`, otherwise `false`. */\n    success: boolean;\n    /** The exit code of the child process. */\n    code: number;\n    /** The signal associated with the child process. */\n    signal: Signal | null;\n  }\n\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * The interface returned from calling {@linkcode Command.output} or\n   * {@linkcode Command.outputSync} which represents the result of spawning the\n   * child process.\n   *\n   * @category Sub Process\n   */\n  export interface CommandOutput extends CommandStatus {\n    /** The buffered output from the child process' `stdout`. */\n    readonly stdout: Uint8Array;\n    /** The buffered output from the child process' `stderr`. */\n    readonly stderr: Uint8Array;\n  }\n}\n\n/** **UNSTABLE**: New API, yet to be vetted.\n *\n * The [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n * which also supports setting a {@linkcode Deno.HttpClient} which provides a\n * way to connect via proxies and use custom TLS certificates.\n *\n * @tags allow-net, allow-read\n * @category Fetch API\n */\ndeclare function fetch(\n  input: Request | URL | string,\n  init?: RequestInit & { client: Deno.HttpClient },\n): Promise<Response>;\n\n/** **UNSTABLE**: New API, yet to be vetted.\n *\n * @category Web Workers\n */\ndeclare interface WorkerOptions {\n  /** **UNSTABLE**: New API, yet to be vetted.\n   *\n   * Configure permissions options to change the level of access the worker will\n   * have. By default it will have no permissions. Note that the permissions\n   * of a worker can't be extended beyond its parent's permissions reach.\n   *\n   * - `\"inherit\"` will take the permissions of the thread the worker is created\n   *   in.\n   * - `\"none\"` will use the default behavior and have no permission\n   * - A list of routes can be provided that are relative to the file the worker\n   *   is created in to limit the access of the worker (read/write permissions\n   *   only)\n   *\n   * Example:\n   *\n   * ```ts\n   * // mod.ts\n   * const worker = new Worker(\n   *   new URL(\"deno_worker.ts\", import.meta.url).href, {\n   *     type: \"module\",\n   *     deno: {\n   *       permissions: {\n   *         read: true,\n   *       },\n   *     },\n   *   }\n   * );\n   * ```\n   */\n  deno?: {\n    /** Set to `\"none\"` to disable all the permissions in the worker. */\n    permissions?: Deno.PermissionOptions;\n  };\n}\n\n/** **UNSTABLE**: New API, yet to be vetted.\n *\n * @category Web Sockets\n */\ndeclare interface WebSocketStreamOptions {\n  protocols?: string[];\n  signal?: AbortSignal;\n  headers?: HeadersInit;\n}\n\n/** **UNSTABLE**: New API, yet to be vetted.\n *\n * @category Web Sockets\n */\ndeclare interface WebSocketConnection {\n  readable: ReadableStream<string | Uint8Array>;\n  writable: WritableStream<string | Uint8Array>;\n  extensions: string;\n  protocol: string;\n}\n\n/** **UNSTABLE**: New API, yet to be vetted.\n *\n * @category Web Sockets\n */\ndeclare interface WebSocketCloseInfo {\n  code?: number;\n  reason?: string;\n}\n\n/** **UNSTABLE**: New API, yet to be vetted.\n *\n * @tags allow-net\n * @category Web Sockets\n */\ndeclare class WebSocketStream {\n  constructor(url: string, options?: WebSocketStreamOptions);\n  url: string;\n  connection: Promise<WebSocketConnection>;\n  closed: Promise<WebSocketCloseInfo>;\n  close(closeInfo?: WebSocketCloseInfo): void;\n}\n","lib.deno.window.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"deno.ns\" />\n/// <reference lib=\"deno.shared_globals\" />\n/// <reference lib=\"deno.webgpu\" />\n/// <reference lib=\"deno.webstorage\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"deno.cache\" />\n\n/** @category Web APIs */\ninterface WindowEventMap {\n  \"error\": ErrorEvent;\n  \"unhandledrejection\": PromiseRejectionEvent;\n}\n\n/** @category Web APIs */\ndeclare class Window extends EventTarget {\n  new(): Window;\n  readonly window: Window & typeof globalThis;\n  readonly self: Window & typeof globalThis;\n  onerror: ((this: Window, ev: ErrorEvent) => any) | null;\n  onload: ((this: Window, ev: Event) => any) | null;\n  onbeforeunload: ((this: Window, ev: Event) => any) | null;\n  onunload: ((this: Window, ev: Event) => any) | null;\n  onunhandledrejection:\n    | ((this: Window, ev: PromiseRejectionEvent) => any)\n    | null;\n  close: () => void;\n  readonly closed: boolean;\n  alert: (message?: string) => void;\n  confirm: (message?: string) => boolean;\n  prompt: (message?: string, defaultValue?: string) => string | null;\n  Deno: typeof Deno;\n  Navigator: typeof Navigator;\n  navigator: Navigator;\n  Location: typeof Location;\n  location: Location;\n  localStorage: Storage;\n  sessionStorage: Storage;\n  caches: CacheStorage;\n\n  addEventListener<K extends keyof WindowEventMap>(\n    type: K,\n    listener: (\n      this: Window,\n      ev: WindowEventMap[K],\n    ) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  removeEventListener<K extends keyof WindowEventMap>(\n    type: K,\n    listener: (\n      this: Window,\n      ev: WindowEventMap[K],\n    ) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;\n}\n\n/** @category Web APIs */\ndeclare var window: Window & typeof globalThis;\n/** @category Web APIs */\ndeclare var self: Window & typeof globalThis;\n/** @category DOM Events */\ndeclare var onerror: ((this: Window, ev: ErrorEvent) => any) | null;\n/** @category DOM Events */\ndeclare var onload: ((this: Window, ev: Event) => any) | null;\n/** @category DOM Events */\ndeclare var onbeforeunload: ((this: Window, ev: Event) => any) | null;\n/** @category DOM Events */\ndeclare var onunload: ((this: Window, ev: Event) => any) | null;\n/** @category Observability */\ndeclare var onunhandledrejection:\n  | ((this: Window, ev: PromiseRejectionEvent) => any)\n  | null;\n/** @category Web Storage API */\ndeclare var localStorage: Storage;\n/** @category Web Storage API */\ndeclare var sessionStorage: Storage;\n/** @category Cache API */\ndeclare var caches: CacheStorage;\n\n/** @category Web APIs */\ndeclare class Navigator {\n  constructor();\n  readonly gpu: GPU;\n  readonly hardwareConcurrency: number;\n  readonly userAgent: string;\n  readonly language: string;\n  readonly languages: string[];\n}\n\n/** @category Web APIs */\ndeclare var navigator: Navigator;\n\n/**\n * Shows the given message and waits for the enter key pressed.\n *\n * If the stdin is not interactive, it does nothing.\n *\n * @category Web APIs\n *\n * @param message\n */\ndeclare function alert(message?: string): void;\n\n/**\n * Shows the given message and waits for the answer. Returns the user's answer as boolean.\n *\n * Only `y` and `Y` are considered as true.\n *\n * If the stdin is not interactive, it returns false.\n *\n * @category Web APIs\n *\n * @param message\n */\ndeclare function confirm(message?: string): boolean;\n\n/**\n * Shows the given message and waits for the user's input. Returns the user's input as string.\n *\n * If the default value is given and the user inputs the empty string, then it returns the given\n * default value.\n *\n * If the default value is not given and the user inputs the empty string, it returns null.\n *\n * If the stdin is not interactive, it returns null.\n *\n * @category Web APIs\n *\n * @param message\n * @param defaultValue\n */\ndeclare function prompt(message?: string, defaultValue?: string): string | null;\n\n/** Registers an event listener in the global scope, which will be called\n * synchronously whenever the event `type` is dispatched.\n *\n * ```ts\n * addEventListener('unload', () => { console.log('All finished!'); });\n * ...\n * dispatchEvent(new Event('unload'));\n * ```\n *\n * @category DOM Events\n */\ndeclare function addEventListener<\n  K extends keyof WindowEventMap,\n>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): void;\n/** @category DOM Events */\ndeclare function addEventListener(\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n): void;\n\n/** Remove a previously registered event listener from the global scope\n *\n * ```ts\n * const listener = () => { console.log('hello'); };\n * addEventListener('load', listener);\n * removeEventListener('load', listener);\n * ```\n *\n * @category DOM Events\n */\ndeclare function removeEventListener<\n  K extends keyof WindowEventMap,\n>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | EventListenerOptions,\n): void;\ndeclare function removeEventListener(\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n): void;\n\n// TODO(nayeemrmn): Move this to `extensions/web` where its implementation is.\n// The types there must first be split into window, worker and global types.\n/** The location (URL) of the object it is linked to. Changes done on it are\n * reflected on the object it relates to. Accessible via\n * `globalThis.location`.\n *\n * @category Web APIs\n */\ndeclare class Location {\n  constructor();\n  /** Returns a DOMStringList object listing the origins of the ancestor\n   * browsing contexts, from the parent browsing context to the top-level\n   * browsing context.\n   *\n   * Always empty in Deno. */\n  readonly ancestorOrigins: DOMStringList;\n  /** Returns the Location object's URL's fragment (includes leading \"#\" if\n   * non-empty).\n   *\n   * Cannot be set in Deno. */\n  hash: string;\n  /** Returns the Location object's URL's host and port (if different from the\n   * default port for the scheme).\n   *\n   * Cannot be set in Deno. */\n  host: string;\n  /** Returns the Location object's URL's host.\n   *\n   * Cannot be set in Deno. */\n  hostname: string;\n  /** Returns the Location object's URL.\n   *\n   * Cannot be set in Deno. */\n  href: string;\n  toString(): string;\n  /** Returns the Location object's URL's origin. */\n  readonly origin: string;\n  /** Returns the Location object's URL's path.\n   *\n   * Cannot be set in Deno. */\n  pathname: string;\n  /** Returns the Location object's URL's port.\n   *\n   * Cannot be set in Deno. */\n  port: string;\n  /** Returns the Location object's URL's scheme.\n   *\n   * Cannot be set in Deno. */\n  protocol: string;\n  /** Returns the Location object's URL's query (includes leading \"?\" if\n   * non-empty).\n   *\n   * Cannot be set in Deno. */\n  search: string;\n  /** Navigates to the given URL.\n   *\n   * Cannot be set in Deno. */\n  assign(url: string): void;\n  /** Reloads the current page.\n   *\n   * Disabled in Deno. */\n  reload(): void;\n  /** @deprecated */\n  reload(forcedReload: boolean): void;\n  /** Removes the current page from the session history and navigates to the\n   * given URL.\n   *\n   * Disabled in Deno. */\n  replace(url: string): void;\n}\n\n// TODO(nayeemrmn): Move this to `extensions/web` where its implementation is.\n// The types there must first be split into window, worker and global types.\n/** @category Web APIs */\ndeclare var location: Location;\n","lib.deno.worker.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"deno.ns\" />\n/// <reference lib=\"deno.shared_globals\" />\n/// <reference lib=\"deno.webgpu\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"deno.cache\" />\n\n/** @category Web Workers */\ninterface WorkerGlobalScopeEventMap {\n  \"error\": ErrorEvent;\n  \"unhandledrejection\": PromiseRejectionEvent;\n}\n\n/** @category Web Workers */\ndeclare class WorkerGlobalScope extends EventTarget {\n  readonly location: WorkerLocation;\n  readonly navigator: WorkerNavigator;\n  onerror: ((this: WorkerGlobalScope, ev: ErrorEvent) => any) | null;\n  onunhandledrejection:\n    | ((this: WorkerGlobalScope, ev: PromiseRejectionEvent) => any)\n    | null;\n\n  readonly self: WorkerGlobalScope & typeof globalThis;\n\n  addEventListener<K extends keyof WorkerGlobalScopeEventMap>(\n    type: K,\n    listener: (\n      this: WorkerGlobalScope,\n      ev: WorkerGlobalScopeEventMap[K],\n    ) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  removeEventListener<K extends keyof WorkerGlobalScopeEventMap>(\n    type: K,\n    listener: (\n      this: WorkerGlobalScope,\n      ev: WorkerGlobalScopeEventMap[K],\n    ) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;\n\n  Deno: typeof Deno;\n  caches: CacheStorage;\n}\n\n/** @category Web APIs */\ndeclare class WorkerNavigator {\n  constructor();\n  readonly gpu: GPU;\n  readonly hardwareConcurrency: number;\n  readonly userAgent: string;\n  readonly language: string;\n  readonly languages: string[];\n}\n\n/** @category Web APIs */\ndeclare var navigator: WorkerNavigator;\n\n/** @category Web Workers */\ninterface DedicatedWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\n  \"message\": MessageEvent;\n  \"messageerror\": MessageEvent;\n}\n\n/** @category Web APIs */\ndeclare class DedicatedWorkerGlobalScope extends WorkerGlobalScope {\n  readonly name: string;\n  onmessage:\n    | ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any)\n    | null;\n  onmessageerror:\n    | ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any)\n    | null;\n  close(): void;\n  postMessage(message: any, transfer: Transferable[]): void;\n  postMessage(message: any, options?: StructuredSerializeOptions): void;\n  addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(\n    type: K,\n    listener: (\n      this: DedicatedWorkerGlobalScope,\n      ev: DedicatedWorkerGlobalScopeEventMap[K],\n    ) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(\n    type: K,\n    listener: (\n      this: DedicatedWorkerGlobalScope,\n      ev: DedicatedWorkerGlobalScopeEventMap[K],\n    ) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;\n}\n\n/** @category Web Workers */\ndeclare var name: string;\n/** @category Web Workers */\ndeclare var onmessage:\n  | ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any)\n  | null;\n/** @category Web Workers */\ndeclare var onmessageerror:\n  | ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any)\n  | null;\n/** @category Web Workers */\ndeclare function close(): void;\n/** @category Web Workers */\ndeclare function postMessage(message: any, transfer: Transferable[]): void;\n/** @category Web Workers */\ndeclare function postMessage(\n  message: any,\n  options?: StructuredSerializeOptions,\n): void;\n/** @category Web APIs */\ndeclare var navigator: WorkerNavigator;\n/** @category Web APIs */\ndeclare var onerror:\n  | ((this: DedicatedWorkerGlobalScope, ev: ErrorEvent) => any)\n  | null;\n/** @category Observability */\ndeclare var onunhandledrejection:\n  | ((this: DedicatedWorkerGlobalScope, ev: PromiseRejectionEvent) => any)\n  | null;\n/** @category Web Workers */\ndeclare var self: WorkerGlobalScope & typeof globalThis;\n/** @category DOM Events */\ndeclare function addEventListener<\n  K extends keyof DedicatedWorkerGlobalScopeEventMap,\n>(\n  type: K,\n  listener: (\n    this: DedicatedWorkerGlobalScope,\n    ev: DedicatedWorkerGlobalScopeEventMap[K],\n  ) => any,\n  options?: boolean | AddEventListenerOptions,\n): void;\n/** @category DOM Events */\ndeclare function addEventListener(\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n): void;\n/** @category DOM Events */\ndeclare function removeEventListener<\n  K extends keyof DedicatedWorkerGlobalScopeEventMap,\n>(\n  type: K,\n  listener: (\n    this: DedicatedWorkerGlobalScope,\n    ev: DedicatedWorkerGlobalScopeEventMap[K],\n  ) => any,\n  options?: boolean | EventListenerOptions,\n): void;\n/** @category DOM Events */\ndeclare function removeEventListener(\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n): void;\n\n// TODO(nayeemrmn): Move this to `extensions/web` where its implementation is.\n// The types there must first be split into window, worker and global types.\n/** The absolute location of the script executed by the Worker. Such an object\n * is initialized for each worker and is available via the\n * WorkerGlobalScope.location property obtained by calling self.location.\n *\n * @category Web APIs\n */\ndeclare class WorkerLocation {\n  constructor();\n  readonly hash: string;\n  readonly host: string;\n  readonly hostname: string;\n  readonly href: string;\n  toString(): string;\n  readonly origin: string;\n  readonly pathname: string;\n  readonly port: string;\n  readonly protocol: string;\n  readonly search: string;\n}\n\n// TODO(nayeemrmn): Move this to `extensions/web` where its implementation is.\n// The types there must first be split into window, worker and global types.\n/** @category Web APIs */\ndeclare var location: WorkerLocation;\n","lib.deno_webgpu.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n// deno-lint-ignore-file no-explicit-any no-empty-interface\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"esnext\" />\n\n/** @category WebGPU */\ninterface GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPUObjectDescriptorBase {\n  label?: string;\n}\n\n/** @category WebGPU */\ndeclare class GPUSupportedLimits {\n  maxTextureDimension1D?: number;\n  maxTextureDimension2D?: number;\n  maxTextureDimension3D?: number;\n  maxTextureArrayLayers?: number;\n  maxBindGroups?: number;\n  maxDynamicUniformBuffersPerPipelineLayout?: number;\n  maxDynamicStorageBuffersPerPipelineLayout?: number;\n  maxSampledTexturesPerShaderStage?: number;\n  maxSamplersPerShaderStage?: number;\n  maxStorageBuffersPerShaderStage?: number;\n  maxStorageTexturesPerShaderStage?: number;\n  maxUniformBuffersPerShaderStage?: number;\n  maxUniformBufferBindingSize?: number;\n  maxStorageBufferBindingSize?: number;\n  minUniformBufferOffsetAlignment?: number;\n  minStorageBufferOffsetAlignment?: number;\n  maxVertexBuffers?: number;\n  maxVertexAttributes?: number;\n  maxVertexBufferArrayStride?: number;\n  maxInterStageShaderComponents?: number;\n  maxComputeWorkgroupStorageSize?: number;\n  maxComputeInvocationsPerWorkgroup?: number;\n  maxComputeWorkgroupSizeX?: number;\n  maxComputeWorkgroupSizeY?: number;\n  maxComputeWorkgroupSizeZ?: number;\n  maxComputeWorkgroupsPerDimension?: number;\n}\n\n/** @category WebGPU */\ndeclare class GPUSupportedFeatures {\n  forEach(\n    callbackfn: (\n      value: GPUFeatureName,\n      value2: GPUFeatureName,\n      set: Set<GPUFeatureName>,\n    ) => void,\n    thisArg?: any,\n  ): void;\n  has(value: GPUFeatureName): boolean;\n  size: number;\n  [\n    Symbol\n      .iterator\n  ](): IterableIterator<GPUFeatureName>;\n  entries(): IterableIterator<[GPUFeatureName, GPUFeatureName]>;\n  keys(): IterableIterator<GPUFeatureName>;\n  values(): IterableIterator<GPUFeatureName>;\n}\n\n/** @category WebGPU */\ndeclare class GPUAdapterInfo {\n  readonly vendor: string;\n  readonly architecture: string;\n  readonly device: string;\n  readonly description: string;\n}\n\n/** @category WebGPU */\ndeclare class GPU {\n  requestAdapter(\n    options?: GPURequestAdapterOptions,\n  ): Promise<GPUAdapter | null>;\n}\n\n/** @category WebGPU */\ndeclare interface GPURequestAdapterOptions {\n  powerPreference?: GPUPowerPreference;\n  forceFallbackAdapter?: boolean;\n}\n\n/** @category WebGPU */\ndeclare type GPUPowerPreference = \"low-power\" | \"high-performance\";\n\n/** @category WebGPU */\ndeclare class GPUAdapter {\n  readonly features: GPUSupportedFeatures;\n  readonly limits: GPUSupportedLimits;\n  readonly isFallbackAdapter: boolean;\n\n  requestDevice(descriptor?: GPUDeviceDescriptor): Promise<GPUDevice>;\n  requestAdapterInfo(unmaskHints?: string[]): Promise<GPUAdapterInfo>;\n}\n\n/** @category WebGPU */\ndeclare interface GPUDeviceDescriptor extends GPUObjectDescriptorBase {\n  requiredFeatures?: GPUFeatureName[];\n  requiredLimits?: Record<string, number>;\n}\n\n/** @category WebGPU */\ndeclare type GPUFeatureName =\n  | \"depth-clip-control\"\n  | \"depth24unorm-stencil8\"\n  | \"depth32float-stencil8\"\n  | \"pipeline-statistics-query\"\n  | \"texture-compression-bc\"\n  | \"texture-compression-etc2\"\n  | \"texture-compression-astc\"\n  | \"timestamp-query\"\n  | \"indirect-first-instance\"\n  | \"shader-f16\"\n  // extended from spec\n  | \"mappable-primary-buffers\"\n  | \"sampled-texture-binding-array\"\n  | \"sampled-texture-array-dynamic-indexing\"\n  | \"sampled-texture-array-non-uniform-indexing\"\n  | \"unsized-binding-array\"\n  | \"multi-draw-indirect\"\n  | \"multi-draw-indirect-count\"\n  | \"push-constants\"\n  | \"address-mode-clamp-to-border\"\n  | \"texture-adapter-specific-format-features\"\n  | \"shader-float64\"\n  | \"vertex-attribute-64bit\";\n\n/** @category WebGPU */\ndeclare class GPUDevice extends EventTarget implements GPUObjectBase {\n  label: string;\n\n  readonly lost: Promise<GPUDeviceLostInfo>;\n  pushErrorScope(filter: GPUErrorFilter): undefined;\n  popErrorScope(): Promise<GPUError | null>;\n  onuncapturederror:\n    | ((this: GPUDevice, ev: GPUUncapturedErrorEvent) => any)\n    | null;\n\n  readonly features: GPUSupportedFeatures;\n  readonly limits: GPUSupportedLimits;\n  readonly queue: GPUQueue;\n\n  destroy(): undefined;\n\n  createBuffer(descriptor: GPUBufferDescriptor): GPUBuffer;\n  createTexture(descriptor: GPUTextureDescriptor): GPUTexture;\n  createSampler(descriptor?: GPUSamplerDescriptor): GPUSampler;\n\n  createBindGroupLayout(\n    descriptor: GPUBindGroupLayoutDescriptor,\n  ): GPUBindGroupLayout;\n  createPipelineLayout(\n    descriptor: GPUPipelineLayoutDescriptor,\n  ): GPUPipelineLayout;\n  createBindGroup(descriptor: GPUBindGroupDescriptor): GPUBindGroup;\n\n  createShaderModule(descriptor: GPUShaderModuleDescriptor): GPUShaderModule;\n  createComputePipeline(\n    descriptor: GPUComputePipelineDescriptor,\n  ): GPUComputePipeline;\n  createRenderPipeline(\n    descriptor: GPURenderPipelineDescriptor,\n  ): GPURenderPipeline;\n  createComputePipelineAsync(\n    descriptor: GPUComputePipelineDescriptor,\n  ): Promise<GPUComputePipeline>;\n  createRenderPipelineAsync(\n    descriptor: GPURenderPipelineDescriptor,\n  ): Promise<GPURenderPipeline>;\n\n  createCommandEncoder(\n    descriptor?: GPUCommandEncoderDescriptor,\n  ): GPUCommandEncoder;\n  createRenderBundleEncoder(\n    descriptor: GPURenderBundleEncoderDescriptor,\n  ): GPURenderBundleEncoder;\n\n  createQuerySet(descriptor: GPUQuerySetDescriptor): GPUQuerySet;\n}\n\n/** @category WebGPU */\ndeclare class GPUBuffer implements GPUObjectBase {\n  label: string;\n\n  mapAsync(\n    mode: GPUMapModeFlags,\n    offset?: number,\n    size?: number,\n  ): Promise<undefined>;\n  getMappedRange(offset?: number, size?: number): ArrayBuffer;\n  unmap(): undefined;\n\n  destroy(): undefined;\n}\n\n/** @category WebGPU */\ndeclare interface GPUBufferDescriptor extends GPUObjectDescriptorBase {\n  size: number;\n  usage: GPUBufferUsageFlags;\n  mappedAtCreation?: boolean;\n}\n\n/** @category WebGPU */\ndeclare type GPUBufferUsageFlags = number;\n\n/** @category WebGPU */\ndeclare class GPUBufferUsage {\n  static MAP_READ: 0x0001;\n  static MAP_WRITE: 0x0002;\n  static COPY_SRC: 0x0004;\n  static COPY_DST: 0x0008;\n  static INDEX: 0x0010;\n  static VERTEX: 0x0020;\n  static UNIFORM: 0x0040;\n  static STORAGE: 0x0080;\n  static INDIRECT: 0x0100;\n  static QUERY_RESOLVE: 0x0200;\n}\n\n/** @category WebGPU */\ndeclare type GPUMapModeFlags = number;\n\n/** @category WebGPU */\ndeclare class GPUMapMode {\n  static READ: 0x0001;\n  static WRITE: 0x0002;\n}\n\n/** @category WebGPU */\ndeclare class GPUTexture implements GPUObjectBase {\n  label: string;\n\n  createView(descriptor?: GPUTextureViewDescriptor): GPUTextureView;\n  destroy(): undefined;\n}\n\n/** @category WebGPU */\ndeclare interface GPUTextureDescriptor extends GPUObjectDescriptorBase {\n  size: GPUExtent3D;\n  mipLevelCount?: number;\n  sampleCount?: number;\n  dimension?: GPUTextureDimension;\n  format: GPUTextureFormat;\n  usage: GPUTextureUsageFlags;\n}\n\n/** @category WebGPU */\ndeclare type GPUTextureDimension = \"1d\" | \"2d\" | \"3d\";\n\n/** @category WebGPU */\ndeclare type GPUTextureUsageFlags = number;\n\n/** @category WebGPU */\ndeclare class GPUTextureUsage {\n  static COPY_SRC: 0x01;\n  static COPY_DST: 0x02;\n  static TEXTURE_BINDING: 0x04;\n  static STORAGE_BINDING: 0x08;\n  static RENDER_ATTACHMENT: 0x10;\n}\n\n/** @category WebGPU */\ndeclare class GPUTextureView implements GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPUTextureViewDescriptor extends GPUObjectDescriptorBase {\n  format?: GPUTextureFormat;\n  dimension?: GPUTextureViewDimension;\n  aspect?: GPUTextureAspect;\n  baseMipLevel?: number;\n  mipLevelCount?: number;\n  baseArrayLayer?: number;\n  arrayLayerCount?: number;\n}\n\n/** @category WebGPU */\ndeclare type GPUTextureViewDimension =\n  | \"1d\"\n  | \"2d\"\n  | \"2d-array\"\n  | \"cube\"\n  | \"cube-array\"\n  | \"3d\";\n\n/** @category WebGPU */\ndeclare type GPUTextureAspect = \"all\" | \"stencil-only\" | \"depth-only\";\n\n/** @category WebGPU */\ndeclare type GPUTextureFormat =\n  | \"r8unorm\"\n  | \"r8snorm\"\n  | \"r8uint\"\n  | \"r8sint\"\n  | \"r16uint\"\n  | \"r16sint\"\n  | \"r16float\"\n  | \"rg8unorm\"\n  | \"rg8snorm\"\n  | \"rg8uint\"\n  | \"rg8sint\"\n  | \"r32uint\"\n  | \"r32sint\"\n  | \"r32float\"\n  | \"rg16uint\"\n  | \"rg16sint\"\n  | \"rg16float\"\n  | \"rgba8unorm\"\n  | \"rgba8unorm-srgb\"\n  | \"rgba8snorm\"\n  | \"rgba8uint\"\n  | \"rgba8sint\"\n  | \"bgra8unorm\"\n  | \"bgra8unorm-srgb\"\n  | \"rgb9e5ufloat\"\n  | \"rgb10a2unorm\"\n  | \"rg11b10ufloat\"\n  | \"rg32uint\"\n  | \"rg32sint\"\n  | \"rg32float\"\n  | \"rgba16uint\"\n  | \"rgba16sint\"\n  | \"rgba16float\"\n  | \"rgba32uint\"\n  | \"rgba32sint\"\n  | \"rgba32float\"\n  | \"stencil8\"\n  | \"depth16unorm\"\n  | \"depth24plus\"\n  | \"depth24plus-stencil8\"\n  | \"depth32float\"\n  | \"depth24unorm-stencil8\"\n  | \"depth32float-stencil8\"\n  | \"bc1-rgba-unorm\"\n  | \"bc1-rgba-unorm-srgb\"\n  | \"bc2-rgba-unorm\"\n  | \"bc2-rgba-unorm-srgb\"\n  | \"bc3-rgba-unorm\"\n  | \"bc3-rgba-unorm-srgb\"\n  | \"bc4-r-unorm\"\n  | \"bc4-r-snorm\"\n  | \"bc5-rg-unorm\"\n  | \"bc5-rg-snorm\"\n  | \"bc6h-rgb-ufloat\"\n  | \"bc6h-rgb-float\"\n  | \"bc7-rgba-unorm\"\n  | \"bc7-rgba-unorm-srgb\"\n  | \"etc2-rgb8unorm\"\n  | \"etc2-rgb8unorm-srgb\"\n  | \"etc2-rgb8a1unorm\"\n  | \"etc2-rgb8a1unorm-srgb\"\n  | \"etc2-rgba8unorm\"\n  | \"etc2-rgba8unorm-srgb\"\n  | \"eac-r11unorm\"\n  | \"eac-r11snorm\"\n  | \"eac-rg11unorm\"\n  | \"eac-rg11snorm\"\n  | \"astc-4x4-unorm\"\n  | \"astc-4x4-unorm-srgb\"\n  | \"astc-5x4-unorm\"\n  | \"astc-5x4-unorm-srgb\"\n  | \"astc-5x5-unorm\"\n  | \"astc-5x5-unorm-srgb\"\n  | \"astc-6x5-unorm\"\n  | \"astc-6x5-unorm-srgb\"\n  | \"astc-6x6-unorm\"\n  | \"astc-6x6-unorm-srgb\"\n  | \"astc-8x5-unorm\"\n  | \"astc-8x5-unorm-srgb\"\n  | \"astc-8x6-unorm\"\n  | \"astc-8x6-unorm-srgb\"\n  | \"astc-8x8-unorm\"\n  | \"astc-8x8-unorm-srgb\"\n  | \"astc-10x5-unorm\"\n  | \"astc-10x5-unorm-srgb\"\n  | \"astc-10x6-unorm\"\n  | \"astc-10x6-unorm-srgb\"\n  | \"astc-10x8-unorm\"\n  | \"astc-10x8-unorm-srgb\"\n  | \"astc-10x10-unorm\"\n  | \"astc-10x10-unorm-srgb\"\n  | \"astc-12x10-unorm\"\n  | \"astc-12x10-unorm-srgb\"\n  | \"astc-12x12-unorm\"\n  | \"astc-12x12-unorm-srgb\";\n\n/** @category WebGPU */\ndeclare class GPUSampler implements GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPUSamplerDescriptor extends GPUObjectDescriptorBase {\n  addressModeU?: GPUAddressMode;\n  addressModeV?: GPUAddressMode;\n  addressModeW?: GPUAddressMode;\n  magFilter?: GPUFilterMode;\n  minFilter?: GPUFilterMode;\n  mipmapFilter?: GPUMipmapFilterMode;\n  lodMinClamp?: number;\n  lodMaxClamp?: number;\n  compare?: GPUCompareFunction;\n  maxAnisotropy?: number;\n}\n\n/** @category WebGPU */\ndeclare type GPUAddressMode = \"clamp-to-edge\" | \"repeat\" | \"mirror-repeat\";\n\n/** @category WebGPU */\ndeclare type GPUFilterMode = \"nearest\" | \"linear\";\n\n/** @category WebGPU */\ndeclare type GPUMipmapFilterMode = \"nearest\" | \"linear\";\n\n/** @category WebGPU */\ndeclare type GPUCompareFunction =\n  | \"never\"\n  | \"less\"\n  | \"equal\"\n  | \"less-equal\"\n  | \"greater\"\n  | \"not-equal\"\n  | \"greater-equal\"\n  | \"always\";\n\n/** @category WebGPU */\ndeclare class GPUBindGroupLayout implements GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPUBindGroupLayoutDescriptor extends GPUObjectDescriptorBase {\n  entries: GPUBindGroupLayoutEntry[];\n}\n\n/** @category WebGPU */\ndeclare interface GPUBindGroupLayoutEntry {\n  binding: number;\n  visibility: GPUShaderStageFlags;\n\n  buffer?: GPUBufferBindingLayout;\n  sampler?: GPUSamplerBindingLayout;\n  texture?: GPUTextureBindingLayout;\n  storageTexture?: GPUStorageTextureBindingLayout;\n}\n\n/** @category WebGPU */\ndeclare type GPUShaderStageFlags = number;\n\n/** @category WebGPU */\ndeclare class GPUShaderStage {\n  static VERTEX: 0x1;\n  static FRAGMENT: 0x2;\n  static COMPUTE: 0x4;\n}\n\n/** @category WebGPU */\ndeclare interface GPUBufferBindingLayout {\n  type?: GPUBufferBindingType;\n  hasDynamicOffset?: boolean;\n  minBindingSize?: number;\n}\n\n/** @category WebGPU */\ndeclare type GPUBufferBindingType = \"uniform\" | \"storage\" | \"read-only-storage\";\n\n/** @category WebGPU */\ndeclare interface GPUSamplerBindingLayout {\n  type?: GPUSamplerBindingType;\n}\n\n/** @category WebGPU */\ndeclare type GPUSamplerBindingType =\n  | \"filtering\"\n  | \"non-filtering\"\n  | \"comparison\";\n\n/** @category WebGPU */\ndeclare interface GPUTextureBindingLayout {\n  sampleType?: GPUTextureSampleType;\n  viewDimension?: GPUTextureViewDimension;\n  multisampled?: boolean;\n}\n\n/** @category WebGPU */\ndeclare type GPUTextureSampleType =\n  | \"float\"\n  | \"unfilterable-float\"\n  | \"depth\"\n  | \"sint\"\n  | \"uint\";\n\n/** @category WebGPU */\ndeclare type GPUStorageTextureAccess = \"write-only\";\n\n/** @category WebGPU */\ndeclare interface GPUStorageTextureBindingLayout {\n  access: GPUStorageTextureAccess;\n  format: GPUTextureFormat;\n  viewDimension?: GPUTextureViewDimension;\n}\n\n/** @category WebGPU */\ndeclare class GPUBindGroup implements GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPUBindGroupDescriptor extends GPUObjectDescriptorBase {\n  layout: GPUBindGroupLayout;\n  entries: GPUBindGroupEntry[];\n}\n\n/** @category WebGPU */\ndeclare type GPUBindingResource =\n  | GPUSampler\n  | GPUTextureView\n  | GPUBufferBinding;\n\n/** @category WebGPU */\ndeclare interface GPUBindGroupEntry {\n  binding: number;\n  resource: GPUBindingResource;\n}\n\n/** @category WebGPU */\ndeclare interface GPUBufferBinding {\n  buffer: GPUBuffer;\n  offset?: number;\n  size?: number;\n}\n\n/** @category WebGPU */\ndeclare class GPUPipelineLayout implements GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPUPipelineLayoutDescriptor extends GPUObjectDescriptorBase {\n  bindGroupLayouts: GPUBindGroupLayout[];\n}\n\n/** @category WebGPU */\ndeclare type GPUCompilationMessageType = \"error\" | \"warning\" | \"info\";\n\n/** @category WebGPU */\ndeclare interface GPUCompilationMessage {\n  readonly message: string;\n  readonly type: GPUCompilationMessageType;\n  readonly lineNum: number;\n  readonly linePos: number;\n}\n\n/** @category WebGPU */\ndeclare interface GPUCompilationInfo {\n  readonly messages: ReadonlyArray<GPUCompilationMessage>;\n}\n\n/** @category WebGPU */\ndeclare class GPUShaderModule implements GPUObjectBase {\n  label: string;\n\n  compilationInfo(): Promise<GPUCompilationInfo>;\n}\n\n/** @category WebGPU */\ndeclare interface GPUShaderModuleDescriptor extends GPUObjectDescriptorBase {\n  code: string;\n  sourceMap?: any;\n}\n\n/** @category WebGPU */\ndeclare type GPUAutoLayoutMode = \"auto\";\n\n/** @category WebGPU */\ndeclare interface GPUPipelineDescriptorBase extends GPUObjectDescriptorBase {\n  layout: GPUPipelineLayout | GPUAutoLayoutMode;\n}\n\n/** @category WebGPU */\ndeclare interface GPUPipelineBase {\n  getBindGroupLayout(index: number): GPUBindGroupLayout;\n}\n\n/** @category WebGPU */\ndeclare interface GPUProgrammableStage {\n  module: GPUShaderModule;\n  entryPoint: string;\n}\n\n/** @category WebGPU */\ndeclare class GPUComputePipeline implements GPUObjectBase, GPUPipelineBase {\n  label: string;\n\n  getBindGroupLayout(index: number): GPUBindGroupLayout;\n}\n\n/** @category WebGPU */\ndeclare interface GPUComputePipelineDescriptor\n  extends GPUPipelineDescriptorBase {\n  compute: GPUProgrammableStage;\n}\n\n/** @category WebGPU */\ndeclare class GPURenderPipeline implements GPUObjectBase, GPUPipelineBase {\n  label: string;\n\n  getBindGroupLayout(index: number): GPUBindGroupLayout;\n}\n\n/** @category WebGPU */\ndeclare interface GPURenderPipelineDescriptor\n  extends GPUPipelineDescriptorBase {\n  vertex: GPUVertexState;\n  primitive?: GPUPrimitiveState;\n  depthStencil?: GPUDepthStencilState;\n  multisample?: GPUMultisampleState;\n  fragment?: GPUFragmentState;\n}\n\n/** @category WebGPU */\ndeclare interface GPUPrimitiveState {\n  topology?: GPUPrimitiveTopology;\n  stripIndexFormat?: GPUIndexFormat;\n  frontFace?: GPUFrontFace;\n  cullMode?: GPUCullMode;\n  unclippedDepth?: boolean;\n}\n\n/** @category WebGPU */\ndeclare type GPUPrimitiveTopology =\n  | \"point-list\"\n  | \"line-list\"\n  | \"line-strip\"\n  | \"triangle-list\"\n  | \"triangle-strip\";\n\n/** @category WebGPU */\ndeclare type GPUFrontFace = \"ccw\" | \"cw\";\n\n/** @category WebGPU */\ndeclare type GPUCullMode = \"none\" | \"front\" | \"back\";\n\n/** @category WebGPU */\ndeclare interface GPUMultisampleState {\n  count?: number;\n  mask?: number;\n  alphaToCoverageEnabled?: boolean;\n}\n\n/** @category WebGPU */\ndeclare interface GPUFragmentState extends GPUProgrammableStage {\n  targets: (GPUColorTargetState | null)[];\n}\n\n/** @category WebGPU */\ndeclare interface GPUColorTargetState {\n  format: GPUTextureFormat;\n\n  blend?: GPUBlendState;\n  writeMask?: GPUColorWriteFlags;\n}\n\n/** @category WebGPU */\ndeclare interface GPUBlendState {\n  color: GPUBlendComponent;\n  alpha: GPUBlendComponent;\n}\n\n/** @category WebGPU */\ndeclare type GPUColorWriteFlags = number;\n\n/** @category WebGPU */\ndeclare class GPUColorWrite {\n  static RED: 0x1;\n  static GREEN: 0x2;\n  static BLUE: 0x4;\n  static ALPHA: 0x8;\n  static ALL: 0xF;\n}\n\n/** @category WebGPU */\ndeclare interface GPUBlendComponent {\n  operation?: GPUBlendOperation;\n  srcFactor?: GPUBlendFactor;\n  dstFactor?: GPUBlendFactor;\n}\n\n/** @category WebGPU */\ndeclare type GPUBlendFactor =\n  | \"zero\"\n  | \"one\"\n  | \"src\"\n  | \"one-minus-src\"\n  | \"src-alpha\"\n  | \"one-minus-src-alpha\"\n  | \"dst\"\n  | \"one-minus-dst\"\n  | \"dst-alpha\"\n  | \"one-minus-dst-alpha\"\n  | \"src-alpha-saturated\"\n  | \"constant\"\n  | \"one-minus-constant\";\n\n/** @category WebGPU */\ndeclare type GPUBlendOperation =\n  | \"add\"\n  | \"subtract\"\n  | \"reverse-subtract\"\n  | \"min\"\n  | \"max\";\n\n/** @category WebGPU */\ndeclare interface GPUDepthStencilState {\n  format: GPUTextureFormat;\n\n  depthWriteEnabled?: boolean;\n  depthCompare?: GPUCompareFunction;\n\n  stencilFront?: GPUStencilFaceState;\n  stencilBack?: GPUStencilFaceState;\n\n  stencilReadMask?: number;\n  stencilWriteMask?: number;\n\n  depthBias?: number;\n  depthBiasSlopeScale?: number;\n  depthBiasClamp?: number;\n}\n\n/** @category WebGPU */\ndeclare interface GPUStencilFaceState {\n  compare?: GPUCompareFunction;\n  failOp?: GPUStencilOperation;\n  depthFailOp?: GPUStencilOperation;\n  passOp?: GPUStencilOperation;\n}\n\n/** @category WebGPU */\ndeclare type GPUStencilOperation =\n  | \"keep\"\n  | \"zero\"\n  | \"replace\"\n  | \"invert\"\n  | \"increment-clamp\"\n  | \"decrement-clamp\"\n  | \"increment-wrap\"\n  | \"decrement-wrap\";\n\n/** @category WebGPU */\ndeclare type GPUIndexFormat = \"uint16\" | \"uint32\";\n\n/** @category WebGPU */\ndeclare type GPUVertexFormat =\n  | \"uint8x2\"\n  | \"uint8x4\"\n  | \"sint8x2\"\n  | \"sint8x4\"\n  | \"unorm8x2\"\n  | \"unorm8x4\"\n  | \"snorm8x2\"\n  | \"snorm8x4\"\n  | \"uint16x2\"\n  | \"uint16x4\"\n  | \"sint16x2\"\n  | \"sint16x4\"\n  | \"unorm16x2\"\n  | \"unorm16x4\"\n  | \"snorm16x2\"\n  | \"snorm16x4\"\n  | \"float16x2\"\n  | \"float16x4\"\n  | \"float32\"\n  | \"float32x2\"\n  | \"float32x3\"\n  | \"float32x4\"\n  | \"uint32\"\n  | \"uint32x2\"\n  | \"uint32x3\"\n  | \"uint32x4\"\n  | \"sint32\"\n  | \"sint32x2\"\n  | \"sint32x3\"\n  | \"sint32x4\";\n\n/** @category WebGPU */\ndeclare type GPUVertexStepMode = \"vertex\" | \"instance\";\n\n/** @category WebGPU */\ndeclare interface GPUVertexState extends GPUProgrammableStage {\n  buffers?: (GPUVertexBufferLayout | null)[];\n}\n\n/** @category WebGPU */\ndeclare interface GPUVertexBufferLayout {\n  arrayStride: number;\n  stepMode?: GPUVertexStepMode;\n  attributes: GPUVertexAttribute[];\n}\n\n/** @category WebGPU */\ndeclare interface GPUVertexAttribute {\n  format: GPUVertexFormat;\n  offset: number;\n\n  shaderLocation: number;\n}\n\n/** @category WebGPU */\ndeclare class GPUCommandBuffer implements GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPUCommandBufferDescriptor extends GPUObjectDescriptorBase {}\n\n/** @category WebGPU */\ndeclare class GPUCommandEncoder implements GPUObjectBase {\n  label: string;\n\n  beginRenderPass(descriptor: GPURenderPassDescriptor): GPURenderPassEncoder;\n  beginComputePass(\n    descriptor?: GPUComputePassDescriptor,\n  ): GPUComputePassEncoder;\n\n  copyBufferToBuffer(\n    source: GPUBuffer,\n    sourceOffset: number,\n    destination: GPUBuffer,\n    destinationOffset: number,\n    size: number,\n  ): undefined;\n\n  copyBufferToTexture(\n    source: GPUImageCopyBuffer,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3D,\n  ): undefined;\n\n  copyTextureToBuffer(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyBuffer,\n    copySize: GPUExtent3D,\n  ): undefined;\n\n  copyTextureToTexture(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3D,\n  ): undefined;\n\n  clearBuffer(\n    destination: GPUBuffer,\n    destinationOffset?: number,\n    size?: number,\n  ): undefined;\n\n  pushDebugGroup(groupLabel: string): undefined;\n  popDebugGroup(): undefined;\n  insertDebugMarker(markerLabel: string): undefined;\n\n  writeTimestamp(querySet: GPUQuerySet, queryIndex: number): undefined;\n\n  resolveQuerySet(\n    querySet: GPUQuerySet,\n    firstQuery: number,\n    queryCount: number,\n    destination: GPUBuffer,\n    destinationOffset: number,\n  ): undefined;\n\n  finish(descriptor?: GPUCommandBufferDescriptor): GPUCommandBuffer;\n}\n\n/** @category WebGPU */\ndeclare interface GPUCommandEncoderDescriptor extends GPUObjectDescriptorBase {}\n\n/** @category WebGPU */\ndeclare interface GPUImageDataLayout {\n  offset?: number;\n  bytesPerRow?: number;\n  rowsPerImage?: number;\n}\n\n/** @category WebGPU */\ndeclare interface GPUImageCopyBuffer extends GPUImageDataLayout {\n  buffer: GPUBuffer;\n}\n\n/** @category WebGPU */\ndeclare interface GPUImageCopyTexture {\n  texture: GPUTexture;\n  mipLevel?: number;\n  origin?: GPUOrigin3D;\n  aspect?: GPUTextureAspect;\n}\n\n/** @category WebGPU */\ninterface GPUProgrammablePassEncoder {\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsets?: number[],\n  ): undefined;\n\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsetsData: Uint32Array,\n    dynamicOffsetsDataStart: number,\n    dynamicOffsetsDataLength: number,\n  ): undefined;\n\n  pushDebugGroup(groupLabel: string): undefined;\n  popDebugGroup(): undefined;\n  insertDebugMarker(markerLabel: string): undefined;\n}\n\n/** @category WebGPU */\ndeclare class GPUComputePassEncoder\n  implements GPUObjectBase, GPUProgrammablePassEncoder {\n  label: string;\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsets?: number[],\n  ): undefined;\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsetsData: Uint32Array,\n    dynamicOffsetsDataStart: number,\n    dynamicOffsetsDataLength: number,\n  ): undefined;\n  pushDebugGroup(groupLabel: string): undefined;\n  popDebugGroup(): undefined;\n  insertDebugMarker(markerLabel: string): undefined;\n  setPipeline(pipeline: GPUComputePipeline): undefined;\n  dispatchWorkgroups(x: number, y?: number, z?: number): undefined;\n  dispatchWorkgroupsIndirect(\n    indirectBuffer: GPUBuffer,\n    indirectOffset: number,\n  ): undefined;\n\n  beginPipelineStatisticsQuery(\n    querySet: GPUQuerySet,\n    queryIndex: number,\n  ): undefined;\n  endPipelineStatisticsQuery(): undefined;\n\n  writeTimestamp(querySet: GPUQuerySet, queryIndex: number): undefined;\n\n  end(): undefined;\n}\n\n/** @category WebGPU */\ndeclare interface GPUComputePassDescriptor extends GPUObjectDescriptorBase {}\n\n/** @category WebGPU */\ninterface GPURenderEncoderBase {\n  setPipeline(pipeline: GPURenderPipeline): undefined;\n\n  setIndexBuffer(\n    buffer: GPUBuffer,\n    indexFormat: GPUIndexFormat,\n    offset?: number,\n    size?: number,\n  ): undefined;\n  setVertexBuffer(\n    slot: number,\n    buffer: GPUBuffer,\n    offset?: number,\n    size?: number,\n  ): undefined;\n\n  draw(\n    vertexCount: number,\n    instanceCount?: number,\n    firstVertex?: number,\n    firstInstance?: number,\n  ): undefined;\n  drawIndexed(\n    indexCount: number,\n    instanceCount?: number,\n    firstIndex?: number,\n    baseVertex?: number,\n    firstInstance?: number,\n  ): undefined;\n\n  drawIndirect(indirectBuffer: GPUBuffer, indirectOffset: number): undefined;\n  drawIndexedIndirect(\n    indirectBuffer: GPUBuffer,\n    indirectOffset: number,\n  ): undefined;\n}\n\n/** @category WebGPU */\ndeclare class GPURenderPassEncoder\n  implements GPUObjectBase, GPUProgrammablePassEncoder, GPURenderEncoderBase {\n  label: string;\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsets?: number[],\n  ): undefined;\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsetsData: Uint32Array,\n    dynamicOffsetsDataStart: number,\n    dynamicOffsetsDataLength: number,\n  ): undefined;\n  pushDebugGroup(groupLabel: string): undefined;\n  popDebugGroup(): undefined;\n  insertDebugMarker(markerLabel: string): undefined;\n  setPipeline(pipeline: GPURenderPipeline): undefined;\n  setIndexBuffer(\n    buffer: GPUBuffer,\n    indexFormat: GPUIndexFormat,\n    offset?: number,\n    size?: number,\n  ): undefined;\n  setVertexBuffer(\n    slot: number,\n    buffer: GPUBuffer,\n    offset?: number,\n    size?: number,\n  ): undefined;\n  draw(\n    vertexCount: number,\n    instanceCount?: number,\n    firstVertex?: number,\n    firstInstance?: number,\n  ): undefined;\n  drawIndexed(\n    indexCount: number,\n    instanceCount?: number,\n    firstIndex?: number,\n    baseVertex?: number,\n    firstInstance?: number,\n  ): undefined;\n  drawIndirect(indirectBuffer: GPUBuffer, indirectOffset: number): undefined;\n  drawIndexedIndirect(\n    indirectBuffer: GPUBuffer,\n    indirectOffset: number,\n  ): undefined;\n\n  setViewport(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    minDepth: number,\n    maxDepth: number,\n  ): undefined;\n\n  setScissorRect(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n  ): undefined;\n\n  setBlendConstant(color: GPUColor): undefined;\n  setStencilReference(reference: number): undefined;\n\n  beginOcclusionQuery(queryIndex: number): undefined;\n  endOcclusionQuery(): undefined;\n\n  beginPipelineStatisticsQuery(\n    querySet: GPUQuerySet,\n    queryIndex: number,\n  ): undefined;\n  endPipelineStatisticsQuery(): undefined;\n\n  writeTimestamp(querySet: GPUQuerySet, queryIndex: number): undefined;\n\n  executeBundles(bundles: GPURenderBundle[]): undefined;\n  end(): undefined;\n}\n\n/** @category WebGPU */\ndeclare interface GPURenderPassDescriptor extends GPUObjectDescriptorBase {\n  colorAttachments: (GPURenderPassColorAttachment | null)[];\n  depthStencilAttachment?: GPURenderPassDepthStencilAttachment;\n  occlusionQuerySet?: GPUQuerySet;\n}\n\n/** @category WebGPU */\ndeclare interface GPURenderPassColorAttachment {\n  view: GPUTextureView;\n  resolveTarget?: GPUTextureView;\n\n  clearValue?: GPUColor;\n  loadOp: GPULoadOp;\n  storeOp: GPUStoreOp;\n}\n\n/** @category WebGPU */\ndeclare interface GPURenderPassDepthStencilAttachment {\n  view: GPUTextureView;\n\n  depthClearValue?: number;\n  depthLoadOp?: GPULoadOp;\n  depthStoreOp?: GPUStoreOp;\n  depthReadOnly?: boolean;\n\n  stencilClearValue?: number;\n  stencilLoadOp?: GPULoadOp;\n  stencilStoreOp?: GPUStoreOp;\n  stencilReadOnly?: boolean;\n}\n\n/** @category WebGPU */\ndeclare type GPULoadOp = \"load\" | \"clear\";\n\n/** @category WebGPU */\ndeclare type GPUStoreOp = \"store\" | \"discard\";\n\n/** @category WebGPU */\ndeclare class GPURenderBundle implements GPUObjectBase {\n  label: string;\n}\n\n/** @category WebGPU */\ndeclare interface GPURenderBundleDescriptor extends GPUObjectDescriptorBase {}\n\n/** @category WebGPU */\ndeclare class GPURenderBundleEncoder\n  implements GPUObjectBase, GPUProgrammablePassEncoder, GPURenderEncoderBase {\n  label: string;\n  draw(\n    vertexCount: number,\n    instanceCount?: number,\n    firstVertex?: number,\n    firstInstance?: number,\n  ): undefined;\n  drawIndexed(\n    indexCount: number,\n    instanceCount?: number,\n    firstIndex?: number,\n    baseVertex?: number,\n    firstInstance?: number,\n  ): undefined;\n  drawIndexedIndirect(\n    indirectBuffer: GPUBuffer,\n    indirectOffset: number,\n  ): undefined;\n  drawIndirect(indirectBuffer: GPUBuffer, indirectOffset: number): undefined;\n  insertDebugMarker(markerLabel: string): undefined;\n  popDebugGroup(): undefined;\n  pushDebugGroup(groupLabel: string): undefined;\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsets?: number[],\n  ): undefined;\n  setBindGroup(\n    index: number,\n    bindGroup: GPUBindGroup,\n    dynamicOffsetsData: Uint32Array,\n    dynamicOffsetsDataStart: number,\n    dynamicOffsetsDataLength: number,\n  ): undefined;\n  setIndexBuffer(\n    buffer: GPUBuffer,\n    indexFormat: GPUIndexFormat,\n    offset?: number,\n    size?: number,\n  ): undefined;\n  setPipeline(pipeline: GPURenderPipeline): undefined;\n  setVertexBuffer(\n    slot: number,\n    buffer: GPUBuffer,\n    offset?: number,\n    size?: number,\n  ): undefined;\n\n  finish(descriptor?: GPURenderBundleDescriptor): GPURenderBundle;\n}\n\n/** @category WebGPU */\ndeclare interface GPURenderPassLayout extends GPUObjectDescriptorBase {\n  colorFormats: (GPUTextureFormat | null)[];\n  depthStencilFormat?: GPUTextureFormat;\n  sampleCount?: number;\n}\n\n/** @category WebGPU */\ndeclare interface GPURenderBundleEncoderDescriptor extends GPURenderPassLayout {\n  depthReadOnly?: boolean;\n  stencilReadOnly?: boolean;\n}\n\n/** @category WebGPU */\ndeclare class GPUQueue implements GPUObjectBase {\n  label: string;\n\n  submit(commandBuffers: GPUCommandBuffer[]): undefined;\n\n  onSubmittedWorkDone(): Promise<undefined>;\n\n  writeBuffer(\n    buffer: GPUBuffer,\n    bufferOffset: number,\n    data: BufferSource,\n    dataOffset?: number,\n    size?: number,\n  ): undefined;\n\n  writeTexture(\n    destination: GPUImageCopyTexture,\n    data: BufferSource,\n    dataLayout: GPUImageDataLayout,\n    size: GPUExtent3D,\n  ): undefined;\n}\n\n/** @category WebGPU */\ndeclare class GPUQuerySet implements GPUObjectBase {\n  label: string;\n\n  destroy(): undefined;\n}\n\n/** @category WebGPU */\ndeclare interface GPUQuerySetDescriptor extends GPUObjectDescriptorBase {\n  type: GPUQueryType;\n  count: number;\n  pipelineStatistics?: GPUPipelineStatisticName[];\n}\n\n/** @category WebGPU */\ndeclare type GPUQueryType = \"occlusion\" | \"pipeline-statistics\" | \"timestamp\";\n\n/** @category WebGPU */\ndeclare type GPUPipelineStatisticName =\n  | \"vertex-shader-invocations\"\n  | \"clipper-invocations\"\n  | \"clipper-primitives-out\"\n  | \"fragment-shader-invocations\"\n  | \"compute-shader-invocations\";\n\n/** @category WebGPU */\ndeclare type GPUDeviceLostReason = \"destroyed\";\n\n/** @category WebGPU */\ndeclare interface GPUDeviceLostInfo {\n  readonly reason: GPUDeviceLostReason | undefined;\n  readonly message: string;\n}\n\n/** @category WebGPU */\ndeclare class GPUError {\n  readonly message: string;\n}\n\n/** @category WebGPU */\ndeclare type GPUErrorFilter = \"out-of-memory\" | \"validation\";\n\n/** @category WebGPU */\ndeclare class GPUOutOfMemoryError extends GPUError {\n  constructor(message: string);\n}\n\n/** @category WebGPU */\ndeclare class GPUValidationError extends GPUError {\n  constructor(message: string);\n}\n\n/** @category WebGPU */\ndeclare class GPUUncapturedErrorEvent extends Event {\n  constructor(\n    type: string,\n    gpuUncapturedErrorEventInitDict: GPUUncapturedErrorEventInit,\n  );\n  readonly error: GPUError;\n}\n\n/** @category WebGPU */\ndeclare interface GPUUncapturedErrorEventInit extends EventInit {\n  error?: GPUError;\n}\n\n/** @category WebGPU */\ndeclare interface GPUColorDict {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\n/** @category WebGPU */\ndeclare type GPUColor = number[] | GPUColorDict;\n\n/** @category WebGPU */\ndeclare interface GPUOrigin3DDict {\n  x?: number;\n  y?: number;\n  z?: number;\n}\n\n/** @category WebGPU */\ndeclare type GPUOrigin3D = number[] | GPUOrigin3DDict;\n\n/** @category WebGPU */\ndeclare interface GPUExtent3DDict {\n  width: number;\n  height?: number;\n  depthOrArrayLayers?: number;\n}\n\n/** @category WebGPU */\ndeclare type GPUExtent3D = number[] | GPUExtent3DDict;\n","lib.dom.asynciterable.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n/// <reference no-default-lib=\"true\"/>\n\ninterface ReadableStream<R = any> {\n  [Symbol.asyncIterator](options?: {\n    preventCancel?: boolean;\n  }): AsyncIterableIterator<R>;\n}\n","lib.dom.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"dom.extras\" />\n\n\n/////////////////////////////\n/// Window APIs\n/////////////////////////////\n\ninterface AddEventListenerOptions extends EventListenerOptions {\n    once?: boolean;\n    passive?: boolean;\n    signal?: AbortSignal;\n}\n\ninterface AesCbcParams extends Algorithm {\n    iv: BufferSource;\n}\n\ninterface AesCtrParams extends Algorithm {\n    counter: BufferSource;\n    length: number;\n}\n\ninterface AesDerivedKeyParams extends Algorithm {\n    length: number;\n}\n\ninterface AesGcmParams extends Algorithm {\n    additionalData?: BufferSource;\n    iv: BufferSource;\n    tagLength?: number;\n}\n\ninterface AesKeyAlgorithm extends KeyAlgorithm {\n    length: number;\n}\n\ninterface AesKeyGenParams extends Algorithm {\n    length: number;\n}\n\ninterface Algorithm {\n    name: string;\n}\n\ninterface AnalyserOptions extends AudioNodeOptions {\n    fftSize?: number;\n    maxDecibels?: number;\n    minDecibels?: number;\n    smoothingTimeConstant?: number;\n}\n\ninterface AnimationEventInit extends EventInit {\n    animationName?: string;\n    elapsedTime?: number;\n    pseudoElement?: string;\n}\n\ninterface AnimationPlaybackEventInit extends EventInit {\n    currentTime?: CSSNumberish | null;\n    timelineTime?: CSSNumberish | null;\n}\n\ninterface AssignedNodesOptions {\n    flatten?: boolean;\n}\n\ninterface AudioBufferOptions {\n    length: number;\n    numberOfChannels?: number;\n    sampleRate: number;\n}\n\ninterface AudioBufferSourceOptions {\n    buffer?: AudioBuffer | null;\n    detune?: number;\n    loop?: boolean;\n    loopEnd?: number;\n    loopStart?: number;\n    playbackRate?: number;\n}\n\ninterface AudioConfiguration {\n    bitrate?: number;\n    channels?: string;\n    contentType: string;\n    samplerate?: number;\n    spatialRendering?: boolean;\n}\n\ninterface AudioContextOptions {\n    latencyHint?: AudioContextLatencyCategory | number;\n    sampleRate?: number;\n}\n\ninterface AudioNodeOptions {\n    channelCount?: number;\n    channelCountMode?: ChannelCountMode;\n    channelInterpretation?: ChannelInterpretation;\n}\n\ninterface AudioProcessingEventInit extends EventInit {\n    inputBuffer: AudioBuffer;\n    outputBuffer: AudioBuffer;\n    playbackTime: number;\n}\n\ninterface AudioTimestamp {\n    contextTime?: number;\n    performanceTime?: DOMHighResTimeStamp;\n}\n\ninterface AudioWorkletNodeOptions extends AudioNodeOptions {\n    numberOfInputs?: number;\n    numberOfOutputs?: number;\n    outputChannelCount?: number[];\n    parameterData?: Record<string, number>;\n    processorOptions?: any;\n}\n\ninterface AuthenticationExtensionsClientInputs {\n    appid?: string;\n    appidExclude?: string;\n    credProps?: boolean;\n    uvm?: boolean;\n}\n\ninterface AuthenticationExtensionsClientOutputs {\n    appid?: boolean;\n    credProps?: CredentialPropertiesOutput;\n    uvm?: UvmEntries;\n}\n\ninterface AuthenticatorSelectionCriteria {\n    authenticatorAttachment?: AuthenticatorAttachment;\n    requireResidentKey?: boolean;\n    residentKey?: ResidentKeyRequirement;\n    userVerification?: UserVerificationRequirement;\n}\n\ninterface BiquadFilterOptions extends AudioNodeOptions {\n    Q?: number;\n    detune?: number;\n    frequency?: number;\n    gain?: number;\n    type?: BiquadFilterType;\n}\n\ninterface BlobEventInit {\n    data: Blob;\n    timecode?: DOMHighResTimeStamp;\n}\n\ninterface BlobPropertyBag {\n    endings?: EndingType;\n    type?: string;\n}\n\ninterface CSSStyleSheetInit {\n    baseURL?: string;\n    disabled?: boolean;\n    media?: MediaList | string;\n}\n\ninterface CacheQueryOptions {\n    ignoreMethod?: boolean;\n    ignoreSearch?: boolean;\n    ignoreVary?: boolean;\n}\n\ninterface CanvasRenderingContext2DSettings {\n    alpha?: boolean;\n    colorSpace?: PredefinedColorSpace;\n    desynchronized?: boolean;\n    willReadFrequently?: boolean;\n}\n\ninterface ChannelMergerOptions extends AudioNodeOptions {\n    numberOfInputs?: number;\n}\n\ninterface ChannelSplitterOptions extends AudioNodeOptions {\n    numberOfOutputs?: number;\n}\n\ninterface ClientQueryOptions {\n    includeUncontrolled?: boolean;\n    type?: ClientTypes;\n}\n\ninterface ClipboardEventInit extends EventInit {\n    clipboardData?: DataTransfer | null;\n}\n\ninterface ClipboardItemOptions {\n    presentationStyle?: PresentationStyle;\n}\n\ninterface CloseEventInit extends EventInit {\n    code?: number;\n    reason?: string;\n    wasClean?: boolean;\n}\n\ninterface CompositionEventInit extends UIEventInit {\n    data?: string;\n}\n\ninterface ComputedEffectTiming extends EffectTiming {\n    activeDuration?: CSSNumberish;\n    currentIteration?: number | null;\n    endTime?: CSSNumberish;\n    localTime?: CSSNumberish | null;\n    progress?: number | null;\n    startTime?: CSSNumberish;\n}\n\ninterface ComputedKeyframe {\n    composite: CompositeOperationOrAuto;\n    computedOffset: number;\n    easing: string;\n    offset: number | null;\n    [property: string]: string | number | null | undefined;\n}\n\ninterface ConstantSourceOptions {\n    offset?: number;\n}\n\ninterface ConstrainBooleanParameters {\n    exact?: boolean;\n    ideal?: boolean;\n}\n\ninterface ConstrainDOMStringParameters {\n    exact?: string | string[];\n    ideal?: string | string[];\n}\n\ninterface ConstrainDoubleRange extends DoubleRange {\n    exact?: number;\n    ideal?: number;\n}\n\ninterface ConstrainULongRange extends ULongRange {\n    exact?: number;\n    ideal?: number;\n}\n\ninterface ConvolverOptions extends AudioNodeOptions {\n    buffer?: AudioBuffer | null;\n    disableNormalization?: boolean;\n}\n\ninterface CredentialCreationOptions {\n    publicKey?: PublicKeyCredentialCreationOptions;\n    signal?: AbortSignal;\n}\n\ninterface CredentialPropertiesOutput {\n    rk?: boolean;\n}\n\ninterface CredentialRequestOptions {\n    mediation?: CredentialMediationRequirement;\n    publicKey?: PublicKeyCredentialRequestOptions;\n    signal?: AbortSignal;\n}\n\ninterface CryptoKeyPair {\n    privateKey: CryptoKey;\n    publicKey: CryptoKey;\n}\n\ninterface CustomEventInit<T = any> extends EventInit {\n    detail?: T;\n}\n\ninterface DOMMatrix2DInit {\n    a?: number;\n    b?: number;\n    c?: number;\n    d?: number;\n    e?: number;\n    f?: number;\n    m11?: number;\n    m12?: number;\n    m21?: number;\n    m22?: number;\n    m41?: number;\n    m42?: number;\n}\n\ninterface DOMMatrixInit extends DOMMatrix2DInit {\n    is2D?: boolean;\n    m13?: number;\n    m14?: number;\n    m23?: number;\n    m24?: number;\n    m31?: number;\n    m32?: number;\n    m33?: number;\n    m34?: number;\n    m43?: number;\n    m44?: number;\n}\n\ninterface DOMPointInit {\n    w?: number;\n    x?: number;\n    y?: number;\n    z?: number;\n}\n\ninterface DOMQuadInit {\n    p1?: DOMPointInit;\n    p2?: DOMPointInit;\n    p3?: DOMPointInit;\n    p4?: DOMPointInit;\n}\n\ninterface DOMRectInit {\n    height?: number;\n    width?: number;\n    x?: number;\n    y?: number;\n}\n\ninterface DelayOptions extends AudioNodeOptions {\n    delayTime?: number;\n    maxDelayTime?: number;\n}\n\ninterface DeviceMotionEventAccelerationInit {\n    x?: number | null;\n    y?: number | null;\n    z?: number | null;\n}\n\ninterface DeviceMotionEventInit extends EventInit {\n    acceleration?: DeviceMotionEventAccelerationInit;\n    accelerationIncludingGravity?: DeviceMotionEventAccelerationInit;\n    interval?: number;\n    rotationRate?: DeviceMotionEventRotationRateInit;\n}\n\ninterface DeviceMotionEventRotationRateInit {\n    alpha?: number | null;\n    beta?: number | null;\n    gamma?: number | null;\n}\n\ninterface DeviceOrientationEventInit extends EventInit {\n    absolute?: boolean;\n    alpha?: number | null;\n    beta?: number | null;\n    gamma?: number | null;\n}\n\ninterface DisplayMediaStreamConstraints {\n    audio?: boolean | MediaTrackConstraints;\n    video?: boolean | MediaTrackConstraints;\n}\n\ninterface DocumentTimelineOptions {\n    originTime?: DOMHighResTimeStamp;\n}\n\ninterface DoubleRange {\n    max?: number;\n    min?: number;\n}\n\ninterface DragEventInit extends MouseEventInit {\n    dataTransfer?: DataTransfer | null;\n}\n\ninterface DynamicsCompressorOptions extends AudioNodeOptions {\n    attack?: number;\n    knee?: number;\n    ratio?: number;\n    release?: number;\n    threshold?: number;\n}\n\ninterface EcKeyAlgorithm extends KeyAlgorithm {\n    namedCurve: NamedCurve;\n}\n\ninterface EcKeyGenParams extends Algorithm {\n    namedCurve: NamedCurve;\n}\n\ninterface EcKeyImportParams extends Algorithm {\n    namedCurve: NamedCurve;\n}\n\ninterface EcdhKeyDeriveParams extends Algorithm {\n    public: CryptoKey;\n}\n\ninterface EcdsaParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n}\n\ninterface EffectTiming {\n    delay?: number;\n    direction?: PlaybackDirection;\n    duration?: number | string;\n    easing?: string;\n    endDelay?: number;\n    fill?: FillMode;\n    iterationStart?: number;\n    iterations?: number;\n    playbackRate?: number;\n}\n\ninterface ElementCreationOptions {\n    is?: string;\n}\n\ninterface ElementDefinitionOptions {\n    extends?: string;\n}\n\ninterface ErrorEventInit extends EventInit {\n    colno?: number;\n    error?: any;\n    filename?: string;\n    lineno?: number;\n    message?: string;\n}\n\ninterface EventInit {\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n}\n\ninterface EventListenerOptions {\n    capture?: boolean;\n}\n\ninterface EventModifierInit extends UIEventInit {\n    altKey?: boolean;\n    ctrlKey?: boolean;\n    metaKey?: boolean;\n    modifierAltGraph?: boolean;\n    modifierCapsLock?: boolean;\n    modifierFn?: boolean;\n    modifierFnLock?: boolean;\n    modifierHyper?: boolean;\n    modifierNumLock?: boolean;\n    modifierScrollLock?: boolean;\n    modifierSuper?: boolean;\n    modifierSymbol?: boolean;\n    modifierSymbolLock?: boolean;\n    shiftKey?: boolean;\n}\n\ninterface EventSourceInit {\n    withCredentials?: boolean;\n}\n\ninterface FilePropertyBag extends BlobPropertyBag {\n    lastModified?: number;\n}\n\ninterface FileSystemFlags {\n    create?: boolean;\n    exclusive?: boolean;\n}\n\ninterface FileSystemGetDirectoryOptions {\n    create?: boolean;\n}\n\ninterface FileSystemGetFileOptions {\n    create?: boolean;\n}\n\ninterface FileSystemRemoveOptions {\n    recursive?: boolean;\n}\n\ninterface FocusEventInit extends UIEventInit {\n    relatedTarget?: EventTarget | null;\n}\n\ninterface FocusOptions {\n    preventScroll?: boolean;\n}\n\ninterface FontFaceDescriptors {\n    display?: string;\n    featureSettings?: string;\n    stretch?: string;\n    style?: string;\n    unicodeRange?: string;\n    variant?: string;\n    weight?: string;\n}\n\ninterface FontFaceSetLoadEventInit extends EventInit {\n    fontfaces?: FontFace[];\n}\n\ninterface FormDataEventInit extends EventInit {\n    formData: FormData;\n}\n\ninterface FullscreenOptions {\n    navigationUI?: FullscreenNavigationUI;\n}\n\ninterface GainOptions extends AudioNodeOptions {\n    gain?: number;\n}\n\ninterface GamepadEventInit extends EventInit {\n    gamepad: Gamepad;\n}\n\ninterface GetAnimationsOptions {\n    subtree?: boolean;\n}\n\ninterface GetNotificationOptions {\n    tag?: string;\n}\n\ninterface GetRootNodeOptions {\n    composed?: boolean;\n}\n\ninterface HashChangeEventInit extends EventInit {\n    newURL?: string;\n    oldURL?: string;\n}\n\ninterface HkdfParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    info: BufferSource;\n    salt: BufferSource;\n}\n\ninterface HmacImportParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    length?: number;\n}\n\ninterface HmacKeyAlgorithm extends KeyAlgorithm {\n    hash: KeyAlgorithm;\n    length: number;\n}\n\ninterface HmacKeyGenParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    length?: number;\n}\n\ninterface IDBDatabaseInfo {\n    name?: string;\n    version?: number;\n}\n\ninterface IDBIndexParameters {\n    multiEntry?: boolean;\n    unique?: boolean;\n}\n\ninterface IDBObjectStoreParameters {\n    autoIncrement?: boolean;\n    keyPath?: string | string[] | null;\n}\n\ninterface IDBTransactionOptions {\n    durability?: IDBTransactionDurability;\n}\n\ninterface IDBVersionChangeEventInit extends EventInit {\n    newVersion?: number | null;\n    oldVersion?: number;\n}\n\ninterface IIRFilterOptions extends AudioNodeOptions {\n    feedback: number[];\n    feedforward: number[];\n}\n\ninterface IdleRequestOptions {\n    timeout?: number;\n}\n\ninterface ImageBitmapOptions {\n    colorSpaceConversion?: ColorSpaceConversion;\n    imageOrientation?: ImageOrientation;\n    premultiplyAlpha?: PremultiplyAlpha;\n    resizeHeight?: number;\n    resizeQuality?: ResizeQuality;\n    resizeWidth?: number;\n}\n\ninterface ImageBitmapRenderingContextSettings {\n    alpha?: boolean;\n}\n\ninterface ImageDataSettings {\n    colorSpace?: PredefinedColorSpace;\n}\n\ninterface ImportMeta {\n    url: string;\n}\n\ninterface InputEventInit extends UIEventInit {\n    data?: string | null;\n    dataTransfer?: DataTransfer | null;\n    inputType?: string;\n    isComposing?: boolean;\n    targetRanges?: StaticRange[];\n}\n\ninterface IntersectionObserverEntryInit {\n    boundingClientRect: DOMRectInit;\n    intersectionRatio: number;\n    intersectionRect: DOMRectInit;\n    isIntersecting: boolean;\n    rootBounds: DOMRectInit | null;\n    target: Element;\n    time: DOMHighResTimeStamp;\n}\n\ninterface IntersectionObserverInit {\n    root?: Element | Document | null;\n    rootMargin?: string;\n    threshold?: number | number[];\n}\n\ninterface JsonWebKey {\n    alg?: string;\n    crv?: string;\n    d?: string;\n    dp?: string;\n    dq?: string;\n    e?: string;\n    ext?: boolean;\n    k?: string;\n    key_ops?: string[];\n    kty?: string;\n    n?: string;\n    oth?: RsaOtherPrimesInfo[];\n    p?: string;\n    q?: string;\n    qi?: string;\n    use?: string;\n    x?: string;\n    y?: string;\n}\n\ninterface KeyAlgorithm {\n    name: string;\n}\n\ninterface KeyboardEventInit extends EventModifierInit {\n    /** @deprecated */\n    charCode?: number;\n    code?: string;\n    isComposing?: boolean;\n    key?: string;\n    /** @deprecated */\n    keyCode?: number;\n    location?: number;\n    repeat?: boolean;\n}\n\ninterface Keyframe {\n    composite?: CompositeOperationOrAuto;\n    easing?: string;\n    offset?: number | null;\n    [property: string]: string | number | null | undefined;\n}\n\ninterface KeyframeAnimationOptions extends KeyframeEffectOptions {\n    id?: string;\n}\n\ninterface KeyframeEffectOptions extends EffectTiming {\n    composite?: CompositeOperation;\n    iterationComposite?: IterationCompositeOperation;\n    pseudoElement?: string | null;\n}\n\ninterface LockInfo {\n    clientId?: string;\n    mode?: LockMode;\n    name?: string;\n}\n\ninterface LockManagerSnapshot {\n    held?: LockInfo[];\n    pending?: LockInfo[];\n}\n\ninterface LockOptions {\n    ifAvailable?: boolean;\n    mode?: LockMode;\n    signal?: AbortSignal;\n    steal?: boolean;\n}\n\ninterface MediaCapabilitiesDecodingInfo extends MediaCapabilitiesInfo {\n    configuration?: MediaDecodingConfiguration;\n}\n\ninterface MediaCapabilitiesEncodingInfo extends MediaCapabilitiesInfo {\n    configuration?: MediaEncodingConfiguration;\n}\n\ninterface MediaCapabilitiesInfo {\n    powerEfficient: boolean;\n    smooth: boolean;\n    supported: boolean;\n}\n\ninterface MediaConfiguration {\n    audio?: AudioConfiguration;\n    video?: VideoConfiguration;\n}\n\ninterface MediaDecodingConfiguration extends MediaConfiguration {\n    type: MediaDecodingType;\n}\n\ninterface MediaElementAudioSourceOptions {\n    mediaElement: HTMLMediaElement;\n}\n\ninterface MediaEncodingConfiguration extends MediaConfiguration {\n    type: MediaEncodingType;\n}\n\ninterface MediaEncryptedEventInit extends EventInit {\n    initData?: ArrayBuffer | null;\n    initDataType?: string;\n}\n\ninterface MediaImage {\n    sizes?: string;\n    src: string;\n    type?: string;\n}\n\ninterface MediaKeyMessageEventInit extends EventInit {\n    message: ArrayBuffer;\n    messageType: MediaKeyMessageType;\n}\n\ninterface MediaKeySystemConfiguration {\n    audioCapabilities?: MediaKeySystemMediaCapability[];\n    distinctiveIdentifier?: MediaKeysRequirement;\n    initDataTypes?: string[];\n    label?: string;\n    persistentState?: MediaKeysRequirement;\n    sessionTypes?: string[];\n    videoCapabilities?: MediaKeySystemMediaCapability[];\n}\n\ninterface MediaKeySystemMediaCapability {\n    contentType?: string;\n    encryptionScheme?: string | null;\n    robustness?: string;\n}\n\ninterface MediaMetadataInit {\n    album?: string;\n    artist?: string;\n    artwork?: MediaImage[];\n    title?: string;\n}\n\ninterface MediaPositionState {\n    duration?: number;\n    playbackRate?: number;\n    position?: number;\n}\n\ninterface MediaQueryListEventInit extends EventInit {\n    matches?: boolean;\n    media?: string;\n}\n\ninterface MediaRecorderErrorEventInit extends EventInit {\n    error: DOMException;\n}\n\ninterface MediaRecorderOptions {\n    audioBitsPerSecond?: number;\n    bitsPerSecond?: number;\n    mimeType?: string;\n    videoBitsPerSecond?: number;\n}\n\ninterface MediaSessionActionDetails {\n    action: MediaSessionAction;\n    fastSeek?: boolean | null;\n    seekOffset?: number | null;\n    seekTime?: number | null;\n}\n\ninterface MediaStreamAudioSourceOptions {\n    mediaStream: MediaStream;\n}\n\ninterface MediaStreamConstraints {\n    audio?: boolean | MediaTrackConstraints;\n    peerIdentity?: string;\n    preferCurrentTab?: boolean;\n    video?: boolean | MediaTrackConstraints;\n}\n\ninterface MediaStreamTrackEventInit extends EventInit {\n    track: MediaStreamTrack;\n}\n\ninterface MediaTrackCapabilities {\n    aspectRatio?: DoubleRange;\n    autoGainControl?: boolean[];\n    channelCount?: ULongRange;\n    cursor?: string[];\n    deviceId?: string;\n    displaySurface?: string;\n    echoCancellation?: boolean[];\n    facingMode?: string[];\n    frameRate?: DoubleRange;\n    groupId?: string;\n    height?: ULongRange;\n    latency?: DoubleRange;\n    logicalSurface?: boolean;\n    noiseSuppression?: boolean[];\n    resizeMode?: string[];\n    sampleRate?: ULongRange;\n    sampleSize?: ULongRange;\n    width?: ULongRange;\n}\n\ninterface MediaTrackConstraintSet {\n    aspectRatio?: ConstrainDouble;\n    autoGainControl?: ConstrainBoolean;\n    channelCount?: ConstrainULong;\n    deviceId?: ConstrainDOMString;\n    echoCancellation?: ConstrainBoolean;\n    facingMode?: ConstrainDOMString;\n    frameRate?: ConstrainDouble;\n    groupId?: ConstrainDOMString;\n    height?: ConstrainULong;\n    latency?: ConstrainDouble;\n    noiseSuppression?: ConstrainBoolean;\n    sampleRate?: ConstrainULong;\n    sampleSize?: ConstrainULong;\n    suppressLocalAudioPlayback?: ConstrainBoolean;\n    width?: ConstrainULong;\n}\n\ninterface MediaTrackConstraints extends MediaTrackConstraintSet {\n    advanced?: MediaTrackConstraintSet[];\n}\n\ninterface MediaTrackSettings {\n    aspectRatio?: number;\n    autoGainControl?: boolean;\n    deviceId?: string;\n    echoCancellation?: boolean;\n    facingMode?: string;\n    frameRate?: number;\n    groupId?: string;\n    height?: number;\n    noiseSuppression?: boolean;\n    restrictOwnAudio?: boolean;\n    sampleRate?: number;\n    sampleSize?: number;\n    width?: number;\n}\n\ninterface MediaTrackSupportedConstraints {\n    aspectRatio?: boolean;\n    autoGainControl?: boolean;\n    deviceId?: boolean;\n    echoCancellation?: boolean;\n    facingMode?: boolean;\n    frameRate?: boolean;\n    groupId?: boolean;\n    height?: boolean;\n    noiseSuppression?: boolean;\n    sampleRate?: boolean;\n    sampleSize?: boolean;\n    suppressLocalAudioPlayback?: boolean;\n    width?: boolean;\n}\n\ninterface MessageEventInit<T = any> extends EventInit {\n    data?: T;\n    lastEventId?: string;\n    origin?: string;\n    ports?: MessagePort[];\n    source?: MessageEventSource | null;\n}\n\ninterface MouseEventInit extends EventModifierInit {\n    button?: number;\n    buttons?: number;\n    clientX?: number;\n    clientY?: number;\n    movementX?: number;\n    movementY?: number;\n    relatedTarget?: EventTarget | null;\n    screenX?: number;\n    screenY?: number;\n}\n\ninterface MultiCacheQueryOptions extends CacheQueryOptions {\n    cacheName?: string;\n}\n\ninterface MutationObserverInit {\n    /** Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted. */\n    attributeFilter?: string[];\n    /** Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded. */\n    attributeOldValue?: boolean;\n    /** Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified. */\n    attributes?: boolean;\n    /** Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified. */\n    characterData?: boolean;\n    /** Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded. */\n    characterDataOldValue?: boolean;\n    /** Set to true if mutations to target's children are to be observed. */\n    childList?: boolean;\n    /** Set to true if mutations to not just target, but also target's descendants are to be observed. */\n    subtree?: boolean;\n}\n\ninterface NavigationPreloadState {\n    enabled?: boolean;\n    headerValue?: string;\n}\n\ninterface NotificationAction {\n    action: string;\n    icon?: string;\n    title: string;\n}\n\ninterface NotificationOptions {\n    actions?: NotificationAction[];\n    badge?: string;\n    body?: string;\n    data?: any;\n    dir?: NotificationDirection;\n    icon?: string;\n    image?: string;\n    lang?: string;\n    renotify?: boolean;\n    requireInteraction?: boolean;\n    silent?: boolean;\n    tag?: string;\n    timestamp?: EpochTimeStamp;\n    vibrate?: VibratePattern;\n}\n\ninterface OfflineAudioCompletionEventInit extends EventInit {\n    renderedBuffer: AudioBuffer;\n}\n\ninterface OfflineAudioContextOptions {\n    length: number;\n    numberOfChannels?: number;\n    sampleRate: number;\n}\n\ninterface OptionalEffectTiming {\n    delay?: number;\n    direction?: PlaybackDirection;\n    duration?: number | string;\n    easing?: string;\n    endDelay?: number;\n    fill?: FillMode;\n    iterationStart?: number;\n    iterations?: number;\n    playbackRate?: number;\n}\n\ninterface OscillatorOptions extends AudioNodeOptions {\n    detune?: number;\n    frequency?: number;\n    periodicWave?: PeriodicWave;\n    type?: OscillatorType;\n}\n\ninterface PageTransitionEventInit extends EventInit {\n    persisted?: boolean;\n}\n\ninterface PannerOptions extends AudioNodeOptions {\n    coneInnerAngle?: number;\n    coneOuterAngle?: number;\n    coneOuterGain?: number;\n    distanceModel?: DistanceModelType;\n    maxDistance?: number;\n    orientationX?: number;\n    orientationY?: number;\n    orientationZ?: number;\n    panningModel?: PanningModelType;\n    positionX?: number;\n    positionY?: number;\n    positionZ?: number;\n    refDistance?: number;\n    rolloffFactor?: number;\n}\n\ninterface PaymentCurrencyAmount {\n    currency: string;\n    value: string;\n}\n\ninterface PaymentDetailsBase {\n    displayItems?: PaymentItem[];\n    modifiers?: PaymentDetailsModifier[];\n}\n\ninterface PaymentDetailsInit extends PaymentDetailsBase {\n    id?: string;\n    total: PaymentItem;\n}\n\ninterface PaymentDetailsModifier {\n    additionalDisplayItems?: PaymentItem[];\n    data?: any;\n    supportedMethods: string;\n    total?: PaymentItem;\n}\n\ninterface PaymentDetailsUpdate extends PaymentDetailsBase {\n    paymentMethodErrors?: any;\n    total?: PaymentItem;\n}\n\ninterface PaymentItem {\n    amount: PaymentCurrencyAmount;\n    label: string;\n    pending?: boolean;\n}\n\ninterface PaymentMethodChangeEventInit extends PaymentRequestUpdateEventInit {\n    methodDetails?: any;\n    methodName?: string;\n}\n\ninterface PaymentMethodData {\n    data?: any;\n    supportedMethods: string;\n}\n\ninterface PaymentRequestUpdateEventInit extends EventInit {\n}\n\ninterface PaymentValidationErrors {\n    error?: string;\n    paymentMethod?: any;\n}\n\ninterface Pbkdf2Params extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    iterations: number;\n    salt: BufferSource;\n}\n\ninterface PerformanceMarkOptions {\n    detail?: any;\n    startTime?: DOMHighResTimeStamp;\n}\n\ninterface PerformanceMeasureOptions {\n    detail?: any;\n    duration?: DOMHighResTimeStamp;\n    end?: string | DOMHighResTimeStamp;\n    start?: string | DOMHighResTimeStamp;\n}\n\ninterface PerformanceObserverInit {\n    buffered?: boolean;\n    entryTypes?: string[];\n    type?: string;\n}\n\ninterface PeriodicWaveConstraints {\n    disableNormalization?: boolean;\n}\n\ninterface PeriodicWaveOptions extends PeriodicWaveConstraints {\n    imag?: number[] | Float32Array;\n    real?: number[] | Float32Array;\n}\n\ninterface PermissionDescriptor {\n    name: PermissionName;\n}\n\ninterface PointerEventInit extends MouseEventInit {\n    coalescedEvents?: PointerEvent[];\n    height?: number;\n    isPrimary?: boolean;\n    pointerId?: number;\n    pointerType?: string;\n    predictedEvents?: PointerEvent[];\n    pressure?: number;\n    tangentialPressure?: number;\n    tiltX?: number;\n    tiltY?: number;\n    twist?: number;\n    width?: number;\n}\n\ninterface PopStateEventInit extends EventInit {\n    state?: any;\n}\n\ninterface PositionOptions {\n    enableHighAccuracy?: boolean;\n    maximumAge?: number;\n    timeout?: number;\n}\n\ninterface ProgressEventInit extends EventInit {\n    lengthComputable?: boolean;\n    loaded?: number;\n    total?: number;\n}\n\ninterface PromiseRejectionEventInit extends EventInit {\n    promise: Promise<any>;\n    reason?: any;\n}\n\ninterface PropertyIndexedKeyframes {\n    composite?: CompositeOperationOrAuto | CompositeOperationOrAuto[];\n    easing?: string | string[];\n    offset?: number | (number | null)[];\n    [property: string]: string | string[] | number | null | (number | null)[] | undefined;\n}\n\ninterface PublicKeyCredentialCreationOptions {\n    attestation?: AttestationConveyancePreference;\n    authenticatorSelection?: AuthenticatorSelectionCriteria;\n    challenge: BufferSource;\n    excludeCredentials?: PublicKeyCredentialDescriptor[];\n    extensions?: AuthenticationExtensionsClientInputs;\n    pubKeyCredParams: PublicKeyCredentialParameters[];\n    rp: PublicKeyCredentialRpEntity;\n    timeout?: number;\n    user: PublicKeyCredentialUserEntity;\n}\n\ninterface PublicKeyCredentialDescriptor {\n    id: BufferSource;\n    transports?: AuthenticatorTransport[];\n    type: PublicKeyCredentialType;\n}\n\ninterface PublicKeyCredentialEntity {\n    name: string;\n}\n\ninterface PublicKeyCredentialParameters {\n    alg: COSEAlgorithmIdentifier;\n    type: PublicKeyCredentialType;\n}\n\ninterface PublicKeyCredentialRequestOptions {\n    allowCredentials?: PublicKeyCredentialDescriptor[];\n    challenge: BufferSource;\n    extensions?: AuthenticationExtensionsClientInputs;\n    rpId?: string;\n    timeout?: number;\n    userVerification?: UserVerificationRequirement;\n}\n\ninterface PublicKeyCredentialRpEntity extends PublicKeyCredentialEntity {\n    id?: string;\n}\n\ninterface PublicKeyCredentialUserEntity extends PublicKeyCredentialEntity {\n    displayName: string;\n    id: BufferSource;\n}\n\ninterface PushSubscriptionJSON {\n    endpoint?: string;\n    expirationTime?: EpochTimeStamp | null;\n    keys?: Record<string, string>;\n}\n\ninterface PushSubscriptionOptionsInit {\n    applicationServerKey?: BufferSource | string | null;\n    userVisibleOnly?: boolean;\n}\n\ninterface QueuingStrategy<T = any> {\n    highWaterMark?: number;\n    size?: QueuingStrategySize<T>;\n}\n\ninterface QueuingStrategyInit {\n    /**\n     * Creates a new ByteLengthQueuingStrategy with the provided high water mark.\n     *\n     * Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.\n     */\n    highWaterMark: number;\n}\n\ninterface RTCAnswerOptions extends RTCOfferAnswerOptions {\n}\n\ninterface RTCCertificateExpiration {\n    expires?: number;\n}\n\ninterface RTCConfiguration {\n    bundlePolicy?: RTCBundlePolicy;\n    certificates?: RTCCertificate[];\n    iceCandidatePoolSize?: number;\n    iceServers?: RTCIceServer[];\n    iceTransportPolicy?: RTCIceTransportPolicy;\n    rtcpMuxPolicy?: RTCRtcpMuxPolicy;\n}\n\ninterface RTCDTMFToneChangeEventInit extends EventInit {\n    tone?: string;\n}\n\ninterface RTCDataChannelEventInit extends EventInit {\n    channel: RTCDataChannel;\n}\n\ninterface RTCDataChannelInit {\n    id?: number;\n    maxPacketLifeTime?: number;\n    maxRetransmits?: number;\n    negotiated?: boolean;\n    ordered?: boolean;\n    protocol?: string;\n}\n\ninterface RTCDtlsFingerprint {\n    algorithm?: string;\n    value?: string;\n}\n\ninterface RTCEncodedAudioFrameMetadata {\n    contributingSources?: number[];\n    synchronizationSource?: number;\n}\n\ninterface RTCEncodedVideoFrameMetadata {\n    contributingSources?: number[];\n    dependencies?: number[];\n    frameId?: number;\n    height?: number;\n    spatialIndex?: number;\n    synchronizationSource?: number;\n    temporalIndex?: number;\n    width?: number;\n}\n\ninterface RTCErrorEventInit extends EventInit {\n    error: RTCError;\n}\n\ninterface RTCErrorInit {\n    errorDetail: RTCErrorDetailType;\n    httpRequestStatusCode?: number;\n    receivedAlert?: number;\n    sctpCauseCode?: number;\n    sdpLineNumber?: number;\n    sentAlert?: number;\n}\n\ninterface RTCIceCandidateInit {\n    candidate?: string;\n    sdpMLineIndex?: number | null;\n    sdpMid?: string | null;\n    usernameFragment?: string | null;\n}\n\ninterface RTCIceCandidatePairStats extends RTCStats {\n    availableIncomingBitrate?: number;\n    availableOutgoingBitrate?: number;\n    bytesReceived?: number;\n    bytesSent?: number;\n    currentRoundTripTime?: number;\n    localCandidateId: string;\n    nominated?: boolean;\n    remoteCandidateId: string;\n    requestsReceived?: number;\n    requestsSent?: number;\n    responsesReceived?: number;\n    responsesSent?: number;\n    state: RTCStatsIceCandidatePairState;\n    totalRoundTripTime?: number;\n    transportId: string;\n}\n\ninterface RTCIceServer {\n    credential?: string;\n    credentialType?: RTCIceCredentialType;\n    urls: string | string[];\n    username?: string;\n}\n\ninterface RTCInboundRtpStreamStats extends RTCReceivedRtpStreamStats {\n    firCount?: number;\n    framesDecoded?: number;\n    nackCount?: number;\n    pliCount?: number;\n    qpSum?: number;\n    remoteId?: string;\n}\n\ninterface RTCLocalSessionDescriptionInit {\n    sdp?: string;\n    type?: RTCSdpType;\n}\n\ninterface RTCOfferAnswerOptions {\n}\n\ninterface RTCOfferOptions extends RTCOfferAnswerOptions {\n    iceRestart?: boolean;\n    offerToReceiveAudio?: boolean;\n    offerToReceiveVideo?: boolean;\n}\n\ninterface RTCOutboundRtpStreamStats extends RTCSentRtpStreamStats {\n    firCount?: number;\n    framesEncoded?: number;\n    nackCount?: number;\n    pliCount?: number;\n    qpSum?: number;\n    remoteId?: string;\n}\n\ninterface RTCPeerConnectionIceErrorEventInit extends EventInit {\n    address?: string | null;\n    errorCode: number;\n    errorText?: string;\n    port?: number | null;\n    url?: string;\n}\n\ninterface RTCPeerConnectionIceEventInit extends EventInit {\n    candidate?: RTCIceCandidate | null;\n    url?: string | null;\n}\n\ninterface RTCReceivedRtpStreamStats extends RTCRtpStreamStats {\n    jitter?: number;\n    packetsDiscarded?: number;\n    packetsLost?: number;\n    packetsReceived?: number;\n}\n\ninterface RTCRtcpParameters {\n    cname?: string;\n    reducedSize?: boolean;\n}\n\ninterface RTCRtpCapabilities {\n    codecs: RTCRtpCodecCapability[];\n    headerExtensions: RTCRtpHeaderExtensionCapability[];\n}\n\ninterface RTCRtpCodecCapability {\n    channels?: number;\n    clockRate: number;\n    mimeType: string;\n    sdpFmtpLine?: string;\n}\n\ninterface RTCRtpCodecParameters {\n    channels?: number;\n    clockRate: number;\n    mimeType: string;\n    payloadType: number;\n    sdpFmtpLine?: string;\n}\n\ninterface RTCRtpCodingParameters {\n    rid?: string;\n}\n\ninterface RTCRtpContributingSource {\n    audioLevel?: number;\n    rtpTimestamp: number;\n    source: number;\n    timestamp: DOMHighResTimeStamp;\n}\n\ninterface RTCRtpEncodingParameters extends RTCRtpCodingParameters {\n    active?: boolean;\n    maxBitrate?: number;\n    priority?: RTCPriorityType;\n    scaleResolutionDownBy?: number;\n}\n\ninterface RTCRtpHeaderExtensionCapability {\n    uri?: string;\n}\n\ninterface RTCRtpHeaderExtensionParameters {\n    encrypted?: boolean;\n    id: number;\n    uri: string;\n}\n\ninterface RTCRtpParameters {\n    codecs: RTCRtpCodecParameters[];\n    headerExtensions: RTCRtpHeaderExtensionParameters[];\n    rtcp: RTCRtcpParameters;\n}\n\ninterface RTCRtpReceiveParameters extends RTCRtpParameters {\n}\n\ninterface RTCRtpSendParameters extends RTCRtpParameters {\n    degradationPreference?: RTCDegradationPreference;\n    encodings: RTCRtpEncodingParameters[];\n    transactionId: string;\n}\n\ninterface RTCRtpStreamStats extends RTCStats {\n    codecId?: string;\n    kind: string;\n    ssrc: number;\n    transportId?: string;\n}\n\ninterface RTCRtpSynchronizationSource extends RTCRtpContributingSource {\n}\n\ninterface RTCRtpTransceiverInit {\n    direction?: RTCRtpTransceiverDirection;\n    sendEncodings?: RTCRtpEncodingParameters[];\n    streams?: MediaStream[];\n}\n\ninterface RTCSentRtpStreamStats extends RTCRtpStreamStats {\n    bytesSent?: number;\n    packetsSent?: number;\n}\n\ninterface RTCSessionDescriptionInit {\n    sdp?: string;\n    type: RTCSdpType;\n}\n\ninterface RTCStats {\n    id: string;\n    timestamp: DOMHighResTimeStamp;\n    type: RTCStatsType;\n}\n\ninterface RTCTrackEventInit extends EventInit {\n    receiver: RTCRtpReceiver;\n    streams?: MediaStream[];\n    track: MediaStreamTrack;\n    transceiver: RTCRtpTransceiver;\n}\n\ninterface RTCTransportStats extends RTCStats {\n    bytesReceived?: number;\n    bytesSent?: number;\n    dtlsCipher?: string;\n    dtlsState: RTCDtlsTransportState;\n    localCertificateId?: string;\n    remoteCertificateId?: string;\n    rtcpTransportStatsId?: string;\n    selectedCandidatePairId?: string;\n    srtpCipher?: string;\n    tlsVersion?: string;\n}\n\ninterface ReadableStreamReadDoneResult {\n    done: true;\n    value?: undefined;\n}\n\ninterface ReadableStreamReadValueResult<T> {\n    done: false;\n    value: T;\n}\n\ninterface ReadableWritablePair<R = any, W = any> {\n    readable: ReadableStream<R>;\n    /**\n     * Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other { writable, readable } pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.\n     *\n     * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n     */\n    writable: WritableStream<W>;\n}\n\ninterface RegistrationOptions {\n    scope?: string;\n    type?: WorkerType;\n    updateViaCache?: ServiceWorkerUpdateViaCache;\n}\n\ninterface RequestInit {\n    /** A BodyInit object or null to set request's body. */\n    body?: BodyInit | null;\n    /** A string indicating how the request will interact with the browser's cache to set request's cache. */\n    cache?: RequestCache;\n    /** A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials. */\n    credentials?: RequestCredentials;\n    /** A Headers object, an object literal, or an array of two-item arrays to set request's headers. */\n    headers?: HeadersInit;\n    /** A cryptographic hash of the resource to be fetched by request. Sets request's integrity. */\n    integrity?: string;\n    /** A boolean to set request's keepalive. */\n    keepalive?: boolean;\n    /** A string to set request's method. */\n    method?: string;\n    /** A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode. */\n    mode?: RequestMode;\n    /** A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect. */\n    redirect?: RequestRedirect;\n    /** A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer. */\n    referrer?: string;\n    /** A referrer policy to set request's referrerPolicy. */\n    referrerPolicy?: ReferrerPolicy;\n    /** An AbortSignal to set request's signal. */\n    signal?: AbortSignal | null;\n    /** Can only be null. Used to disassociate request from any Window. */\n    window?: null;\n}\n\ninterface ResizeObserverOptions {\n    box?: ResizeObserverBoxOptions;\n}\n\ninterface ResponseInit {\n    headers?: HeadersInit;\n    status?: number;\n    statusText?: string;\n}\n\ninterface RsaHashedImportParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n}\n\ninterface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {\n    hash: KeyAlgorithm;\n}\n\ninterface RsaHashedKeyGenParams extends RsaKeyGenParams {\n    hash: HashAlgorithmIdentifier;\n}\n\ninterface RsaKeyAlgorithm extends KeyAlgorithm {\n    modulusLength: number;\n    publicExponent: BigInteger;\n}\n\ninterface RsaKeyGenParams extends Algorithm {\n    modulusLength: number;\n    publicExponent: BigInteger;\n}\n\ninterface RsaOaepParams extends Algorithm {\n    label?: BufferSource;\n}\n\ninterface RsaOtherPrimesInfo {\n    d?: string;\n    r?: string;\n    t?: string;\n}\n\ninterface RsaPssParams extends Algorithm {\n    saltLength: number;\n}\n\ninterface SVGBoundingBoxOptions {\n    clipped?: boolean;\n    fill?: boolean;\n    markers?: boolean;\n    stroke?: boolean;\n}\n\ninterface ScrollIntoViewOptions extends ScrollOptions {\n    block?: ScrollLogicalPosition;\n    inline?: ScrollLogicalPosition;\n}\n\ninterface ScrollOptions {\n    behavior?: ScrollBehavior;\n}\n\ninterface ScrollToOptions extends ScrollOptions {\n    left?: number;\n    top?: number;\n}\n\ninterface SecurityPolicyViolationEventInit extends EventInit {\n    blockedURI?: string;\n    columnNumber?: number;\n    disposition: SecurityPolicyViolationEventDisposition;\n    documentURI: string;\n    effectiveDirective: string;\n    lineNumber?: number;\n    originalPolicy: string;\n    referrer?: string;\n    sample?: string;\n    sourceFile?: string;\n    statusCode: number;\n    violatedDirective: string;\n}\n\ninterface ShadowRootInit {\n    delegatesFocus?: boolean;\n    mode: ShadowRootMode;\n    slotAssignment?: SlotAssignmentMode;\n}\n\ninterface ShareData {\n    files?: File[];\n    text?: string;\n    title?: string;\n    url?: string;\n}\n\ninterface SpeechSynthesisErrorEventInit extends SpeechSynthesisEventInit {\n    error: SpeechSynthesisErrorCode;\n}\n\ninterface SpeechSynthesisEventInit extends EventInit {\n    charIndex?: number;\n    charLength?: number;\n    elapsedTime?: number;\n    name?: string;\n    utterance: SpeechSynthesisUtterance;\n}\n\ninterface StaticRangeInit {\n    endContainer: Node;\n    endOffset: number;\n    startContainer: Node;\n    startOffset: number;\n}\n\ninterface StereoPannerOptions extends AudioNodeOptions {\n    pan?: number;\n}\n\ninterface StorageEstimate {\n    quota?: number;\n    usage?: number;\n}\n\ninterface StorageEventInit extends EventInit {\n    key?: string | null;\n    newValue?: string | null;\n    oldValue?: string | null;\n    storageArea?: Storage | null;\n    url?: string;\n}\n\ninterface StreamPipeOptions {\n    preventAbort?: boolean;\n    preventCancel?: boolean;\n    /**\n     * Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.\n     *\n     * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n     *\n     * Errors and closures of the source and destination streams propagate as follows:\n     *\n     * An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.\n     *\n     * An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.\n     *\n     * When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.\n     *\n     * If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.\n     *\n     * The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.\n     */\n    preventClose?: boolean;\n    signal?: AbortSignal;\n}\n\ninterface StructuredSerializeOptions {\n    transfer?: Transferable[];\n}\n\ninterface SubmitEventInit extends EventInit {\n    submitter?: HTMLElement | null;\n}\n\ninterface TextDecodeOptions {\n    stream?: boolean;\n}\n\ninterface TextDecoderOptions {\n    fatal?: boolean;\n    ignoreBOM?: boolean;\n}\n\ninterface TextEncoderEncodeIntoResult {\n    read?: number;\n    written?: number;\n}\n\ninterface TouchEventInit extends EventModifierInit {\n    changedTouches?: Touch[];\n    targetTouches?: Touch[];\n    touches?: Touch[];\n}\n\ninterface TouchInit {\n    altitudeAngle?: number;\n    azimuthAngle?: number;\n    clientX?: number;\n    clientY?: number;\n    force?: number;\n    identifier: number;\n    pageX?: number;\n    pageY?: number;\n    radiusX?: number;\n    radiusY?: number;\n    rotationAngle?: number;\n    screenX?: number;\n    screenY?: number;\n    target: EventTarget;\n    touchType?: TouchType;\n}\n\ninterface TrackEventInit extends EventInit {\n    track?: TextTrack | null;\n}\n\ninterface Transformer<I = any, O = any> {\n    flush?: TransformerFlushCallback<O>;\n    readableType?: undefined;\n    start?: TransformerStartCallback<O>;\n    transform?: TransformerTransformCallback<I, O>;\n    writableType?: undefined;\n}\n\ninterface TransitionEventInit extends EventInit {\n    elapsedTime?: number;\n    propertyName?: string;\n    pseudoElement?: string;\n}\n\ninterface UIEventInit extends EventInit {\n    detail?: number;\n    view?: Window | null;\n    /** @deprecated */\n    which?: number;\n}\n\ninterface ULongRange {\n    max?: number;\n    min?: number;\n}\n\ninterface UnderlyingSink<W = any> {\n    abort?: UnderlyingSinkAbortCallback;\n    close?: UnderlyingSinkCloseCallback;\n    start?: UnderlyingSinkStartCallback;\n    type?: undefined;\n    write?: UnderlyingSinkWriteCallback<W>;\n}\n\ninterface UnderlyingSource<R = any> {\n    cancel?: UnderlyingSourceCancelCallback;\n    pull?: UnderlyingSourcePullCallback<R>;\n    start?: UnderlyingSourceStartCallback<R>;\n    type?: undefined;\n}\n\ninterface ValidityStateFlags {\n    badInput?: boolean;\n    customError?: boolean;\n    patternMismatch?: boolean;\n    rangeOverflow?: boolean;\n    rangeUnderflow?: boolean;\n    stepMismatch?: boolean;\n    tooLong?: boolean;\n    tooShort?: boolean;\n    typeMismatch?: boolean;\n    valueMissing?: boolean;\n}\n\ninterface VideoColorSpaceInit {\n    fullRange?: boolean;\n    matrix?: VideoMatrixCoefficients;\n    primaries?: VideoColorPrimaries;\n    transfer?: VideoTransferCharacteristics;\n}\n\ninterface VideoConfiguration {\n    bitrate: number;\n    colorGamut?: ColorGamut;\n    contentType: string;\n    framerate: number;\n    hdrMetadataType?: HdrMetadataType;\n    height: number;\n    scalabilityMode?: string;\n    transferFunction?: TransferFunction;\n    width: number;\n}\n\ninterface VideoFrameMetadata {\n    captureTime?: DOMHighResTimeStamp;\n    expectedDisplayTime: DOMHighResTimeStamp;\n    height: number;\n    mediaTime: number;\n    presentationTime: DOMHighResTimeStamp;\n    presentedFrames: number;\n    processingDuration?: number;\n    receiveTime?: DOMHighResTimeStamp;\n    rtpTimestamp?: number;\n    width: number;\n}\n\ninterface WaveShaperOptions extends AudioNodeOptions {\n    curve?: number[] | Float32Array;\n    oversample?: OverSampleType;\n}\n\ninterface WebGLContextAttributes {\n    alpha?: boolean;\n    antialias?: boolean;\n    depth?: boolean;\n    desynchronized?: boolean;\n    failIfMajorPerformanceCaveat?: boolean;\n    powerPreference?: WebGLPowerPreference;\n    premultipliedAlpha?: boolean;\n    preserveDrawingBuffer?: boolean;\n    stencil?: boolean;\n}\n\ninterface WebGLContextEventInit extends EventInit {\n    statusMessage?: string;\n}\n\ninterface WheelEventInit extends MouseEventInit {\n    deltaMode?: number;\n    deltaX?: number;\n    deltaY?: number;\n    deltaZ?: number;\n}\n\ninterface WindowPostMessageOptions extends StructuredSerializeOptions {\n    targetOrigin?: string;\n}\n\ninterface WorkerOptions {\n    credentials?: RequestCredentials;\n    name?: string;\n    type?: WorkerType;\n}\n\ninterface WorkletOptions {\n    credentials?: RequestCredentials;\n}\n\ntype NodeFilter = ((node: Node) => number) | { acceptNode(node: Node): number; };\n\ndeclare var NodeFilter: {\n    readonly FILTER_ACCEPT: number;\n    readonly FILTER_REJECT: number;\n    readonly FILTER_SKIP: number;\n    readonly SHOW_ALL: number;\n    readonly SHOW_ATTRIBUTE: number;\n    readonly SHOW_CDATA_SECTION: number;\n    readonly SHOW_COMMENT: number;\n    readonly SHOW_DOCUMENT: number;\n    readonly SHOW_DOCUMENT_FRAGMENT: number;\n    readonly SHOW_DOCUMENT_TYPE: number;\n    readonly SHOW_ELEMENT: number;\n    readonly SHOW_ENTITY: number;\n    readonly SHOW_ENTITY_REFERENCE: number;\n    readonly SHOW_NOTATION: number;\n    readonly SHOW_PROCESSING_INSTRUCTION: number;\n    readonly SHOW_TEXT: number;\n};\n\ntype XPathNSResolver = ((prefix: string | null) => string | null) | { lookupNamespaceURI(prefix: string | null): string | null; };\n\n/** The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type. */\ninterface ANGLE_instanced_arrays {\n    drawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void;\n    drawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei): void;\n    vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint): void;\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: GLenum;\n}\n\ninterface ARIAMixin {\n    ariaAtomic: string | null;\n    ariaAutoComplete: string | null;\n    ariaBusy: string | null;\n    ariaChecked: string | null;\n    ariaColCount: string | null;\n    ariaColIndex: string | null;\n    ariaColSpan: string | null;\n    ariaCurrent: string | null;\n    ariaDisabled: string | null;\n    ariaExpanded: string | null;\n    ariaHasPopup: string | null;\n    ariaHidden: string | null;\n    ariaKeyShortcuts: string | null;\n    ariaLabel: string | null;\n    ariaLevel: string | null;\n    ariaLive: string | null;\n    ariaModal: string | null;\n    ariaMultiLine: string | null;\n    ariaMultiSelectable: string | null;\n    ariaOrientation: string | null;\n    ariaPlaceholder: string | null;\n    ariaPosInSet: string | null;\n    ariaPressed: string | null;\n    ariaReadOnly: string | null;\n    ariaRequired: string | null;\n    ariaRoleDescription: string | null;\n    ariaRowCount: string | null;\n    ariaRowIndex: string | null;\n    ariaRowSpan: string | null;\n    ariaSelected: string | null;\n    ariaSetSize: string | null;\n    ariaSort: string | null;\n    ariaValueMax: string | null;\n    ariaValueMin: string | null;\n    ariaValueNow: string | null;\n    ariaValueText: string | null;\n}\n\n/** A controller object that allows you to abort one or more DOM requests as and when desired. */\ninterface AbortController {\n    /** Returns the AbortSignal object associated with this object. */\n    readonly signal: AbortSignal;\n    /** Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted. */\n    abort(reason?: any): void;\n}\n\ndeclare var AbortController: {\n    prototype: AbortController;\n    new(): AbortController;\n};\n\ninterface AbortSignalEventMap {\n    \"abort\": Event;\n}\n\n/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */\ninterface AbortSignal extends EventTarget {\n    /** Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise. */\n    readonly aborted: boolean;\n    onabort: ((this: AbortSignal, ev: Event) => any) | null;\n    readonly reason: any;\n    throwIfAborted(): void;\n    addEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var AbortSignal: {\n    prototype: AbortSignal;\n    new(): AbortSignal;\n    // abort(): AbortSignal; - To be re-added in the future\n};\n\ninterface AbstractRange {\n    /** Returns true if range is collapsed, and false otherwise. */\n    readonly collapsed: boolean;\n    /** Returns range's end node. */\n    readonly endContainer: Node;\n    /** Returns range's end offset. */\n    readonly endOffset: number;\n    /** Returns range's start node. */\n    readonly startContainer: Node;\n    /** Returns range's start offset. */\n    readonly startOffset: number;\n}\n\ndeclare var AbstractRange: {\n    prototype: AbstractRange;\n    new(): AbstractRange;\n};\n\ninterface AbstractWorkerEventMap {\n    \"error\": ErrorEvent;\n}\n\ninterface AbstractWorker {\n    onerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null;\n    addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** A node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations. */\ninterface AnalyserNode extends AudioNode {\n    fftSize: number;\n    readonly frequencyBinCount: number;\n    maxDecibels: number;\n    minDecibels: number;\n    smoothingTimeConstant: number;\n    getByteFrequencyData(array: Uint8Array): void;\n    getByteTimeDomainData(array: Uint8Array): void;\n    getFloatFrequencyData(array: Float32Array): void;\n    getFloatTimeDomainData(array: Float32Array): void;\n}\n\ndeclare var AnalyserNode: {\n    prototype: AnalyserNode;\n    new(context: BaseAudioContext, options?: AnalyserOptions): AnalyserNode;\n};\n\ninterface Animatable {\n    animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;\n    getAnimations(options?: GetAnimationsOptions): Animation[];\n}\n\ninterface AnimationEventMap {\n    \"cancel\": AnimationPlaybackEvent;\n    \"finish\": AnimationPlaybackEvent;\n    \"remove\": Event;\n}\n\ninterface Animation extends EventTarget {\n    currentTime: CSSNumberish | null;\n    effect: AnimationEffect | null;\n    readonly finished: Promise<Animation>;\n    id: string;\n    oncancel: ((this: Animation, ev: AnimationPlaybackEvent) => any) | null;\n    onfinish: ((this: Animation, ev: AnimationPlaybackEvent) => any) | null;\n    onremove: ((this: Animation, ev: Event) => any) | null;\n    readonly pending: boolean;\n    readonly playState: AnimationPlayState;\n    playbackRate: number;\n    readonly ready: Promise<Animation>;\n    readonly replaceState: AnimationReplaceState;\n    startTime: CSSNumberish | null;\n    timeline: AnimationTimeline | null;\n    cancel(): void;\n    commitStyles(): void;\n    finish(): void;\n    pause(): void;\n    persist(): void;\n    play(): void;\n    reverse(): void;\n    updatePlaybackRate(playbackRate: number): void;\n    addEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: Animation, ev: AnimationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: Animation, ev: AnimationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Animation: {\n    prototype: Animation;\n    new(effect?: AnimationEffect | null, timeline?: AnimationTimeline | null): Animation;\n};\n\ninterface AnimationEffect {\n    getComputedTiming(): ComputedEffectTiming;\n    getTiming(): EffectTiming;\n    updateTiming(timing?: OptionalEffectTiming): void;\n}\n\ndeclare var AnimationEffect: {\n    prototype: AnimationEffect;\n    new(): AnimationEffect;\n};\n\n/** Events providing information related to animations. */\ninterface AnimationEvent extends Event {\n    readonly animationName: string;\n    readonly elapsedTime: number;\n    readonly pseudoElement: string;\n}\n\ndeclare var AnimationEvent: {\n    prototype: AnimationEvent;\n    new(type: string, animationEventInitDict?: AnimationEventInit): AnimationEvent;\n};\n\ninterface AnimationFrameProvider {\n    cancelAnimationFrame(handle: number): void;\n    requestAnimationFrame(callback: FrameRequestCallback): number;\n}\n\ninterface AnimationPlaybackEvent extends Event {\n    readonly currentTime: CSSNumberish | null;\n    readonly timelineTime: CSSNumberish | null;\n}\n\ndeclare var AnimationPlaybackEvent: {\n    prototype: AnimationPlaybackEvent;\n    new(type: string, eventInitDict?: AnimationPlaybackEventInit): AnimationPlaybackEvent;\n};\n\ninterface AnimationTimeline {\n    readonly currentTime: number | null;\n}\n\ndeclare var AnimationTimeline: {\n    prototype: AnimationTimeline;\n    new(): AnimationTimeline;\n};\n\n/** A DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types. */\ninterface Attr extends Node {\n    readonly localName: string;\n    readonly name: string;\n    readonly namespaceURI: string | null;\n    readonly ownerDocument: Document;\n    readonly ownerElement: Element | null;\n    readonly prefix: string | null;\n    readonly specified: boolean;\n    value: string;\n}\n\ndeclare var Attr: {\n    prototype: Attr;\n    new(): Attr;\n};\n\n/** A short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode. */\ninterface AudioBuffer {\n    readonly duration: number;\n    readonly length: number;\n    readonly numberOfChannels: number;\n    readonly sampleRate: number;\n    copyFromChannel(destination: Float32Array, channelNumber: number, bufferOffset?: number): void;\n    copyToChannel(source: Float32Array, channelNumber: number, bufferOffset?: number): void;\n    getChannelData(channel: number): Float32Array;\n}\n\ndeclare var AudioBuffer: {\n    prototype: AudioBuffer;\n    new(options: AudioBufferOptions): AudioBuffer;\n};\n\n/** An AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network. */\ninterface AudioBufferSourceNode extends AudioScheduledSourceNode {\n    buffer: AudioBuffer | null;\n    readonly detune: AudioParam;\n    loop: boolean;\n    loopEnd: number;\n    loopStart: number;\n    readonly playbackRate: AudioParam;\n    start(when?: number, offset?: number, duration?: number): void;\n    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var AudioBufferSourceNode: {\n    prototype: AudioBufferSourceNode;\n    new(context: BaseAudioContext, options?: AudioBufferSourceOptions): AudioBufferSourceNode;\n};\n\n/** An audio-processing graph built from audio modules linked together, each represented by an AudioNode. */\ninterface AudioContext extends BaseAudioContext {\n    readonly baseLatency: number;\n    readonly outputLatency: number;\n    close(): Promise<void>;\n    createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode;\n    createMediaStreamDestination(): MediaStreamAudioDestinationNode;\n    createMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode;\n    getOutputTimestamp(): AudioTimestamp;\n    resume(): Promise<void>;\n    suspend(): Promise<void>;\n    addEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var AudioContext: {\n    prototype: AudioContext;\n    new(contextOptions?: AudioContextOptions): AudioContext;\n};\n\n/** AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised. */\ninterface AudioDestinationNode extends AudioNode {\n    readonly maxChannelCount: number;\n}\n\ndeclare var AudioDestinationNode: {\n    prototype: AudioDestinationNode;\n    new(): AudioDestinationNode;\n};\n\n/** The position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute. */\ninterface AudioListener {\n    readonly forwardX: AudioParam;\n    readonly forwardY: AudioParam;\n    readonly forwardZ: AudioParam;\n    readonly positionX: AudioParam;\n    readonly positionY: AudioParam;\n    readonly positionZ: AudioParam;\n    readonly upX: AudioParam;\n    readonly upY: AudioParam;\n    readonly upZ: AudioParam;\n    /** @deprecated */\n    setOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void;\n    /** @deprecated */\n    setPosition(x: number, y: number, z: number): void;\n}\n\ndeclare var AudioListener: {\n    prototype: AudioListener;\n    new(): AudioListener;\n};\n\n/** A generic interface for representing an audio processing module. Examples include: */\ninterface AudioNode extends EventTarget {\n    channelCount: number;\n    channelCountMode: ChannelCountMode;\n    channelInterpretation: ChannelInterpretation;\n    readonly context: BaseAudioContext;\n    readonly numberOfInputs: number;\n    readonly numberOfOutputs: number;\n    connect(destinationNode: AudioNode, output?: number, input?: number): AudioNode;\n    connect(destinationParam: AudioParam, output?: number): void;\n    disconnect(): void;\n    disconnect(output: number): void;\n    disconnect(destinationNode: AudioNode): void;\n    disconnect(destinationNode: AudioNode, output: number): void;\n    disconnect(destinationNode: AudioNode, output: number, input: number): void;\n    disconnect(destinationParam: AudioParam): void;\n    disconnect(destinationParam: AudioParam, output: number): void;\n}\n\ndeclare var AudioNode: {\n    prototype: AudioNode;\n    new(): AudioNode;\n};\n\n/** The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain). */\ninterface AudioParam {\n    automationRate: AutomationRate;\n    readonly defaultValue: number;\n    readonly maxValue: number;\n    readonly minValue: number;\n    value: number;\n    cancelAndHoldAtTime(cancelTime: number): AudioParam;\n    cancelScheduledValues(cancelTime: number): AudioParam;\n    exponentialRampToValueAtTime(value: number, endTime: number): AudioParam;\n    linearRampToValueAtTime(value: number, endTime: number): AudioParam;\n    setTargetAtTime(target: number, startTime: number, timeConstant: number): AudioParam;\n    setValueAtTime(value: number, startTime: number): AudioParam;\n    setValueCurveAtTime(values: number[] | Float32Array, startTime: number, duration: number): AudioParam;\n}\n\ndeclare var AudioParam: {\n    prototype: AudioParam;\n    new(): AudioParam;\n};\n\ninterface AudioParamMap {\n    forEach(callbackfn: (value: AudioParam, key: string, parent: AudioParamMap) => void, thisArg?: any): void;\n}\n\ndeclare var AudioParamMap: {\n    prototype: AudioParamMap;\n    new(): AudioParamMap;\n};\n\n/**\n * The Web Audio API events that occur when a ScriptProcessorNode input buffer is ready to be processed.\n * @deprecated As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by AudioWorklet.\n */\ninterface AudioProcessingEvent extends Event {\n    /** @deprecated */\n    readonly inputBuffer: AudioBuffer;\n    /** @deprecated */\n    readonly outputBuffer: AudioBuffer;\n    /** @deprecated */\n    readonly playbackTime: number;\n}\n\n/** @deprecated */\ndeclare var AudioProcessingEvent: {\n    prototype: AudioProcessingEvent;\n    new(type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent;\n};\n\ninterface AudioScheduledSourceNodeEventMap {\n    \"ended\": Event;\n}\n\ninterface AudioScheduledSourceNode extends AudioNode {\n    onended: ((this: AudioScheduledSourceNode, ev: Event) => any) | null;\n    start(when?: number): void;\n    stop(when?: number): void;\n    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var AudioScheduledSourceNode: {\n    prototype: AudioScheduledSourceNode;\n    new(): AudioScheduledSourceNode;\n};\n\n/** Available only in secure contexts. */\ninterface AudioWorklet extends Worklet {\n}\n\ndeclare var AudioWorklet: {\n    prototype: AudioWorklet;\n    new(): AudioWorklet;\n};\n\ninterface AudioWorkletNodeEventMap {\n    \"processorerror\": Event;\n}\n\n/** Available only in secure contexts. */\ninterface AudioWorkletNode extends AudioNode {\n    onprocessorerror: ((this: AudioWorkletNode, ev: Event) => any) | null;\n    readonly parameters: AudioParamMap;\n    readonly port: MessagePort;\n    addEventListener<K extends keyof AudioWorkletNodeEventMap>(type: K, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AudioWorkletNodeEventMap>(type: K, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var AudioWorkletNode: {\n    prototype: AudioWorkletNode;\n    new(context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions): AudioWorkletNode;\n};\n\n/** Available only in secure contexts. */\ninterface AuthenticatorAssertionResponse extends AuthenticatorResponse {\n    readonly authenticatorData: ArrayBuffer;\n    readonly signature: ArrayBuffer;\n    readonly userHandle: ArrayBuffer | null;\n}\n\ndeclare var AuthenticatorAssertionResponse: {\n    prototype: AuthenticatorAssertionResponse;\n    new(): AuthenticatorAssertionResponse;\n};\n\n/** Available only in secure contexts. */\ninterface AuthenticatorAttestationResponse extends AuthenticatorResponse {\n    readonly attestationObject: ArrayBuffer;\n}\n\ndeclare var AuthenticatorAttestationResponse: {\n    prototype: AuthenticatorAttestationResponse;\n    new(): AuthenticatorAttestationResponse;\n};\n\n/** Available only in secure contexts. */\ninterface AuthenticatorResponse {\n    readonly clientDataJSON: ArrayBuffer;\n}\n\ndeclare var AuthenticatorResponse: {\n    prototype: AuthenticatorResponse;\n    new(): AuthenticatorResponse;\n};\n\ninterface BarProp {\n    readonly visible: boolean;\n}\n\ndeclare var BarProp: {\n    prototype: BarProp;\n    new(): BarProp;\n};\n\ninterface BaseAudioContextEventMap {\n    \"statechange\": Event;\n}\n\ninterface BaseAudioContext extends EventTarget {\n    /** Available only in secure contexts. */\n    readonly audioWorklet: AudioWorklet;\n    readonly currentTime: number;\n    readonly destination: AudioDestinationNode;\n    readonly listener: AudioListener;\n    onstatechange: ((this: BaseAudioContext, ev: Event) => any) | null;\n    readonly sampleRate: number;\n    readonly state: AudioContextState;\n    createAnalyser(): AnalyserNode;\n    createBiquadFilter(): BiquadFilterNode;\n    createBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;\n    createBufferSource(): AudioBufferSourceNode;\n    createChannelMerger(numberOfInputs?: number): ChannelMergerNode;\n    createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode;\n    createConstantSource(): ConstantSourceNode;\n    createConvolver(): ConvolverNode;\n    createDelay(maxDelayTime?: number): DelayNode;\n    createDynamicsCompressor(): DynamicsCompressorNode;\n    createGain(): GainNode;\n    createIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode;\n    createOscillator(): OscillatorNode;\n    createPanner(): PannerNode;\n    createPeriodicWave(real: number[] | Float32Array, imag: number[] | Float32Array, constraints?: PeriodicWaveConstraints): PeriodicWave;\n    /** @deprecated */\n    createScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode;\n    createStereoPanner(): StereoPannerNode;\n    createWaveShaper(): WaveShaperNode;\n    decodeAudioData(audioData: ArrayBuffer, successCallback?: DecodeSuccessCallback | null, errorCallback?: DecodeErrorCallback | null): Promise<AudioBuffer>;\n    addEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: BaseAudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: BaseAudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var BaseAudioContext: {\n    prototype: BaseAudioContext;\n    new(): BaseAudioContext;\n};\n\n/** The beforeunload event is fired when the window, the document and its resources are about to be unloaded. */\ninterface BeforeUnloadEvent extends Event {\n    returnValue: any;\n}\n\ndeclare var BeforeUnloadEvent: {\n    prototype: BeforeUnloadEvent;\n    new(): BeforeUnloadEvent;\n};\n\n/** A simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers. */\ninterface BiquadFilterNode extends AudioNode {\n    readonly Q: AudioParam;\n    readonly detune: AudioParam;\n    readonly frequency: AudioParam;\n    readonly gain: AudioParam;\n    type: BiquadFilterType;\n    getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void;\n}\n\ndeclare var BiquadFilterNode: {\n    prototype: BiquadFilterNode;\n    new(context: BaseAudioContext, options?: BiquadFilterOptions): BiquadFilterNode;\n};\n\n/** A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system. */\ninterface Blob {\n    readonly size: number;\n    readonly type: string;\n    arrayBuffer(): Promise<ArrayBuffer>;\n    slice(start?: number, end?: number, contentType?: string): Blob;\n    stream(): ReadableStream<Uint8Array>;\n    text(): Promise<string>;\n}\n\ndeclare var Blob: {\n    prototype: Blob;\n    new(blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;\n};\n\ninterface BlobEvent extends Event {\n    readonly data: Blob;\n    readonly timecode: DOMHighResTimeStamp;\n}\n\ndeclare var BlobEvent: {\n    prototype: BlobEvent;\n    new(type: string, eventInitDict: BlobEventInit): BlobEvent;\n};\n\ninterface Body {\n    readonly body: ReadableStream<Uint8Array> | null;\n    readonly bodyUsed: boolean;\n    arrayBuffer(): Promise<ArrayBuffer>;\n    blob(): Promise<Blob>;\n    formData(): Promise<FormData>;\n    json(): Promise<any>;\n    text(): Promise<string>;\n}\n\ninterface BroadcastChannelEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\ninterface BroadcastChannel extends EventTarget {\n    /** Returns the channel name (as passed to the constructor). */\n    readonly name: string;\n    onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\n    /** Closes the BroadcastChannel object, opening it up to garbage collection. */\n    close(): void;\n    /** Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays. */\n    postMessage(message: any): void;\n    addEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var BroadcastChannel: {\n    prototype: BroadcastChannel;\n    new(name: string): BroadcastChannel;\n};\n\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\ninterface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {\n    readonly highWaterMark: number;\n    readonly size: QueuingStrategySize<ArrayBufferView>;\n}\n\ndeclare var ByteLengthQueuingStrategy: {\n    prototype: ByteLengthQueuingStrategy;\n    new(init: QueuingStrategyInit): ByteLengthQueuingStrategy;\n};\n\n/** A CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section. */\ninterface CDATASection extends Text {\n}\n\ndeclare var CDATASection: {\n    prototype: CDATASection;\n    new(): CDATASection;\n};\n\ninterface CSSAnimation extends Animation {\n    readonly animationName: string;\n    addEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSAnimation, ev: AnimationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSAnimation, ev: AnimationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var CSSAnimation: {\n    prototype: CSSAnimation;\n    new(): CSSAnimation;\n};\n\n/** A single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule. */\ninterface CSSConditionRule extends CSSGroupingRule {\n    readonly conditionText: string;\n}\n\ndeclare var CSSConditionRule: {\n    prototype: CSSConditionRule;\n    new(): CSSConditionRule;\n};\n\ninterface CSSCounterStyleRule extends CSSRule {\n    additiveSymbols: string;\n    fallback: string;\n    name: string;\n    negative: string;\n    pad: string;\n    prefix: string;\n    range: string;\n    speakAs: string;\n    suffix: string;\n    symbols: string;\n    system: string;\n}\n\ndeclare var CSSCounterStyleRule: {\n    prototype: CSSCounterStyleRule;\n    new(): CSSCounterStyleRule;\n};\n\ninterface CSSFontFaceRule extends CSSRule {\n    readonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSFontFaceRule: {\n    prototype: CSSFontFaceRule;\n    new(): CSSFontFaceRule;\n};\n\n/** Any CSS at-rule that contains other rules nested within it. */\ninterface CSSGroupingRule extends CSSRule {\n    readonly cssRules: CSSRuleList;\n    deleteRule(index: number): void;\n    insertRule(rule: string, index?: number): number;\n}\n\ndeclare var CSSGroupingRule: {\n    prototype: CSSGroupingRule;\n    new(): CSSGroupingRule;\n};\n\ninterface CSSImportRule extends CSSRule {\n    readonly href: string;\n    readonly media: MediaList;\n    readonly styleSheet: CSSStyleSheet;\n}\n\ndeclare var CSSImportRule: {\n    prototype: CSSImportRule;\n    new(): CSSImportRule;\n};\n\n/** An object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE). */\ninterface CSSKeyframeRule extends CSSRule {\n    keyText: string;\n    readonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSKeyframeRule: {\n    prototype: CSSKeyframeRule;\n    new(): CSSKeyframeRule;\n};\n\n/** An object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE). */\ninterface CSSKeyframesRule extends CSSRule {\n    readonly cssRules: CSSRuleList;\n    name: string;\n    appendRule(rule: string): void;\n    deleteRule(select: string): void;\n    findRule(select: string): CSSKeyframeRule | null;\n}\n\ndeclare var CSSKeyframesRule: {\n    prototype: CSSKeyframesRule;\n    new(): CSSKeyframesRule;\n};\n\n/** A single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE). */\ninterface CSSMediaRule extends CSSConditionRule {\n    readonly media: MediaList;\n}\n\ndeclare var CSSMediaRule: {\n    prototype: CSSMediaRule;\n    new(): CSSMediaRule;\n};\n\n/** An object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE). */\ninterface CSSNamespaceRule extends CSSRule {\n    readonly namespaceURI: string;\n    readonly prefix: string;\n}\n\ndeclare var CSSNamespaceRule: {\n    prototype: CSSNamespaceRule;\n    new(): CSSNamespaceRule;\n};\n\n/** CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE). */\ninterface CSSPageRule extends CSSGroupingRule {\n    selectorText: string;\n    readonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSPageRule: {\n    prototype: CSSPageRule;\n    new(): CSSPageRule;\n};\n\n/** A single CSS rule. There are several types of rules, listed in the Type constants section below. */\ninterface CSSRule {\n    cssText: string;\n    readonly parentRule: CSSRule | null;\n    readonly parentStyleSheet: CSSStyleSheet | null;\n    /** @deprecated */\n    readonly type: number;\n    readonly CHARSET_RULE: number;\n    readonly FONT_FACE_RULE: number;\n    readonly IMPORT_RULE: number;\n    readonly KEYFRAMES_RULE: number;\n    readonly KEYFRAME_RULE: number;\n    readonly MEDIA_RULE: number;\n    readonly NAMESPACE_RULE: number;\n    readonly PAGE_RULE: number;\n    readonly STYLE_RULE: number;\n    readonly SUPPORTS_RULE: number;\n}\n\ndeclare var CSSRule: {\n    prototype: CSSRule;\n    new(): CSSRule;\n    readonly CHARSET_RULE: number;\n    readonly FONT_FACE_RULE: number;\n    readonly IMPORT_RULE: number;\n    readonly KEYFRAMES_RULE: number;\n    readonly KEYFRAME_RULE: number;\n    readonly MEDIA_RULE: number;\n    readonly NAMESPACE_RULE: number;\n    readonly PAGE_RULE: number;\n    readonly STYLE_RULE: number;\n    readonly SUPPORTS_RULE: number;\n};\n\n/** A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects. */\ninterface CSSRuleList {\n    readonly length: number;\n    item(index: number): CSSRule | null;\n    [index: number]: CSSRule;\n}\n\ndeclare var CSSRuleList: {\n    prototype: CSSRuleList;\n    new(): CSSRuleList;\n};\n\n/** An object that is a CSS declaration block, and exposes style information and various style-related methods and properties. */\ninterface CSSStyleDeclaration {\n    accentColor: string;\n    alignContent: string;\n    alignItems: string;\n    alignSelf: string;\n    alignmentBaseline: string;\n    all: string;\n    animation: string;\n    animationDelay: string;\n    animationDirection: string;\n    animationDuration: string;\n    animationFillMode: string;\n    animationIterationCount: string;\n    animationName: string;\n    animationPlayState: string;\n    animationTimingFunction: string;\n    appearance: string;\n    aspectRatio: string;\n    backfaceVisibility: string;\n    background: string;\n    backgroundAttachment: string;\n    backgroundBlendMode: string;\n    backgroundClip: string;\n    backgroundColor: string;\n    backgroundImage: string;\n    backgroundOrigin: string;\n    backgroundPosition: string;\n    backgroundPositionX: string;\n    backgroundPositionY: string;\n    backgroundRepeat: string;\n    backgroundSize: string;\n    baselineShift: string;\n    blockSize: string;\n    border: string;\n    borderBlock: string;\n    borderBlockColor: string;\n    borderBlockEnd: string;\n    borderBlockEndColor: string;\n    borderBlockEndStyle: string;\n    borderBlockEndWidth: string;\n    borderBlockStart: string;\n    borderBlockStartColor: string;\n    borderBlockStartStyle: string;\n    borderBlockStartWidth: string;\n    borderBlockStyle: string;\n    borderBlockWidth: string;\n    borderBottom: string;\n    borderBottomColor: string;\n    borderBottomLeftRadius: string;\n    borderBottomRightRadius: string;\n    borderBottomStyle: string;\n    borderBottomWidth: string;\n    borderCollapse: string;\n    borderColor: string;\n    borderEndEndRadius: string;\n    borderEndStartRadius: string;\n    borderImage: string;\n    borderImageOutset: string;\n    borderImageRepeat: string;\n    borderImageSlice: string;\n    borderImageSource: string;\n    borderImageWidth: string;\n    borderInline: string;\n    borderInlineColor: string;\n    borderInlineEnd: string;\n    borderInlineEndColor: string;\n    borderInlineEndStyle: string;\n    borderInlineEndWidth: string;\n    borderInlineStart: string;\n    borderInlineStartColor: string;\n    borderInlineStartStyle: string;\n    borderInlineStartWidth: string;\n    borderInlineStyle: string;\n    borderInlineWidth: string;\n    borderLeft: string;\n    borderLeftColor: string;\n    borderLeftStyle: string;\n    borderLeftWidth: string;\n    borderRadius: string;\n    borderRight: string;\n    borderRightColor: string;\n    borderRightStyle: string;\n    borderRightWidth: string;\n    borderSpacing: string;\n    borderStartEndRadius: string;\n    borderStartStartRadius: string;\n    borderStyle: string;\n    borderTop: string;\n    borderTopColor: string;\n    borderTopLeftRadius: string;\n    borderTopRightRadius: string;\n    borderTopStyle: string;\n    borderTopWidth: string;\n    borderWidth: string;\n    bottom: string;\n    boxShadow: string;\n    boxSizing: string;\n    breakAfter: string;\n    breakBefore: string;\n    breakInside: string;\n    captionSide: string;\n    caretColor: string;\n    clear: string;\n    /** @deprecated */\n    clip: string;\n    clipPath: string;\n    clipRule: string;\n    color: string;\n    colorInterpolation: string;\n    colorInterpolationFilters: string;\n    colorScheme: string;\n    columnCount: string;\n    columnFill: string;\n    columnGap: string;\n    columnRule: string;\n    columnRuleColor: string;\n    columnRuleStyle: string;\n    columnRuleWidth: string;\n    columnSpan: string;\n    columnWidth: string;\n    columns: string;\n    contain: string;\n    content: string;\n    counterIncrement: string;\n    counterReset: string;\n    counterSet: string;\n    cssFloat: string;\n    cssText: string;\n    cursor: string;\n    direction: string;\n    display: string;\n    dominantBaseline: string;\n    emptyCells: string;\n    fill: string;\n    fillOpacity: string;\n    fillRule: string;\n    filter: string;\n    flex: string;\n    flexBasis: string;\n    flexDirection: string;\n    flexFlow: string;\n    flexGrow: string;\n    flexShrink: string;\n    flexWrap: string;\n    float: string;\n    floodColor: string;\n    floodOpacity: string;\n    font: string;\n    fontFamily: string;\n    fontFeatureSettings: string;\n    fontKerning: string;\n    fontOpticalSizing: string;\n    fontSize: string;\n    fontSizeAdjust: string;\n    fontStretch: string;\n    fontStyle: string;\n    fontSynthesis: string;\n    fontVariant: string;\n    fontVariantAlternates: string;\n    fontVariantCaps: string;\n    fontVariantEastAsian: string;\n    fontVariantLigatures: string;\n    fontVariantNumeric: string;\n    fontVariantPosition: string;\n    fontVariationSettings: string;\n    fontWeight: string;\n    gap: string;\n    grid: string;\n    gridArea: string;\n    gridAutoColumns: string;\n    gridAutoFlow: string;\n    gridAutoRows: string;\n    gridColumn: string;\n    gridColumnEnd: string;\n    /** @deprecated This is a legacy alias of `columnGap`. */\n    gridColumnGap: string;\n    gridColumnStart: string;\n    /** @deprecated This is a legacy alias of `gap`. */\n    gridGap: string;\n    gridRow: string;\n    gridRowEnd: string;\n    /** @deprecated This is a legacy alias of `rowGap`. */\n    gridRowGap: string;\n    gridRowStart: string;\n    gridTemplate: string;\n    gridTemplateAreas: string;\n    gridTemplateColumns: string;\n    gridTemplateRows: string;\n    height: string;\n    hyphens: string;\n    /** @deprecated */\n    imageOrientation: string;\n    imageRendering: string;\n    inlineSize: string;\n    inset: string;\n    insetBlock: string;\n    insetBlockEnd: string;\n    insetBlockStart: string;\n    insetInline: string;\n    insetInlineEnd: string;\n    insetInlineStart: string;\n    isolation: string;\n    justifyContent: string;\n    justifyItems: string;\n    justifySelf: string;\n    left: string;\n    readonly length: number;\n    letterSpacing: string;\n    lightingColor: string;\n    lineBreak: string;\n    lineHeight: string;\n    listStyle: string;\n    listStyleImage: string;\n    listStylePosition: string;\n    listStyleType: string;\n    margin: string;\n    marginBlock: string;\n    marginBlockEnd: string;\n    marginBlockStart: string;\n    marginBottom: string;\n    marginInline: string;\n    marginInlineEnd: string;\n    marginInlineStart: string;\n    marginLeft: string;\n    marginRight: string;\n    marginTop: string;\n    marker: string;\n    markerEnd: string;\n    markerMid: string;\n    markerStart: string;\n    mask: string;\n    maskClip: string;\n    maskComposite: string;\n    maskImage: string;\n    maskMode: string;\n    maskOrigin: string;\n    maskPosition: string;\n    maskRepeat: string;\n    maskSize: string;\n    maskType: string;\n    maxBlockSize: string;\n    maxHeight: string;\n    maxInlineSize: string;\n    maxWidth: string;\n    minBlockSize: string;\n    minHeight: string;\n    minInlineSize: string;\n    minWidth: string;\n    mixBlendMode: string;\n    objectFit: string;\n    objectPosition: string;\n    offset: string;\n    offsetDistance: string;\n    offsetPath: string;\n    offsetRotate: string;\n    opacity: string;\n    order: string;\n    orphans: string;\n    outline: string;\n    outlineColor: string;\n    outlineOffset: string;\n    outlineStyle: string;\n    outlineWidth: string;\n    overflow: string;\n    overflowAnchor: string;\n    overflowWrap: string;\n    overflowX: string;\n    overflowY: string;\n    overscrollBehavior: string;\n    overscrollBehaviorBlock: string;\n    overscrollBehaviorInline: string;\n    overscrollBehaviorX: string;\n    overscrollBehaviorY: string;\n    padding: string;\n    paddingBlock: string;\n    paddingBlockEnd: string;\n    paddingBlockStart: string;\n    paddingBottom: string;\n    paddingInline: string;\n    paddingInlineEnd: string;\n    paddingInlineStart: string;\n    paddingLeft: string;\n    paddingRight: string;\n    paddingTop: string;\n    pageBreakAfter: string;\n    pageBreakBefore: string;\n    pageBreakInside: string;\n    paintOrder: string;\n    readonly parentRule: CSSRule | null;\n    perspective: string;\n    perspectiveOrigin: string;\n    placeContent: string;\n    placeItems: string;\n    placeSelf: string;\n    pointerEvents: string;\n    position: string;\n    printColorAdjust: string;\n    quotes: string;\n    resize: string;\n    right: string;\n    rotate: string;\n    rowGap: string;\n    rubyPosition: string;\n    scale: string;\n    scrollBehavior: string;\n    scrollMargin: string;\n    scrollMarginBlock: string;\n    scrollMarginBlockEnd: string;\n    scrollMarginBlockStart: string;\n    scrollMarginBottom: string;\n    scrollMarginInline: string;\n    scrollMarginInlineEnd: string;\n    scrollMarginInlineStart: string;\n    scrollMarginLeft: string;\n    scrollMarginRight: string;\n    scrollMarginTop: string;\n    scrollPadding: string;\n    scrollPaddingBlock: string;\n    scrollPaddingBlockEnd: string;\n    scrollPaddingBlockStart: string;\n    scrollPaddingBottom: string;\n    scrollPaddingInline: string;\n    scrollPaddingInlineEnd: string;\n    scrollPaddingInlineStart: string;\n    scrollPaddingLeft: string;\n    scrollPaddingRight: string;\n    scrollPaddingTop: string;\n    scrollSnapAlign: string;\n    scrollSnapStop: string;\n    scrollSnapType: string;\n    scrollbarGutter: string;\n    shapeImageThreshold: string;\n    shapeMargin: string;\n    shapeOutside: string;\n    shapeRendering: string;\n    stopColor: string;\n    stopOpacity: string;\n    stroke: string;\n    strokeDasharray: string;\n    strokeDashoffset: string;\n    strokeLinecap: string;\n    strokeLinejoin: string;\n    strokeMiterlimit: string;\n    strokeOpacity: string;\n    strokeWidth: string;\n    tabSize: string;\n    tableLayout: string;\n    textAlign: string;\n    textAlignLast: string;\n    textAnchor: string;\n    textCombineUpright: string;\n    textDecoration: string;\n    textDecorationColor: string;\n    textDecorationLine: string;\n    textDecorationSkipInk: string;\n    textDecorationStyle: string;\n    textDecorationThickness: string;\n    textEmphasis: string;\n    textEmphasisColor: string;\n    textEmphasisPosition: string;\n    textEmphasisStyle: string;\n    textIndent: string;\n    textOrientation: string;\n    textOverflow: string;\n    textRendering: string;\n    textShadow: string;\n    textTransform: string;\n    textUnderlineOffset: string;\n    textUnderlinePosition: string;\n    top: string;\n    touchAction: string;\n    transform: string;\n    transformBox: string;\n    transformOrigin: string;\n    transformStyle: string;\n    transition: string;\n    transitionDelay: string;\n    transitionDuration: string;\n    transitionProperty: string;\n    transitionTimingFunction: string;\n    translate: string;\n    unicodeBidi: string;\n    userSelect: string;\n    verticalAlign: string;\n    visibility: string;\n    /** @deprecated This is a legacy alias of `alignContent`. */\n    webkitAlignContent: string;\n    /** @deprecated This is a legacy alias of `alignItems`. */\n    webkitAlignItems: string;\n    /** @deprecated This is a legacy alias of `alignSelf`. */\n    webkitAlignSelf: string;\n    /** @deprecated This is a legacy alias of `animation`. */\n    webkitAnimation: string;\n    /** @deprecated This is a legacy alias of `animationDelay`. */\n    webkitAnimationDelay: string;\n    /** @deprecated This is a legacy alias of `animationDirection`. */\n    webkitAnimationDirection: string;\n    /** @deprecated This is a legacy alias of `animationDuration`. */\n    webkitAnimationDuration: string;\n    /** @deprecated This is a legacy alias of `animationFillMode`. */\n    webkitAnimationFillMode: string;\n    /** @deprecated This is a legacy alias of `animationIterationCount`. */\n    webkitAnimationIterationCount: string;\n    /** @deprecated This is a legacy alias of `animationName`. */\n    webkitAnimationName: string;\n    /** @deprecated This is a legacy alias of `animationPlayState`. */\n    webkitAnimationPlayState: string;\n    /** @deprecated This is a legacy alias of `animationTimingFunction`. */\n    webkitAnimationTimingFunction: string;\n    /** @deprecated This is a legacy alias of `appearance`. */\n    webkitAppearance: string;\n    /** @deprecated This is a legacy alias of `backfaceVisibility`. */\n    webkitBackfaceVisibility: string;\n    /** @deprecated This is a legacy alias of `backgroundClip`. */\n    webkitBackgroundClip: string;\n    /** @deprecated This is a legacy alias of `backgroundOrigin`. */\n    webkitBackgroundOrigin: string;\n    /** @deprecated This is a legacy alias of `backgroundSize`. */\n    webkitBackgroundSize: string;\n    /** @deprecated This is a legacy alias of `borderBottomLeftRadius`. */\n    webkitBorderBottomLeftRadius: string;\n    /** @deprecated This is a legacy alias of `borderBottomRightRadius`. */\n    webkitBorderBottomRightRadius: string;\n    /** @deprecated This is a legacy alias of `borderRadius`. */\n    webkitBorderRadius: string;\n    /** @deprecated This is a legacy alias of `borderTopLeftRadius`. */\n    webkitBorderTopLeftRadius: string;\n    /** @deprecated This is a legacy alias of `borderTopRightRadius`. */\n    webkitBorderTopRightRadius: string;\n    /** @deprecated This is a legacy alias of `boxAlign`. */\n    webkitBoxAlign: string;\n    /** @deprecated This is a legacy alias of `boxFlex`. */\n    webkitBoxFlex: string;\n    /** @deprecated This is a legacy alias of `boxOrdinalGroup`. */\n    webkitBoxOrdinalGroup: string;\n    /** @deprecated This is a legacy alias of `boxOrient`. */\n    webkitBoxOrient: string;\n    /** @deprecated This is a legacy alias of `boxPack`. */\n    webkitBoxPack: string;\n    /** @deprecated This is a legacy alias of `boxShadow`. */\n    webkitBoxShadow: string;\n    /** @deprecated This is a legacy alias of `boxSizing`. */\n    webkitBoxSizing: string;\n    /** @deprecated This is a legacy alias of `filter`. */\n    webkitFilter: string;\n    /** @deprecated This is a legacy alias of `flex`. */\n    webkitFlex: string;\n    /** @deprecated This is a legacy alias of `flexBasis`. */\n    webkitFlexBasis: string;\n    /** @deprecated This is a legacy alias of `flexDirection`. */\n    webkitFlexDirection: string;\n    /** @deprecated This is a legacy alias of `flexFlow`. */\n    webkitFlexFlow: string;\n    /** @deprecated This is a legacy alias of `flexGrow`. */\n    webkitFlexGrow: string;\n    /** @deprecated This is a legacy alias of `flexShrink`. */\n    webkitFlexShrink: string;\n    /** @deprecated This is a legacy alias of `flexWrap`. */\n    webkitFlexWrap: string;\n    /** @deprecated This is a legacy alias of `justifyContent`. */\n    webkitJustifyContent: string;\n    webkitLineClamp: string;\n    /** @deprecated This is a legacy alias of `mask`. */\n    webkitMask: string;\n    /** @deprecated This is a legacy alias of `maskBorder`. */\n    webkitMaskBoxImage: string;\n    /** @deprecated This is a legacy alias of `maskBorderOutset`. */\n    webkitMaskBoxImageOutset: string;\n    /** @deprecated This is a legacy alias of `maskBorderRepeat`. */\n    webkitMaskBoxImageRepeat: string;\n    /** @deprecated This is a legacy alias of `maskBorderSlice`. */\n    webkitMaskBoxImageSlice: string;\n    /** @deprecated This is a legacy alias of `maskBorderSource`. */\n    webkitMaskBoxImageSource: string;\n    /** @deprecated This is a legacy alias of `maskBorderWidth`. */\n    webkitMaskBoxImageWidth: string;\n    /** @deprecated This is a legacy alias of `maskClip`. */\n    webkitMaskClip: string;\n    webkitMaskComposite: string;\n    /** @deprecated This is a legacy alias of `maskImage`. */\n    webkitMaskImage: string;\n    /** @deprecated This is a legacy alias of `maskOrigin`. */\n    webkitMaskOrigin: string;\n    /** @deprecated This is a legacy alias of `maskPosition`. */\n    webkitMaskPosition: string;\n    /** @deprecated This is a legacy alias of `maskRepeat`. */\n    webkitMaskRepeat: string;\n    /** @deprecated This is a legacy alias of `maskSize`. */\n    webkitMaskSize: string;\n    /** @deprecated This is a legacy alias of `order`. */\n    webkitOrder: string;\n    /** @deprecated This is a legacy alias of `perspective`. */\n    webkitPerspective: string;\n    /** @deprecated This is a legacy alias of `perspectiveOrigin`. */\n    webkitPerspectiveOrigin: string;\n    webkitTextFillColor: string;\n    /** @deprecated This is a legacy alias of `textSizeAdjust`. */\n    webkitTextSizeAdjust: string;\n    webkitTextStroke: string;\n    webkitTextStrokeColor: string;\n    webkitTextStrokeWidth: string;\n    /** @deprecated This is a legacy alias of `transform`. */\n    webkitTransform: string;\n    /** @deprecated This is a legacy alias of `transformOrigin`. */\n    webkitTransformOrigin: string;\n    /** @deprecated This is a legacy alias of `transformStyle`. */\n    webkitTransformStyle: string;\n    /** @deprecated This is a legacy alias of `transition`. */\n    webkitTransition: string;\n    /** @deprecated This is a legacy alias of `transitionDelay`. */\n    webkitTransitionDelay: string;\n    /** @deprecated This is a legacy alias of `transitionDuration`. */\n    webkitTransitionDuration: string;\n    /** @deprecated This is a legacy alias of `transitionProperty`. */\n    webkitTransitionProperty: string;\n    /** @deprecated This is a legacy alias of `transitionTimingFunction`. */\n    webkitTransitionTimingFunction: string;\n    /** @deprecated This is a legacy alias of `userSelect`. */\n    webkitUserSelect: string;\n    whiteSpace: string;\n    widows: string;\n    width: string;\n    willChange: string;\n    wordBreak: string;\n    wordSpacing: string;\n    /** @deprecated */\n    wordWrap: string;\n    writingMode: string;\n    zIndex: string;\n    getPropertyPriority(property: string): string;\n    getPropertyValue(property: string): string;\n    item(index: number): string;\n    removeProperty(property: string): string;\n    setProperty(property: string, value: string | null, priority?: string): void;\n    [index: number]: string;\n}\n\ndeclare var CSSStyleDeclaration: {\n    prototype: CSSStyleDeclaration;\n    new(): CSSStyleDeclaration;\n};\n\n/** CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE). */\ninterface CSSStyleRule extends CSSRule {\n    selectorText: string;\n    readonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSStyleRule: {\n    prototype: CSSStyleRule;\n    new(): CSSStyleRule;\n};\n\n/** A single CSS style sheet. It inherits properties and methods from its parent, StyleSheet. */\ninterface CSSStyleSheet extends StyleSheet {\n    readonly cssRules: CSSRuleList;\n    readonly ownerRule: CSSRule | null;\n    /** @deprecated */\n    readonly rules: CSSRuleList;\n    /** @deprecated */\n    addRule(selector?: string, style?: string, index?: number): number;\n    deleteRule(index: number): void;\n    insertRule(rule: string, index?: number): number;\n    /** @deprecated */\n    removeRule(index?: number): void;\n    replace(text: string): Promise<CSSStyleSheet>;\n    replaceSync(text: string): void;\n}\n\ndeclare var CSSStyleSheet: {\n    prototype: CSSStyleSheet;\n    new(options?: CSSStyleSheetInit): CSSStyleSheet;\n};\n\n/** An object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE). */\ninterface CSSSupportsRule extends CSSConditionRule {\n}\n\ndeclare var CSSSupportsRule: {\n    prototype: CSSSupportsRule;\n    new(): CSSSupportsRule;\n};\n\ninterface CSSTransition extends Animation {\n    readonly transitionProperty: string;\n    addEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSTransition, ev: AnimationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSTransition, ev: AnimationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var CSSTransition: {\n    prototype: CSSTransition;\n    new(): CSSTransition;\n};\n\n/**\n * Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.\n * Available only in secure contexts.\n */\ninterface Cache {\n    add(request: RequestInfo | URL): Promise<void>;\n    addAll(requests: RequestInfo[]): Promise<void>;\n    delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;\n    keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;\n    match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;\n    matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;\n    put(request: RequestInfo | URL, response: Response): Promise<void>;\n}\n\ndeclare var Cache: {\n    prototype: Cache;\n    new(): Cache;\n};\n\n/**\n * The storage for Cache objects.\n * Available only in secure contexts.\n */\ninterface CacheStorage {\n    delete(cacheName: string): Promise<boolean>;\n    has(cacheName: string): Promise<boolean>;\n    keys(): Promise<string[]>;\n    match(request: RequestInfo | URL, options?: MultiCacheQueryOptions): Promise<Response | undefined>;\n    open(cacheName: string): Promise<Cache>;\n}\n\ndeclare var CacheStorage: {\n    prototype: CacheStorage;\n    new(): CacheStorage;\n};\n\ninterface CanvasCaptureMediaStreamTrack extends MediaStreamTrack {\n    readonly canvas: HTMLCanvasElement;\n    requestFrame(): void;\n    addEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: CanvasCaptureMediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: CanvasCaptureMediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var CanvasCaptureMediaStreamTrack: {\n    prototype: CanvasCaptureMediaStreamTrack;\n    new(): CanvasCaptureMediaStreamTrack;\n};\n\ninterface CanvasCompositing {\n    globalAlpha: number;\n    globalCompositeOperation: GlobalCompositeOperation;\n}\n\ninterface CanvasDrawImage {\n    drawImage(image: CanvasImageSource, dx: number, dy: number): void;\n    drawImage(image: CanvasImageSource, dx: number, dy: number, dw: number, dh: number): void;\n    drawImage(image: CanvasImageSource, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;\n}\n\ninterface CanvasDrawPath {\n    beginPath(): void;\n    clip(fillRule?: CanvasFillRule): void;\n    clip(path: Path2D, fillRule?: CanvasFillRule): void;\n    fill(fillRule?: CanvasFillRule): void;\n    fill(path: Path2D, fillRule?: CanvasFillRule): void;\n    isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;\n    isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;\n    isPointInStroke(x: number, y: number): boolean;\n    isPointInStroke(path: Path2D, x: number, y: number): boolean;\n    stroke(): void;\n    stroke(path: Path2D): void;\n}\n\ninterface CanvasFillStrokeStyles {\n    fillStyle: string | CanvasGradient | CanvasPattern;\n    strokeStyle: string | CanvasGradient | CanvasPattern;\n    createConicGradient(startAngle: number, x: number, y: number): CanvasGradient;\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\n    createPattern(image: CanvasImageSource, repetition: string | null): CanvasPattern | null;\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\n}\n\ninterface CanvasFilters {\n    filter: string;\n}\n\n/** An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient(). */\ninterface CanvasGradient {\n    /**\n     * Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.\n     *\n     * Throws an \"IndexSizeError\" DOMException if the offset is out of range. Throws a \"SyntaxError\" DOMException if the color cannot be parsed.\n     */\n    addColorStop(offset: number, color: string): void;\n}\n\ndeclare var CanvasGradient: {\n    prototype: CanvasGradient;\n    new(): CanvasGradient;\n};\n\ninterface CanvasImageData {\n    createImageData(sw: number, sh: number, settings?: ImageDataSettings): ImageData;\n    createImageData(imagedata: ImageData): ImageData;\n    getImageData(sx: number, sy: number, sw: number, sh: number, settings?: ImageDataSettings): ImageData;\n    putImageData(imagedata: ImageData, dx: number, dy: number): void;\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void;\n}\n\ninterface CanvasImageSmoothing {\n    imageSmoothingEnabled: boolean;\n    imageSmoothingQuality: ImageSmoothingQuality;\n}\n\ninterface CanvasPath {\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\n    closePath(): void;\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;\n    lineTo(x: number, y: number): void;\n    moveTo(x: number, y: number): void;\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n    rect(x: number, y: number, w: number, h: number): void;\n}\n\ninterface CanvasPathDrawingStyles {\n    lineCap: CanvasLineCap;\n    lineDashOffset: number;\n    lineJoin: CanvasLineJoin;\n    lineWidth: number;\n    miterLimit: number;\n    getLineDash(): number[];\n    setLineDash(segments: number[]): void;\n}\n\n/** An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method. */\ninterface CanvasPattern {\n    /** Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation. */\n    setTransform(transform?: DOMMatrix2DInit): void;\n}\n\ndeclare var CanvasPattern: {\n    prototype: CanvasPattern;\n    new(): CanvasPattern;\n};\n\ninterface CanvasRect {\n    clearRect(x: number, y: number, w: number, h: number): void;\n    fillRect(x: number, y: number, w: number, h: number): void;\n    strokeRect(x: number, y: number, w: number, h: number): void;\n}\n\n/** The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects. */\ninterface CanvasRenderingContext2D extends CanvasCompositing, CanvasDrawImage, CanvasDrawPath, CanvasFillStrokeStyles, CanvasFilters, CanvasImageData, CanvasImageSmoothing, CanvasPath, CanvasPathDrawingStyles, CanvasRect, CanvasShadowStyles, CanvasState, CanvasText, CanvasTextDrawingStyles, CanvasTransform, CanvasUserInterface {\n    readonly canvas: HTMLCanvasElement;\n    getContextAttributes(): CanvasRenderingContext2DSettings;\n}\n\ndeclare var CanvasRenderingContext2D: {\n    prototype: CanvasRenderingContext2D;\n    new(): CanvasRenderingContext2D;\n};\n\ninterface CanvasShadowStyles {\n    shadowBlur: number;\n    shadowColor: string;\n    shadowOffsetX: number;\n    shadowOffsetY: number;\n}\n\ninterface CanvasState {\n    restore(): void;\n    save(): void;\n}\n\ninterface CanvasText {\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\n    measureText(text: string): TextMetrics;\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\n}\n\ninterface CanvasTextDrawingStyles {\n    direction: CanvasDirection;\n    font: string;\n    textAlign: CanvasTextAlign;\n    textBaseline: CanvasTextBaseline;\n}\n\ninterface CanvasTransform {\n    getTransform(): DOMMatrix;\n    resetTransform(): void;\n    rotate(angle: number): void;\n    scale(x: number, y: number): void;\n    setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;\n    setTransform(transform?: DOMMatrix2DInit): void;\n    transform(a: number, b: number, c: number, d: number, e: number, f: number): void;\n    translate(x: number, y: number): void;\n}\n\ninterface CanvasUserInterface {\n    drawFocusIfNeeded(element: Element): void;\n    drawFocusIfNeeded(path: Path2D, element: Element): void;\n}\n\n/** The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel. */\ninterface ChannelMergerNode extends AudioNode {\n}\n\ndeclare var ChannelMergerNode: {\n    prototype: ChannelMergerNode;\n    new(context: BaseAudioContext, options?: ChannelMergerOptions): ChannelMergerNode;\n};\n\n/** The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel. */\ninterface ChannelSplitterNode extends AudioNode {\n}\n\ndeclare var ChannelSplitterNode: {\n    prototype: ChannelSplitterNode;\n    new(context: BaseAudioContext, options?: ChannelSplitterOptions): ChannelSplitterNode;\n};\n\n/** The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract. */\ninterface CharacterData extends Node, ChildNode, NonDocumentTypeChildNode {\n    data: string;\n    readonly length: number;\n    readonly ownerDocument: Document;\n    appendData(data: string): void;\n    deleteData(offset: number, count: number): void;\n    insertData(offset: number, data: string): void;\n    replaceData(offset: number, count: number, data: string): void;\n    substringData(offset: number, count: number): string;\n}\n\ndeclare var CharacterData: {\n    prototype: CharacterData;\n    new(): CharacterData;\n};\n\ninterface ChildNode extends Node {\n    /**\n     * Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n     *\n     * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n     */\n    after(...nodes: (Node | string)[]): void;\n    /**\n     * Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n     *\n     * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n     */\n    before(...nodes: (Node | string)[]): void;\n    /** Removes node. */\n    remove(): void;\n    /**\n     * Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n     *\n     * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n     */\n    replaceWith(...nodes: (Node | string)[]): void;\n}\n\n/** @deprecated */\ninterface ClientRect extends DOMRect {\n}\n\n/** Available only in secure contexts. */\ninterface Clipboard extends EventTarget {\n    read(): Promise<ClipboardItems>;\n    readText(): Promise<string>;\n    write(data: ClipboardItems): Promise<void>;\n    writeText(data: string): Promise<void>;\n}\n\ndeclare var Clipboard: {\n    prototype: Clipboard;\n    new(): Clipboard;\n};\n\n/** Events providing information related to modification of the clipboard, that is cut, copy, and paste events. */\ninterface ClipboardEvent extends Event {\n    readonly clipboardData: DataTransfer | null;\n}\n\ndeclare var ClipboardEvent: {\n    prototype: ClipboardEvent;\n    new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent;\n};\n\n/** Available only in secure contexts. */\ninterface ClipboardItem {\n    readonly types: ReadonlyArray<string>;\n    getType(type: string): Promise<Blob>;\n}\n\ndeclare var ClipboardItem: {\n    prototype: ClipboardItem;\n    new(items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions): ClipboardItem;\n};\n\n/** A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute. */\ninterface CloseEvent extends Event {\n    /** Returns the WebSocket connection close code provided by the server. */\n    readonly code: number;\n    /** Returns the WebSocket connection close reason provided by the server. */\n    readonly reason: string;\n    /** Returns true if the connection closed cleanly; false otherwise. */\n    readonly wasClean: boolean;\n}\n\ndeclare var CloseEvent: {\n    prototype: CloseEvent;\n    new(type: string, eventInitDict?: CloseEventInit): CloseEvent;\n};\n\n/** Textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. */\ninterface Comment extends CharacterData {\n}\n\ndeclare var Comment: {\n    prototype: Comment;\n    new(data?: string): Comment;\n};\n\n/** The DOM CompositionEvent represents events that occur due to the user indirectly entering text. */\ninterface CompositionEvent extends UIEvent {\n    readonly data: string;\n    /** @deprecated */\n    initCompositionEvent(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: WindowProxy | null, dataArg?: string): void;\n}\n\ndeclare var CompositionEvent: {\n    prototype: CompositionEvent;\n    new(type: string, eventInitDict?: CompositionEventInit): CompositionEvent;\n};\n\ninterface ConstantSourceNode extends AudioScheduledSourceNode {\n    readonly offset: AudioParam;\n    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ConstantSourceNode: {\n    prototype: ConstantSourceNode;\n    new(context: BaseAudioContext, options?: ConstantSourceOptions): ConstantSourceNode;\n};\n\n/** An AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output. */\ninterface ConvolverNode extends AudioNode {\n    buffer: AudioBuffer | null;\n    normalize: boolean;\n}\n\ndeclare var ConvolverNode: {\n    prototype: ConvolverNode;\n    new(context: BaseAudioContext, options?: ConvolverOptions): ConvolverNode;\n};\n\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\ninterface CountQueuingStrategy extends QueuingStrategy {\n    readonly highWaterMark: number;\n    readonly size: QueuingStrategySize;\n}\n\ndeclare var CountQueuingStrategy: {\n    prototype: CountQueuingStrategy;\n    new(init: QueuingStrategyInit): CountQueuingStrategy;\n};\n\n/** Available only in secure contexts. */\ninterface Credential {\n    readonly id: string;\n    readonly type: string;\n}\n\ndeclare var Credential: {\n    prototype: Credential;\n    new(): Credential;\n};\n\n/** Available only in secure contexts. */\ninterface CredentialsContainer {\n    create(options?: CredentialCreationOptions): Promise<Credential | null>;\n    get(options?: CredentialRequestOptions): Promise<Credential | null>;\n    preventSilentAccess(): Promise<void>;\n    store(credential: Credential): Promise<Credential>;\n}\n\ndeclare var CredentialsContainer: {\n    prototype: CredentialsContainer;\n    new(): CredentialsContainer;\n};\n\n/** Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives. */\ninterface Crypto {\n    /** Available only in secure contexts. */\n    readonly subtle: SubtleCrypto;\n    getRandomValues<T extends ArrayBufferView | null>(array: T): T;\n    /** Available only in secure contexts. */\n    randomUUID(): string;\n}\n\ndeclare var Crypto: {\n    prototype: Crypto;\n    new(): Crypto;\n};\n\n/**\n * The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.\n * Available only in secure contexts.\n */\ninterface CryptoKey {\n    readonly algorithm: KeyAlgorithm;\n    readonly extractable: boolean;\n    readonly type: KeyType;\n    readonly usages: KeyUsage[];\n}\n\ndeclare var CryptoKey: {\n    prototype: CryptoKey;\n    new(): CryptoKey;\n};\n\ninterface CustomElementRegistry {\n    define(name: string, constructor: CustomElementConstructor, options?: ElementDefinitionOptions): void;\n    get(name: string): CustomElementConstructor | undefined;\n    upgrade(root: Node): void;\n    whenDefined(name: string): Promise<CustomElementConstructor>;\n}\n\ndeclare var CustomElementRegistry: {\n    prototype: CustomElementRegistry;\n    new(): CustomElementRegistry;\n};\n\ninterface CustomEvent<T = any> extends Event {\n    /** Returns any custom data event was created with. Typically used for synthetic events. */\n    readonly detail: T;\n    /** @deprecated */\n    initCustomEvent(type: string, bubbles?: boolean, cancelable?: boolean, detail?: T): void;\n}\n\ndeclare var CustomEvent: {\n    prototype: CustomEvent;\n    new<T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;\n};\n\n/** An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. */\ninterface DOMException extends Error {\n    /** @deprecated */\n    readonly code: number;\n    readonly message: string;\n    readonly name: string;\n    readonly ABORT_ERR: number;\n    readonly DATA_CLONE_ERR: number;\n    readonly DOMSTRING_SIZE_ERR: number;\n    readonly HIERARCHY_REQUEST_ERR: number;\n    readonly INDEX_SIZE_ERR: number;\n    readonly INUSE_ATTRIBUTE_ERR: number;\n    readonly INVALID_ACCESS_ERR: number;\n    readonly INVALID_CHARACTER_ERR: number;\n    readonly INVALID_MODIFICATION_ERR: number;\n    readonly INVALID_NODE_TYPE_ERR: number;\n    readonly INVALID_STATE_ERR: number;\n    readonly NAMESPACE_ERR: number;\n    readonly NETWORK_ERR: number;\n    readonly NOT_FOUND_ERR: number;\n    readonly NOT_SUPPORTED_ERR: number;\n    readonly NO_DATA_ALLOWED_ERR: number;\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\n    readonly QUOTA_EXCEEDED_ERR: number;\n    readonly SECURITY_ERR: number;\n    readonly SYNTAX_ERR: number;\n    readonly TIMEOUT_ERR: number;\n    readonly TYPE_MISMATCH_ERR: number;\n    readonly URL_MISMATCH_ERR: number;\n    readonly VALIDATION_ERR: number;\n    readonly WRONG_DOCUMENT_ERR: number;\n}\n\ndeclare var DOMException: {\n    prototype: DOMException;\n    new(message?: string, name?: string): DOMException;\n    readonly ABORT_ERR: number;\n    readonly DATA_CLONE_ERR: number;\n    readonly DOMSTRING_SIZE_ERR: number;\n    readonly HIERARCHY_REQUEST_ERR: number;\n    readonly INDEX_SIZE_ERR: number;\n    readonly INUSE_ATTRIBUTE_ERR: number;\n    readonly INVALID_ACCESS_ERR: number;\n    readonly INVALID_CHARACTER_ERR: number;\n    readonly INVALID_MODIFICATION_ERR: number;\n    readonly INVALID_NODE_TYPE_ERR: number;\n    readonly INVALID_STATE_ERR: number;\n    readonly NAMESPACE_ERR: number;\n    readonly NETWORK_ERR: number;\n    readonly NOT_FOUND_ERR: number;\n    readonly NOT_SUPPORTED_ERR: number;\n    readonly NO_DATA_ALLOWED_ERR: number;\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\n    readonly QUOTA_EXCEEDED_ERR: number;\n    readonly SECURITY_ERR: number;\n    readonly SYNTAX_ERR: number;\n    readonly TIMEOUT_ERR: number;\n    readonly TYPE_MISMATCH_ERR: number;\n    readonly URL_MISMATCH_ERR: number;\n    readonly VALIDATION_ERR: number;\n    readonly WRONG_DOCUMENT_ERR: number;\n};\n\n/** An object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property. */\ninterface DOMImplementation {\n    createDocument(namespace: string | null, qualifiedName: string | null, doctype?: DocumentType | null): XMLDocument;\n    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;\n    createHTMLDocument(title?: string): Document;\n    /** @deprecated */\n    hasFeature(...args: any[]): true;\n}\n\ndeclare var DOMImplementation: {\n    prototype: DOMImplementation;\n    new(): DOMImplementation;\n};\n\ninterface DOMMatrix extends DOMMatrixReadOnly {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n    e: number;\n    f: number;\n    m11: number;\n    m12: number;\n    m13: number;\n    m14: number;\n    m21: number;\n    m22: number;\n    m23: number;\n    m24: number;\n    m31: number;\n    m32: number;\n    m33: number;\n    m34: number;\n    m41: number;\n    m42: number;\n    m43: number;\n    m44: number;\n    invertSelf(): DOMMatrix;\n    multiplySelf(other?: DOMMatrixInit): DOMMatrix;\n    preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;\n    rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\n    rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;\n    rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\n    scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    setMatrixValue(transformList: string): DOMMatrix;\n    skewXSelf(sx?: number): DOMMatrix;\n    skewYSelf(sy?: number): DOMMatrix;\n    translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;\n}\n\ndeclare var DOMMatrix: {\n    prototype: DOMMatrix;\n    new(init?: string | number[]): DOMMatrix;\n    fromFloat32Array(array32: Float32Array): DOMMatrix;\n    fromFloat64Array(array64: Float64Array): DOMMatrix;\n    fromMatrix(other?: DOMMatrixInit): DOMMatrix;\n};\n\ntype SVGMatrix = DOMMatrix;\ndeclare var SVGMatrix: typeof DOMMatrix;\n\ntype WebKitCSSMatrix = DOMMatrix;\ndeclare var WebKitCSSMatrix: typeof DOMMatrix;\n\ninterface DOMMatrixReadOnly {\n    readonly a: number;\n    readonly b: number;\n    readonly c: number;\n    readonly d: number;\n    readonly e: number;\n    readonly f: number;\n    readonly is2D: boolean;\n    readonly isIdentity: boolean;\n    readonly m11: number;\n    readonly m12: number;\n    readonly m13: number;\n    readonly m14: number;\n    readonly m21: number;\n    readonly m22: number;\n    readonly m23: number;\n    readonly m24: number;\n    readonly m31: number;\n    readonly m32: number;\n    readonly m33: number;\n    readonly m34: number;\n    readonly m41: number;\n    readonly m42: number;\n    readonly m43: number;\n    readonly m44: number;\n    flipX(): DOMMatrix;\n    flipY(): DOMMatrix;\n    inverse(): DOMMatrix;\n    multiply(other?: DOMMatrixInit): DOMMatrix;\n    rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\n    rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\n    rotateFromVector(x?: number, y?: number): DOMMatrix;\n    scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    /** @deprecated */\n    scaleNonUniform(scaleX?: number, scaleY?: number): DOMMatrix;\n    skewX(sx?: number): DOMMatrix;\n    skewY(sy?: number): DOMMatrix;\n    toFloat32Array(): Float32Array;\n    toFloat64Array(): Float64Array;\n    toJSON(): any;\n    transformPoint(point?: DOMPointInit): DOMPoint;\n    translate(tx?: number, ty?: number, tz?: number): DOMMatrix;\n    toString(): string;\n}\n\ndeclare var DOMMatrixReadOnly: {\n    prototype: DOMMatrixReadOnly;\n    new(init?: string | number[]): DOMMatrixReadOnly;\n    fromFloat32Array(array32: Float32Array): DOMMatrixReadOnly;\n    fromFloat64Array(array64: Float64Array): DOMMatrixReadOnly;\n    fromMatrix(other?: DOMMatrixInit): DOMMatrixReadOnly;\n    toString(): string;\n};\n\n/** Provides the ability to parse XML or HTML source code from a string into a DOM Document. */\ninterface DOMParser {\n    /**\n     * Parses string using either the HTML or XML parser, according to type, and returns the resulting Document. type can be \"text/html\" (which will invoke the HTML parser), or any of \"text/xml\", \"application/xml\", \"application/xhtml+xml\", or \"image/svg+xml\" (which will invoke the XML parser).\n     *\n     * For the XML parser, if string cannot be parsed, then the returned Document will contain elements describing the resulting error.\n     *\n     * Note that script elements are not evaluated during parsing, and the resulting document's encoding will always be UTF-8.\n     *\n     * Values other than the above for type will cause a TypeError exception to be thrown.\n     */\n    parseFromString(string: string, type: DOMParserSupportedType): Document;\n}\n\ndeclare var DOMParser: {\n    prototype: DOMParser;\n    new(): DOMParser;\n};\n\ninterface DOMPoint extends DOMPointReadOnly {\n    w: number;\n    x: number;\n    y: number;\n    z: number;\n}\n\ndeclare var DOMPoint: {\n    prototype: DOMPoint;\n    new(x?: number, y?: number, z?: number, w?: number): DOMPoint;\n    fromPoint(other?: DOMPointInit): DOMPoint;\n};\n\ntype SVGPoint = DOMPoint;\ndeclare var SVGPoint: typeof DOMPoint;\n\ninterface DOMPointReadOnly {\n    readonly w: number;\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    matrixTransform(matrix?: DOMMatrixInit): DOMPoint;\n    toJSON(): any;\n}\n\ndeclare var DOMPointReadOnly: {\n    prototype: DOMPointReadOnly;\n    new(x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly;\n    fromPoint(other?: DOMPointInit): DOMPointReadOnly;\n};\n\ninterface DOMQuad {\n    readonly p1: DOMPoint;\n    readonly p2: DOMPoint;\n    readonly p3: DOMPoint;\n    readonly p4: DOMPoint;\n    getBounds(): DOMRect;\n    toJSON(): any;\n}\n\ndeclare var DOMQuad: {\n    prototype: DOMQuad;\n    new(p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad;\n    fromQuad(other?: DOMQuadInit): DOMQuad;\n    fromRect(other?: DOMRectInit): DOMQuad;\n};\n\ninterface DOMRect extends DOMRectReadOnly {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n}\n\ndeclare var DOMRect: {\n    prototype: DOMRect;\n    new(x?: number, y?: number, width?: number, height?: number): DOMRect;\n    fromRect(other?: DOMRectInit): DOMRect;\n};\n\ntype SVGRect = DOMRect;\ndeclare var SVGRect: typeof DOMRect;\n\ninterface DOMRectList {\n    readonly length: number;\n    item(index: number): DOMRect | null;\n    [index: number]: DOMRect;\n}\n\ndeclare var DOMRectList: {\n    prototype: DOMRectList;\n    new(): DOMRectList;\n};\n\ninterface DOMRectReadOnly {\n    readonly bottom: number;\n    readonly height: number;\n    readonly left: number;\n    readonly right: number;\n    readonly top: number;\n    readonly width: number;\n    readonly x: number;\n    readonly y: number;\n    toJSON(): any;\n}\n\ndeclare var DOMRectReadOnly: {\n    prototype: DOMRectReadOnly;\n    new(x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly;\n    fromRect(other?: DOMRectInit): DOMRectReadOnly;\n};\n\n/** A type returned by some APIs which contains a list of DOMString (strings). */\ninterface DOMStringList {\n    /** Returns the number of strings in strings. */\n    readonly length: number;\n    /** Returns true if strings contains string, and false otherwise. */\n    contains(string: string): boolean;\n    /** Returns the string with index index from strings. */\n    item(index: number): string | null;\n    [index: number]: string;\n}\n\ndeclare var DOMStringList: {\n    prototype: DOMStringList;\n    new(): DOMStringList;\n};\n\n/** Used by the dataset HTML attribute to represent data for custom attributes added to elements. */\ninterface DOMStringMap {\n    [name: string]: string | undefined;\n}\n\ndeclare var DOMStringMap: {\n    prototype: DOMStringMap;\n    new(): DOMStringMap;\n};\n\n/** A set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive. */\ninterface DOMTokenList {\n    /** Returns the number of tokens. */\n    readonly length: number;\n    /**\n     * Returns the associated set as string.\n     *\n     * Can be set, to change the associated attribute.\n     */\n    value: string;\n    toString(): string;\n    /**\n     * Adds all arguments passed, except those already present.\n     *\n     * Throws a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n     *\n     * Throws an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n     */\n    add(...tokens: string[]): void;\n    /** Returns true if token is present, and false otherwise. */\n    contains(token: string): boolean;\n    /** Returns the token with index index. */\n    item(index: number): string | null;\n    /**\n     * Removes arguments passed, if they are present.\n     *\n     * Throws a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n     *\n     * Throws an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n     */\n    remove(...tokens: string[]): void;\n    /**\n     * Replaces token with newToken.\n     *\n     * Returns true if token was replaced with newToken, and false otherwise.\n     *\n     * Throws a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n     *\n     * Throws an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n     */\n    replace(token: string, newToken: string): boolean;\n    /**\n     * Returns true if token is in the associated attribute's supported tokens. Returns false otherwise.\n     *\n     * Throws a TypeError if the associated attribute has no supported tokens defined.\n     */\n    supports(token: string): boolean;\n    /**\n     * If force is not given, \"toggles\" token, removing it if it's present and adding it if it's not present. If force is true, adds token (same as add()). If force is false, removes token (same as remove()).\n     *\n     * Returns true if token is now present, and false otherwise.\n     *\n     * Throws a \"SyntaxError\" DOMException if token is empty.\n     *\n     * Throws an \"InvalidCharacterError\" DOMException if token contains any spaces.\n     */\n    toggle(token: string, force?: boolean): boolean;\n    forEach(callbackfn: (value: string, key: number, parent: DOMTokenList) => void, thisArg?: any): void;\n    [index: number]: string;\n}\n\ndeclare var DOMTokenList: {\n    prototype: DOMTokenList;\n    new(): DOMTokenList;\n};\n\n/** Used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API. */\ninterface DataTransfer {\n    /**\n     * Returns the kind of operation that is currently selected. If the kind of operation isn't one of those that is allowed by the effectAllowed attribute, then the operation will fail.\n     *\n     * Can be set, to change the selected operation.\n     *\n     * The possible values are \"none\", \"copy\", \"link\", and \"move\".\n     */\n    dropEffect: \"none\" | \"copy\" | \"link\" | \"move\";\n    /**\n     * Returns the kinds of operations that are to be allowed.\n     *\n     * Can be set (during the dragstart event), to change the allowed operations.\n     *\n     * The possible values are \"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\", and \"uninitialized\",\n     */\n    effectAllowed: \"none\" | \"copy\" | \"copyLink\" | \"copyMove\" | \"link\" | \"linkMove\" | \"move\" | \"all\" | \"uninitialized\";\n    /** Returns a FileList of the files being dragged, if any. */\n    readonly files: FileList;\n    /** Returns a DataTransferItemList object, with the drag data. */\n    readonly items: DataTransferItemList;\n    /** Returns a frozen array listing the formats that were set in the dragstart event. In addition, if any files are being dragged, then one of the types will be the string \"Files\". */\n    readonly types: ReadonlyArray<string>;\n    /** Removes the data of the specified formats. Removes all data if the argument is omitted. */\n    clearData(format?: string): void;\n    /** Returns the specified data. If there is no such data, returns the empty string. */\n    getData(format: string): string;\n    /** Adds the specified data. */\n    setData(format: string, data: string): void;\n    /** Uses the given element to update the drag feedback, replacing any previously specified feedback. */\n    setDragImage(image: Element, x: number, y: number): void;\n}\n\ndeclare var DataTransfer: {\n    prototype: DataTransfer;\n    new(): DataTransfer;\n};\n\n/** One drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object. */\ninterface DataTransferItem {\n    /** Returns the drag data item kind, one of: \"string\", \"file\". */\n    readonly kind: string;\n    /** Returns the drag data item type string. */\n    readonly type: string;\n    /** Returns a File object, if the drag data item kind is File. */\n    getAsFile(): File | null;\n    /** Invokes the callback with the string data as the argument, if the drag data item kind is text. */\n    getAsString(callback: FunctionStringCallback | null): void;\n    webkitGetAsEntry(): FileSystemEntry | null;\n}\n\ndeclare var DataTransferItem: {\n    prototype: DataTransferItem;\n    new(): DataTransferItem;\n};\n\n/** A list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList. */\ninterface DataTransferItemList {\n    /** Returns the number of items in the drag data store. */\n    readonly length: number;\n    /** Adds a new entry for the given data to the drag data store. If the data is plain text then a type string has to be provided also. */\n    add(data: string, type: string): DataTransferItem | null;\n    add(data: File): DataTransferItem | null;\n    /** Removes all the entries in the drag data store. */\n    clear(): void;\n    /** Removes the indexth entry in the drag data store. */\n    remove(index: number): void;\n    [index: number]: DataTransferItem;\n}\n\ndeclare var DataTransferItemList: {\n    prototype: DataTransferItemList;\n    new(): DataTransferItemList;\n};\n\n/** A delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output. */\ninterface DelayNode extends AudioNode {\n    readonly delayTime: AudioParam;\n}\n\ndeclare var DelayNode: {\n    prototype: DelayNode;\n    new(context: BaseAudioContext, options?: DelayOptions): DelayNode;\n};\n\n/**\n * The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.\n * Available only in secure contexts.\n */\ninterface DeviceMotionEvent extends Event {\n    readonly acceleration: DeviceMotionEventAcceleration | null;\n    readonly accelerationIncludingGravity: DeviceMotionEventAcceleration | null;\n    readonly interval: number;\n    readonly rotationRate: DeviceMotionEventRotationRate | null;\n}\n\ndeclare var DeviceMotionEvent: {\n    prototype: DeviceMotionEvent;\n    new(type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent;\n};\n\n/** Available only in secure contexts. */\ninterface DeviceMotionEventAcceleration {\n    readonly x: number | null;\n    readonly y: number | null;\n    readonly z: number | null;\n}\n\n/** Available only in secure contexts. */\ninterface DeviceMotionEventRotationRate {\n    readonly alpha: number | null;\n    readonly beta: number | null;\n    readonly gamma: number | null;\n}\n\n/**\n * The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.\n * Available only in secure contexts.\n */\ninterface DeviceOrientationEvent extends Event {\n    readonly absolute: boolean;\n    readonly alpha: number | null;\n    readonly beta: number | null;\n    readonly gamma: number | null;\n}\n\ndeclare var DeviceOrientationEvent: {\n    prototype: DeviceOrientationEvent;\n    new(type: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent;\n};\n\ninterface DocumentEventMap extends DocumentAndElementEventHandlersEventMap, GlobalEventHandlersEventMap {\n    \"DOMContentLoaded\": Event;\n    \"fullscreenchange\": Event;\n    \"fullscreenerror\": Event;\n    \"pointerlockchange\": Event;\n    \"pointerlockerror\": Event;\n    \"readystatechange\": Event;\n    \"visibilitychange\": Event;\n}\n\n/** Any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. */\ninterface Document extends Node, DocumentAndElementEventHandlers, DocumentOrShadowRoot, FontFaceSource, GlobalEventHandlers, NonElementParentNode, ParentNode, XPathEvaluatorBase {\n    /** Sets or gets the URL for the current document. */\n    readonly URL: string;\n    /**\n     * Sets or gets the color of all active links in the document.\n     * @deprecated\n     */\n    alinkColor: string;\n    /**\n     * Returns a reference to the collection of elements contained by the object.\n     * @deprecated\n     */\n    readonly all: HTMLAllCollection;\n    /**\n     * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\n     * @deprecated\n     */\n    readonly anchors: HTMLCollectionOf<HTMLAnchorElement>;\n    /**\n     * Retrieves a collection of all applet objects in the document.\n     * @deprecated\n     */\n    readonly applets: HTMLCollection;\n    /**\n     * Deprecated. Sets or retrieves a value that indicates the background color behind the object.\n     * @deprecated\n     */\n    bgColor: string;\n    /** Specifies the beginning and end of the document body. */\n    body: HTMLElement;\n    /** Returns document's encoding. */\n    readonly characterSet: string;\n    /**\n     * Gets or sets the character set used to encode the object.\n     * @deprecated This is a legacy alias of `characterSet`.\n     */\n    readonly charset: string;\n    /** Gets a value that indicates whether standards-compliant mode is switched on for the object. */\n    readonly compatMode: string;\n    /** Returns document's content type. */\n    readonly contentType: string;\n    /**\n     * Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can't be applied to this resource, the empty string will be returned.\n     *\n     * Can be set, to add a new cookie to the element's set of HTTP cookies.\n     *\n     * If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a \"SecurityError\" DOMException will be thrown on getting and setting.\n     */\n    cookie: string;\n    /**\n     * Returns the script element, or the SVG script element, that is currently executing, as long as the element represents a classic script. In the case of reentrant script execution, returns the one that most recently started executing amongst those that have not yet finished executing.\n     *\n     * Returns null if the Document is not currently executing a script or SVG script element (e.g., because the running script is an event handler, or a timeout), or if the currently executing script or SVG script element represents a module script.\n     */\n    readonly currentScript: HTMLOrSVGScriptElement | null;\n    /** Returns the Window object of the active document. */\n    readonly defaultView: (WindowProxy & typeof globalThis) | null;\n    /** Sets or gets a value that indicates whether the document can be edited. */\n    designMode: string;\n    /** Sets or retrieves a value that indicates the reading order of the object. */\n    dir: string;\n    /** Gets an object representing the document type declaration associated with the current document. */\n    readonly doctype: DocumentType | null;\n    /** Gets a reference to the root node of the document. */\n    readonly documentElement: HTMLElement;\n    /** Returns document's URL. */\n    readonly documentURI: string;\n    /** Sets or gets the security domain of the document. */\n    domain: string;\n    /** Retrieves a collection of all embed objects in the document. */\n    readonly embeds: HTMLCollectionOf<HTMLEmbedElement>;\n    /**\n     * Sets or gets the foreground (text) color of the document.\n     * @deprecated\n     */\n    fgColor: string;\n    /** Retrieves a collection, in source order, of all form objects in the document. */\n    readonly forms: HTMLCollectionOf<HTMLFormElement>;\n    /** @deprecated */\n    readonly fullscreen: boolean;\n    /** Returns true if document has the ability to display elements fullscreen and fullscreen is supported, or false otherwise. */\n    readonly fullscreenEnabled: boolean;\n    /** Returns the head element. */\n    readonly head: HTMLHeadElement;\n    readonly hidden: boolean;\n    /** Retrieves a collection, in source order, of img objects in the document. */\n    readonly images: HTMLCollectionOf<HTMLImageElement>;\n    /** Gets the implementation object of the current document. */\n    readonly implementation: DOMImplementation;\n    /**\n     * Returns the character encoding used to create the webpage that is loaded into the document object.\n     * @deprecated This is a legacy alias of `characterSet`.\n     */\n    readonly inputEncoding: string;\n    /** Gets the date that the page was last modified, if the page supplies one. */\n    readonly lastModified: string;\n    /**\n     * Sets or gets the color of the document links.\n     * @deprecated\n     */\n    linkColor: string;\n    /** Retrieves a collection of all a objects that specify the href property and all area objects in the document. */\n    readonly links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;\n    /** Contains information about the current URL. */\n    get location(): Location;\n    set location(href: string | Location);\n    onfullscreenchange: ((this: Document, ev: Event) => any) | null;\n    onfullscreenerror: ((this: Document, ev: Event) => any) | null;\n    onpointerlockchange: ((this: Document, ev: Event) => any) | null;\n    onpointerlockerror: ((this: Document, ev: Event) => any) | null;\n    /**\n     * Fires when the state of the object has changed.\n     * @param ev The event\n     */\n    onreadystatechange: ((this: Document, ev: Event) => any) | null;\n    onvisibilitychange: ((this: Document, ev: Event) => any) | null;\n    readonly ownerDocument: null;\n    readonly pictureInPictureEnabled: boolean;\n    /** Return an HTMLCollection of the embed elements in the Document. */\n    readonly plugins: HTMLCollectionOf<HTMLEmbedElement>;\n    /** Retrieves a value that indicates the current state of the object. */\n    readonly readyState: DocumentReadyState;\n    /** Gets the URL of the location that referred the user to the current page. */\n    readonly referrer: string;\n    /** @deprecated */\n    readonly rootElement: SVGSVGElement | null;\n    /** Retrieves a collection of all script objects in the document. */\n    readonly scripts: HTMLCollectionOf<HTMLScriptElement>;\n    readonly scrollingElement: Element | null;\n    readonly timeline: DocumentTimeline;\n    /** Contains the title of the document. */\n    title: string;\n    readonly visibilityState: DocumentVisibilityState;\n    /**\n     * Sets or gets the color of the links that the user has visited.\n     * @deprecated\n     */\n    vlinkColor: string;\n    /**\n     * Moves node from another document and returns it.\n     *\n     * If node is a document, throws a \"NotSupportedError\" DOMException or, if node is a shadow root, throws a \"HierarchyRequestError\" DOMException.\n     */\n    adoptNode<T extends Node>(node: T): T;\n    /** @deprecated */\n    captureEvents(): void;\n    /** @deprecated */\n    caretRangeFromPoint(x: number, y: number): Range | null;\n    /** @deprecated */\n    clear(): void;\n    /** Closes an output stream and forces the sent data to display. */\n    close(): void;\n    /**\n     * Creates an attribute object with a specified name.\n     * @param name String that sets the attribute object's name.\n     */\n    createAttribute(localName: string): Attr;\n    createAttributeNS(namespace: string | null, qualifiedName: string): Attr;\n    /** Returns a CDATASection node whose data is data. */\n    createCDATASection(data: string): CDATASection;\n    /**\n     * Creates a comment object with the specified data.\n     * @param data Sets the comment object's data.\n     */\n    createComment(data: string): Comment;\n    /** Creates a new document. */\n    createDocumentFragment(): DocumentFragment;\n    /**\n     * Creates an instance of the element for the specified tag.\n     * @param tagName The name of an element.\n     */\n    createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];\n    /** @deprecated */\n    createElement<K extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];\n    createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;\n    /**\n     * Returns an element with namespace namespace. Its namespace prefix will be everything before \":\" (U+003E) in qualifiedName or null. Its local name will be everything after \":\" (U+003E) in qualifiedName or qualifiedName.\n     *\n     * If localName does not match the Name production an \"InvalidCharacterError\" DOMException will be thrown.\n     *\n     * If one of the following conditions is true a \"NamespaceError\" DOMException will be thrown:\n     *\n     * localName does not match the QName production.\n     * Namespace prefix is not null and namespace is the empty string.\n     * Namespace prefix is \"xml\" and namespace is not the XML namespace.\n     * qualifiedName or namespace prefix is \"xmlns\" and namespace is not the XMLNS namespace.\n     * namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is \"xmlns\".\n     *\n     * When supplied, options's is can be used to create a customized built-in element.\n     */\n    createElementNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", qualifiedName: string): HTMLElement;\n    createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: K): SVGElementTagNameMap[K];\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: string): SVGElement;\n    createElementNS(namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element;\n    createElementNS(namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions): Element;\n    createEvent(eventInterface: \"AnimationEvent\"): AnimationEvent;\n    createEvent(eventInterface: \"AnimationPlaybackEvent\"): AnimationPlaybackEvent;\n    createEvent(eventInterface: \"AudioProcessingEvent\"): AudioProcessingEvent;\n    createEvent(eventInterface: \"BeforeUnloadEvent\"): BeforeUnloadEvent;\n    createEvent(eventInterface: \"BlobEvent\"): BlobEvent;\n    createEvent(eventInterface: \"ClipboardEvent\"): ClipboardEvent;\n    createEvent(eventInterface: \"CloseEvent\"): CloseEvent;\n    createEvent(eventInterface: \"CompositionEvent\"): CompositionEvent;\n    createEvent(eventInterface: \"CustomEvent\"): CustomEvent;\n    createEvent(eventInterface: \"DeviceMotionEvent\"): DeviceMotionEvent;\n    createEvent(eventInterface: \"DeviceOrientationEvent\"): DeviceOrientationEvent;\n    createEvent(eventInterface: \"DragEvent\"): DragEvent;\n    createEvent(eventInterface: \"ErrorEvent\"): ErrorEvent;\n    createEvent(eventInterface: \"Event\"): Event;\n    createEvent(eventInterface: \"Events\"): Event;\n    createEvent(eventInterface: \"FocusEvent\"): FocusEvent;\n    createEvent(eventInterface: \"FontFaceSetLoadEvent\"): FontFaceSetLoadEvent;\n    createEvent(eventInterface: \"FormDataEvent\"): FormDataEvent;\n    createEvent(eventInterface: \"GamepadEvent\"): GamepadEvent;\n    createEvent(eventInterface: \"HashChangeEvent\"): HashChangeEvent;\n    createEvent(eventInterface: \"IDBVersionChangeEvent\"): IDBVersionChangeEvent;\n    createEvent(eventInterface: \"InputEvent\"): InputEvent;\n    createEvent(eventInterface: \"KeyboardEvent\"): KeyboardEvent;\n    createEvent(eventInterface: \"MediaEncryptedEvent\"): MediaEncryptedEvent;\n    createEvent(eventInterface: \"MediaKeyMessageEvent\"): MediaKeyMessageEvent;\n    createEvent(eventInterface: \"MediaQueryListEvent\"): MediaQueryListEvent;\n    createEvent(eventInterface: \"MediaRecorderErrorEvent\"): MediaRecorderErrorEvent;\n    createEvent(eventInterface: \"MediaStreamTrackEvent\"): MediaStreamTrackEvent;\n    createEvent(eventInterface: \"MessageEvent\"): MessageEvent;\n    createEvent(eventInterface: \"MouseEvent\"): MouseEvent;\n    createEvent(eventInterface: \"MouseEvents\"): MouseEvent;\n    createEvent(eventInterface: \"MutationEvent\"): MutationEvent;\n    createEvent(eventInterface: \"MutationEvents\"): MutationEvent;\n    createEvent(eventInterface: \"OfflineAudioCompletionEvent\"): OfflineAudioCompletionEvent;\n    createEvent(eventInterface: \"PageTransitionEvent\"): PageTransitionEvent;\n    createEvent(eventInterface: \"PaymentMethodChangeEvent\"): PaymentMethodChangeEvent;\n    createEvent(eventInterface: \"PaymentRequestUpdateEvent\"): PaymentRequestUpdateEvent;\n    createEvent(eventInterface: \"PointerEvent\"): PointerEvent;\n    createEvent(eventInterface: \"PopStateEvent\"): PopStateEvent;\n    createEvent(eventInterface: \"ProgressEvent\"): ProgressEvent;\n    createEvent(eventInterface: \"PromiseRejectionEvent\"): PromiseRejectionEvent;\n    createEvent(eventInterface: \"RTCDTMFToneChangeEvent\"): RTCDTMFToneChangeEvent;\n    createEvent(eventInterface: \"RTCDataChannelEvent\"): RTCDataChannelEvent;\n    createEvent(eventInterface: \"RTCErrorEvent\"): RTCErrorEvent;\n    createEvent(eventInterface: \"RTCPeerConnectionIceErrorEvent\"): RTCPeerConnectionIceErrorEvent;\n    createEvent(eventInterface: \"RTCPeerConnectionIceEvent\"): RTCPeerConnectionIceEvent;\n    createEvent(eventInterface: \"RTCTrackEvent\"): RTCTrackEvent;\n    createEvent(eventInterface: \"SecurityPolicyViolationEvent\"): SecurityPolicyViolationEvent;\n    createEvent(eventInterface: \"SpeechSynthesisErrorEvent\"): SpeechSynthesisErrorEvent;\n    createEvent(eventInterface: \"SpeechSynthesisEvent\"): SpeechSynthesisEvent;\n    createEvent(eventInterface: \"StorageEvent\"): StorageEvent;\n    createEvent(eventInterface: \"SubmitEvent\"): SubmitEvent;\n    createEvent(eventInterface: \"TouchEvent\"): TouchEvent;\n    createEvent(eventInterface: \"TrackEvent\"): TrackEvent;\n    createEvent(eventInterface: \"TransitionEvent\"): TransitionEvent;\n    createEvent(eventInterface: \"UIEvent\"): UIEvent;\n    createEvent(eventInterface: \"UIEvents\"): UIEvent;\n    createEvent(eventInterface: \"WebGLContextEvent\"): WebGLContextEvent;\n    createEvent(eventInterface: \"WheelEvent\"): WheelEvent;\n    createEvent(eventInterface: string): Event;\n    /**\n     * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n     * @param root The root element or node to start traversing on.\n     * @param whatToShow The type of nodes or elements to appear in the node list\n     * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\n     */\n    createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter | null): NodeIterator;\n    /** Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an \"InvalidCharacterError\" DOMException will be thrown. If data contains \"?>\" an \"InvalidCharacterError\" DOMException will be thrown. */\n    createProcessingInstruction(target: string, data: string): ProcessingInstruction;\n    /**  Returns an empty range object that has both of its boundary points positioned at the beginning of the document. */\n    createRange(): Range;\n    /**\n     * Creates a text string from the specified value.\n     * @param data String that specifies the nodeValue property of the text node.\n     */\n    createTextNode(data: string): Text;\n    /**\n     * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\n     * @param root The root element or node to start traversing on.\n     * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\n     * @param filter A custom NodeFilter function to use.\n     */\n    createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter | null): TreeWalker;\n    /**\n     * Executes a command on the current document, current selection, or the given range.\n     * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\n     * @param showUI Display the user interface, defaults to false.\n     * @param value Value to assign.\n     * @deprecated\n     */\n    execCommand(commandId: string, showUI?: boolean, value?: string): boolean;\n    /** Stops document's fullscreen element from being displayed fullscreen and resolves promise when done. */\n    exitFullscreen(): Promise<void>;\n    exitPictureInPicture(): Promise<void>;\n    exitPointerLock(): void;\n    /**\n     * Returns a reference to the first object with the specified value of the ID attribute.\n     * @param elementId String that specifies the ID value.\n     */\n    getElementById(elementId: string): HTMLElement | null;\n    /** Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes. */\n    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;\n    /**\n     * Gets a collection of objects based on the value of the NAME or ID attribute.\n     * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\n     */\n    getElementsByName(elementName: string): NodeListOf<HTMLElement>;\n    /**\n     * Retrieves a collection of objects based on the specified element name.\n     * @param name Specifies the name of an element.\n     */\n    getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;\n    getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;\n    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;\n    /**\n     * If namespace and localName are \"*\" returns a HTMLCollection of all descendant elements.\n     *\n     * If only namespace is \"*\" returns a HTMLCollection of all descendant elements whose local name is localName.\n     *\n     * If only localName is \"*\" returns a HTMLCollection of all descendant elements whose namespace is namespace.\n     *\n     * Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.\n     */\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>;\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>;\n    getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;\n    /** Returns an object representing the current selection of the document that is loaded into the object displaying a webpage. */\n    getSelection(): Selection | null;\n    /** Gets a value indicating whether the object currently has focus. */\n    hasFocus(): boolean;\n    hasStorageAccess(): Promise<boolean>;\n    /**\n     * Returns a copy of node. If deep is true, the copy also includes the node's descendants.\n     *\n     * If node is a document or a shadow root, throws a \"NotSupportedError\" DOMException.\n     */\n    importNode<T extends Node>(node: T, deep?: boolean): T;\n    /**\n     * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\n     * @param url Specifies a MIME type for the document.\n     * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\n     * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, \"fullscreen=yes, toolbar=yes\"). The following values are supported.\n     * @param replace Specifies whether the existing entry for the document is replaced in the history list.\n     */\n    open(unused1?: string, unused2?: string): Document;\n    open(url: string | URL, name: string, features: string): WindowProxy | null;\n    /**\n     * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\n     * @param commandId Specifies a command identifier.\n     * @deprecated\n     */\n    queryCommandEnabled(commandId: string): boolean;\n    /**\n     * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\n     * @param commandId String that specifies a command identifier.\n     */\n    queryCommandIndeterm(commandId: string): boolean;\n    /**\n     * Returns a Boolean value that indicates the current state of the command.\n     * @param commandId String that specifies a command identifier.\n     * @deprecated\n     */\n    queryCommandState(commandId: string): boolean;\n    /**\n     * Returns a Boolean value that indicates whether the current command is supported on the current range.\n     * @param commandId Specifies a command identifier.\n     * @deprecated\n     */\n    queryCommandSupported(commandId: string): boolean;\n    /**\n     * Returns the current value of the document, range, or current selection for the given command.\n     * @param commandId String that specifies a command identifier.\n     */\n    queryCommandValue(commandId: string): string;\n    /** @deprecated */\n    releaseEvents(): void;\n    requestStorageAccess(): Promise<void>;\n    /**\n     * Writes one or more HTML expressions to a document in the specified window.\n     * @param content Specifies the text and HTML tags to write.\n     */\n    write(...text: string[]): void;\n    /**\n     * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.\n     * @param content The text and HTML tags to write.\n     */\n    writeln(...text: string[]): void;\n    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Document: {\n    prototype: Document;\n    new(): Document;\n};\n\ninterface DocumentAndElementEventHandlersEventMap {\n    \"copy\": ClipboardEvent;\n    \"cut\": ClipboardEvent;\n    \"paste\": ClipboardEvent;\n}\n\ninterface DocumentAndElementEventHandlers {\n    oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;\n    oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;\n    onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;\n    addEventListener<K extends keyof DocumentAndElementEventHandlersEventMap>(type: K, listener: (this: DocumentAndElementEventHandlers, ev: DocumentAndElementEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof DocumentAndElementEventHandlersEventMap>(type: K, listener: (this: DocumentAndElementEventHandlers, ev: DocumentAndElementEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** A minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made. */\ninterface DocumentFragment extends Node, NonElementParentNode, ParentNode {\n    readonly ownerDocument: Document;\n    getElementById(elementId: string): HTMLElement | null;\n}\n\ndeclare var DocumentFragment: {\n    prototype: DocumentFragment;\n    new(): DocumentFragment;\n};\n\ninterface DocumentOrShadowRoot {\n    /**\n     * Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.\n     *\n     * For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe's node document.\n     *\n     * Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that's located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.\n     */\n    readonly activeElement: Element | null;\n    adoptedStyleSheets: CSSStyleSheet[];\n    /** Returns document's fullscreen element. */\n    readonly fullscreenElement: Element | null;\n    readonly pictureInPictureElement: Element | null;\n    readonly pointerLockElement: Element | null;\n    /** Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document. */\n    readonly styleSheets: StyleSheetList;\n    /**\n     * Returns the element for the specified x coordinate and the specified y coordinate.\n     * @param x The x-offset\n     * @param y The y-offset\n     */\n    elementFromPoint(x: number, y: number): Element | null;\n    elementsFromPoint(x: number, y: number): Element[];\n    getAnimations(): Animation[];\n}\n\ninterface DocumentTimeline extends AnimationTimeline {\n}\n\ndeclare var DocumentTimeline: {\n    prototype: DocumentTimeline;\n    new(options?: DocumentTimelineOptions): DocumentTimeline;\n};\n\n/** A Node containing a doctype. */\ninterface DocumentType extends Node, ChildNode {\n    readonly name: string;\n    readonly ownerDocument: Document;\n    readonly publicId: string;\n    readonly systemId: string;\n}\n\ndeclare var DocumentType: {\n    prototype: DocumentType;\n    new(): DocumentType;\n};\n\n/** A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way. */\ninterface DragEvent extends MouseEvent {\n    /** Returns the DataTransfer object for the event. */\n    readonly dataTransfer: DataTransfer | null;\n}\n\ndeclare var DragEvent: {\n    prototype: DragEvent;\n    new(type: string, eventInitDict?: DragEventInit): DragEvent;\n};\n\n/** Inherits properties from its parent, AudioNode. */\ninterface DynamicsCompressorNode extends AudioNode {\n    readonly attack: AudioParam;\n    readonly knee: AudioParam;\n    readonly ratio: AudioParam;\n    readonly reduction: number;\n    readonly release: AudioParam;\n    readonly threshold: AudioParam;\n}\n\ndeclare var DynamicsCompressorNode: {\n    prototype: DynamicsCompressorNode;\n    new(context: BaseAudioContext, options?: DynamicsCompressorOptions): DynamicsCompressorNode;\n};\n\ninterface EXT_blend_minmax {\n    readonly MAX_EXT: GLenum;\n    readonly MIN_EXT: GLenum;\n}\n\ninterface EXT_color_buffer_float {\n}\n\ninterface EXT_color_buffer_half_float {\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum;\n    readonly RGB16F_EXT: GLenum;\n    readonly RGBA16F_EXT: GLenum;\n    readonly UNSIGNED_NORMALIZED_EXT: GLenum;\n}\n\ninterface EXT_float_blend {\n}\n\n/** The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader. */\ninterface EXT_frag_depth {\n}\n\ninterface EXT_sRGB {\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: GLenum;\n    readonly SRGB8_ALPHA8_EXT: GLenum;\n    readonly SRGB_ALPHA_EXT: GLenum;\n    readonly SRGB_EXT: GLenum;\n}\n\ninterface EXT_shader_texture_lod {\n}\n\ninterface EXT_texture_compression_rgtc {\n    readonly COMPRESSED_RED_GREEN_RGTC2_EXT: GLenum;\n    readonly COMPRESSED_RED_RGTC1_EXT: GLenum;\n    readonly COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: GLenum;\n    readonly COMPRESSED_SIGNED_RED_RGTC1_EXT: GLenum;\n}\n\n/** The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF). */\ninterface EXT_texture_filter_anisotropic {\n    readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\n    readonly TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\n}\n\ninterface ElementEventMap {\n    \"fullscreenchange\": Event;\n    \"fullscreenerror\": Event;\n}\n\n/** Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element. */\ninterface Element extends Node, ARIAMixin, Animatable, ChildNode, InnerHTML, NonDocumentTypeChildNode, ParentNode, Slottable {\n    readonly attributes: NamedNodeMap;\n    /** Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object. */\n    readonly classList: DOMTokenList;\n    /** Returns the value of element's class content attribute. Can be set to change it. */\n    className: string;\n    readonly clientHeight: number;\n    readonly clientLeft: number;\n    readonly clientTop: number;\n    readonly clientWidth: number;\n    /** Returns the value of element's id content attribute. Can be set to change it. */\n    id: string;\n    /** Returns the local name. */\n    readonly localName: string;\n    /** Returns the namespace. */\n    readonly namespaceURI: string | null;\n    onfullscreenchange: ((this: Element, ev: Event) => any) | null;\n    onfullscreenerror: ((this: Element, ev: Event) => any) | null;\n    outerHTML: string;\n    readonly ownerDocument: Document;\n    readonly part: DOMTokenList;\n    /** Returns the namespace prefix. */\n    readonly prefix: string | null;\n    readonly scrollHeight: number;\n    scrollLeft: number;\n    scrollTop: number;\n    readonly scrollWidth: number;\n    /** Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise. */\n    readonly shadowRoot: ShadowRoot | null;\n    /** Returns the value of element's slot content attribute. Can be set to change it. */\n    slot: string;\n    /** Returns the HTML-uppercased qualified name. */\n    readonly tagName: string;\n    /** Creates a shadow root for element and returns it. */\n    attachShadow(init: ShadowRootInit): ShadowRoot;\n    /** Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise. */\n    closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;\n    closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;\n    closest<E extends Element = Element>(selectors: string): E | null;\n    /** Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise. */\n    getAttribute(qualifiedName: string): string | null;\n    /** Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise. */\n    getAttributeNS(namespace: string | null, localName: string): string | null;\n    /** Returns the qualified names of all element's attributes. Can contain duplicates. */\n    getAttributeNames(): string[];\n    getAttributeNode(qualifiedName: string): Attr | null;\n    getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;\n    getBoundingClientRect(): DOMRect;\n    getClientRects(): DOMRectList;\n    /** Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes. */\n    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;\n    getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;\n    getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;\n    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>;\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>;\n    getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;\n    /** Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise. */\n    hasAttribute(qualifiedName: string): boolean;\n    /** Returns true if element has an attribute whose namespace is namespace and local name is localName. */\n    hasAttributeNS(namespace: string | null, localName: string): boolean;\n    /** Returns true if element has attributes, and false otherwise. */\n    hasAttributes(): boolean;\n    hasPointerCapture(pointerId: number): boolean;\n    insertAdjacentElement(where: InsertPosition, element: Element): Element | null;\n    insertAdjacentHTML(position: InsertPosition, text: string): void;\n    insertAdjacentText(where: InsertPosition, data: string): void;\n    /** Returns true if matching selectors against element's root yields element, and false otherwise. */\n    matches(selectors: string): boolean;\n    releasePointerCapture(pointerId: number): void;\n    /** Removes element's first attribute whose qualified name is qualifiedName. */\n    removeAttribute(qualifiedName: string): void;\n    /** Removes element's attribute whose namespace is namespace and local name is localName. */\n    removeAttributeNS(namespace: string | null, localName: string): void;\n    removeAttributeNode(attr: Attr): Attr;\n    /**\n     * Displays element fullscreen and resolves promise when done.\n     *\n     * When supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to \"show\", navigation simplicity is preferred over screen space, and if set to \"hide\", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value \"auto\" indicates no application preference.\n     */\n    requestFullscreen(options?: FullscreenOptions): Promise<void>;\n    requestPointerLock(): void;\n    scroll(options?: ScrollToOptions): void;\n    scroll(x: number, y: number): void;\n    scrollBy(options?: ScrollToOptions): void;\n    scrollBy(x: number, y: number): void;\n    scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;\n    scrollTo(options?: ScrollToOptions): void;\n    scrollTo(x: number, y: number): void;\n    /** Sets the value of element's first attribute whose qualified name is qualifiedName to value. */\n    setAttribute(qualifiedName: string, value: string): void;\n    /** Sets the value of element's attribute whose namespace is namespace and local name is localName to value. */\n    setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;\n    setAttributeNode(attr: Attr): Attr | null;\n    setAttributeNodeNS(attr: Attr): Attr | null;\n    setPointerCapture(pointerId: number): void;\n    /**\n     * If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\n     *\n     * Returns true if qualifiedName is now present, and false otherwise.\n     */\n    toggleAttribute(qualifiedName: string, force?: boolean): boolean;\n    /** @deprecated This is a legacy alias of `matches`. */\n    webkitMatchesSelector(selectors: string): boolean;\n    addEventListener<K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Element: {\n    prototype: Element;\n    new(): Element;\n};\n\ninterface ElementCSSInlineStyle {\n    readonly style: CSSStyleDeclaration;\n}\n\ninterface ElementContentEditable {\n    contentEditable: string;\n    enterKeyHint: string;\n    inputMode: string;\n    readonly isContentEditable: boolean;\n}\n\ninterface ElementInternals extends ARIAMixin {\n    /** Returns the form owner of internals's target element. */\n    readonly form: HTMLFormElement | null;\n    /** Returns a NodeList of all the label elements that internals's target element is associated with. */\n    readonly labels: NodeList;\n    /** Returns the ShadowRoot for internals's target element, if the target element is a shadow host, or null otherwise. */\n    readonly shadowRoot: ShadowRoot | null;\n    /** Returns the error message that would be shown to the user if internals's target element was to be checked for validity. */\n    readonly validationMessage: string;\n    /** Returns the ValidityState object for internals's target element. */\n    readonly validity: ValidityState;\n    /** Returns true if internals's target element will be validated when the form is submitted; false otherwise. */\n    readonly willValidate: boolean;\n    /** Returns true if internals's target element has no validity problems; false otherwise. Fires an invalid event at the element in the latter case. */\n    checkValidity(): boolean;\n    /** Returns true if internals's target element has no validity problems; otherwise, returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user. */\n    reportValidity(): boolean;\n    /**\n     * Sets both the state and submission value of internals's target element to value.\n     *\n     * If value is null, the element won't participate in form submission.\n     */\n    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;\n    /** Marks internals's target element as suffering from the constraints indicated by the flags argument, and sets the element's validation message to message. If anchor is specified, the user agent might use it to indicate problems with the constraints of internals's target element when the form owner is validated interactively or reportValidity() is called. */\n    setValidity(flags?: ValidityStateFlags, message?: string, anchor?: HTMLElement): void;\n}\n\ndeclare var ElementInternals: {\n    prototype: ElementInternals;\n    new(): ElementInternals;\n};\n\n/** Events providing information related to errors in scripts or in files. */\ninterface ErrorEvent extends Event {\n    readonly colno: number;\n    readonly error: any;\n    readonly filename: string;\n    readonly lineno: number;\n    readonly message: string;\n}\n\ndeclare var ErrorEvent: {\n    prototype: ErrorEvent;\n    new(type: string, eventInitDict?: ErrorEventInit): ErrorEvent;\n};\n\n/** An event which takes place in the DOM. */\ninterface Event {\n    /** Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise. */\n    readonly bubbles: boolean;\n    cancelBubble: boolean;\n    /** Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method. */\n    readonly cancelable: boolean;\n    /** Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise. */\n    readonly composed: boolean;\n    /** Returns the object whose event listener's callback is currently being invoked. */\n    readonly currentTarget: EventTarget | null;\n    /** Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise. */\n    readonly defaultPrevented: boolean;\n    /** Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE. */\n    readonly eventPhase: number;\n    /** Returns true if event was dispatched by the user agent, and false otherwise. */\n    readonly isTrusted: boolean;\n    /** @deprecated */\n    returnValue: boolean;\n    /** @deprecated */\n    readonly srcElement: EventTarget | null;\n    /** Returns the object to which event is dispatched (its target). */\n    readonly target: EventTarget | null;\n    /** Returns the event's timestamp as the number of milliseconds measured relative to the time origin. */\n    readonly timeStamp: DOMHighResTimeStamp;\n    /** Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\". */\n    readonly type: string;\n    /** Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \"closed\" that are not reachable from event's currentTarget. */\n    composedPath(): EventTarget[];\n    /** @deprecated */\n    initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\n    /** If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled. */\n    preventDefault(): void;\n    /** Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects. */\n    stopImmediatePropagation(): void;\n    /** When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object. */\n    stopPropagation(): void;\n    readonly AT_TARGET: number;\n    readonly BUBBLING_PHASE: number;\n    readonly CAPTURING_PHASE: number;\n    readonly NONE: number;\n}\n\ndeclare var Event: {\n    prototype: Event;\n    new(type: string, eventInitDict?: EventInit): Event;\n    readonly AT_TARGET: number;\n    readonly BUBBLING_PHASE: number;\n    readonly CAPTURING_PHASE: number;\n    readonly NONE: number;\n};\n\ninterface EventCounts {\n    forEach(callbackfn: (value: number, key: string, parent: EventCounts) => void, thisArg?: any): void;\n}\n\ndeclare var EventCounts: {\n    prototype: EventCounts;\n    new(): EventCounts;\n};\n\ninterface EventListener {\n    (evt: Event): void;\n}\n\ninterface EventListenerObject {\n    handleEvent(object: Event): void;\n}\n\ninterface EventSourceEventMap {\n    \"error\": Event;\n    \"message\": MessageEvent;\n    \"open\": Event;\n}\n\ninterface EventSource extends EventTarget {\n    onerror: ((this: EventSource, ev: Event) => any) | null;\n    onmessage: ((this: EventSource, ev: MessageEvent) => any) | null;\n    onopen: ((this: EventSource, ev: Event) => any) | null;\n    /** Returns the state of this EventSource object's connection. It can have the values described below. */\n    readonly readyState: number;\n    /** Returns the URL providing the event stream. */\n    readonly url: string;\n    /** Returns true if the credentials mode for connection requests to the URL providing the event stream is set to \"include\", and false otherwise. */\n    readonly withCredentials: boolean;\n    /** Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED. */\n    close(): void;\n    readonly CLOSED: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n    addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: (this: EventSource, event: MessageEvent) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: (this: EventSource, event: MessageEvent) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var EventSource: {\n    prototype: EventSource;\n    new(url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource;\n    readonly CLOSED: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n};\n\n/** EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them. */\ninterface EventTarget {\n    /**\n     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n     *\n     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n     *\n     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n     *\n     * When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n     *\n     * When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n     *\n     * If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n     *\n     * The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n     */\n    addEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: AddEventListenerOptions | boolean): void;\n    /** Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise. */\n    dispatchEvent(event: Event): boolean;\n    /** Removes the event listener in target's event listener list with the same type, callback, and options. */\n    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;\n}\n\ndeclare var EventTarget: {\n    prototype: EventTarget;\n    new(): EventTarget;\n};\n\n/** @deprecated */\ninterface External {\n    /** @deprecated */\n    AddSearchProvider(): void;\n    /** @deprecated */\n    IsSearchProviderInstalled(): void;\n}\n\n/** @deprecated */\ndeclare var External: {\n    prototype: External;\n    new(): External;\n};\n\n/** Provides information about files and allows JavaScript in a web page to access their content. */\ninterface File extends Blob {\n    readonly lastModified: number;\n    readonly name: string;\n    readonly webkitRelativePath: string;\n}\n\ndeclare var File: {\n    prototype: File;\n    new(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File;\n};\n\n/** An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage. */\ninterface FileList {\n    readonly length: number;\n    item(index: number): File | null;\n    [index: number]: File;\n}\n\ndeclare var FileList: {\n    prototype: FileList;\n    new(): FileList;\n};\n\ninterface FileReaderEventMap {\n    \"abort\": ProgressEvent<FileReader>;\n    \"error\": ProgressEvent<FileReader>;\n    \"load\": ProgressEvent<FileReader>;\n    \"loadend\": ProgressEvent<FileReader>;\n    \"loadstart\": ProgressEvent<FileReader>;\n    \"progress\": ProgressEvent<FileReader>;\n}\n\n/** Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read. */\ninterface FileReader extends EventTarget {\n    readonly error: DOMException | null;\n    onabort: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onerror: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onload: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onloadend: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onloadstart: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onprogress: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    readonly readyState: number;\n    readonly result: string | ArrayBuffer | null;\n    abort(): void;\n    readAsArrayBuffer(blob: Blob): void;\n    readAsBinaryString(blob: Blob): void;\n    readAsDataURL(blob: Blob): void;\n    readAsText(blob: Blob, encoding?: string): void;\n    readonly DONE: number;\n    readonly EMPTY: number;\n    readonly LOADING: number;\n    addEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var FileReader: {\n    prototype: FileReader;\n    new(): FileReader;\n    readonly DONE: number;\n    readonly EMPTY: number;\n    readonly LOADING: number;\n};\n\ninterface FileSystem {\n    readonly name: string;\n    readonly root: FileSystemDirectoryEntry;\n}\n\ndeclare var FileSystem: {\n    prototype: FileSystem;\n    new(): FileSystem;\n};\n\ninterface FileSystemDirectoryEntry extends FileSystemEntry {\n    createReader(): FileSystemDirectoryReader;\n    getDirectory(path?: string | null, options?: FileSystemFlags, successCallback?: FileSystemEntryCallback, errorCallback?: ErrorCallback): void;\n    getFile(path?: string | null, options?: FileSystemFlags, successCallback?: FileSystemEntryCallback, errorCallback?: ErrorCallback): void;\n}\n\ndeclare var FileSystemDirectoryEntry: {\n    prototype: FileSystemDirectoryEntry;\n    new(): FileSystemDirectoryEntry;\n};\n\n/** Available only in secure contexts. */\ninterface FileSystemDirectoryHandle extends FileSystemHandle {\n    readonly kind: \"directory\";\n    getDirectoryHandle(name: string, options?: FileSystemGetDirectoryOptions): Promise<FileSystemDirectoryHandle>;\n    getFileHandle(name: string, options?: FileSystemGetFileOptions): Promise<FileSystemFileHandle>;\n    removeEntry(name: string, options?: FileSystemRemoveOptions): Promise<void>;\n    resolve(possibleDescendant: FileSystemHandle): Promise<string[] | null>;\n}\n\ndeclare var FileSystemDirectoryHandle: {\n    prototype: FileSystemDirectoryHandle;\n    new(): FileSystemDirectoryHandle;\n};\n\ninterface FileSystemDirectoryReader {\n    readEntries(successCallback: FileSystemEntriesCallback, errorCallback?: ErrorCallback): void;\n}\n\ndeclare var FileSystemDirectoryReader: {\n    prototype: FileSystemDirectoryReader;\n    new(): FileSystemDirectoryReader;\n};\n\ninterface FileSystemEntry {\n    readonly filesystem: FileSystem;\n    readonly fullPath: string;\n    readonly isDirectory: boolean;\n    readonly isFile: boolean;\n    readonly name: string;\n    getParent(successCallback?: FileSystemEntryCallback, errorCallback?: ErrorCallback): void;\n}\n\ndeclare var FileSystemEntry: {\n    prototype: FileSystemEntry;\n    new(): FileSystemEntry;\n};\n\ninterface FileSystemFileEntry extends FileSystemEntry {\n    file(successCallback: FileCallback, errorCallback?: ErrorCallback): void;\n}\n\ndeclare var FileSystemFileEntry: {\n    prototype: FileSystemFileEntry;\n    new(): FileSystemFileEntry;\n};\n\n/** Available only in secure contexts. */\ninterface FileSystemFileHandle extends FileSystemHandle {\n    readonly kind: \"file\";\n    getFile(): Promise<File>;\n}\n\ndeclare var FileSystemFileHandle: {\n    prototype: FileSystemFileHandle;\n    new(): FileSystemFileHandle;\n};\n\n/** Available only in secure contexts. */\ninterface FileSystemHandle {\n    readonly kind: FileSystemHandleKind;\n    readonly name: string;\n    isSameEntry(other: FileSystemHandle): Promise<boolean>;\n}\n\ndeclare var FileSystemHandle: {\n    prototype: FileSystemHandle;\n    new(): FileSystemHandle;\n};\n\n/** Focus-related events like focus, blur, focusin, or focusout. */\ninterface FocusEvent extends UIEvent {\n    readonly relatedTarget: EventTarget | null;\n}\n\ndeclare var FocusEvent: {\n    prototype: FocusEvent;\n    new(type: string, eventInitDict?: FocusEventInit): FocusEvent;\n};\n\ninterface FontFace {\n    ascentOverride: string;\n    descentOverride: string;\n    display: string;\n    family: string;\n    featureSettings: string;\n    lineGapOverride: string;\n    readonly loaded: Promise<FontFace>;\n    readonly status: FontFaceLoadStatus;\n    stretch: string;\n    style: string;\n    unicodeRange: string;\n    variant: string;\n    variationSettings: string;\n    weight: string;\n    load(): Promise<FontFace>;\n}\n\ndeclare var FontFace: {\n    prototype: FontFace;\n    new(family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors): FontFace;\n};\n\ninterface FontFaceSetEventMap {\n    \"loading\": Event;\n    \"loadingdone\": Event;\n    \"loadingerror\": Event;\n}\n\ninterface FontFaceSet extends EventTarget {\n    onloading: ((this: FontFaceSet, ev: Event) => any) | null;\n    onloadingdone: ((this: FontFaceSet, ev: Event) => any) | null;\n    onloadingerror: ((this: FontFaceSet, ev: Event) => any) | null;\n    readonly ready: Promise<FontFaceSet>;\n    readonly status: FontFaceSetLoadStatus;\n    check(font: string, text?: string): boolean;\n    load(font: string, text?: string): Promise<FontFace[]>;\n    forEach(callbackfn: (value: FontFace, key: FontFace, parent: FontFaceSet) => void, thisArg?: any): void;\n    addEventListener<K extends keyof FontFaceSetEventMap>(type: K, listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof FontFaceSetEventMap>(type: K, listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var FontFaceSet: {\n    prototype: FontFaceSet;\n    new(initialFaces: FontFace[]): FontFaceSet;\n};\n\ninterface FontFaceSetLoadEvent extends Event {\n    readonly fontfaces: ReadonlyArray<FontFace>;\n}\n\ndeclare var FontFaceSetLoadEvent: {\n    prototype: FontFaceSetLoadEvent;\n    new(type: string, eventInitDict?: FontFaceSetLoadEventInit): FontFaceSetLoadEvent;\n};\n\ninterface FontFaceSource {\n    readonly fonts: FontFaceSet;\n}\n\n/** Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\". */\ninterface FormData {\n    append(name: string, value: string | Blob, fileName?: string): void;\n    delete(name: string): void;\n    get(name: string): FormDataEntryValue | null;\n    getAll(name: string): FormDataEntryValue[];\n    has(name: string): boolean;\n    set(name: string, value: string | Blob, fileName?: string): void;\n    forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;\n}\n\ndeclare var FormData: {\n    prototype: FormData;\n    new(form?: HTMLFormElement): FormData;\n};\n\ninterface FormDataEvent extends Event {\n    /** Returns a FormData object representing names and values of elements associated to the target form. Operations on the FormData object will affect form data to be submitted. */\n    readonly formData: FormData;\n}\n\ndeclare var FormDataEvent: {\n    prototype: FormDataEvent;\n    new(type: string, eventInitDict: FormDataEventInit): FormDataEvent;\n};\n\n/** A change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels. */\ninterface GainNode extends AudioNode {\n    readonly gain: AudioParam;\n}\n\ndeclare var GainNode: {\n    prototype: GainNode;\n    new(context: BaseAudioContext, options?: GainOptions): GainNode;\n};\n\n/**\n * This Gamepad API interface defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.\n * Available only in secure contexts.\n */\ninterface Gamepad {\n    readonly axes: ReadonlyArray<number>;\n    readonly buttons: ReadonlyArray<GamepadButton>;\n    readonly connected: boolean;\n    readonly hapticActuators: ReadonlyArray<GamepadHapticActuator>;\n    readonly id: string;\n    readonly index: number;\n    readonly mapping: GamepadMappingType;\n    readonly timestamp: DOMHighResTimeStamp;\n}\n\ndeclare var Gamepad: {\n    prototype: Gamepad;\n    new(): Gamepad;\n};\n\n/**\n * An individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.\n * Available only in secure contexts.\n */\ninterface GamepadButton {\n    readonly pressed: boolean;\n    readonly touched: boolean;\n    readonly value: number;\n}\n\ndeclare var GamepadButton: {\n    prototype: GamepadButton;\n    new(): GamepadButton;\n};\n\n/**\n * This Gamepad API interface contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.\n * Available only in secure contexts.\n */\ninterface GamepadEvent extends Event {\n    readonly gamepad: Gamepad;\n}\n\ndeclare var GamepadEvent: {\n    prototype: GamepadEvent;\n    new(type: string, eventInitDict: GamepadEventInit): GamepadEvent;\n};\n\n/** This Gamepad API interface represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware. */\ninterface GamepadHapticActuator {\n    readonly type: GamepadHapticActuatorType;\n}\n\ndeclare var GamepadHapticActuator: {\n    prototype: GamepadHapticActuator;\n    new(): GamepadHapticActuator;\n};\n\ninterface GenericTransformStream {\n    readonly readable: ReadableStream;\n    readonly writable: WritableStream;\n}\n\n/** An object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location. */\ninterface Geolocation {\n    clearWatch(watchId: number): void;\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback | null, options?: PositionOptions): void;\n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback | null, options?: PositionOptions): number;\n}\n\ndeclare var Geolocation: {\n    prototype: Geolocation;\n    new(): Geolocation;\n};\n\n/** Available only in secure contexts. */\ninterface GeolocationCoordinates {\n    readonly accuracy: number;\n    readonly altitude: number | null;\n    readonly altitudeAccuracy: number | null;\n    readonly heading: number | null;\n    readonly latitude: number;\n    readonly longitude: number;\n    readonly speed: number | null;\n}\n\ndeclare var GeolocationCoordinates: {\n    prototype: GeolocationCoordinates;\n    new(): GeolocationCoordinates;\n};\n\n/** Available only in secure contexts. */\ninterface GeolocationPosition {\n    readonly coords: GeolocationCoordinates;\n    readonly timestamp: EpochTimeStamp;\n}\n\ndeclare var GeolocationPosition: {\n    prototype: GeolocationPosition;\n    new(): GeolocationPosition;\n};\n\ninterface GeolocationPositionError {\n    readonly code: number;\n    readonly message: string;\n    readonly PERMISSION_DENIED: number;\n    readonly POSITION_UNAVAILABLE: number;\n    readonly TIMEOUT: number;\n}\n\ndeclare var GeolocationPositionError: {\n    prototype: GeolocationPositionError;\n    new(): GeolocationPositionError;\n    readonly PERMISSION_DENIED: number;\n    readonly POSITION_UNAVAILABLE: number;\n    readonly TIMEOUT: number;\n};\n\ninterface GlobalEventHandlersEventMap {\n    \"abort\": UIEvent;\n    \"animationcancel\": AnimationEvent;\n    \"animationend\": AnimationEvent;\n    \"animationiteration\": AnimationEvent;\n    \"animationstart\": AnimationEvent;\n    \"auxclick\": MouseEvent;\n    \"beforeinput\": InputEvent;\n    \"blur\": FocusEvent;\n    \"canplay\": Event;\n    \"canplaythrough\": Event;\n    \"change\": Event;\n    \"click\": MouseEvent;\n    \"close\": Event;\n    \"compositionend\": CompositionEvent;\n    \"compositionstart\": CompositionEvent;\n    \"compositionupdate\": CompositionEvent;\n    \"contextmenu\": MouseEvent;\n    \"cuechange\": Event;\n    \"dblclick\": MouseEvent;\n    \"drag\": DragEvent;\n    \"dragend\": DragEvent;\n    \"dragenter\": DragEvent;\n    \"dragleave\": DragEvent;\n    \"dragover\": DragEvent;\n    \"dragstart\": DragEvent;\n    \"drop\": DragEvent;\n    \"durationchange\": Event;\n    \"emptied\": Event;\n    \"ended\": Event;\n    \"error\": ErrorEvent;\n    \"focus\": FocusEvent;\n    \"focusin\": FocusEvent;\n    \"focusout\": FocusEvent;\n    \"formdata\": FormDataEvent;\n    \"gotpointercapture\": PointerEvent;\n    \"input\": Event;\n    \"invalid\": Event;\n    \"keydown\": KeyboardEvent;\n    \"keypress\": KeyboardEvent;\n    \"keyup\": KeyboardEvent;\n    \"load\": Event;\n    \"loadeddata\": Event;\n    \"loadedmetadata\": Event;\n    \"loadstart\": Event;\n    \"lostpointercapture\": PointerEvent;\n    \"mousedown\": MouseEvent;\n    \"mouseenter\": MouseEvent;\n    \"mouseleave\": MouseEvent;\n    \"mousemove\": MouseEvent;\n    \"mouseout\": MouseEvent;\n    \"mouseover\": MouseEvent;\n    \"mouseup\": MouseEvent;\n    \"pause\": Event;\n    \"play\": Event;\n    \"playing\": Event;\n    \"pointercancel\": PointerEvent;\n    \"pointerdown\": PointerEvent;\n    \"pointerenter\": PointerEvent;\n    \"pointerleave\": PointerEvent;\n    \"pointermove\": PointerEvent;\n    \"pointerout\": PointerEvent;\n    \"pointerover\": PointerEvent;\n    \"pointerup\": PointerEvent;\n    \"progress\": ProgressEvent;\n    \"ratechange\": Event;\n    \"reset\": Event;\n    \"resize\": UIEvent;\n    \"scroll\": Event;\n    \"securitypolicyviolation\": SecurityPolicyViolationEvent;\n    \"seeked\": Event;\n    \"seeking\": Event;\n    \"select\": Event;\n    \"selectionchange\": Event;\n    \"selectstart\": Event;\n    \"slotchange\": Event;\n    \"stalled\": Event;\n    \"submit\": SubmitEvent;\n    \"suspend\": Event;\n    \"timeupdate\": Event;\n    \"toggle\": Event;\n    \"touchcancel\": TouchEvent;\n    \"touchend\": TouchEvent;\n    \"touchmove\": TouchEvent;\n    \"touchstart\": TouchEvent;\n    \"transitioncancel\": TransitionEvent;\n    \"transitionend\": TransitionEvent;\n    \"transitionrun\": TransitionEvent;\n    \"transitionstart\": TransitionEvent;\n    \"volumechange\": Event;\n    \"waiting\": Event;\n    \"webkitanimationend\": Event;\n    \"webkitanimationiteration\": Event;\n    \"webkitanimationstart\": Event;\n    \"webkittransitionend\": Event;\n    \"wheel\": WheelEvent;\n}\n\ninterface GlobalEventHandlers {\n    /**\n     * Fires when the user aborts the download.\n     * @param ev The event.\n     */\n    onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;\n    onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\n    onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\n    onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\n    onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\n    onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    /**\n     * Fires when the object loses the input focus.\n     * @param ev The focus event.\n     */\n    onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;\n    /**\n     * Occurs when playback is possible, but would require further buffering.\n     * @param ev The event.\n     */\n    oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when the contents of the object or selection have changed.\n     * @param ev The event.\n     */\n    onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when the user clicks the left mouse button on the object\n     * @param ev The mouse event.\n     */\n    onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when the user clicks the right mouse button in the client area, opening the context menu.\n     * @param ev The mouse event.\n     */\n    oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when the user double-clicks the object.\n     * @param ev The mouse event.\n     */\n    ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    /**\n     * Fires on the source object continuously during a drag operation.\n     * @param ev The event.\n     */\n    ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\n    /**\n     * Fires on the source object when the user releases the mouse at the close of a drag operation.\n     * @param ev The event.\n     */\n    ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\n    /**\n     * Fires on the target element when the user drags the object to a valid drop target.\n     * @param ev The drag event.\n     */\n    ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\n    /**\n     * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n     * @param ev The drag event.\n     */\n    ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\n    /**\n     * Fires on the target element continuously while the user drags the object over a valid drop target.\n     * @param ev The event.\n     */\n    ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\n    /**\n     * Fires on the source object when the user starts to drag a text selection or selected object.\n     * @param ev The event.\n     */\n    ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\n    ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\n    /**\n     * Occurs when the duration attribute is updated.\n     * @param ev The event.\n     */\n    ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when the media element is reset to its initial state.\n     * @param ev The event.\n     */\n    onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when the end of playback is reached.\n     * @param ev The event\n     */\n    onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when an error occurs during object loading.\n     * @param ev The event.\n     */\n    onerror: OnErrorEventHandler;\n    /**\n     * Fires when the object receives focus.\n     * @param ev The event.\n     */\n    onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;\n    onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;\n    ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when the user presses a key.\n     * @param ev The keyboard event\n     */\n    onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;\n    /**\n     * Fires when the user presses an alphanumeric key.\n     * @param ev The event.\n     * @deprecated\n     */\n    onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;\n    /**\n     * Fires when the user releases a key.\n     * @param ev The keyboard event\n     */\n    onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;\n    /**\n     * Fires immediately after the browser loads the object.\n     * @param ev The event.\n     */\n    onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when media data is loaded at the current playback position.\n     * @param ev The event.\n     */\n    onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when the duration and dimensions of the media have been determined.\n     * @param ev The event.\n     */\n    onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when Internet Explorer begins looking for media data.\n     * @param ev The event.\n     */\n    onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    /**\n     * Fires when the user clicks the object with either mouse button.\n     * @param ev The mouse event.\n     */\n    onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    /**\n     * Fires when the user moves the mouse over the object.\n     * @param ev The mouse event.\n     */\n    onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    /**\n     * Fires when the user moves the mouse pointer outside the boundaries of the object.\n     * @param ev The mouse event.\n     */\n    onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    /**\n     * Fires when the user moves the mouse pointer into the object.\n     * @param ev The mouse event.\n     */\n    onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    /**\n     * Fires when the user releases a mouse button while the mouse is over the object.\n     * @param ev The mouse event.\n     */\n    onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\n    /**\n     * Occurs when playback is paused.\n     * @param ev The event.\n     */\n    onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when the play method is requested.\n     * @param ev The event.\n     */\n    onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when the audio or video has started playing.\n     * @param ev The event.\n     */\n    onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\n    /**\n     * Occurs to indicate progress while downloading media data.\n     * @param ev The event.\n     */\n    onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;\n    /**\n     * Occurs when the playback rate is increased or decreased.\n     * @param ev The event.\n     */\n    onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when the user resets a form.\n     * @param ev The event.\n     */\n    onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;\n    /**\n     * Fires when the user repositions the scroll box in the scroll bar on the object.\n     * @param ev The event.\n     */\n    onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;\n    /**\n     * Occurs when the seek operation ends.\n     * @param ev The event.\n     */\n    onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when the current playback position is moved.\n     * @param ev The event.\n     */\n    onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Fires when the current selection changes.\n     * @param ev The event.\n     */\n    onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when the download has stopped.\n     * @param ev The event.\n     */\n    onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;\n    /**\n     * Occurs if the load operation has been intentionally halted.\n     * @param ev The event.\n     */\n    onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs to indicate the current playback position.\n     * @param ev The event.\n     */\n    ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\n    ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\n    ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\n    ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\n    ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\n    ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\n    ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\n    ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\n    /**\n     * Occurs when the volume is changed, or playback is muted or unmuted.\n     * @param ev The event.\n     */\n    onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /**\n     * Occurs when playback stops because the next frame of a video resource is not available.\n     * @param ev The event.\n     */\n    onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /** @deprecated This is a legacy alias of `onanimationend`. */\n    onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /** @deprecated This is a legacy alias of `onanimationiteration`. */\n    onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /** @deprecated This is a legacy alias of `onanimationstart`. */\n    onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    /** @deprecated This is a legacy alias of `ontransitionend`. */\n    onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;\n    onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;\n    addEventListener<K extends keyof GlobalEventHandlersEventMap>(type: K, listener: (this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof GlobalEventHandlersEventMap>(type: K, listener: (this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ninterface HTMLAllCollection {\n    /** Returns the number of elements in the collection. */\n    readonly length: number;\n    /** Returns the item with index index from the collection (determined by tree order). */\n    item(nameOrIndex?: string): HTMLCollection | Element | null;\n    /**\n     * Returns the item with ID or name name from the collection.\n     *\n     * If there are multiple matching items, then an HTMLCollection object containing all those elements is returned.\n     *\n     * Only button, form, iframe, input, map, meta, object, select, and textarea elements can have a name for the purpose of this method; their name is given by the value of their name attribute.\n     */\n    namedItem(name: string): HTMLCollection | Element | null;\n    [index: number]: Element;\n}\n\ndeclare var HTMLAllCollection: {\n    prototype: HTMLAllCollection;\n    new(): HTMLAllCollection;\n};\n\n/** Hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements. */\ninterface HTMLAnchorElement extends HTMLElement, HTMLHyperlinkElementUtils {\n    /**\n     * Sets or retrieves the character set used to encode the object.\n     * @deprecated\n     */\n    charset: string;\n    /**\n     * Sets or retrieves the coordinates of the object.\n     * @deprecated\n     */\n    coords: string;\n    download: string;\n    /** Sets or retrieves the language code of the object. */\n    hreflang: string;\n    /**\n     * Sets or retrieves the shape of the object.\n     * @deprecated\n     */\n    name: string;\n    ping: string;\n    referrerPolicy: string;\n    /** Sets or retrieves the relationship between the object and the destination of the link. */\n    rel: string;\n    readonly relList: DOMTokenList;\n    /**\n     * Sets or retrieves the relationship between the object and the destination of the link.\n     * @deprecated\n     */\n    rev: string;\n    /**\n     * Sets or retrieves the shape of the object.\n     * @deprecated\n     */\n    shape: string;\n    /** Sets or retrieves the window or frame at which to target content. */\n    target: string;\n    /** Retrieves or sets the text of the object as a string. */\n    text: string;\n    type: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLAnchorElement: {\n    prototype: HTMLAnchorElement;\n    new(): HTMLAnchorElement;\n};\n\n/** Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements. */\ninterface HTMLAreaElement extends HTMLElement, HTMLHyperlinkElementUtils {\n    /** Sets or retrieves a text alternative to the graphic. */\n    alt: string;\n    /** Sets or retrieves the coordinates of the object. */\n    coords: string;\n    download: string;\n    /**\n     * Sets or gets whether clicks in this region cause action.\n     * @deprecated\n     */\n    noHref: boolean;\n    ping: string;\n    referrerPolicy: string;\n    rel: string;\n    readonly relList: DOMTokenList;\n    /** Sets or retrieves the shape of the object. */\n    shape: string;\n    /** Sets or retrieves the window or frame at which to target content. */\n    target: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLAreaElement: {\n    prototype: HTMLAreaElement;\n    new(): HTMLAreaElement;\n};\n\n/** Provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface. */\ninterface HTMLAudioElement extends HTMLMediaElement {\n    addEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLAudioElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLAudioElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLAudioElement: {\n    prototype: HTMLAudioElement;\n    new(): HTMLAudioElement;\n};\n\n/** A HTML line break element (<br>). It inherits from HTMLElement. */\ninterface HTMLBRElement extends HTMLElement {\n    /**\n     * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\n     * @deprecated\n     */\n    clear: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLBRElement: {\n    prototype: HTMLBRElement;\n    new(): HTMLBRElement;\n};\n\n/** Contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface. */\ninterface HTMLBaseElement extends HTMLElement {\n    /** Gets or sets the baseline URL on which relative links are based. */\n    href: string;\n    /** Sets or retrieves the window or frame at which to target content. */\n    target: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLBaseElement: {\n    prototype: HTMLBaseElement;\n    new(): HTMLBaseElement;\n};\n\ninterface HTMLBodyElementEventMap extends HTMLElementEventMap, WindowEventHandlersEventMap {\n}\n\n/** Provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements. */\ninterface HTMLBodyElement extends HTMLElement, WindowEventHandlers {\n    /** @deprecated */\n    aLink: string;\n    /** @deprecated */\n    background: string;\n    /** @deprecated */\n    bgColor: string;\n    /** @deprecated */\n    link: string;\n    /** @deprecated */\n    text: string;\n    /** @deprecated */\n    vLink: string;\n    addEventListener<K extends keyof HTMLBodyElementEventMap>(type: K, listener: (this: HTMLBodyElement, ev: HTMLBodyElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLBodyElementEventMap>(type: K, listener: (this: HTMLBodyElement, ev: HTMLBodyElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLBodyElement: {\n    prototype: HTMLBodyElement;\n    new(): HTMLBodyElement;\n};\n\n/** Provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements. */\ninterface HTMLButtonElement extends HTMLElement {\n    disabled: boolean;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    /** Overrides the action attribute (where the data on a form is sent) on the parent form element. */\n    formAction: string;\n    /** Used to override the encoding (formEnctype attribute) specified on the form element. */\n    formEnctype: string;\n    /** Overrides the submit method attribute previously specified on a form element. */\n    formMethod: string;\n    /** Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option. */\n    formNoValidate: boolean;\n    /** Overrides the target attribute on a form element. */\n    formTarget: string;\n    readonly labels: NodeListOf<HTMLLabelElement>;\n    /** Sets or retrieves the name of the object. */\n    name: string;\n    /** Gets the classification and default behavior of the button. */\n    type: string;\n    /** Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting. */\n    readonly validationMessage: string;\n    /** Returns a  ValidityState object that represents the validity states of an element. */\n    readonly validity: ValidityState;\n    /** Sets or retrieves the default or selected value of the control. */\n    value: string;\n    /** Returns whether an element will successfully validate based on forms validation rules and constraints. */\n    readonly willValidate: boolean;\n    /** Returns whether a form will validate when it is submitted, without having to submit it. */\n    checkValidity(): boolean;\n    reportValidity(): boolean;\n    /**\n     * Sets a custom error message that is displayed when a form is submitted.\n     * @param error Sets a custom error message that is displayed when a form is submitted.\n     */\n    setCustomValidity(error: string): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLButtonElement: {\n    prototype: HTMLButtonElement;\n    new(): HTMLButtonElement;\n};\n\n/** Provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface. */\ninterface HTMLCanvasElement extends HTMLElement {\n    /** Gets or sets the height of a canvas element on a document. */\n    height: number;\n    /** Gets or sets the width of a canvas element on a document. */\n    width: number;\n    captureStream(frameRequestRate?: number): MediaStream;\n    /**\n     * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\n     * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\n     */\n    getContext(contextId: \"2d\", options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D | null;\n    getContext(contextId: \"bitmaprenderer\", options?: ImageBitmapRenderingContextSettings): ImageBitmapRenderingContext | null;\n    getContext(contextId: \"webgl\", options?: WebGLContextAttributes): WebGLRenderingContext | null;\n    getContext(contextId: \"webgl2\", options?: WebGLContextAttributes): WebGL2RenderingContext | null;\n    getContext(contextId: string, options?: any): RenderingContext | null;\n    toBlob(callback: BlobCallback, type?: string, quality?: any): void;\n    /**\n     * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\n     * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\n     */\n    toDataURL(type?: string, quality?: any): string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLCanvasElement: {\n    prototype: HTMLCanvasElement;\n    new(): HTMLCanvasElement;\n};\n\n/** A generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list. */\ninterface HTMLCollectionBase {\n    /** Sets or retrieves the number of objects in a collection. */\n    readonly length: number;\n    /** Retrieves an object from various collections. */\n    item(index: number): Element | null;\n    [index: number]: Element;\n}\n\ninterface HTMLCollection extends HTMLCollectionBase {\n    /** Retrieves a select object or an object from an options collection. */\n    namedItem(name: string): Element | null;\n}\n\ndeclare var HTMLCollection: {\n    prototype: HTMLCollection;\n    new(): HTMLCollection;\n};\n\ninterface HTMLCollectionOf<T extends Element> extends HTMLCollectionBase {\n    item(index: number): T | null;\n    namedItem(name: string): T | null;\n    [index: number]: T;\n}\n\n/** Provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements. */\ninterface HTMLDListElement extends HTMLElement {\n    /** @deprecated */\n    compact: boolean;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLDListElement: {\n    prototype: HTMLDListElement;\n    new(): HTMLDListElement;\n};\n\n/** Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements. */\ninterface HTMLDataElement extends HTMLElement {\n    value: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLDataElement: {\n    prototype: HTMLDataElement;\n    new(): HTMLDataElement;\n};\n\n/** Provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content. */\ninterface HTMLDataListElement extends HTMLElement {\n    /** Returns an HTMLCollection of the option elements of the datalist element. */\n    readonly options: HTMLCollectionOf<HTMLOptionElement>;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLDataListElement: {\n    prototype: HTMLDataListElement;\n    new(): HTMLDataListElement;\n};\n\ninterface HTMLDetailsElement extends HTMLElement {\n    open: boolean;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLDetailsElement: {\n    prototype: HTMLDetailsElement;\n    new(): HTMLDetailsElement;\n};\n\ninterface HTMLDialogElement extends HTMLElement {\n    open: boolean;\n    returnValue: string;\n    /**\n     * Closes the dialog element.\n     *\n     * The argument, if provided, provides a return value.\n     */\n    close(returnValue?: string): void;\n    /** Displays the dialog element. */\n    show(): void;\n    showModal(): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLDialogElement: {\n    prototype: HTMLDialogElement;\n    new(): HTMLDialogElement;\n};\n\n/** @deprecated */\ninterface HTMLDirectoryElement extends HTMLElement {\n    /** @deprecated */\n    compact: boolean;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDirectoryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDirectoryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var HTMLDirectoryElement: {\n    prototype: HTMLDirectoryElement;\n    new(): HTMLDirectoryElement;\n};\n\n/** Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements. */\ninterface HTMLDivElement extends HTMLElement {\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLDivElement: {\n    prototype: HTMLDivElement;\n    new(): HTMLDivElement;\n};\n\n/** @deprecated use Document */\ninterface HTMLDocument extends Document {\n    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var HTMLDocument: {\n    prototype: HTMLDocument;\n    new(): HTMLDocument;\n};\n\ninterface HTMLElementEventMap extends ElementEventMap, DocumentAndElementEventHandlersEventMap, GlobalEventHandlersEventMap {\n}\n\n/** Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it. */\ninterface HTMLElement extends Element, DocumentAndElementEventHandlers, ElementCSSInlineStyle, ElementContentEditable, GlobalEventHandlers, HTMLOrSVGElement {\n    accessKey: string;\n    readonly accessKeyLabel: string;\n    autocapitalize: string;\n    dir: string;\n    draggable: boolean;\n    hidden: boolean;\n    inert: boolean;\n    innerText: string;\n    lang: string;\n    readonly offsetHeight: number;\n    readonly offsetLeft: number;\n    readonly offsetParent: Element | null;\n    readonly offsetTop: number;\n    readonly offsetWidth: number;\n    outerText: string;\n    spellcheck: boolean;\n    title: string;\n    translate: boolean;\n    attachInternals(): ElementInternals;\n    click(): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLElement: {\n    prototype: HTMLElement;\n    new(): HTMLElement;\n};\n\n/** Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements. */\ninterface HTMLEmbedElement extends HTMLElement {\n    /** @deprecated */\n    align: string;\n    /** Sets or retrieves the height of the object. */\n    height: string;\n    /**\n     * Sets or retrieves the name of the object.\n     * @deprecated\n     */\n    name: string;\n    /** Sets or retrieves a URL to be loaded by the object. */\n    src: string;\n    type: string;\n    /** Sets or retrieves the width of the object. */\n    width: string;\n    getSVGDocument(): Document | null;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLEmbedElement: {\n    prototype: HTMLEmbedElement;\n    new(): HTMLEmbedElement;\n};\n\n/** Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements. */\ninterface HTMLFieldSetElement extends HTMLElement {\n    disabled: boolean;\n    /** Returns an HTMLCollection of the form controls in the element. */\n    readonly elements: HTMLCollection;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    name: string;\n    /** Returns the string \"fieldset\". */\n    readonly type: string;\n    /** Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting. */\n    readonly validationMessage: string;\n    /** Returns a  ValidityState object that represents the validity states of an element. */\n    readonly validity: ValidityState;\n    /** Returns whether an element will successfully validate based on forms validation rules and constraints. */\n    readonly willValidate: boolean;\n    /** Returns whether a form will validate when it is submitted, without having to submit it. */\n    checkValidity(): boolean;\n    reportValidity(): boolean;\n    /**\n     * Sets a custom error message that is displayed when a form is submitted.\n     * @param error Sets a custom error message that is displayed when a form is submitted.\n     */\n    setCustomValidity(error: string): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFieldSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFieldSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLFieldSetElement: {\n    prototype: HTMLFieldSetElement;\n    new(): HTMLFieldSetElement;\n};\n\n/**\n * Implements the document object model (DOM) representation of the font element. The HTML Font Element <font> defines the font size, font face and color of text.\n * @deprecated\n */\ninterface HTMLFontElement extends HTMLElement {\n    /** @deprecated */\n    color: string;\n    /**\n     * Sets or retrieves the current typeface family.\n     * @deprecated\n     */\n    face: string;\n    /** @deprecated */\n    size: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var HTMLFontElement: {\n    prototype: HTMLFontElement;\n    new(): HTMLFontElement;\n};\n\n/** A collection of HTML form control elements.  */\ninterface HTMLFormControlsCollection extends HTMLCollectionBase {\n    /**\n     * Returns the item with ID or name name from the collection.\n     *\n     * If there are multiple matching items, then a RadioNodeList object containing all those elements is returned.\n     */\n    namedItem(name: string): RadioNodeList | Element | null;\n}\n\ndeclare var HTMLFormControlsCollection: {\n    prototype: HTMLFormControlsCollection;\n    new(): HTMLFormControlsCollection;\n};\n\n/** A <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements. */\ninterface HTMLFormElement extends HTMLElement {\n    /** Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form. */\n    acceptCharset: string;\n    /** Sets or retrieves the URL to which the form content is sent for processing. */\n    action: string;\n    /** Specifies whether autocomplete is applied to an editable text field. */\n    autocomplete: string;\n    /** Retrieves a collection, in source order, of all controls in a given form. */\n    readonly elements: HTMLFormControlsCollection;\n    /** Sets or retrieves the MIME encoding for the form. */\n    encoding: string;\n    /** Sets or retrieves the encoding type for the form. */\n    enctype: string;\n    /** Sets or retrieves the number of objects in a collection. */\n    readonly length: number;\n    /** Sets or retrieves how to send the form data to the server. */\n    method: string;\n    /** Sets or retrieves the name of the object. */\n    name: string;\n    /** Designates a form that is not validated when submitted. */\n    noValidate: boolean;\n    /** Sets or retrieves the window or frame at which to target content. */\n    target: string;\n    /** Returns whether a form will validate when it is submitted, without having to submit it. */\n    checkValidity(): boolean;\n    reportValidity(): boolean;\n    requestSubmit(submitter?: HTMLElement | null): void;\n    /** Fires when the user resets a form. */\n    reset(): void;\n    /** Fires when a FORM is about to be submitted. */\n    submit(): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n    [index: number]: Element;\n    [name: string]: any;\n}\n\ndeclare var HTMLFormElement: {\n    prototype: HTMLFormElement;\n    new(): HTMLFormElement;\n};\n\n/** @deprecated */\ninterface HTMLFrameElement extends HTMLElement {\n    /**\n     * Retrieves the document object of the page or frame.\n     * @deprecated\n     */\n    readonly contentDocument: Document | null;\n    /**\n     * Retrieves the object of the specified.\n     * @deprecated\n     */\n    readonly contentWindow: WindowProxy | null;\n    /**\n     * Sets or retrieves whether to display a border for the frame.\n     * @deprecated\n     */\n    frameBorder: string;\n    /**\n     * Sets or retrieves a URI to a long description of the object.\n     * @deprecated\n     */\n    longDesc: string;\n    /**\n     * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n     * @deprecated\n     */\n    marginHeight: string;\n    /**\n     * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n     * @deprecated\n     */\n    marginWidth: string;\n    /**\n     * Sets or retrieves the frame name.\n     * @deprecated\n     */\n    name: string;\n    /**\n     * Sets or retrieves whether the user can resize the frame.\n     * @deprecated\n     */\n    noResize: boolean;\n    /**\n     * Sets or retrieves whether the frame can be scrolled.\n     * @deprecated\n     */\n    scrolling: string;\n    /**\n     * Sets or retrieves a URL to be loaded by the object.\n     * @deprecated\n     */\n    src: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var HTMLFrameElement: {\n    prototype: HTMLFrameElement;\n    new(): HTMLFrameElement;\n};\n\ninterface HTMLFrameSetElementEventMap extends HTMLElementEventMap, WindowEventHandlersEventMap {\n}\n\n/**\n * Provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements.\n * @deprecated\n */\ninterface HTMLFrameSetElement extends HTMLElement, WindowEventHandlers {\n    /**\n     * Sets or retrieves the frame widths of the object.\n     * @deprecated\n     */\n    cols: string;\n    /**\n     * Sets or retrieves the frame heights of the object.\n     * @deprecated\n     */\n    rows: string;\n    addEventListener<K extends keyof HTMLFrameSetElementEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: HTMLFrameSetElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLFrameSetElementEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: HTMLFrameSetElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var HTMLFrameSetElement: {\n    prototype: HTMLFrameSetElement;\n    new(): HTMLFrameSetElement;\n};\n\n/** Provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements. */\ninterface HTMLHRElement extends HTMLElement {\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    /** @deprecated */\n    color: string;\n    /**\n     * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\n     * @deprecated\n     */\n    noShade: boolean;\n    /** @deprecated */\n    size: string;\n    /**\n     * Sets or retrieves the width of the object.\n     * @deprecated\n     */\n    width: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLHRElement: {\n    prototype: HTMLHRElement;\n    new(): HTMLHRElement;\n};\n\n/** Contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface. */\ninterface HTMLHeadElement extends HTMLElement {\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLHeadElement: {\n    prototype: HTMLHeadElement;\n    new(): HTMLHeadElement;\n};\n\n/** The different heading elements. It inherits methods and properties from the HTMLElement interface. */\ninterface HTMLHeadingElement extends HTMLElement {\n    /**\n     * Sets or retrieves a value that indicates the table alignment.\n     * @deprecated\n     */\n    align: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLHeadingElement: {\n    prototype: HTMLHeadingElement;\n    new(): HTMLHeadingElement;\n};\n\n/** Serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface. */\ninterface HTMLHtmlElement extends HTMLElement {\n    /**\n     * Sets or retrieves the DTD version that governs the current document.\n     * @deprecated\n     */\n    version: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLHtmlElement: {\n    prototype: HTMLHtmlElement;\n    new(): HTMLHtmlElement;\n};\n\ninterface HTMLHyperlinkElementUtils {\n    /**\n     * Returns the hyperlink's URL's fragment (includes leading \"#\" if non-empty).\n     *\n     * Can be set, to change the URL's fragment (ignores leading \"#\").\n     */\n    hash: string;\n    /**\n     * Returns the hyperlink's URL's host and port (if different from the default port for the scheme).\n     *\n     * Can be set, to change the URL's host and port.\n     */\n    host: string;\n    /**\n     * Returns the hyperlink's URL's host.\n     *\n     * Can be set, to change the URL's host.\n     */\n    hostname: string;\n    /**\n     * Returns the hyperlink's URL.\n     *\n     * Can be set, to change the URL.\n     */\n    href: string;\n    toString(): string;\n    /** Returns the hyperlink's URL's origin. */\n    readonly origin: string;\n    /**\n     * Returns the hyperlink's URL's password.\n     *\n     * Can be set, to change the URL's password.\n     */\n    password: string;\n    /**\n     * Returns the hyperlink's URL's path.\n     *\n     * Can be set, to change the URL's path.\n     */\n    pathname: string;\n    /**\n     * Returns the hyperlink's URL's port.\n     *\n     * Can be set, to change the URL's port.\n     */\n    port: string;\n    /**\n     * Returns the hyperlink's URL's scheme.\n     *\n     * Can be set, to change the URL's scheme.\n     */\n    protocol: string;\n    /**\n     * Returns the hyperlink's URL's query (includes leading \"?\" if non-empty).\n     *\n     * Can be set, to change the URL's query (ignores leading \"?\").\n     */\n    search: string;\n    /**\n     * Returns the hyperlink's URL's username.\n     *\n     * Can be set, to change the URL's username.\n     */\n    username: string;\n}\n\n/** Provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements. */\ninterface HTMLIFrameElement extends HTMLElement {\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    allow: string;\n    allowFullscreen: boolean;\n    /** Retrieves the document object of the page or frame. */\n    readonly contentDocument: Document | null;\n    /** Retrieves the object of the specified. */\n    readonly contentWindow: WindowProxy | null;\n    /**\n     * Sets or retrieves whether to display a border for the frame.\n     * @deprecated\n     */\n    frameBorder: string;\n    /** Sets or retrieves the height of the object. */\n    height: string;\n    /**\n     * Sets or retrieves a URI to a long description of the object.\n     * @deprecated\n     */\n    longDesc: string;\n    /**\n     * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n     * @deprecated\n     */\n    marginHeight: string;\n    /**\n     * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n     * @deprecated\n     */\n    marginWidth: string;\n    /** Sets or retrieves the frame name. */\n    name: string;\n    referrerPolicy: ReferrerPolicy;\n    readonly sandbox: DOMTokenList;\n    /**\n     * Sets or retrieves whether the frame can be scrolled.\n     * @deprecated\n     */\n    scrolling: string;\n    /** Sets or retrieves a URL to be loaded by the object. */\n    src: string;\n    /** Sets or retrives the content of the page that is to contain. */\n    srcdoc: string;\n    /** Sets or retrieves the width of the object. */\n    width: string;\n    getSVGDocument(): Document | null;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLIFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLIFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLIFrameElement: {\n    prototype: HTMLIFrameElement;\n    new(): HTMLIFrameElement;\n};\n\n/** Provides special properties and methods for manipulating <img> elements. */\ninterface HTMLImageElement extends HTMLElement {\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    /** Sets or retrieves a text alternative to the graphic. */\n    alt: string;\n    /**\n     * Specifies the properties of a border drawn around an object.\n     * @deprecated\n     */\n    border: string;\n    /** Retrieves whether the object is fully loaded. */\n    readonly complete: boolean;\n    crossOrigin: string | null;\n    readonly currentSrc: string;\n    decoding: \"async\" | \"sync\" | \"auto\";\n    /** Sets or retrieves the height of the object. */\n    height: number;\n    /**\n     * Sets or retrieves the width of the border to draw around the object.\n     * @deprecated\n     */\n    hspace: number;\n    /** Sets or retrieves whether the image is a server-side image map. */\n    isMap: boolean;\n    /** Sets or retrieves the policy for loading image elements that are outside the viewport. */\n    loading: \"eager\" | \"lazy\";\n    /**\n     * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\n     * @deprecated\n     */\n    longDesc: string;\n    /** @deprecated */\n    lowsrc: string;\n    /**\n     * Sets or retrieves the name of the object.\n     * @deprecated\n     */\n    name: string;\n    /** The original height of the image resource before sizing. */\n    readonly naturalHeight: number;\n    /** The original width of the image resource before sizing. */\n    readonly naturalWidth: number;\n    referrerPolicy: string;\n    sizes: string;\n    /** The address or URL of the a media resource that is to be considered. */\n    src: string;\n    srcset: string;\n    /** Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map. */\n    useMap: string;\n    /**\n     * Sets or retrieves the vertical margin for the object.\n     * @deprecated\n     */\n    vspace: number;\n    /** Sets or retrieves the width of the object. */\n    width: number;\n    readonly x: number;\n    readonly y: number;\n    decode(): Promise<void>;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLImageElement: {\n    prototype: HTMLImageElement;\n    new(): HTMLImageElement;\n};\n\n/** Provides special properties and methods for manipulating the options, layout, and presentation of <input> elements. */\ninterface HTMLInputElement extends HTMLElement {\n    /** Sets or retrieves a comma-separated list of content types. */\n    accept: string;\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    /** Sets or retrieves a text alternative to the graphic. */\n    alt: string;\n    /** Specifies whether autocomplete is applied to an editable text field. */\n    autocomplete: string;\n    capture: string;\n    /** Sets or retrieves the state of the check box or radio button. */\n    checked: boolean;\n    /** Sets or retrieves the state of the check box or radio button. */\n    defaultChecked: boolean;\n    /** Sets or retrieves the initial contents of the object. */\n    defaultValue: string;\n    dirName: string;\n    disabled: boolean;\n    /** Returns a FileList object on a file type input object. */\n    files: FileList | null;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    /** Overrides the action attribute (where the data on a form is sent) on the parent form element. */\n    formAction: string;\n    /** Used to override the encoding (formEnctype attribute) specified on the form element. */\n    formEnctype: string;\n    /** Overrides the submit method attribute previously specified on a form element. */\n    formMethod: string;\n    /** Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option. */\n    formNoValidate: boolean;\n    /** Overrides the target attribute on a form element. */\n    formTarget: string;\n    /** Sets or retrieves the height of the object. */\n    height: number;\n    /** When set, overrides the rendering of checkbox controls so that the current value is not visible. */\n    indeterminate: boolean;\n    readonly labels: NodeListOf<HTMLLabelElement> | null;\n    /** Specifies the ID of a pre-defined datalist of options for an input element. */\n    readonly list: HTMLElement | null;\n    /** Defines the maximum acceptable value for an input element with type=\"number\".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field. */\n    max: string;\n    /** Sets or retrieves the maximum number of characters that the user can enter in a text control. */\n    maxLength: number;\n    /** Defines the minimum acceptable value for an input element with type=\"number\". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field. */\n    min: string;\n    minLength: number;\n    /** Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list. */\n    multiple: boolean;\n    /** Sets or retrieves the name of the object. */\n    name: string;\n    /** Gets or sets a string containing a regular expression that the user's input must match. */\n    pattern: string;\n    /** Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field. */\n    placeholder: string;\n    readOnly: boolean;\n    /** When present, marks an element that can't be submitted without a value. */\n    required: boolean;\n    selectionDirection: \"forward\" | \"backward\" | \"none\" | null;\n    /** Gets or sets the end position or offset of a text selection. */\n    selectionEnd: number | null;\n    /** Gets or sets the starting position or offset of a text selection. */\n    selectionStart: number | null;\n    size: number;\n    /** The address or URL of the a media resource that is to be considered. */\n    src: string;\n    /** Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field. */\n    step: string;\n    /** Returns the content type of the object. */\n    type: string;\n    /**\n     * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n     * @deprecated\n     */\n    useMap: string;\n    /** Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting. */\n    readonly validationMessage: string;\n    /** Returns a  ValidityState object that represents the validity states of an element. */\n    readonly validity: ValidityState;\n    /** Returns the value of the data at the cursor's current position. */\n    value: string;\n    /** Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an \"InvalidStateError\" DOMException if the control isn't date- or time-based. */\n    valueAsDate: Date | null;\n    /** Returns the input field value as a number. */\n    valueAsNumber: number;\n    readonly webkitEntries: ReadonlyArray<FileSystemEntry>;\n    webkitdirectory: boolean;\n    /** Sets or retrieves the width of the object. */\n    width: number;\n    /** Returns whether an element will successfully validate based on forms validation rules and constraints. */\n    readonly willValidate: boolean;\n    /** Returns whether a form will validate when it is submitted, without having to submit it. */\n    checkValidity(): boolean;\n    reportValidity(): boolean;\n    /** Makes the selection equal to the current object. */\n    select(): void;\n    /**\n     * Sets a custom error message that is displayed when a form is submitted.\n     * @param error Sets a custom error message that is displayed when a form is submitted.\n     */\n    setCustomValidity(error: string): void;\n    setRangeText(replacement: string): void;\n    setRangeText(replacement: string, start: number, end: number, selectionMode?: SelectionMode): void;\n    /**\n     * Sets the start and end positions of a selection in a text field.\n     * @param start The offset into the text field for the start of the selection.\n     * @param end The offset into the text field for the end of the selection.\n     * @param direction The direction in which the selection is performed.\n     */\n    setSelectionRange(start: number | null, end: number | null, direction?: \"forward\" | \"backward\" | \"none\"): void;\n    showPicker(): void;\n    /**\n     * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.\n     * @param n Value to decrement the value by.\n     */\n    stepDown(n?: number): void;\n    /**\n     * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.\n     * @param n Value to increment the value by.\n     */\n    stepUp(n?: number): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLInputElement: {\n    prototype: HTMLInputElement;\n    new(): HTMLInputElement;\n};\n\n/** Exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements. */\ninterface HTMLLIElement extends HTMLElement {\n    /** @deprecated */\n    type: string;\n    /** Sets or retrieves the value of a list item. */\n    value: number;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLLIElement: {\n    prototype: HTMLLIElement;\n    new(): HTMLLIElement;\n};\n\n/** Gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface. */\ninterface HTMLLabelElement extends HTMLElement {\n    /** Returns the form control that is associated with this element. */\n    readonly control: HTMLElement | null;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    /** Sets or retrieves the object to which the given label object is assigned. */\n    htmlFor: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLLabelElement: {\n    prototype: HTMLLabelElement;\n    new(): HTMLLabelElement;\n};\n\n/** The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface. */\ninterface HTMLLegendElement extends HTMLElement {\n    /** @deprecated */\n    align: string;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLLegendElement: {\n    prototype: HTMLLegendElement;\n    new(): HTMLLegendElement;\n};\n\n/** Reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface. */\ninterface HTMLLinkElement extends HTMLElement, LinkStyle {\n    as: string;\n    /**\n     * Sets or retrieves the character set used to encode the object.\n     * @deprecated\n     */\n    charset: string;\n    crossOrigin: string | null;\n    disabled: boolean;\n    /** Sets or retrieves a destination URL or an anchor point. */\n    href: string;\n    /** Sets or retrieves the language code of the object. */\n    hreflang: string;\n    imageSizes: string;\n    imageSrcset: string;\n    integrity: string;\n    /** Sets or retrieves the media type. */\n    media: string;\n    referrerPolicy: string;\n    /** Sets or retrieves the relationship between the object and the destination of the link. */\n    rel: string;\n    readonly relList: DOMTokenList;\n    /**\n     * Sets or retrieves the relationship between the object and the destination of the link.\n     * @deprecated\n     */\n    rev: string;\n    readonly sizes: DOMTokenList;\n    /**\n     * Sets or retrieves the window or frame at which to target content.\n     * @deprecated\n     */\n    target: string;\n    /** Sets or retrieves the MIME type of the object. */\n    type: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLLinkElement: {\n    prototype: HTMLLinkElement;\n    new(): HTMLLinkElement;\n};\n\n/** Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements. */\ninterface HTMLMapElement extends HTMLElement {\n    /** Retrieves a collection of the area objects defined for the given map object. */\n    readonly areas: HTMLCollection;\n    /** Sets or retrieves the name of the object. */\n    name: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLMapElement: {\n    prototype: HTMLMapElement;\n    new(): HTMLMapElement;\n};\n\n/**\n * Provides methods to manipulate <marquee> elements.\n * @deprecated\n */\ninterface HTMLMarqueeElement extends HTMLElement {\n    /** @deprecated */\n    behavior: string;\n    /** @deprecated */\n    bgColor: string;\n    /** @deprecated */\n    direction: string;\n    /** @deprecated */\n    height: string;\n    /** @deprecated */\n    hspace: number;\n    /** @deprecated */\n    loop: number;\n    /** @deprecated */\n    scrollAmount: number;\n    /** @deprecated */\n    scrollDelay: number;\n    /** @deprecated */\n    trueSpeed: boolean;\n    /** @deprecated */\n    vspace: number;\n    /** @deprecated */\n    width: string;\n    /** @deprecated */\n    start(): void;\n    /** @deprecated */\n    stop(): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMarqueeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMarqueeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var HTMLMarqueeElement: {\n    prototype: HTMLMarqueeElement;\n    new(): HTMLMarqueeElement;\n};\n\ninterface HTMLMediaElementEventMap extends HTMLElementEventMap {\n    \"encrypted\": MediaEncryptedEvent;\n    \"waitingforkey\": Event;\n}\n\n/** Adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video. */\ninterface HTMLMediaElement extends HTMLElement {\n    /** Gets or sets a value that indicates whether to start playing the media automatically. */\n    autoplay: boolean;\n    /** Gets a collection of buffered time ranges. */\n    readonly buffered: TimeRanges;\n    /** Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player). */\n    controls: boolean;\n    crossOrigin: string | null;\n    /** Gets the address or URL of the current media resource that is selected by IHTMLMediaElement. */\n    readonly currentSrc: string;\n    /** Gets or sets the current playback position, in seconds. */\n    currentTime: number;\n    defaultMuted: boolean;\n    /** Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource. */\n    defaultPlaybackRate: number;\n    disableRemotePlayback: boolean;\n    /** Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming. */\n    readonly duration: number;\n    /** Gets information about whether the playback has ended or not. */\n    readonly ended: boolean;\n    /** Returns an object representing the current error state of the audio or video element. */\n    readonly error: MediaError | null;\n    /** Gets or sets a flag to specify whether playback should restart after it completes. */\n    loop: boolean;\n    /** Available only in secure contexts. */\n    readonly mediaKeys: MediaKeys | null;\n    /** Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted. */\n    muted: boolean;\n    /** Gets the current network activity for the element. */\n    readonly networkState: number;\n    onencrypted: ((this: HTMLMediaElement, ev: MediaEncryptedEvent) => any) | null;\n    onwaitingforkey: ((this: HTMLMediaElement, ev: Event) => any) | null;\n    /** Gets a flag that specifies whether playback is paused. */\n    readonly paused: boolean;\n    /** Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource. */\n    playbackRate: number;\n    /** Gets TimeRanges for the current media resource that has been played. */\n    readonly played: TimeRanges;\n    /** Gets or sets a value indicating what data should be preloaded, if any. */\n    preload: \"none\" | \"metadata\" | \"auto\" | \"\";\n    preservesPitch: boolean;\n    readonly readyState: number;\n    readonly remote: RemotePlayback;\n    /** Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked. */\n    readonly seekable: TimeRanges;\n    /** Gets a flag that indicates whether the client is currently moving to a new playback position in the media resource. */\n    readonly seeking: boolean;\n    /** The address or URL of the a media resource that is to be considered. */\n    src: string;\n    srcObject: MediaProvider | null;\n    readonly textTracks: TextTrackList;\n    /** Gets or sets the volume level for audio portions of the media element. */\n    volume: number;\n    addTextTrack(kind: TextTrackKind, label?: string, language?: string): TextTrack;\n    /** Returns a string that specifies whether the client can play a given media resource type. */\n    canPlayType(type: string): CanPlayTypeResult;\n    fastSeek(time: number): void;\n    /** Resets the audio or video object and loads a new media resource. */\n    load(): void;\n    /** Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not. */\n    pause(): void;\n    /** Loads and starts playback of a media resource. */\n    play(): Promise<void>;\n    /** Available only in secure contexts. */\n    setMediaKeys(mediaKeys: MediaKeys | null): Promise<void>;\n    readonly HAVE_CURRENT_DATA: number;\n    readonly HAVE_ENOUGH_DATA: number;\n    readonly HAVE_FUTURE_DATA: number;\n    readonly HAVE_METADATA: number;\n    readonly HAVE_NOTHING: number;\n    readonly NETWORK_EMPTY: number;\n    readonly NETWORK_IDLE: number;\n    readonly NETWORK_LOADING: number;\n    readonly NETWORK_NO_SOURCE: number;\n    addEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLMediaElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLMediaElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLMediaElement: {\n    prototype: HTMLMediaElement;\n    new(): HTMLMediaElement;\n    readonly HAVE_CURRENT_DATA: number;\n    readonly HAVE_ENOUGH_DATA: number;\n    readonly HAVE_FUTURE_DATA: number;\n    readonly HAVE_METADATA: number;\n    readonly HAVE_NOTHING: number;\n    readonly NETWORK_EMPTY: number;\n    readonly NETWORK_IDLE: number;\n    readonly NETWORK_LOADING: number;\n    readonly NETWORK_NO_SOURCE: number;\n};\n\ninterface HTMLMenuElement extends HTMLElement {\n    /** @deprecated */\n    compact: boolean;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLMenuElement: {\n    prototype: HTMLMenuElement;\n    new(): HTMLMenuElement;\n};\n\n/** Contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface. */\ninterface HTMLMetaElement extends HTMLElement {\n    /** Gets or sets meta-information to associate with httpEquiv or name. */\n    content: string;\n    /** Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header. */\n    httpEquiv: string;\n    media: string;\n    /** Sets or retrieves the value specified in the content attribute of the meta object. */\n    name: string;\n    /**\n     * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\n     * @deprecated\n     */\n    scheme: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLMetaElement: {\n    prototype: HTMLMetaElement;\n    new(): HTMLMetaElement;\n};\n\n/** The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements. */\ninterface HTMLMeterElement extends HTMLElement {\n    high: number;\n    readonly labels: NodeListOf<HTMLLabelElement>;\n    low: number;\n    max: number;\n    min: number;\n    optimum: number;\n    value: number;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLMeterElement: {\n    prototype: HTMLMeterElement;\n    new(): HTMLMeterElement;\n};\n\n/** Provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>. */\ninterface HTMLModElement extends HTMLElement {\n    /** Sets or retrieves reference information about the object. */\n    cite: string;\n    /** Sets or retrieves the date and time of a modification to the object. */\n    dateTime: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLModElement: {\n    prototype: HTMLModElement;\n    new(): HTMLModElement;\n};\n\n/** Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements. */\ninterface HTMLOListElement extends HTMLElement {\n    /** @deprecated */\n    compact: boolean;\n    reversed: boolean;\n    /** The starting number. */\n    start: number;\n    type: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLOListElement: {\n    prototype: HTMLOListElement;\n    new(): HTMLOListElement;\n};\n\n/** Provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources. */\ninterface HTMLObjectElement extends HTMLElement {\n    /** @deprecated */\n    align: string;\n    /**\n     * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n     * @deprecated\n     */\n    archive: string;\n    /** @deprecated */\n    border: string;\n    /**\n     * Sets or retrieves the URL of the file containing the compiled Java class.\n     * @deprecated\n     */\n    code: string;\n    /**\n     * Sets or retrieves the URL of the component.\n     * @deprecated\n     */\n    codeBase: string;\n    /**\n     * Sets or retrieves the Internet media type for the code associated with the object.\n     * @deprecated\n     */\n    codeType: string;\n    /** Retrieves the document object of the page or frame. */\n    readonly contentDocument: Document | null;\n    readonly contentWindow: WindowProxy | null;\n    /** Sets or retrieves the URL that references the data of the object. */\n    data: string;\n    /** @deprecated */\n    declare: boolean;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    /** Sets or retrieves the height of the object. */\n    height: string;\n    /** @deprecated */\n    hspace: number;\n    /** Sets or retrieves the name of the object. */\n    name: string;\n    /**\n     * Sets or retrieves a message to be displayed while an object is loading.\n     * @deprecated\n     */\n    standby: string;\n    /** Sets or retrieves the MIME type of the object. */\n    type: string;\n    /** Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map. */\n    useMap: string;\n    /** Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting. */\n    readonly validationMessage: string;\n    /** Returns a  ValidityState object that represents the validity states of an element. */\n    readonly validity: ValidityState;\n    /** @deprecated */\n    vspace: number;\n    /** Sets or retrieves the width of the object. */\n    width: string;\n    /** Returns whether an element will successfully validate based on forms validation rules and constraints. */\n    readonly willValidate: boolean;\n    /** Returns whether a form will validate when it is submitted, without having to submit it. */\n    checkValidity(): boolean;\n    getSVGDocument(): Document | null;\n    reportValidity(): boolean;\n    /**\n     * Sets a custom error message that is displayed when a form is submitted.\n     * @param error Sets a custom error message that is displayed when a form is submitted.\n     */\n    setCustomValidity(error: string): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLObjectElement: {\n    prototype: HTMLObjectElement;\n    new(): HTMLObjectElement;\n};\n\n/** Provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements. */\ninterface HTMLOptGroupElement extends HTMLElement {\n    disabled: boolean;\n    /** Sets or retrieves a value that you can use to implement your own label functionality for the object. */\n    label: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptGroupElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptGroupElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLOptGroupElement: {\n    prototype: HTMLOptGroupElement;\n    new(): HTMLOptGroupElement;\n};\n\n/** <option> elements and inherits all classes and methods of the HTMLElement interface. */\ninterface HTMLOptionElement extends HTMLElement {\n    /** Sets or retrieves the status of an option. */\n    defaultSelected: boolean;\n    disabled: boolean;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    /** Sets or retrieves the ordinal position of an option in a list box. */\n    readonly index: number;\n    /** Sets or retrieves a value that you can use to implement your own label functionality for the object. */\n    label: string;\n    /** Sets or retrieves whether the option in the list box is the default item. */\n    selected: boolean;\n    /** Sets or retrieves the text string specified by the option tag. */\n    text: string;\n    /** Sets or retrieves the value which is returned to the server when the form control is submitted. */\n    value: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLOptionElement: {\n    prototype: HTMLOptionElement;\n    new(): HTMLOptionElement;\n};\n\n/** HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the \"options\" property of select. */\ninterface HTMLOptionsCollection extends HTMLCollectionOf<HTMLOptionElement> {\n    /**\n     * Returns the number of elements in the collection.\n     *\n     * When set to a smaller number, truncates the number of option elements in the corresponding container.\n     *\n     * When set to a greater number, adds new blank option elements to that container.\n     */\n    length: number;\n    /**\n     * Returns the index of the first selected item, if any, or −1 if there is no selected item.\n     *\n     * Can be set, to change the selection.\n     */\n    selectedIndex: number;\n    /**\n     * Inserts element before the node given by before.\n     *\n     * The before argument can be a number, in which case element is inserted before the item with that number, or an element from the collection, in which case element is inserted before that element.\n     *\n     * If before is omitted, null, or a number out of range, then element will be added at the end of the list.\n     *\n     * This method will throw a \"HierarchyRequestError\" DOMException if element is an ancestor of the element into which it is to be inserted.\n     */\n    add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number | null): void;\n    /** Removes the item with index index from the collection. */\n    remove(index: number): void;\n}\n\ndeclare var HTMLOptionsCollection: {\n    prototype: HTMLOptionsCollection;\n    new(): HTMLOptionsCollection;\n};\n\ninterface HTMLOrSVGElement {\n    autofocus: boolean;\n    readonly dataset: DOMStringMap;\n    nonce?: string;\n    tabIndex: number;\n    blur(): void;\n    focus(options?: FocusOptions): void;\n}\n\n/** Provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements. */\ninterface HTMLOutputElement extends HTMLElement {\n    defaultValue: string;\n    readonly form: HTMLFormElement | null;\n    readonly htmlFor: DOMTokenList;\n    readonly labels: NodeListOf<HTMLLabelElement>;\n    name: string;\n    /** Returns the string \"output\". */\n    readonly type: string;\n    readonly validationMessage: string;\n    readonly validity: ValidityState;\n    /**\n     * Returns the element's current value.\n     *\n     * Can be set, to change the value.\n     */\n    value: string;\n    readonly willValidate: boolean;\n    checkValidity(): boolean;\n    reportValidity(): boolean;\n    setCustomValidity(error: string): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLOutputElement: {\n    prototype: HTMLOutputElement;\n    new(): HTMLOutputElement;\n};\n\n/** Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements. */\ninterface HTMLParagraphElement extends HTMLElement {\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParagraphElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParagraphElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLParagraphElement: {\n    prototype: HTMLParagraphElement;\n    new(): HTMLParagraphElement;\n};\n\n/**\n * Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.\n * @deprecated\n */\ninterface HTMLParamElement extends HTMLElement {\n    /**\n     * Sets or retrieves the name of an input parameter for an element.\n     * @deprecated\n     */\n    name: string;\n    /**\n     * Sets or retrieves the content type of the resource designated by the value attribute.\n     * @deprecated\n     */\n    type: string;\n    /**\n     * Sets or retrieves the value of an input parameter for an element.\n     * @deprecated\n     */\n    value: string;\n    /**\n     * Sets or retrieves the data type of the value attribute.\n     * @deprecated\n     */\n    valueType: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var HTMLParamElement: {\n    prototype: HTMLParamElement;\n    new(): HTMLParamElement;\n};\n\n/** A <picture> HTML element. It doesn't implement specific properties or methods. */\ninterface HTMLPictureElement extends HTMLElement {\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLPictureElement: {\n    prototype: HTMLPictureElement;\n    new(): HTMLPictureElement;\n};\n\n/** Exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>). */\ninterface HTMLPreElement extends HTMLElement {\n    /**\n     * Sets or gets a value that you can use to implement your own width functionality for the object.\n     * @deprecated\n     */\n    width: number;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLPreElement: {\n    prototype: HTMLPreElement;\n    new(): HTMLPreElement;\n};\n\n/** Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements. */\ninterface HTMLProgressElement extends HTMLElement {\n    readonly labels: NodeListOf<HTMLLabelElement>;\n    /** Defines the maximum, or \"done\" value for a progress element. */\n    max: number;\n    /** Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar). */\n    readonly position: number;\n    /** Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value. */\n    value: number;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLProgressElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLProgressElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLProgressElement: {\n    prototype: HTMLProgressElement;\n    new(): HTMLProgressElement;\n};\n\n/** Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element. */\ninterface HTMLQuoteElement extends HTMLElement {\n    /** Sets or retrieves reference information about the object. */\n    cite: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLQuoteElement: {\n    prototype: HTMLQuoteElement;\n    new(): HTMLQuoteElement;\n};\n\n/** HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface). */\ninterface HTMLScriptElement extends HTMLElement {\n    async: boolean;\n    /**\n     * Sets or retrieves the character set used to encode the object.\n     * @deprecated\n     */\n    charset: string;\n    crossOrigin: string | null;\n    /** Sets or retrieves the status of the script. */\n    defer: boolean;\n    /**\n     * Sets or retrieves the event for which the script is written.\n     * @deprecated\n     */\n    event: string;\n    /**\n     * Sets or retrieves the object that is bound to the event script.\n     * @deprecated\n     */\n    htmlFor: string;\n    integrity: string;\n    noModule: boolean;\n    referrerPolicy: string;\n    /** Retrieves the URL to an external file that contains the source code or data. */\n    src: string;\n    /** Retrieves or sets the text of the object as a string. */\n    text: string;\n    /** Sets or retrieves the MIME type for the associated scripting engine. */\n    type: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLScriptElement: {\n    prototype: HTMLScriptElement;\n    new(): HTMLScriptElement;\n    supports(type: string): boolean;\n};\n\n/** A <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface. */\ninterface HTMLSelectElement extends HTMLElement {\n    autocomplete: string;\n    disabled: boolean;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    readonly labels: NodeListOf<HTMLLabelElement>;\n    /** Sets or retrieves the number of objects in a collection. */\n    length: number;\n    /** Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list. */\n    multiple: boolean;\n    /** Sets or retrieves the name of the object. */\n    name: string;\n    /** Returns an HTMLOptionsCollection of the list of options. */\n    readonly options: HTMLOptionsCollection;\n    /** When present, marks an element that can't be submitted without a value. */\n    required: boolean;\n    /** Sets or retrieves the index of the selected option in a select object. */\n    selectedIndex: number;\n    readonly selectedOptions: HTMLCollectionOf<HTMLOptionElement>;\n    /** Sets or retrieves the number of rows in the list box. */\n    size: number;\n    /** Retrieves the type of select control based on the value of the MULTIPLE attribute. */\n    readonly type: string;\n    /** Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting. */\n    readonly validationMessage: string;\n    /** Returns a  ValidityState object that represents the validity states of an element. */\n    readonly validity: ValidityState;\n    /** Sets or retrieves the value which is returned to the server when the form control is submitted. */\n    value: string;\n    /** Returns whether an element will successfully validate based on forms validation rules and constraints. */\n    readonly willValidate: boolean;\n    /**\n     * Adds an element to the areas, controlRange, or options collection.\n     * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\n     * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.\n     */\n    add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number | null): void;\n    /** Returns whether a form will validate when it is submitted, without having to submit it. */\n    checkValidity(): boolean;\n    /**\n     * Retrieves a select object or an object from an options collection.\n     * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\n     * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\n     */\n    item(index: number): HTMLOptionElement | null;\n    /**\n     * Retrieves a select object or an object from an options collection.\n     * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\n     */\n    namedItem(name: string): HTMLOptionElement | null;\n    /**\n     * Removes an element from the collection.\n     * @param index Number that specifies the zero-based index of the element to remove from the collection.\n     */\n    remove(): void;\n    remove(index: number): void;\n    reportValidity(): boolean;\n    /**\n     * Sets a custom error message that is displayed when a form is submitted.\n     * @param error Sets a custom error message that is displayed when a form is submitted.\n     */\n    setCustomValidity(error: string): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n    [name: number]: HTMLOptionElement | HTMLOptGroupElement;\n}\n\ndeclare var HTMLSelectElement: {\n    prototype: HTMLSelectElement;\n    new(): HTMLSelectElement;\n};\n\ninterface HTMLSlotElement extends HTMLElement {\n    name: string;\n    assign(...nodes: (Element | Text)[]): void;\n    assignedElements(options?: AssignedNodesOptions): Element[];\n    assignedNodes(options?: AssignedNodesOptions): Node[];\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLSlotElement: {\n    prototype: HTMLSlotElement;\n    new(): HTMLSlotElement;\n};\n\n/** Provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements. */\ninterface HTMLSourceElement extends HTMLElement {\n    height: number;\n    /** Gets or sets the intended media type of the media source. */\n    media: string;\n    sizes: string;\n    /** The address or URL of the a media resource that is to be considered. */\n    src: string;\n    srcset: string;\n    /** Gets or sets the MIME type of a media resource. */\n    type: string;\n    width: number;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLSourceElement: {\n    prototype: HTMLSourceElement;\n    new(): HTMLSourceElement;\n};\n\n/** A <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods. */\ninterface HTMLSpanElement extends HTMLElement {\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLSpanElement: {\n    prototype: HTMLSpanElement;\n    new(): HTMLSpanElement;\n};\n\n/** A <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle. */\ninterface HTMLStyleElement extends HTMLElement, LinkStyle {\n    /** Enables or disables the style sheet. */\n    disabled: boolean;\n    /** Sets or retrieves the media type. */\n    media: string;\n    /**\n     * Retrieves the CSS language in which the style sheet is written.\n     * @deprecated\n     */\n    type: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLStyleElement: {\n    prototype: HTMLStyleElement;\n    new(): HTMLStyleElement;\n};\n\n/** Special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements. */\ninterface HTMLTableCaptionElement extends HTMLElement {\n    /**\n     * Sets or retrieves the alignment of the caption or legend.\n     * @deprecated\n     */\n    align: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCaptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCaptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTableCaptionElement: {\n    prototype: HTMLTableCaptionElement;\n    new(): HTMLTableCaptionElement;\n};\n\n/** Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document. */\ninterface HTMLTableCellElement extends HTMLElement {\n    /** Sets or retrieves abbreviated text for the object. */\n    abbr: string;\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    /**\n     * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\n     * @deprecated\n     */\n    axis: string;\n    /** @deprecated */\n    bgColor: string;\n    /** Retrieves the position of the object in the cells collection of a row. */\n    readonly cellIndex: number;\n    /** @deprecated */\n    ch: string;\n    /** @deprecated */\n    chOff: string;\n    /** Sets or retrieves the number columns in the table that the object should span. */\n    colSpan: number;\n    /** Sets or retrieves a list of header cells that provide information for the object. */\n    headers: string;\n    /**\n     * Sets or retrieves the height of the object.\n     * @deprecated\n     */\n    height: string;\n    /**\n     * Sets or retrieves whether the browser automatically performs wordwrap.\n     * @deprecated\n     */\n    noWrap: boolean;\n    /** Sets or retrieves how many rows in a table the cell should span. */\n    rowSpan: number;\n    /** Sets or retrieves the group of cells in a table to which the object's information applies. */\n    scope: string;\n    /** @deprecated */\n    vAlign: string;\n    /**\n     * Sets or retrieves the width of the object.\n     * @deprecated\n     */\n    width: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTableCellElement: {\n    prototype: HTMLTableCellElement;\n    new(): HTMLTableCellElement;\n};\n\n/** Provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements. */\ninterface HTMLTableColElement extends HTMLElement {\n    /**\n     * Sets or retrieves the alignment of the object relative to the display or table.\n     * @deprecated\n     */\n    align: string;\n    /** @deprecated */\n    ch: string;\n    /** @deprecated */\n    chOff: string;\n    /** Sets or retrieves the number of columns in the group. */\n    span: number;\n    /** @deprecated */\n    vAlign: string;\n    /**\n     * Sets or retrieves the width of the object.\n     * @deprecated\n     */\n    width: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableColElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableColElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTableColElement: {\n    prototype: HTMLTableColElement;\n    new(): HTMLTableColElement;\n};\n\n/** @deprecated prefer HTMLTableCellElement */\ninterface HTMLTableDataCellElement extends HTMLTableCellElement {\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableDataCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableDataCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** Provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document. */\ninterface HTMLTableElement extends HTMLElement {\n    /**\n     * Sets or retrieves a value that indicates the table alignment.\n     * @deprecated\n     */\n    align: string;\n    /** @deprecated */\n    bgColor: string;\n    /**\n     * Sets or retrieves the width of the border to draw around the object.\n     * @deprecated\n     */\n    border: string;\n    /** Retrieves the caption object of a table. */\n    caption: HTMLTableCaptionElement | null;\n    /**\n     * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\n     * @deprecated\n     */\n    cellPadding: string;\n    /**\n     * Sets or retrieves the amount of space between cells in a table.\n     * @deprecated\n     */\n    cellSpacing: string;\n    /**\n     * Sets or retrieves the way the border frame around the table is displayed.\n     * @deprecated\n     */\n    frame: string;\n    /** Sets or retrieves the number of horizontal rows contained in the object. */\n    readonly rows: HTMLCollectionOf<HTMLTableRowElement>;\n    /**\n     * Sets or retrieves which dividing lines (inner borders) are displayed.\n     * @deprecated\n     */\n    rules: string;\n    /**\n     * Sets or retrieves a description and/or structure of the object.\n     * @deprecated\n     */\n    summary: string;\n    /** Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order. */\n    readonly tBodies: HTMLCollectionOf<HTMLTableSectionElement>;\n    /** Retrieves the tFoot object of the table. */\n    tFoot: HTMLTableSectionElement | null;\n    /** Retrieves the tHead object of the table. */\n    tHead: HTMLTableSectionElement | null;\n    /**\n     * Sets or retrieves the width of the object.\n     * @deprecated\n     */\n    width: string;\n    /** Creates an empty caption element in the table. */\n    createCaption(): HTMLTableCaptionElement;\n    /** Creates an empty tBody element in the table. */\n    createTBody(): HTMLTableSectionElement;\n    /** Creates an empty tFoot element in the table. */\n    createTFoot(): HTMLTableSectionElement;\n    /** Returns the tHead element object if successful, or null otherwise. */\n    createTHead(): HTMLTableSectionElement;\n    /** Deletes the caption element and its contents from the table. */\n    deleteCaption(): void;\n    /**\n     * Removes the specified row (tr) from the element and from the rows collection.\n     * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n     */\n    deleteRow(index: number): void;\n    /** Deletes the tFoot element and its contents from the table. */\n    deleteTFoot(): void;\n    /** Deletes the tHead element and its contents from the table. */\n    deleteTHead(): void;\n    /**\n     * Creates a new row (tr) in the table, and adds the row to the rows collection.\n     * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n     */\n    insertRow(index?: number): HTMLTableRowElement;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTableElement: {\n    prototype: HTMLTableElement;\n    new(): HTMLTableElement;\n};\n\n/** @deprecated prefer HTMLTableCellElement */\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement {\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table. */\ninterface HTMLTableRowElement extends HTMLElement {\n    /**\n     * Sets or retrieves how the object is aligned with adjacent text.\n     * @deprecated\n     */\n    align: string;\n    /** @deprecated */\n    bgColor: string;\n    /** Retrieves a collection of all cells in the table row. */\n    readonly cells: HTMLCollectionOf<HTMLTableCellElement>;\n    /** @deprecated */\n    ch: string;\n    /** @deprecated */\n    chOff: string;\n    /** Retrieves the position of the object in the rows collection for the table. */\n    readonly rowIndex: number;\n    /** Retrieves the position of the object in the collection. */\n    readonly sectionRowIndex: number;\n    /** @deprecated */\n    vAlign: string;\n    /**\n     * Removes the specified cell from the table row, as well as from the cells collection.\n     * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\n     */\n    deleteCell(index: number): void;\n    /**\n     * Creates a new cell in the table row, and adds the cell to the cells collection.\n     * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\n     */\n    insertCell(index?: number): HTMLTableCellElement;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTableRowElement: {\n    prototype: HTMLTableRowElement;\n    new(): HTMLTableRowElement;\n};\n\n/** Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table. */\ninterface HTMLTableSectionElement extends HTMLElement {\n    /**\n     * Sets or retrieves a value that indicates the table alignment.\n     * @deprecated\n     */\n    align: string;\n    /** @deprecated */\n    ch: string;\n    /** @deprecated */\n    chOff: string;\n    /** Sets or retrieves the number of horizontal rows contained in the object. */\n    readonly rows: HTMLCollectionOf<HTMLTableRowElement>;\n    /** @deprecated */\n    vAlign: string;\n    /**\n     * Removes the specified row (tr) from the element and from the rows collection.\n     * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n     */\n    deleteRow(index: number): void;\n    /**\n     * Creates a new row (tr) in the table, and adds the row to the rows collection.\n     * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n     */\n    insertRow(index?: number): HTMLTableRowElement;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableSectionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableSectionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTableSectionElement: {\n    prototype: HTMLTableSectionElement;\n    new(): HTMLTableSectionElement;\n};\n\n/** Enables access to the contents of an HTML <template> element. */\ninterface HTMLTemplateElement extends HTMLElement {\n    /** Returns the template contents (a DocumentFragment). */\n    readonly content: DocumentFragment;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTemplateElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTemplateElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTemplateElement: {\n    prototype: HTMLTemplateElement;\n    new(): HTMLTemplateElement;\n};\n\n/** Provides special properties and methods for manipulating the layout and presentation of <textarea> elements. */\ninterface HTMLTextAreaElement extends HTMLElement {\n    autocomplete: string;\n    /** Sets or retrieves the width of the object. */\n    cols: number;\n    /** Sets or retrieves the initial contents of the object. */\n    defaultValue: string;\n    dirName: string;\n    disabled: boolean;\n    /** Retrieves a reference to the form that the object is embedded in. */\n    readonly form: HTMLFormElement | null;\n    readonly labels: NodeListOf<HTMLLabelElement>;\n    /** Sets or retrieves the maximum number of characters that the user can enter in a text control. */\n    maxLength: number;\n    minLength: number;\n    /** Sets or retrieves the name of the object. */\n    name: string;\n    /** Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field. */\n    placeholder: string;\n    /** Sets or retrieves the value indicated whether the content of the object is read-only. */\n    readOnly: boolean;\n    /** When present, marks an element that can't be submitted without a value. */\n    required: boolean;\n    /** Sets or retrieves the number of horizontal rows contained in the object. */\n    rows: number;\n    selectionDirection: \"forward\" | \"backward\" | \"none\";\n    /** Gets or sets the end position or offset of a text selection. */\n    selectionEnd: number;\n    /** Gets or sets the starting position or offset of a text selection. */\n    selectionStart: number;\n    readonly textLength: number;\n    /** Retrieves the type of control. */\n    readonly type: string;\n    /** Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting. */\n    readonly validationMessage: string;\n    /** Returns a  ValidityState object that represents the validity states of an element. */\n    readonly validity: ValidityState;\n    /** Retrieves or sets the text in the entry field of the textArea element. */\n    value: string;\n    /** Returns whether an element will successfully validate based on forms validation rules and constraints. */\n    readonly willValidate: boolean;\n    /** Sets or retrieves how to handle wordwrapping in the object. */\n    wrap: string;\n    /** Returns whether a form will validate when it is submitted, without having to submit it. */\n    checkValidity(): boolean;\n    reportValidity(): boolean;\n    /** Highlights the input area of a form element. */\n    select(): void;\n    /**\n     * Sets a custom error message that is displayed when a form is submitted.\n     * @param error Sets a custom error message that is displayed when a form is submitted.\n     */\n    setCustomValidity(error: string): void;\n    setRangeText(replacement: string): void;\n    setRangeText(replacement: string, start: number, end: number, selectionMode?: SelectionMode): void;\n    /**\n     * Sets the start and end positions of a selection in a text field.\n     * @param start The offset into the text field for the start of the selection.\n     * @param end The offset into the text field for the end of the selection.\n     * @param direction The direction in which the selection is performed.\n     */\n    setSelectionRange(start: number | null, end: number | null, direction?: \"forward\" | \"backward\" | \"none\"): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTextAreaElement: {\n    prototype: HTMLTextAreaElement;\n    new(): HTMLTextAreaElement;\n};\n\n/** Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements. */\ninterface HTMLTimeElement extends HTMLElement {\n    dateTime: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTimeElement: {\n    prototype: HTMLTimeElement;\n    new(): HTMLTimeElement;\n};\n\n/** Contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface. */\ninterface HTMLTitleElement extends HTMLElement {\n    /** Retrieves or sets the text of the object as a string. */\n    text: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTitleElement: {\n    prototype: HTMLTitleElement;\n    new(): HTMLTitleElement;\n};\n\n/** The HTMLTrackElement */\ninterface HTMLTrackElement extends HTMLElement {\n    default: boolean;\n    kind: string;\n    label: string;\n    readonly readyState: number;\n    src: string;\n    srclang: string;\n    /** Returns the TextTrack object corresponding to the text track of the track element. */\n    readonly track: TextTrack;\n    readonly ERROR: number;\n    readonly LOADED: number;\n    readonly LOADING: number;\n    readonly NONE: number;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLTrackElement: {\n    prototype: HTMLTrackElement;\n    new(): HTMLTrackElement;\n    readonly ERROR: number;\n    readonly LOADED: number;\n    readonly LOADING: number;\n    readonly NONE: number;\n};\n\n/** Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements. */\ninterface HTMLUListElement extends HTMLElement {\n    /** @deprecated */\n    compact: boolean;\n    /** @deprecated */\n    type: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLUListElement: {\n    prototype: HTMLUListElement;\n    new(): HTMLUListElement;\n};\n\n/** An invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods. */\ninterface HTMLUnknownElement extends HTMLElement {\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLUnknownElement: {\n    prototype: HTMLUnknownElement;\n    new(): HTMLUnknownElement;\n};\n\ninterface HTMLVideoElementEventMap extends HTMLMediaElementEventMap {\n    \"enterpictureinpicture\": Event;\n    \"leavepictureinpicture\": Event;\n}\n\n/** Provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement. */\ninterface HTMLVideoElement extends HTMLMediaElement {\n    disablePictureInPicture: boolean;\n    /** Gets or sets the height of the video element. */\n    height: number;\n    onenterpictureinpicture: ((this: HTMLVideoElement, ev: Event) => any) | null;\n    onleavepictureinpicture: ((this: HTMLVideoElement, ev: Event) => any) | null;\n    /** Gets or sets the playsinline of the video element. for example, On iPhone, video elements will now be allowed to play inline, and will not automatically enter fullscreen mode when playback begins. */\n    playsInline: boolean;\n    /** Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available. */\n    poster: string;\n    /** Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known. */\n    readonly videoHeight: number;\n    /** Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known. */\n    readonly videoWidth: number;\n    /** Gets or sets the width of the video element. */\n    width: number;\n    cancelVideoFrameCallback(handle: number): void;\n    getVideoPlaybackQuality(): VideoPlaybackQuality;\n    requestPictureInPicture(): Promise<PictureInPictureWindow>;\n    requestVideoFrameCallback(callback: VideoFrameRequestCallback): number;\n    addEventListener<K extends keyof HTMLVideoElementEventMap>(type: K, listener: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof HTMLVideoElementEventMap>(type: K, listener: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var HTMLVideoElement: {\n    prototype: HTMLVideoElement;\n    new(): HTMLVideoElement;\n};\n\n/** Events that fire when the fragment identifier of the URL has changed. */\ninterface HashChangeEvent extends Event {\n    /** Returns the URL of the session history entry that is now current. */\n    readonly newURL: string;\n    /** Returns the URL of the session history entry that was previously current. */\n    readonly oldURL: string;\n}\n\ndeclare var HashChangeEvent: {\n    prototype: HashChangeEvent;\n    new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent;\n};\n\n/** This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence. */\ninterface Headers {\n    append(name: string, value: string): void;\n    delete(name: string): void;\n    get(name: string): string | null;\n    has(name: string): boolean;\n    set(name: string, value: string): void;\n    forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;\n}\n\ndeclare var Headers: {\n    prototype: Headers;\n    new(init?: HeadersInit): Headers;\n};\n\n/** Allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in. */\ninterface History {\n    readonly length: number;\n    scrollRestoration: ScrollRestoration;\n    readonly state: any;\n    back(): void;\n    forward(): void;\n    go(delta?: number): void;\n    pushState(data: any, unused: string, url?: string | URL | null): void;\n    replaceState(data: any, unused: string, url?: string | URL | null): void;\n}\n\ndeclare var History: {\n    prototype: History;\n    new(): History;\n};\n\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. */\ninterface IDBCursor {\n    /** Returns the direction (\"next\", \"nextunique\", \"prev\" or \"prevunique\") of the cursor. */\n    readonly direction: IDBCursorDirection;\n    /** Returns the key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished. */\n    readonly key: IDBValidKey;\n    /** Returns the effective key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished. */\n    readonly primaryKey: IDBValidKey;\n    readonly request: IDBRequest;\n    /** Returns the IDBObjectStore or IDBIndex the cursor was opened from. */\n    readonly source: IDBObjectStore | IDBIndex;\n    /** Advances the cursor through the next count records in range. */\n    advance(count: number): void;\n    /** Advances the cursor to the next record in range. */\n    continue(key?: IDBValidKey): void;\n    /** Advances the cursor to the next record in range matching or after key and primaryKey. Throws an \"InvalidAccessError\" DOMException if the source is not an index. */\n    continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): void;\n    /**\n     * Delete the record pointed at by the cursor with a new value.\n     *\n     * If successful, request's result will be undefined.\n     */\n    delete(): IDBRequest<undefined>;\n    /**\n     * Updated the record pointed at by the cursor with a new value.\n     *\n     * Throws a \"DataError\" DOMException if the effective object store uses in-line keys and the key would have changed.\n     *\n     * If successful, request's result will be the record's key.\n     */\n    update(value: any): IDBRequest<IDBValidKey>;\n}\n\ndeclare var IDBCursor: {\n    prototype: IDBCursor;\n    new(): IDBCursor;\n};\n\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property. */\ninterface IDBCursorWithValue extends IDBCursor {\n    /** Returns the cursor's current value. */\n    readonly value: any;\n}\n\ndeclare var IDBCursorWithValue: {\n    prototype: IDBCursorWithValue;\n    new(): IDBCursorWithValue;\n};\n\ninterface IDBDatabaseEventMap {\n    \"abort\": Event;\n    \"close\": Event;\n    \"error\": Event;\n    \"versionchange\": IDBVersionChangeEvent;\n}\n\n/** This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database. */\ninterface IDBDatabase extends EventTarget {\n    /** Returns the name of the database. */\n    readonly name: string;\n    /** Returns a list of the names of object stores in the database. */\n    readonly objectStoreNames: DOMStringList;\n    onabort: ((this: IDBDatabase, ev: Event) => any) | null;\n    onclose: ((this: IDBDatabase, ev: Event) => any) | null;\n    onerror: ((this: IDBDatabase, ev: Event) => any) | null;\n    onversionchange: ((this: IDBDatabase, ev: IDBVersionChangeEvent) => any) | null;\n    /** Returns the version of the database. */\n    readonly version: number;\n    /** Closes the connection once all running transactions have finished. */\n    close(): void;\n    /**\n     * Creates a new object store with the given name and options and returns a new IDBObjectStore.\n     *\n     * Throws a \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    createObjectStore(name: string, options?: IDBObjectStoreParameters): IDBObjectStore;\n    /**\n     * Deletes the object store with the given name.\n     *\n     * Throws a \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    deleteObjectStore(name: string): void;\n    /** Returns a new transaction with the given mode (\"readonly\" or \"readwrite\") and scope which can be a single object store name or an array of names. */\n    transaction(storeNames: string | string[], mode?: IDBTransactionMode, options?: IDBTransactionOptions): IDBTransaction;\n    addEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBDatabase: {\n    prototype: IDBDatabase;\n    new(): IDBDatabase;\n};\n\n/** In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.) */\ninterface IDBFactory {\n    /**\n     * Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.\n     *\n     * Throws a \"DataError\" DOMException if either input is not a valid key.\n     */\n    cmp(first: any, second: any): number;\n    databases(): Promise<IDBDatabaseInfo[]>;\n    /** Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null. */\n    deleteDatabase(name: string): IDBOpenDBRequest;\n    /** Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection. */\n    open(name: string, version?: number): IDBOpenDBRequest;\n}\n\ndeclare var IDBFactory: {\n    prototype: IDBFactory;\n    new(): IDBFactory;\n};\n\n/** IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data. */\ninterface IDBIndex {\n    readonly keyPath: string | string[];\n    readonly multiEntry: boolean;\n    /** Returns the name of the index. */\n    name: string;\n    /** Returns the IDBObjectStore the index belongs to. */\n    readonly objectStore: IDBObjectStore;\n    readonly unique: boolean;\n    /**\n     * Retrieves the number of records matching the given key or key range in query.\n     *\n     * If successful, request's result will be the count.\n     */\n    count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\n    /**\n     * Retrieves the value of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the value, or undefined if there was no matching record.\n     */\n    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any>;\n    /**\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the values.\n     */\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\n    /**\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the keys.\n     */\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\n    /**\n     * Retrieves the key of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the key, or undefined if there was no matching record.\n     */\n    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\n    /**\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.\n     *\n     * If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.\n     */\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\n    /**\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.\n     *\n     * If successful, request's result will be an IDBCursor, or null if there were no matching records.\n     */\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\n}\n\ndeclare var IDBIndex: {\n    prototype: IDBIndex;\n    new(): IDBIndex;\n};\n\n/** A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs: */\ninterface IDBKeyRange {\n    /** Returns lower bound, or undefined if none. */\n    readonly lower: any;\n    /** Returns true if the lower open flag is set, and false otherwise. */\n    readonly lowerOpen: boolean;\n    /** Returns upper bound, or undefined if none. */\n    readonly upper: any;\n    /** Returns true if the upper open flag is set, and false otherwise. */\n    readonly upperOpen: boolean;\n    /** Returns true if key is included in the range, and false otherwise. */\n    includes(key: any): boolean;\n}\n\ndeclare var IDBKeyRange: {\n    prototype: IDBKeyRange;\n    new(): IDBKeyRange;\n    /** Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range. */\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\n    /** Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range. */\n    lowerBound(lower: any, open?: boolean): IDBKeyRange;\n    /** Returns a new IDBKeyRange spanning only key. */\n    only(value: any): IDBKeyRange;\n    /** Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range. */\n    upperBound(upper: any, open?: boolean): IDBKeyRange;\n};\n\n/** This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.) */\ninterface IDBObjectStore {\n    /** Returns true if the store has a key generator, and false otherwise. */\n    readonly autoIncrement: boolean;\n    /** Returns a list of the names of indexes in the store. */\n    readonly indexNames: DOMStringList;\n    /** Returns the key path of the store, or null if none. */\n    readonly keyPath: string | string[];\n    /** Returns the name of the store. */\n    name: string;\n    /** Returns the associated transaction. */\n    readonly transaction: IDBTransaction;\n    /**\n     * Adds or updates a record in store with the given value and key.\n     *\n     * If the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n     *\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n     *\n     * If successful, request's result will be the record's key.\n     */\n    add(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\n    /**\n     * Deletes all records in store.\n     *\n     * If successful, request's result will be undefined.\n     */\n    clear(): IDBRequest<undefined>;\n    /**\n     * Retrieves the number of records matching the given key or key range in query.\n     *\n     * If successful, request's result will be the count.\n     */\n    count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\n    /**\n     * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \"ConstraintError\" DOMException.\n     *\n     * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    createIndex(name: string, keyPath: string | string[], options?: IDBIndexParameters): IDBIndex;\n    /**\n     * Deletes records in store with the given key or in the given key range in query.\n     *\n     * If successful, request's result will be undefined.\n     */\n    delete(query: IDBValidKey | IDBKeyRange): IDBRequest<undefined>;\n    /**\n     * Deletes the index in store with the given name.\n     *\n     * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    deleteIndex(name: string): void;\n    /**\n     * Retrieves the value of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the value, or undefined if there was no matching record.\n     */\n    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any>;\n    /**\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the values.\n     */\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\n    /**\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the keys.\n     */\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\n    /**\n     * Retrieves the key of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the key, or undefined if there was no matching record.\n     */\n    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\n    index(name: string): IDBIndex;\n    /**\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.\n     *\n     * If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.\n     */\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\n    /**\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.\n     *\n     * If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.\n     */\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\n    /**\n     * Adds or updates a record in store with the given value and key.\n     *\n     * If the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n     *\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n     *\n     * If successful, request's result will be the record's key.\n     */\n    put(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\n}\n\ndeclare var IDBObjectStore: {\n    prototype: IDBObjectStore;\n    new(): IDBObjectStore;\n};\n\ninterface IDBOpenDBRequestEventMap extends IDBRequestEventMap {\n    \"blocked\": Event;\n    \"upgradeneeded\": IDBVersionChangeEvent;\n}\n\n/** Also inherits methods from its parents IDBRequest and EventTarget. */\ninterface IDBOpenDBRequest extends IDBRequest<IDBDatabase> {\n    onblocked: ((this: IDBOpenDBRequest, ev: Event) => any) | null;\n    onupgradeneeded: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null;\n    addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBOpenDBRequest: {\n    prototype: IDBOpenDBRequest;\n    new(): IDBOpenDBRequest;\n};\n\ninterface IDBRequestEventMap {\n    \"error\": Event;\n    \"success\": Event;\n}\n\n/** The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance. */\ninterface IDBRequest<T = any> extends EventTarget {\n    /** When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a \"InvalidStateError\" DOMException if the request is still pending. */\n    readonly error: DOMException | null;\n    onerror: ((this: IDBRequest<T>, ev: Event) => any) | null;\n    onsuccess: ((this: IDBRequest<T>, ev: Event) => any) | null;\n    /** Returns \"pending\" until a request is complete, then returns \"done\". */\n    readonly readyState: IDBRequestReadyState;\n    /** When a request is completed, returns the result, or undefined if the request failed. Throws a \"InvalidStateError\" DOMException if the request is still pending. */\n    readonly result: T;\n    /** Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request. */\n    readonly source: IDBObjectStore | IDBIndex | IDBCursor;\n    /** Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise. */\n    readonly transaction: IDBTransaction | null;\n    addEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBRequest: {\n    prototype: IDBRequest;\n    new(): IDBRequest;\n};\n\ninterface IDBTransactionEventMap {\n    \"abort\": Event;\n    \"complete\": Event;\n    \"error\": Event;\n}\n\ninterface IDBTransaction extends EventTarget {\n    /** Returns the transaction's connection. */\n    readonly db: IDBDatabase;\n    readonly durability: IDBTransactionDurability;\n    /** If the transaction was aborted, returns the error (a DOMException) providing the reason. */\n    readonly error: DOMException | null;\n    /** Returns the mode the transaction was created with (\"readonly\" or \"readwrite\"), or \"versionchange\" for an upgrade transaction. */\n    readonly mode: IDBTransactionMode;\n    /** Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database. */\n    readonly objectStoreNames: DOMStringList;\n    onabort: ((this: IDBTransaction, ev: Event) => any) | null;\n    oncomplete: ((this: IDBTransaction, ev: Event) => any) | null;\n    onerror: ((this: IDBTransaction, ev: Event) => any) | null;\n    /** Aborts the transaction. All pending requests will fail with a \"AbortError\" DOMException and all changes made to the database will be reverted. */\n    abort(): void;\n    commit(): void;\n    /** Returns an IDBObjectStore in the transaction's scope. */\n    objectStore(name: string): IDBObjectStore;\n    addEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBTransaction: {\n    prototype: IDBTransaction;\n    new(): IDBTransaction;\n};\n\n/** This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function. */\ninterface IDBVersionChangeEvent extends Event {\n    readonly newVersion: number | null;\n    readonly oldVersion: number;\n}\n\ndeclare var IDBVersionChangeEvent: {\n    prototype: IDBVersionChangeEvent;\n    new(type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent;\n};\n\n/** The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed. */\ninterface IIRFilterNode extends AudioNode {\n    getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void;\n}\n\ndeclare var IIRFilterNode: {\n    prototype: IIRFilterNode;\n    new(context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode;\n};\n\ninterface IdleDeadline {\n    readonly didTimeout: boolean;\n    timeRemaining(): DOMHighResTimeStamp;\n}\n\ndeclare var IdleDeadline: {\n    prototype: IdleDeadline;\n    new(): IdleDeadline;\n};\n\ninterface ImageBitmap {\n    /** Returns the intrinsic height of the image, in CSS pixels. */\n    readonly height: number;\n    /** Returns the intrinsic width of the image, in CSS pixels. */\n    readonly width: number;\n    /** Releases imageBitmap's underlying bitmap data. */\n    close(): void;\n}\n\ndeclare var ImageBitmap: {\n    prototype: ImageBitmap;\n    new(): ImageBitmap;\n};\n\ninterface ImageBitmapRenderingContext {\n    /** Returns the canvas element that the context is bound to. */\n    readonly canvas: HTMLCanvasElement;\n    /** Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound. */\n    transferFromImageBitmap(bitmap: ImageBitmap | null): void;\n}\n\ndeclare var ImageBitmapRenderingContext: {\n    prototype: ImageBitmapRenderingContext;\n    new(): ImageBitmapRenderingContext;\n};\n\n/** The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData(). */\ninterface ImageData {\n    readonly colorSpace: PredefinedColorSpace;\n    /** Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255. */\n    readonly data: Uint8ClampedArray;\n    /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n    readonly height: number;\n    /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n    readonly width: number;\n}\n\ndeclare var ImageData: {\n    prototype: ImageData;\n    new(sw: number, sh: number, settings?: ImageDataSettings): ImageData;\n    new(data: Uint8ClampedArray, sw: number, sh?: number, settings?: ImageDataSettings): ImageData;\n};\n\ninterface InnerHTML {\n    innerHTML: string;\n}\n\ninterface InputDeviceInfo extends MediaDeviceInfo {\n}\n\ndeclare var InputDeviceInfo: {\n    prototype: InputDeviceInfo;\n    new(): InputDeviceInfo;\n};\n\ninterface InputEvent extends UIEvent {\n    readonly data: string | null;\n    readonly dataTransfer: DataTransfer | null;\n    readonly inputType: string;\n    readonly isComposing: boolean;\n    getTargetRanges(): StaticRange[];\n}\n\ndeclare var InputEvent: {\n    prototype: InputEvent;\n    new(type: string, eventInitDict?: InputEventInit): InputEvent;\n};\n\n/** provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. */\ninterface IntersectionObserver {\n    readonly root: Element | Document | null;\n    readonly rootMargin: string;\n    readonly thresholds: ReadonlyArray<number>;\n    disconnect(): void;\n    observe(target: Element): void;\n    takeRecords(): IntersectionObserverEntry[];\n    unobserve(target: Element): void;\n}\n\ndeclare var IntersectionObserver: {\n    prototype: IntersectionObserver;\n    new(callback: IntersectionObserverCallback, options?: IntersectionObserverInit): IntersectionObserver;\n};\n\n/** This Intersection Observer API interface describes the intersection between the target element and its root container at a specific moment of transition. */\ninterface IntersectionObserverEntry {\n    readonly boundingClientRect: DOMRectReadOnly;\n    readonly intersectionRatio: number;\n    readonly intersectionRect: DOMRectReadOnly;\n    readonly isIntersecting: boolean;\n    readonly rootBounds: DOMRectReadOnly | null;\n    readonly target: Element;\n    readonly time: DOMHighResTimeStamp;\n}\n\ndeclare var IntersectionObserverEntry: {\n    prototype: IntersectionObserverEntry;\n    new(intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry;\n};\n\ninterface KHR_parallel_shader_compile {\n    readonly COMPLETION_STATUS_KHR: GLenum;\n}\n\n/** KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. */\ninterface KeyboardEvent extends UIEvent {\n    readonly altKey: boolean;\n    /** @deprecated */\n    readonly charCode: number;\n    readonly code: string;\n    readonly ctrlKey: boolean;\n    readonly isComposing: boolean;\n    readonly key: string;\n    /** @deprecated */\n    readonly keyCode: number;\n    readonly location: number;\n    readonly metaKey: boolean;\n    readonly repeat: boolean;\n    readonly shiftKey: boolean;\n    getModifierState(keyArg: string): boolean;\n    /** @deprecated */\n    initKeyboardEvent(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window | null, keyArg?: string, locationArg?: number, ctrlKey?: boolean, altKey?: boolean, shiftKey?: boolean, metaKey?: boolean): void;\n    readonly DOM_KEY_LOCATION_LEFT: number;\n    readonly DOM_KEY_LOCATION_NUMPAD: number;\n    readonly DOM_KEY_LOCATION_RIGHT: number;\n    readonly DOM_KEY_LOCATION_STANDARD: number;\n}\n\ndeclare var KeyboardEvent: {\n    prototype: KeyboardEvent;\n    new(type: string, eventInitDict?: KeyboardEventInit): KeyboardEvent;\n    readonly DOM_KEY_LOCATION_LEFT: number;\n    readonly DOM_KEY_LOCATION_NUMPAD: number;\n    readonly DOM_KEY_LOCATION_RIGHT: number;\n    readonly DOM_KEY_LOCATION_STANDARD: number;\n};\n\ninterface KeyframeEffect extends AnimationEffect {\n    composite: CompositeOperation;\n    iterationComposite: IterationCompositeOperation;\n    pseudoElement: string | null;\n    target: Element | null;\n    getKeyframes(): ComputedKeyframe[];\n    setKeyframes(keyframes: Keyframe[] | PropertyIndexedKeyframes | null): void;\n}\n\ndeclare var KeyframeEffect: {\n    prototype: KeyframeEffect;\n    new(target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions): KeyframeEffect;\n    new(source: KeyframeEffect): KeyframeEffect;\n};\n\ninterface LinkStyle {\n    readonly sheet: CSSStyleSheet | null;\n}\n\n/** The location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively. */\ninterface Location {\n    /** Returns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing context to the top-level browsing context. */\n    readonly ancestorOrigins: DOMStringList;\n    /**\n     * Returns the Location object's URL's fragment (includes leading \"#\" if non-empty).\n     *\n     * Can be set, to navigate to the same URL with a changed fragment (ignores leading \"#\").\n     */\n    hash: string;\n    /**\n     * Returns the Location object's URL's host and port (if different from the default port for the scheme).\n     *\n     * Can be set, to navigate to the same URL with a changed host and port.\n     */\n    host: string;\n    /**\n     * Returns the Location object's URL's host.\n     *\n     * Can be set, to navigate to the same URL with a changed host.\n     */\n    hostname: string;\n    /**\n     * Returns the Location object's URL.\n     *\n     * Can be set, to navigate to the given URL.\n     */\n    href: string;\n    toString(): string;\n    /** Returns the Location object's URL's origin. */\n    readonly origin: string;\n    /**\n     * Returns the Location object's URL's path.\n     *\n     * Can be set, to navigate to the same URL with a changed path.\n     */\n    pathname: string;\n    /**\n     * Returns the Location object's URL's port.\n     *\n     * Can be set, to navigate to the same URL with a changed port.\n     */\n    port: string;\n    /**\n     * Returns the Location object's URL's scheme.\n     *\n     * Can be set, to navigate to the same URL with a changed scheme.\n     */\n    protocol: string;\n    /**\n     * Returns the Location object's URL's query (includes leading \"?\" if non-empty).\n     *\n     * Can be set, to navigate to the same URL with a changed query (ignores leading \"?\").\n     */\n    search: string;\n    /** Navigates to the given URL. */\n    assign(url: string | URL): void;\n    /** Reloads the current page. */\n    reload(): void;\n    /** Removes the current page from the session history and navigates to the given URL. */\n    replace(url: string | URL): void;\n}\n\ndeclare var Location: {\n    prototype: Location;\n    new(): Location;\n};\n\n/** Available only in secure contexts. */\ninterface Lock {\n    readonly mode: LockMode;\n    readonly name: string;\n}\n\ndeclare var Lock: {\n    prototype: Lock;\n    new(): Lock;\n};\n\n/** Available only in secure contexts. */\ninterface LockManager {\n    query(): Promise<LockManagerSnapshot>;\n    request(name: string, callback: LockGrantedCallback): Promise<any>;\n    request(name: string, options: LockOptions, callback: LockGrantedCallback): Promise<any>;\n}\n\ndeclare var LockManager: {\n    prototype: LockManager;\n    new(): LockManager;\n};\n\ninterface MathMLElementEventMap extends ElementEventMap, DocumentAndElementEventHandlersEventMap, GlobalEventHandlersEventMap {\n}\n\ninterface MathMLElement extends Element, DocumentAndElementEventHandlers, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement {\n    addEventListener<K extends keyof MathMLElementEventMap>(type: K, listener: (this: MathMLElement, ev: MathMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MathMLElementEventMap>(type: K, listener: (this: MathMLElement, ev: MathMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MathMLElement: {\n    prototype: MathMLElement;\n    new(): MathMLElement;\n};\n\ninterface MediaCapabilities {\n    decodingInfo(configuration: MediaDecodingConfiguration): Promise<MediaCapabilitiesDecodingInfo>;\n    encodingInfo(configuration: MediaEncodingConfiguration): Promise<MediaCapabilitiesEncodingInfo>;\n}\n\ndeclare var MediaCapabilities: {\n    prototype: MediaCapabilities;\n    new(): MediaCapabilities;\n};\n\n/**\n * The MediaDevicesInfo interface contains information that describes a single media input or output device.\n * Available only in secure contexts.\n */\ninterface MediaDeviceInfo {\n    readonly deviceId: string;\n    readonly groupId: string;\n    readonly kind: MediaDeviceKind;\n    readonly label: string;\n    toJSON(): any;\n}\n\ndeclare var MediaDeviceInfo: {\n    prototype: MediaDeviceInfo;\n    new(): MediaDeviceInfo;\n};\n\ninterface MediaDevicesEventMap {\n    \"devicechange\": Event;\n}\n\n/**\n * Provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.\n * Available only in secure contexts.\n */\ninterface MediaDevices extends EventTarget {\n    ondevicechange: ((this: MediaDevices, ev: Event) => any) | null;\n    enumerateDevices(): Promise<MediaDeviceInfo[]>;\n    getDisplayMedia(constraints?: DisplayMediaStreamConstraints): Promise<MediaStream>;\n    getSupportedConstraints(): MediaTrackSupportedConstraints;\n    getUserMedia(constraints?: MediaStreamConstraints): Promise<MediaStream>;\n    addEventListener<K extends keyof MediaDevicesEventMap>(type: K, listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaDevicesEventMap>(type: K, listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MediaDevices: {\n    prototype: MediaDevices;\n    new(): MediaDevices;\n};\n\n/** A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio. */\ninterface MediaElementAudioSourceNode extends AudioNode {\n    readonly mediaElement: HTMLMediaElement;\n}\n\ndeclare var MediaElementAudioSourceNode: {\n    prototype: MediaElementAudioSourceNode;\n    new(context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode;\n};\n\ninterface MediaEncryptedEvent extends Event {\n    readonly initData: ArrayBuffer | null;\n    readonly initDataType: string;\n}\n\ndeclare var MediaEncryptedEvent: {\n    prototype: MediaEncryptedEvent;\n    new(type: string, eventInitDict?: MediaEncryptedEventInit): MediaEncryptedEvent;\n};\n\n/** An error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>. */\ninterface MediaError {\n    readonly code: number;\n    readonly message: string;\n    readonly MEDIA_ERR_ABORTED: number;\n    readonly MEDIA_ERR_DECODE: number;\n    readonly MEDIA_ERR_NETWORK: number;\n    readonly MEDIA_ERR_SRC_NOT_SUPPORTED: number;\n}\n\ndeclare var MediaError: {\n    prototype: MediaError;\n    new(): MediaError;\n    readonly MEDIA_ERR_ABORTED: number;\n    readonly MEDIA_ERR_DECODE: number;\n    readonly MEDIA_ERR_NETWORK: number;\n    readonly MEDIA_ERR_SRC_NOT_SUPPORTED: number;\n};\n\n/**\n * This EncryptedMediaExtensions API interface contains the content and related data when the content decryption module generates a message for the session.\n * Available only in secure contexts.\n */\ninterface MediaKeyMessageEvent extends Event {\n    readonly message: ArrayBuffer;\n    readonly messageType: MediaKeyMessageType;\n}\n\ndeclare var MediaKeyMessageEvent: {\n    prototype: MediaKeyMessageEvent;\n    new(type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent;\n};\n\ninterface MediaKeySessionEventMap {\n    \"keystatuseschange\": Event;\n    \"message\": MediaKeyMessageEvent;\n}\n\n/**\n * This EncryptedMediaExtensions API interface represents a context for message exchange with a content decryption module (CDM).\n * Available only in secure contexts.\n */\ninterface MediaKeySession extends EventTarget {\n    readonly closed: Promise<MediaKeySessionClosedReason>;\n    readonly expiration: number;\n    readonly keyStatuses: MediaKeyStatusMap;\n    onkeystatuseschange: ((this: MediaKeySession, ev: Event) => any) | null;\n    onmessage: ((this: MediaKeySession, ev: MediaKeyMessageEvent) => any) | null;\n    readonly sessionId: string;\n    close(): Promise<void>;\n    generateRequest(initDataType: string, initData: BufferSource): Promise<void>;\n    load(sessionId: string): Promise<boolean>;\n    remove(): Promise<void>;\n    update(response: BufferSource): Promise<void>;\n    addEventListener<K extends keyof MediaKeySessionEventMap>(type: K, listener: (this: MediaKeySession, ev: MediaKeySessionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaKeySessionEventMap>(type: K, listener: (this: MediaKeySession, ev: MediaKeySessionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MediaKeySession: {\n    prototype: MediaKeySession;\n    new(): MediaKeySession;\n};\n\n/**\n * This EncryptedMediaExtensions API interface is a read-only map of media key statuses by key IDs.\n * Available only in secure contexts.\n */\ninterface MediaKeyStatusMap {\n    readonly size: number;\n    get(keyId: BufferSource): MediaKeyStatus | undefined;\n    has(keyId: BufferSource): boolean;\n    forEach(callbackfn: (value: MediaKeyStatus, key: BufferSource, parent: MediaKeyStatusMap) => void, thisArg?: any): void;\n}\n\ndeclare var MediaKeyStatusMap: {\n    prototype: MediaKeyStatusMap;\n    new(): MediaKeyStatusMap;\n};\n\n/**\n * This EncryptedMediaExtensions API interface provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.\n * Available only in secure contexts.\n */\ninterface MediaKeySystemAccess {\n    readonly keySystem: string;\n    createMediaKeys(): Promise<MediaKeys>;\n    getConfiguration(): MediaKeySystemConfiguration;\n}\n\ndeclare var MediaKeySystemAccess: {\n    prototype: MediaKeySystemAccess;\n    new(): MediaKeySystemAccess;\n};\n\n/**\n * This EncryptedMediaExtensions API interface the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.\n * Available only in secure contexts.\n */\ninterface MediaKeys {\n    createSession(sessionType?: MediaKeySessionType): MediaKeySession;\n    setServerCertificate(serverCertificate: BufferSource): Promise<boolean>;\n}\n\ndeclare var MediaKeys: {\n    prototype: MediaKeys;\n    new(): MediaKeys;\n};\n\ninterface MediaList {\n    readonly length: number;\n    mediaText: string;\n    toString(): string;\n    appendMedium(medium: string): void;\n    deleteMedium(medium: string): void;\n    item(index: number): string | null;\n    [index: number]: string;\n}\n\ndeclare var MediaList: {\n    prototype: MediaList;\n    new(): MediaList;\n};\n\ninterface MediaMetadata {\n    album: string;\n    artist: string;\n    artwork: ReadonlyArray<MediaImage>;\n    title: string;\n}\n\ndeclare var MediaMetadata: {\n    prototype: MediaMetadata;\n    new(init?: MediaMetadataInit): MediaMetadata;\n};\n\ninterface MediaQueryListEventMap {\n    \"change\": MediaQueryListEvent;\n}\n\n/** Stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to true). */\ninterface MediaQueryList extends EventTarget {\n    readonly matches: boolean;\n    readonly media: string;\n    onchange: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n    /** @deprecated */\n    addListener(callback: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null): void;\n    /** @deprecated */\n    removeListener(callback: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null): void;\n    addEventListener<K extends keyof MediaQueryListEventMap>(type: K, listener: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaQueryListEventMap>(type: K, listener: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MediaQueryList: {\n    prototype: MediaQueryList;\n    new(): MediaQueryList;\n};\n\ninterface MediaQueryListEvent extends Event {\n    readonly matches: boolean;\n    readonly media: string;\n}\n\ndeclare var MediaQueryListEvent: {\n    prototype: MediaQueryListEvent;\n    new(type: string, eventInitDict?: MediaQueryListEventInit): MediaQueryListEvent;\n};\n\ninterface MediaRecorderEventMap {\n    \"dataavailable\": BlobEvent;\n    \"error\": MediaRecorderErrorEvent;\n    \"pause\": Event;\n    \"resume\": Event;\n    \"start\": Event;\n    \"stop\": Event;\n}\n\ninterface MediaRecorder extends EventTarget {\n    readonly audioBitsPerSecond: number;\n    readonly mimeType: string;\n    ondataavailable: ((this: MediaRecorder, ev: BlobEvent) => any) | null;\n    onerror: ((this: MediaRecorder, ev: MediaRecorderErrorEvent) => any) | null;\n    onpause: ((this: MediaRecorder, ev: Event) => any) | null;\n    onresume: ((this: MediaRecorder, ev: Event) => any) | null;\n    onstart: ((this: MediaRecorder, ev: Event) => any) | null;\n    onstop: ((this: MediaRecorder, ev: Event) => any) | null;\n    readonly state: RecordingState;\n    readonly stream: MediaStream;\n    readonly videoBitsPerSecond: number;\n    pause(): void;\n    requestData(): void;\n    resume(): void;\n    start(timeslice?: number): void;\n    stop(): void;\n    addEventListener<K extends keyof MediaRecorderEventMap>(type: K, listener: (this: MediaRecorder, ev: MediaRecorderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaRecorderEventMap>(type: K, listener: (this: MediaRecorder, ev: MediaRecorderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MediaRecorder: {\n    prototype: MediaRecorder;\n    new(stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder;\n    isTypeSupported(type: string): boolean;\n};\n\ninterface MediaRecorderErrorEvent extends Event {\n    readonly error: DOMException;\n}\n\ndeclare var MediaRecorderErrorEvent: {\n    prototype: MediaRecorderErrorEvent;\n    new(type: string, eventInitDict: MediaRecorderErrorEventInit): MediaRecorderErrorEvent;\n};\n\ninterface MediaSession {\n    metadata: MediaMetadata | null;\n    playbackState: MediaSessionPlaybackState;\n    setActionHandler(action: MediaSessionAction, handler: MediaSessionActionHandler | null): void;\n    setPositionState(state?: MediaPositionState): void;\n}\n\ndeclare var MediaSession: {\n    prototype: MediaSession;\n    new(): MediaSession;\n};\n\ninterface MediaSourceEventMap {\n    \"sourceclose\": Event;\n    \"sourceended\": Event;\n    \"sourceopen\": Event;\n}\n\n/** This Media Source Extensions API interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent. */\ninterface MediaSource extends EventTarget {\n    readonly activeSourceBuffers: SourceBufferList;\n    duration: number;\n    onsourceclose: ((this: MediaSource, ev: Event) => any) | null;\n    onsourceended: ((this: MediaSource, ev: Event) => any) | null;\n    onsourceopen: ((this: MediaSource, ev: Event) => any) | null;\n    readonly readyState: ReadyState;\n    readonly sourceBuffers: SourceBufferList;\n    addSourceBuffer(type: string): SourceBuffer;\n    clearLiveSeekableRange(): void;\n    endOfStream(error?: EndOfStreamError): void;\n    removeSourceBuffer(sourceBuffer: SourceBuffer): void;\n    setLiveSeekableRange(start: number, end: number): void;\n    addEventListener<K extends keyof MediaSourceEventMap>(type: K, listener: (this: MediaSource, ev: MediaSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaSourceEventMap>(type: K, listener: (this: MediaSource, ev: MediaSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MediaSource: {\n    prototype: MediaSource;\n    new(): MediaSource;\n    isTypeSupported(type: string): boolean;\n};\n\ninterface MediaStreamEventMap {\n    \"addtrack\": MediaStreamTrackEvent;\n    \"removetrack\": MediaStreamTrackEvent;\n}\n\n/** A stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack. */\ninterface MediaStream extends EventTarget {\n    readonly active: boolean;\n    readonly id: string;\n    onaddtrack: ((this: MediaStream, ev: MediaStreamTrackEvent) => any) | null;\n    onremovetrack: ((this: MediaStream, ev: MediaStreamTrackEvent) => any) | null;\n    addTrack(track: MediaStreamTrack): void;\n    clone(): MediaStream;\n    getAudioTracks(): MediaStreamTrack[];\n    getTrackById(trackId: string): MediaStreamTrack | null;\n    getTracks(): MediaStreamTrack[];\n    getVideoTracks(): MediaStreamTrack[];\n    removeTrack(track: MediaStreamTrack): void;\n    addEventListener<K extends keyof MediaStreamEventMap>(type: K, listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaStreamEventMap>(type: K, listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MediaStream: {\n    prototype: MediaStream;\n    new(): MediaStream;\n    new(stream: MediaStream): MediaStream;\n    new(tracks: MediaStreamTrack[]): MediaStream;\n};\n\ninterface MediaStreamAudioDestinationNode extends AudioNode {\n    readonly stream: MediaStream;\n}\n\ndeclare var MediaStreamAudioDestinationNode: {\n    prototype: MediaStreamAudioDestinationNode;\n    new(context: AudioContext, options?: AudioNodeOptions): MediaStreamAudioDestinationNode;\n};\n\n/** A type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs. */\ninterface MediaStreamAudioSourceNode extends AudioNode {\n    readonly mediaStream: MediaStream;\n}\n\ndeclare var MediaStreamAudioSourceNode: {\n    prototype: MediaStreamAudioSourceNode;\n    new(context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode;\n};\n\ninterface MediaStreamTrackEventMap {\n    \"ended\": Event;\n    \"mute\": Event;\n    \"unmute\": Event;\n}\n\n/** A single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well. */\ninterface MediaStreamTrack extends EventTarget {\n    contentHint: string;\n    enabled: boolean;\n    readonly id: string;\n    readonly kind: string;\n    readonly label: string;\n    readonly muted: boolean;\n    onended: ((this: MediaStreamTrack, ev: Event) => any) | null;\n    onmute: ((this: MediaStreamTrack, ev: Event) => any) | null;\n    onunmute: ((this: MediaStreamTrack, ev: Event) => any) | null;\n    readonly readyState: MediaStreamTrackState;\n    applyConstraints(constraints?: MediaTrackConstraints): Promise<void>;\n    clone(): MediaStreamTrack;\n    getCapabilities(): MediaTrackCapabilities;\n    getConstraints(): MediaTrackConstraints;\n    getSettings(): MediaTrackSettings;\n    stop(): void;\n    addEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MediaStreamTrack: {\n    prototype: MediaStreamTrack;\n    new(): MediaStreamTrack;\n};\n\n/** Events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur. */\ninterface MediaStreamTrackEvent extends Event {\n    readonly track: MediaStreamTrack;\n}\n\ndeclare var MediaStreamTrackEvent: {\n    prototype: MediaStreamTrackEvent;\n    new(type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent;\n};\n\n/** This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties. */\ninterface MessageChannel {\n    /** Returns the first MessagePort object. */\n    readonly port1: MessagePort;\n    /** Returns the second MessagePort object. */\n    readonly port2: MessagePort;\n}\n\ndeclare var MessageChannel: {\n    prototype: MessageChannel;\n    new(): MessageChannel;\n};\n\n/** A message received by a target object. */\ninterface MessageEvent<T = any> extends Event {\n    /** Returns the data of the message. */\n    readonly data: T;\n    /** Returns the last event ID string, for server-sent events. */\n    readonly lastEventId: string;\n    /** Returns the origin of the message, for server-sent events and cross-document messaging. */\n    readonly origin: string;\n    /** Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging. */\n    readonly ports: ReadonlyArray<MessagePort>;\n    /** Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects. */\n    readonly source: MessageEventSource | null;\n    /** @deprecated */\n    initMessageEvent(type: string, bubbles?: boolean, cancelable?: boolean, data?: any, origin?: string, lastEventId?: string, source?: MessageEventSource | null, ports?: MessagePort[]): void;\n}\n\ndeclare var MessageEvent: {\n    prototype: MessageEvent;\n    new<T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>;\n};\n\ninterface MessagePortEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\n/** This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other. */\ninterface MessagePort extends EventTarget {\n    onmessage: ((this: MessagePort, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: MessagePort, ev: MessageEvent) => any) | null;\n    /** Disconnects the port, so that it is no longer active. */\n    close(): void;\n    /**\n     * Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.\n     *\n     * Throws a \"DataCloneError\" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.\n     */\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n    /** Begins dispatching messages received on the port. */\n    start(): void;\n    addEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MessagePort: {\n    prototype: MessagePort;\n    new(): MessagePort;\n};\n\n/**\n * Provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object.\n * @deprecated\n */\ninterface MimeType {\n    /**\n     * Returns the MIME type's description.\n     * @deprecated\n     */\n    readonly description: string;\n    /**\n     * Returns the Plugin object that implements this MIME type.\n     * @deprecated\n     */\n    readonly enabledPlugin: Plugin;\n    /**\n     * Returns the MIME type's typical file extensions, in a comma-separated list.\n     * @deprecated\n     */\n    readonly suffixes: string;\n    /**\n     * Returns the MIME type.\n     * @deprecated\n     */\n    readonly type: string;\n}\n\n/** @deprecated */\ndeclare var MimeType: {\n    prototype: MimeType;\n    new(): MimeType;\n};\n\n/**\n * Returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes.\n * @deprecated\n */\ninterface MimeTypeArray {\n    /** @deprecated */\n    readonly length: number;\n    /** @deprecated */\n    item(index: number): MimeType | null;\n    /** @deprecated */\n    namedItem(name: string): MimeType | null;\n    [index: number]: MimeType;\n}\n\n/** @deprecated */\ndeclare var MimeTypeArray: {\n    prototype: MimeTypeArray;\n    new(): MimeTypeArray;\n};\n\n/** Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown. */\ninterface MouseEvent extends UIEvent {\n    readonly altKey: boolean;\n    readonly button: number;\n    readonly buttons: number;\n    readonly clientX: number;\n    readonly clientY: number;\n    readonly ctrlKey: boolean;\n    readonly metaKey: boolean;\n    readonly movementX: number;\n    readonly movementY: number;\n    readonly offsetX: number;\n    readonly offsetY: number;\n    readonly pageX: number;\n    readonly pageY: number;\n    readonly relatedTarget: EventTarget | null;\n    readonly screenX: number;\n    readonly screenY: number;\n    readonly shiftKey: boolean;\n    readonly x: number;\n    readonly y: number;\n    getModifierState(keyArg: string): boolean;\n    /** @deprecated */\n    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;\n}\n\ndeclare var MouseEvent: {\n    prototype: MouseEvent;\n    new(type: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\n/**\n * Provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.\n * @deprecated DOM4 [DOM] provides a new mechanism using a MutationObserver interface which addresses the use cases that mutation events solve, but in a more performant manner. Thus, this specification describes mutation events for reference and completeness of legacy behavior, but deprecates the use of the MutationEvent interface.\n */\ninterface MutationEvent extends Event {\n    /** @deprecated */\n    readonly attrChange: number;\n    /** @deprecated */\n    readonly attrName: string;\n    /** @deprecated */\n    readonly newValue: string;\n    /** @deprecated */\n    readonly prevValue: string;\n    /** @deprecated */\n    readonly relatedNode: Node | null;\n    /** @deprecated */\n    initMutationEvent(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, relatedNodeArg?: Node | null, prevValueArg?: string, newValueArg?: string, attrNameArg?: string, attrChangeArg?: number): void;\n    readonly ADDITION: number;\n    readonly MODIFICATION: number;\n    readonly REMOVAL: number;\n}\n\n/** @deprecated */\ndeclare var MutationEvent: {\n    prototype: MutationEvent;\n    new(): MutationEvent;\n    readonly ADDITION: number;\n    readonly MODIFICATION: number;\n    readonly REMOVAL: number;\n};\n\n/** Provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification. */\ninterface MutationObserver {\n    /** Stops observer from observing any mutations. Until the observe() method is used again, observer's callback will not be invoked. */\n    disconnect(): void;\n    /**\n     * Instructs the user agent to observe a given target (a node) and report any mutations based on the criteria given by options (an object).\n     *\n     * The options argument allows for setting mutation observation options via object members.\n     */\n    observe(target: Node, options?: MutationObserverInit): void;\n    /** Empties the record queue and returns what was in there. */\n    takeRecords(): MutationRecord[];\n}\n\ndeclare var MutationObserver: {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n};\n\n/** A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback. */\ninterface MutationRecord {\n    /** Return the nodes added and removed respectively. */\n    readonly addedNodes: NodeList;\n    /** Returns the local name of the changed attribute, and null otherwise. */\n    readonly attributeName: string | null;\n    /** Returns the namespace of the changed attribute, and null otherwise. */\n    readonly attributeNamespace: string | null;\n    /** Return the previous and next sibling respectively of the added or removed nodes, and null otherwise. */\n    readonly nextSibling: Node | null;\n    /** The return value depends on type. For \"attributes\", it is the value of the changed attribute before the change. For \"characterData\", it is the data of the changed node before the change. For \"childList\", it is null. */\n    readonly oldValue: string | null;\n    /** Return the previous and next sibling respectively of the added or removed nodes, and null otherwise. */\n    readonly previousSibling: Node | null;\n    /** Return the nodes added and removed respectively. */\n    readonly removedNodes: NodeList;\n    /** Returns the node the mutation affected, depending on the type. For \"attributes\", it is the element whose attribute changed. For \"characterData\", it is the CharacterData node. For \"childList\", it is the node whose children changed. */\n    readonly target: Node;\n    /** Returns \"attributes\" if it was an attribute mutation. \"characterData\" if it was a mutation to a CharacterData node. And \"childList\" if it was a mutation to the tree of nodes. */\n    readonly type: MutationRecordType;\n}\n\ndeclare var MutationRecord: {\n    prototype: MutationRecord;\n    new(): MutationRecord;\n};\n\n/** A collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array. */\ninterface NamedNodeMap {\n    readonly length: number;\n    getNamedItem(qualifiedName: string): Attr | null;\n    getNamedItemNS(namespace: string | null, localName: string): Attr | null;\n    item(index: number): Attr | null;\n    removeNamedItem(qualifiedName: string): Attr;\n    removeNamedItemNS(namespace: string | null, localName: string): Attr;\n    setNamedItem(attr: Attr): Attr | null;\n    setNamedItemNS(attr: Attr): Attr | null;\n    [index: number]: Attr;\n}\n\ndeclare var NamedNodeMap: {\n    prototype: NamedNodeMap;\n    new(): NamedNodeMap;\n};\n\n/** Available only in secure contexts. */\ninterface NavigationPreloadManager {\n    disable(): Promise<void>;\n    enable(): Promise<void>;\n    getState(): Promise<NavigationPreloadState>;\n    setHeaderValue(value: string): Promise<void>;\n}\n\ndeclare var NavigationPreloadManager: {\n    prototype: NavigationPreloadManager;\n    new(): NavigationPreloadManager;\n};\n\n/** The state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities. */\ninterface Navigator extends NavigatorAutomationInformation, NavigatorConcurrentHardware, NavigatorContentUtils, NavigatorCookies, NavigatorID, NavigatorLanguage, NavigatorLocks, NavigatorOnLine, NavigatorPlugins, NavigatorStorage {\n    /** Available only in secure contexts. */\n    readonly clipboard: Clipboard;\n    /** Available only in secure contexts. */\n    readonly credentials: CredentialsContainer;\n    readonly doNotTrack: string | null;\n    readonly geolocation: Geolocation;\n    readonly maxTouchPoints: number;\n    readonly mediaCapabilities: MediaCapabilities;\n    /** Available only in secure contexts. */\n    readonly mediaDevices: MediaDevices;\n    readonly mediaSession: MediaSession;\n    readonly permissions: Permissions;\n    /** Available only in secure contexts. */\n    readonly serviceWorker: ServiceWorkerContainer;\n    /** Available only in secure contexts. */\n    canShare(data?: ShareData): boolean;\n    getGamepads(): (Gamepad | null)[];\n    /** Available only in secure contexts. */\n    requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: MediaKeySystemConfiguration[]): Promise<MediaKeySystemAccess>;\n    sendBeacon(url: string | URL, data?: BodyInit | null): boolean;\n    /** Available only in secure contexts. */\n    share(data?: ShareData): Promise<void>;\n    vibrate(pattern: VibratePattern): boolean;\n}\n\ndeclare var Navigator: {\n    prototype: Navigator;\n    new(): Navigator;\n};\n\ninterface NavigatorAutomationInformation {\n    readonly webdriver: boolean;\n}\n\ninterface NavigatorConcurrentHardware {\n    readonly hardwareConcurrency: number;\n}\n\ninterface NavigatorContentUtils {\n    /** Available only in secure contexts. */\n    registerProtocolHandler(scheme: string, url: string | URL): void;\n}\n\ninterface NavigatorCookies {\n    readonly cookieEnabled: boolean;\n}\n\ninterface NavigatorID {\n    /** @deprecated */\n    readonly appCodeName: string;\n    /** @deprecated */\n    readonly appName: string;\n    /** @deprecated */\n    readonly appVersion: string;\n    readonly platform: string;\n    /** @deprecated */\n    readonly product: string;\n    /** @deprecated */\n    readonly productSub: string;\n    readonly userAgent: string;\n    readonly vendor: string;\n    /** @deprecated */\n    readonly vendorSub: string;\n}\n\ninterface NavigatorLanguage {\n    readonly language: string;\n    readonly languages: ReadonlyArray<string>;\n}\n\n/** Available only in secure contexts. */\ninterface NavigatorLocks {\n    readonly locks: LockManager;\n}\n\ninterface NavigatorOnLine {\n    readonly onLine: boolean;\n}\n\ninterface NavigatorPlugins {\n    /** @deprecated */\n    readonly mimeTypes: MimeTypeArray;\n    readonly pdfViewerEnabled: boolean;\n    /** @deprecated */\n    readonly plugins: PluginArray;\n    /** @deprecated */\n    javaEnabled(): boolean;\n}\n\n/** Available only in secure contexts. */\ninterface NavigatorStorage {\n    readonly storage: StorageManager;\n}\n\n/** Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way. */\ninterface Node extends EventTarget {\n    /** Returns node's node document's document base URL. */\n    readonly baseURI: string;\n    /** Returns the children. */\n    readonly childNodes: NodeListOf<ChildNode>;\n    /** Returns the first child. */\n    readonly firstChild: ChildNode | null;\n    /** Returns true if node is connected and false otherwise. */\n    readonly isConnected: boolean;\n    /** Returns the last child. */\n    readonly lastChild: ChildNode | null;\n    /** Returns the next sibling. */\n    readonly nextSibling: ChildNode | null;\n    /** Returns a string appropriate for the type of node. */\n    readonly nodeName: string;\n    /** Returns the type of node. */\n    readonly nodeType: number;\n    nodeValue: string | null;\n    /** Returns the node document. Returns null for documents. */\n    readonly ownerDocument: Document | null;\n    /** Returns the parent element. */\n    readonly parentElement: HTMLElement | null;\n    /** Returns the parent. */\n    readonly parentNode: ParentNode | null;\n    /** Returns the previous sibling. */\n    readonly previousSibling: ChildNode | null;\n    textContent: string | null;\n    appendChild<T extends Node>(node: T): T;\n    /** Returns a copy of node. If deep is true, the copy also includes the node's descendants. */\n    cloneNode(deep?: boolean): Node;\n    /** Returns a bitmask indicating the position of other relative to node. */\n    compareDocumentPosition(other: Node): number;\n    /** Returns true if other is an inclusive descendant of node, and false otherwise. */\n    contains(other: Node | null): boolean;\n    /** Returns node's root. */\n    getRootNode(options?: GetRootNodeOptions): Node;\n    /** Returns whether node has children. */\n    hasChildNodes(): boolean;\n    insertBefore<T extends Node>(node: T, child: Node | null): T;\n    isDefaultNamespace(namespace: string | null): boolean;\n    /** Returns whether node and otherNode have the same properties. */\n    isEqualNode(otherNode: Node | null): boolean;\n    isSameNode(otherNode: Node | null): boolean;\n    lookupNamespaceURI(prefix: string | null): string | null;\n    lookupPrefix(namespace: string | null): string | null;\n    /** Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes. */\n    normalize(): void;\n    removeChild<T extends Node>(child: T): T;\n    replaceChild<T extends Node>(node: Node, child: T): T;\n    readonly ATTRIBUTE_NODE: number;\n    /** node is a CDATASection node. */\n    readonly CDATA_SECTION_NODE: number;\n    /** node is a Comment node. */\n    readonly COMMENT_NODE: number;\n    /** node is a DocumentFragment node. */\n    readonly DOCUMENT_FRAGMENT_NODE: number;\n    /** node is a document. */\n    readonly DOCUMENT_NODE: number;\n    /** Set when other is a descendant of node. */\n    readonly DOCUMENT_POSITION_CONTAINED_BY: number;\n    /** Set when other is an ancestor of node. */\n    readonly DOCUMENT_POSITION_CONTAINS: number;\n    /** Set when node and other are not in the same tree. */\n    readonly DOCUMENT_POSITION_DISCONNECTED: number;\n    /** Set when other is following node. */\n    readonly DOCUMENT_POSITION_FOLLOWING: number;\n    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n    /** Set when other is preceding node. */\n    readonly DOCUMENT_POSITION_PRECEDING: number;\n    /** node is a doctype. */\n    readonly DOCUMENT_TYPE_NODE: number;\n    /** node is an element. */\n    readonly ELEMENT_NODE: number;\n    readonly ENTITY_NODE: number;\n    readonly ENTITY_REFERENCE_NODE: number;\n    readonly NOTATION_NODE: number;\n    /** node is a ProcessingInstruction node. */\n    readonly PROCESSING_INSTRUCTION_NODE: number;\n    /** node is a Text node. */\n    readonly TEXT_NODE: number;\n}\n\ndeclare var Node: {\n    prototype: Node;\n    new(): Node;\n    readonly ATTRIBUTE_NODE: number;\n    /** node is a CDATASection node. */\n    readonly CDATA_SECTION_NODE: number;\n    /** node is a Comment node. */\n    readonly COMMENT_NODE: number;\n    /** node is a DocumentFragment node. */\n    readonly DOCUMENT_FRAGMENT_NODE: number;\n    /** node is a document. */\n    readonly DOCUMENT_NODE: number;\n    /** Set when other is a descendant of node. */\n    readonly DOCUMENT_POSITION_CONTAINED_BY: number;\n    /** Set when other is an ancestor of node. */\n    readonly DOCUMENT_POSITION_CONTAINS: number;\n    /** Set when node and other are not in the same tree. */\n    readonly DOCUMENT_POSITION_DISCONNECTED: number;\n    /** Set when other is following node. */\n    readonly DOCUMENT_POSITION_FOLLOWING: number;\n    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n    /** Set when other is preceding node. */\n    readonly DOCUMENT_POSITION_PRECEDING: number;\n    /** node is a doctype. */\n    readonly DOCUMENT_TYPE_NODE: number;\n    /** node is an element. */\n    readonly ELEMENT_NODE: number;\n    readonly ENTITY_NODE: number;\n    readonly ENTITY_REFERENCE_NODE: number;\n    readonly NOTATION_NODE: number;\n    /** node is a ProcessingInstruction node. */\n    readonly PROCESSING_INSTRUCTION_NODE: number;\n    /** node is a Text node. */\n    readonly TEXT_NODE: number;\n};\n\n/** An iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order. */\ninterface NodeIterator {\n    readonly filter: NodeFilter | null;\n    readonly pointerBeforeReferenceNode: boolean;\n    readonly referenceNode: Node;\n    readonly root: Node;\n    readonly whatToShow: number;\n    /** @deprecated */\n    detach(): void;\n    nextNode(): Node | null;\n    previousNode(): Node | null;\n}\n\ndeclare var NodeIterator: {\n    prototype: NodeIterator;\n    new(): NodeIterator;\n};\n\n/** NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll(). */\ninterface NodeList {\n    /** Returns the number of nodes in the collection. */\n    readonly length: number;\n    /** Returns the node with index index from the collection. The nodes are sorted in tree order. */\n    item(index: number): Node | null;\n    /**\n     * Performs the specified action for each node in an list.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: Node, key: number, parent: NodeList) => void, thisArg?: any): void;\n    [index: number]: Node;\n}\n\ndeclare var NodeList: {\n    prototype: NodeList;\n    new(): NodeList;\n};\n\ninterface NodeListOf<TNode extends Node> extends NodeList {\n    item(index: number): TNode;\n    /**\n     * Performs the specified action for each node in an list.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: TNode, key: number, parent: NodeListOf<TNode>) => void, thisArg?: any): void;\n    [index: number]: TNode;\n}\n\ninterface NonDocumentTypeChildNode {\n    /** Returns the first following sibling that is an element, and null otherwise. */\n    readonly nextElementSibling: Element | null;\n    /** Returns the first preceding sibling that is an element, and null otherwise. */\n    readonly previousElementSibling: Element | null;\n}\n\ninterface NonElementParentNode {\n    /** Returns the first element within node's descendants whose ID is elementId. */\n    getElementById(elementId: string): Element | null;\n}\n\ninterface NotificationEventMap {\n    \"click\": Event;\n    \"close\": Event;\n    \"error\": Event;\n    \"show\": Event;\n}\n\n/** This Notifications API interface is used to configure and display desktop notifications to the user. */\ninterface Notification extends EventTarget {\n    readonly body: string;\n    readonly data: any;\n    readonly dir: NotificationDirection;\n    readonly icon: string;\n    readonly lang: string;\n    onclick: ((this: Notification, ev: Event) => any) | null;\n    onclose: ((this: Notification, ev: Event) => any) | null;\n    onerror: ((this: Notification, ev: Event) => any) | null;\n    onshow: ((this: Notification, ev: Event) => any) | null;\n    readonly tag: string;\n    readonly title: string;\n    close(): void;\n    addEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Notification: {\n    prototype: Notification;\n    new(title: string, options?: NotificationOptions): Notification;\n    readonly permission: NotificationPermission;\n    requestPermission(deprecatedCallback?: NotificationPermissionCallback): Promise<NotificationPermission>;\n};\n\n/** The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements(). */\ninterface OES_element_index_uint {\n}\n\ninterface OES_fbo_render_mipmap {\n}\n\n/** The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth. */\ninterface OES_standard_derivatives {\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GLenum;\n}\n\n/** The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures. */\ninterface OES_texture_float {\n}\n\n/** The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures. */\ninterface OES_texture_float_linear {\n}\n\n/** The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components. */\ninterface OES_texture_half_float {\n    readonly HALF_FLOAT_OES: GLenum;\n}\n\n/** The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures. */\ninterface OES_texture_half_float_linear {\n}\n\ninterface OES_vertex_array_object {\n    bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\n    createVertexArrayOES(): WebGLVertexArrayObjectOES | null;\n    deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\n    isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): GLboolean;\n    readonly VERTEX_ARRAY_BINDING_OES: GLenum;\n}\n\ninterface OVR_multiview2 {\n    framebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, baseViewIndex: GLint, numViews: GLsizei): void;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: GLenum;\n    readonly MAX_VIEWS_OVR: GLenum;\n}\n\n/** The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface. */\ninterface OfflineAudioCompletionEvent extends Event {\n    readonly renderedBuffer: AudioBuffer;\n}\n\ndeclare var OfflineAudioCompletionEvent: {\n    prototype: OfflineAudioCompletionEvent;\n    new(type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent;\n};\n\ninterface OfflineAudioContextEventMap extends BaseAudioContextEventMap {\n    \"complete\": OfflineAudioCompletionEvent;\n}\n\n/** An AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer. */\ninterface OfflineAudioContext extends BaseAudioContext {\n    readonly length: number;\n    oncomplete: ((this: OfflineAudioContext, ev: OfflineAudioCompletionEvent) => any) | null;\n    resume(): Promise<void>;\n    startRendering(): Promise<AudioBuffer>;\n    suspend(suspendTime: number): Promise<void>;\n    addEventListener<K extends keyof OfflineAudioContextEventMap>(type: K, listener: (this: OfflineAudioContext, ev: OfflineAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof OfflineAudioContextEventMap>(type: K, listener: (this: OfflineAudioContext, ev: OfflineAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var OfflineAudioContext: {\n    prototype: OfflineAudioContext;\n    new(contextOptions: OfflineAudioContextOptions): OfflineAudioContext;\n    new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext;\n};\n\n/** The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone. */\ninterface OscillatorNode extends AudioScheduledSourceNode {\n    readonly detune: AudioParam;\n    readonly frequency: AudioParam;\n    type: OscillatorType;\n    setPeriodicWave(periodicWave: PeriodicWave): void;\n    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var OscillatorNode: {\n    prototype: OscillatorNode;\n    new(context: BaseAudioContext, options?: OscillatorOptions): OscillatorNode;\n};\n\ninterface OverconstrainedError extends Error {\n    readonly constraint: string;\n}\n\ndeclare var OverconstrainedError: {\n    prototype: OverconstrainedError;\n    new(constraint: string, message?: string): OverconstrainedError;\n};\n\n/** The PageTransitionEvent is fired when a document is being loaded or unloaded. */\ninterface PageTransitionEvent extends Event {\n    /**\n     * For the pageshow event, returns false if the page is newly being loaded (and the load event will fire). Otherwise, returns true.\n     *\n     * For the pagehide event, returns false if the page is going away for the last time. Otherwise, returns true, meaning that (if nothing conspires to make the page unsalvageable) the page might be reused if the user navigates back to this page.\n     *\n     * Things that can cause the page to be unsalvageable include:\n     *\n     * The user agent decided to not keep the Document alive in a session history entry after unload\n     * Having iframes that are not salvageable\n     * Active WebSocket objects\n     * Aborting a Document\n     */\n    readonly persisted: boolean;\n}\n\ndeclare var PageTransitionEvent: {\n    prototype: PageTransitionEvent;\n    new(type: string, eventInitDict?: PageTransitionEventInit): PageTransitionEvent;\n};\n\n/** A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels! */\ninterface PannerNode extends AudioNode {\n    coneInnerAngle: number;\n    coneOuterAngle: number;\n    coneOuterGain: number;\n    distanceModel: DistanceModelType;\n    maxDistance: number;\n    readonly orientationX: AudioParam;\n    readonly orientationY: AudioParam;\n    readonly orientationZ: AudioParam;\n    panningModel: PanningModelType;\n    readonly positionX: AudioParam;\n    readonly positionY: AudioParam;\n    readonly positionZ: AudioParam;\n    refDistance: number;\n    rolloffFactor: number;\n    /** @deprecated */\n    setOrientation(x: number, y: number, z: number): void;\n    /** @deprecated */\n    setPosition(x: number, y: number, z: number): void;\n}\n\ndeclare var PannerNode: {\n    prototype: PannerNode;\n    new(context: BaseAudioContext, options?: PannerOptions): PannerNode;\n};\n\ninterface ParentNode extends Node {\n    readonly childElementCount: number;\n    /** Returns the child elements. */\n    readonly children: HTMLCollection;\n    /** Returns the first child that is an element, and null otherwise. */\n    readonly firstElementChild: Element | null;\n    /** Returns the last child that is an element, and null otherwise. */\n    readonly lastElementChild: Element | null;\n    /**\n     * Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n     *\n     * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n     */\n    append(...nodes: (Node | string)[]): void;\n    /**\n     * Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n     *\n     * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n     */\n    prepend(...nodes: (Node | string)[]): void;\n    /** Returns the first element that is a descendant of node that matches selectors. */\n    querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;\n    querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;\n    querySelector<E extends Element = Element>(selectors: string): E | null;\n    /** Returns all element descendants of node that match selectors. */\n    querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;\n    querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;\n    querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;\n    /**\n     * Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n     *\n     * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n     */\n    replaceChildren(...nodes: (Node | string)[]): void;\n}\n\n/** This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired. */\ninterface Path2D extends CanvasPath {\n    /** Adds to the path the path given by the argument. */\n    addPath(path: Path2D, transform?: DOMMatrix2DInit): void;\n}\n\ndeclare var Path2D: {\n    prototype: Path2D;\n    new(path?: Path2D | string): Path2D;\n};\n\n/** Available only in secure contexts. */\ninterface PaymentMethodChangeEvent extends PaymentRequestUpdateEvent {\n    readonly methodDetails: any;\n    readonly methodName: string;\n}\n\ndeclare var PaymentMethodChangeEvent: {\n    prototype: PaymentMethodChangeEvent;\n    new(type: string, eventInitDict?: PaymentMethodChangeEventInit): PaymentMethodChangeEvent;\n};\n\ninterface PaymentRequestEventMap {\n    \"paymentmethodchange\": Event;\n}\n\n/**\n * This Payment Request API interface is the primary access point into the API, and lets web content and apps accept payments from the end user.\n * Available only in secure contexts.\n */\ninterface PaymentRequest extends EventTarget {\n    readonly id: string;\n    onpaymentmethodchange: ((this: PaymentRequest, ev: Event) => any) | null;\n    abort(): Promise<void>;\n    canMakePayment(): Promise<boolean>;\n    show(detailsPromise?: PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate>): Promise<PaymentResponse>;\n    addEventListener<K extends keyof PaymentRequestEventMap>(type: K, listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof PaymentRequestEventMap>(type: K, listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var PaymentRequest: {\n    prototype: PaymentRequest;\n    new(methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest;\n};\n\n/**\n * This Payment Request API interface enables a web page to update the details of a PaymentRequest in response to a user action.\n * Available only in secure contexts.\n */\ninterface PaymentRequestUpdateEvent extends Event {\n    updateWith(detailsPromise: PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate>): void;\n}\n\ndeclare var PaymentRequestUpdateEvent: {\n    prototype: PaymentRequestUpdateEvent;\n    new(type: string, eventInitDict?: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent;\n};\n\n/**\n * This Payment Request API interface is returned after a user selects a payment method and approves a payment request.\n * Available only in secure contexts.\n */\ninterface PaymentResponse extends EventTarget {\n    readonly details: any;\n    readonly methodName: string;\n    readonly requestId: string;\n    complete(result?: PaymentComplete): Promise<void>;\n    retry(errorFields?: PaymentValidationErrors): Promise<void>;\n    toJSON(): any;\n}\n\ndeclare var PaymentResponse: {\n    prototype: PaymentResponse;\n    new(): PaymentResponse;\n};\n\ninterface PerformanceEventMap {\n    \"resourcetimingbufferfull\": Event;\n}\n\n/** Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API. */\ninterface Performance extends EventTarget {\n    readonly eventCounts: EventCounts;\n    /** @deprecated */\n    readonly navigation: PerformanceNavigation;\n    onresourcetimingbufferfull: ((this: Performance, ev: Event) => any) | null;\n    readonly timeOrigin: DOMHighResTimeStamp;\n    /** @deprecated */\n    readonly timing: PerformanceTiming;\n    clearMarks(markName?: string): void;\n    clearMeasures(measureName?: string): void;\n    clearResourceTimings(): void;\n    getEntries(): PerformanceEntryList;\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\n    getEntriesByType(type: string): PerformanceEntryList;\n    mark(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;\n    measure(measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string): PerformanceMeasure;\n    now(): DOMHighResTimeStamp;\n    setResourceTimingBufferSize(maxSize: number): void;\n    toJSON(): any;\n    addEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Performance: {\n    prototype: Performance;\n    new(): Performance;\n};\n\n/** Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image). */\ninterface PerformanceEntry {\n    readonly duration: DOMHighResTimeStamp;\n    readonly entryType: string;\n    readonly name: string;\n    readonly startTime: DOMHighResTimeStamp;\n    toJSON(): any;\n}\n\ndeclare var PerformanceEntry: {\n    prototype: PerformanceEntry;\n    new(): PerformanceEntry;\n};\n\ninterface PerformanceEventTiming extends PerformanceEntry {\n    readonly cancelable: boolean;\n    readonly processingEnd: DOMHighResTimeStamp;\n    readonly processingStart: DOMHighResTimeStamp;\n    readonly target: Node | null;\n    toJSON(): any;\n}\n\ndeclare var PerformanceEventTiming: {\n    prototype: PerformanceEventTiming;\n    new(): PerformanceEventTiming;\n};\n\n/** PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of \"mark\". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline. */\ninterface PerformanceMark extends PerformanceEntry {\n    readonly detail: any;\n}\n\ndeclare var PerformanceMark: {\n    prototype: PerformanceMark;\n    new(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;\n};\n\n/** PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of \"measure\". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline. */\ninterface PerformanceMeasure extends PerformanceEntry {\n    readonly detail: any;\n}\n\ndeclare var PerformanceMeasure: {\n    prototype: PerformanceMeasure;\n    new(): PerformanceMeasure;\n};\n\n/**\n * The legacy PerformanceNavigation interface represents information about how the navigation to the current document was done.\n * @deprecated This interface is deprecated in the Navigation Timing Level 2 specification. Please use the PerformanceNavigationTiming interface instead.\n */\ninterface PerformanceNavigation {\n    /** @deprecated */\n    readonly redirectCount: number;\n    /** @deprecated */\n    readonly type: number;\n    /** @deprecated */\n    toJSON(): any;\n    readonly TYPE_BACK_FORWARD: number;\n    readonly TYPE_NAVIGATE: number;\n    readonly TYPE_RELOAD: number;\n    readonly TYPE_RESERVED: number;\n}\n\n/** @deprecated */\ndeclare var PerformanceNavigation: {\n    prototype: PerformanceNavigation;\n    new(): PerformanceNavigation;\n    readonly TYPE_BACK_FORWARD: number;\n    readonly TYPE_NAVIGATE: number;\n    readonly TYPE_RELOAD: number;\n    readonly TYPE_RESERVED: number;\n};\n\n/** Provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document. */\ninterface PerformanceNavigationTiming extends PerformanceResourceTiming {\n    readonly domComplete: DOMHighResTimeStamp;\n    readonly domContentLoadedEventEnd: DOMHighResTimeStamp;\n    readonly domContentLoadedEventStart: DOMHighResTimeStamp;\n    readonly domInteractive: DOMHighResTimeStamp;\n    readonly loadEventEnd: DOMHighResTimeStamp;\n    readonly loadEventStart: DOMHighResTimeStamp;\n    readonly redirectCount: number;\n    readonly type: NavigationTimingType;\n    readonly unloadEventEnd: DOMHighResTimeStamp;\n    readonly unloadEventStart: DOMHighResTimeStamp;\n    toJSON(): any;\n}\n\ndeclare var PerformanceNavigationTiming: {\n    prototype: PerformanceNavigationTiming;\n    new(): PerformanceNavigationTiming;\n};\n\ninterface PerformanceObserver {\n    disconnect(): void;\n    observe(options?: PerformanceObserverInit): void;\n    takeRecords(): PerformanceEntryList;\n}\n\ndeclare var PerformanceObserver: {\n    prototype: PerformanceObserver;\n    new(callback: PerformanceObserverCallback): PerformanceObserver;\n    readonly supportedEntryTypes: ReadonlyArray<string>;\n};\n\ninterface PerformanceObserverEntryList {\n    getEntries(): PerformanceEntryList;\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\n    getEntriesByType(type: string): PerformanceEntryList;\n}\n\ndeclare var PerformanceObserverEntryList: {\n    prototype: PerformanceObserverEntryList;\n    new(): PerformanceObserverEntryList;\n};\n\ninterface PerformancePaintTiming extends PerformanceEntry {\n}\n\ndeclare var PerformancePaintTiming: {\n    prototype: PerformancePaintTiming;\n    new(): PerformancePaintTiming;\n};\n\n/** Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script. */\ninterface PerformanceResourceTiming extends PerformanceEntry {\n    readonly connectEnd: DOMHighResTimeStamp;\n    readonly connectStart: DOMHighResTimeStamp;\n    readonly decodedBodySize: number;\n    readonly domainLookupEnd: DOMHighResTimeStamp;\n    readonly domainLookupStart: DOMHighResTimeStamp;\n    readonly encodedBodySize: number;\n    readonly fetchStart: DOMHighResTimeStamp;\n    readonly initiatorType: string;\n    readonly nextHopProtocol: string;\n    readonly redirectEnd: DOMHighResTimeStamp;\n    readonly redirectStart: DOMHighResTimeStamp;\n    readonly requestStart: DOMHighResTimeStamp;\n    readonly responseEnd: DOMHighResTimeStamp;\n    readonly responseStart: DOMHighResTimeStamp;\n    readonly secureConnectionStart: DOMHighResTimeStamp;\n    readonly serverTiming: ReadonlyArray<PerformanceServerTiming>;\n    readonly transferSize: number;\n    readonly workerStart: DOMHighResTimeStamp;\n    toJSON(): any;\n}\n\ndeclare var PerformanceResourceTiming: {\n    prototype: PerformanceResourceTiming;\n    new(): PerformanceResourceTiming;\n};\n\ninterface PerformanceServerTiming {\n    readonly description: string;\n    readonly duration: DOMHighResTimeStamp;\n    readonly name: string;\n    toJSON(): any;\n}\n\ndeclare var PerformanceServerTiming: {\n    prototype: PerformanceServerTiming;\n    new(): PerformanceServerTiming;\n};\n\n/**\n * A legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a PerformanceTiming object describing your page using the window.performance.timing property.\n * @deprecated This interface is deprecated in the Navigation Timing Level 2 specification. Please use the PerformanceNavigationTiming interface instead.\n */\ninterface PerformanceTiming {\n    /** @deprecated */\n    readonly connectEnd: number;\n    /** @deprecated */\n    readonly connectStart: number;\n    /** @deprecated */\n    readonly domComplete: number;\n    /** @deprecated */\n    readonly domContentLoadedEventEnd: number;\n    /** @deprecated */\n    readonly domContentLoadedEventStart: number;\n    /** @deprecated */\n    readonly domInteractive: number;\n    /** @deprecated */\n    readonly domLoading: number;\n    /** @deprecated */\n    readonly domainLookupEnd: number;\n    /** @deprecated */\n    readonly domainLookupStart: number;\n    /** @deprecated */\n    readonly fetchStart: number;\n    /** @deprecated */\n    readonly loadEventEnd: number;\n    /** @deprecated */\n    readonly loadEventStart: number;\n    /** @deprecated */\n    readonly navigationStart: number;\n    /** @deprecated */\n    readonly redirectEnd: number;\n    /** @deprecated */\n    readonly redirectStart: number;\n    /** @deprecated */\n    readonly requestStart: number;\n    /** @deprecated */\n    readonly responseEnd: number;\n    /** @deprecated */\n    readonly responseStart: number;\n    /** @deprecated */\n    readonly secureConnectionStart: number;\n    /** @deprecated */\n    readonly unloadEventEnd: number;\n    /** @deprecated */\n    readonly unloadEventStart: number;\n    /** @deprecated */\n    toJSON(): any;\n}\n\n/** @deprecated */\ndeclare var PerformanceTiming: {\n    prototype: PerformanceTiming;\n    new(): PerformanceTiming;\n};\n\n/** PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave(). */\ninterface PeriodicWave {\n}\n\ndeclare var PeriodicWave: {\n    prototype: PeriodicWave;\n    new(context: BaseAudioContext, options?: PeriodicWaveOptions): PeriodicWave;\n};\n\ninterface PermissionStatusEventMap {\n    \"change\": Event;\n}\n\ninterface PermissionStatus extends EventTarget {\n    onchange: ((this: PermissionStatus, ev: Event) => any) | null;\n    readonly state: PermissionState;\n    addEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var PermissionStatus: {\n    prototype: PermissionStatus;\n    new(): PermissionStatus;\n};\n\ninterface Permissions {\n    query(permissionDesc: PermissionDescriptor): Promise<PermissionStatus>;\n}\n\ndeclare var Permissions: {\n    prototype: Permissions;\n    new(): Permissions;\n};\n\ninterface PictureInPictureWindowEventMap {\n    \"resize\": Event;\n}\n\ninterface PictureInPictureWindow extends EventTarget {\n    readonly height: number;\n    onresize: ((this: PictureInPictureWindow, ev: Event) => any) | null;\n    readonly width: number;\n    addEventListener<K extends keyof PictureInPictureWindowEventMap>(type: K, listener: (this: PictureInPictureWindow, ev: PictureInPictureWindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof PictureInPictureWindowEventMap>(type: K, listener: (this: PictureInPictureWindow, ev: PictureInPictureWindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var PictureInPictureWindow: {\n    prototype: PictureInPictureWindow;\n    new(): PictureInPictureWindow;\n};\n\n/**\n * Provides information about a browser plugin.\n * @deprecated\n */\ninterface Plugin {\n    /**\n     * Returns the plugin's description.\n     * @deprecated\n     */\n    readonly description: string;\n    /**\n     * Returns the plugin library's filename, if applicable on the current platform.\n     * @deprecated\n     */\n    readonly filename: string;\n    /**\n     * Returns the number of MIME types, represented by MimeType objects, supported by the plugin.\n     * @deprecated\n     */\n    readonly length: number;\n    /**\n     * Returns the plugin's name.\n     * @deprecated\n     */\n    readonly name: string;\n    /**\n     * Returns the specified MimeType object.\n     * @deprecated\n     */\n    item(index: number): MimeType | null;\n    /** @deprecated */\n    namedItem(name: string): MimeType | null;\n    [index: number]: MimeType;\n}\n\n/** @deprecated */\ndeclare var Plugin: {\n    prototype: Plugin;\n    new(): Plugin;\n};\n\n/**\n * Used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\"name\") methods.\n * @deprecated\n */\ninterface PluginArray {\n    /** @deprecated */\n    readonly length: number;\n    /** @deprecated */\n    item(index: number): Plugin | null;\n    /** @deprecated */\n    namedItem(name: string): Plugin | null;\n    /** @deprecated */\n    refresh(): void;\n    [index: number]: Plugin;\n}\n\n/** @deprecated */\ndeclare var PluginArray: {\n    prototype: PluginArray;\n    new(): PluginArray;\n};\n\n/** The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc. */\ninterface PointerEvent extends MouseEvent {\n    readonly height: number;\n    readonly isPrimary: boolean;\n    readonly pointerId: number;\n    readonly pointerType: string;\n    readonly pressure: number;\n    readonly tangentialPressure: number;\n    readonly tiltX: number;\n    readonly tiltY: number;\n    readonly twist: number;\n    readonly width: number;\n    /** Available only in secure contexts. */\n    getCoalescedEvents(): PointerEvent[];\n    getPredictedEvents(): PointerEvent[];\n}\n\ndeclare var PointerEvent: {\n    prototype: PointerEvent;\n    new(type: string, eventInitDict?: PointerEventInit): PointerEvent;\n};\n\n/** PopStateEvent is an event handler for the popstate event on the window. */\ninterface PopStateEvent extends Event {\n    /** Returns a copy of the information that was provided to pushState() or replaceState(). */\n    readonly state: any;\n}\n\ndeclare var PopStateEvent: {\n    prototype: PopStateEvent;\n    new(type: string, eventInitDict?: PopStateEventInit): PopStateEvent;\n};\n\n/** A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them. */\ninterface ProcessingInstruction extends CharacterData, LinkStyle {\n    readonly ownerDocument: Document;\n    readonly target: string;\n}\n\ndeclare var ProcessingInstruction: {\n    prototype: ProcessingInstruction;\n    new(): ProcessingInstruction;\n};\n\n/** Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>). */\ninterface ProgressEvent<T extends EventTarget = EventTarget> extends Event {\n    readonly lengthComputable: boolean;\n    readonly loaded: number;\n    readonly target: T | null;\n    readonly total: number;\n}\n\ndeclare var ProgressEvent: {\n    prototype: ProgressEvent;\n    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;\n};\n\ninterface PromiseRejectionEvent extends Event {\n    readonly promise: Promise<any>;\n    readonly reason: any;\n}\n\ndeclare var PromiseRejectionEvent: {\n    prototype: PromiseRejectionEvent;\n    new(type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent;\n};\n\n/** Available only in secure contexts. */\ninterface PublicKeyCredential extends Credential {\n    readonly rawId: ArrayBuffer;\n    readonly response: AuthenticatorResponse;\n    getClientExtensionResults(): AuthenticationExtensionsClientOutputs;\n}\n\ndeclare var PublicKeyCredential: {\n    prototype: PublicKeyCredential;\n    new(): PublicKeyCredential;\n    isUserVerifyingPlatformAuthenticatorAvailable(): Promise<boolean>;\n};\n\n/**\n * This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.\n * Available only in secure contexts.\n */\ninterface PushManager {\n    getSubscription(): Promise<PushSubscription | null>;\n    permissionState(options?: PushSubscriptionOptionsInit): Promise<PermissionState>;\n    subscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;\n}\n\ndeclare var PushManager: {\n    prototype: PushManager;\n    new(): PushManager;\n    readonly supportedContentEncodings: ReadonlyArray<string>;\n};\n\n/**\n * This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.\n * Available only in secure contexts.\n */\ninterface PushSubscription {\n    readonly endpoint: string;\n    readonly expirationTime: EpochTimeStamp | null;\n    readonly options: PushSubscriptionOptions;\n    getKey(name: PushEncryptionKeyName): ArrayBuffer | null;\n    toJSON(): PushSubscriptionJSON;\n    unsubscribe(): Promise<boolean>;\n}\n\ndeclare var PushSubscription: {\n    prototype: PushSubscription;\n    new(): PushSubscription;\n};\n\n/** Available only in secure contexts. */\ninterface PushSubscriptionOptions {\n    readonly applicationServerKey: ArrayBuffer | null;\n}\n\ndeclare var PushSubscriptionOptions: {\n    prototype: PushSubscriptionOptions;\n    new(): PushSubscriptionOptions;\n};\n\ninterface RTCCertificate {\n    readonly expires: EpochTimeStamp;\n    getFingerprints(): RTCDtlsFingerprint[];\n}\n\ndeclare var RTCCertificate: {\n    prototype: RTCCertificate;\n    new(): RTCCertificate;\n};\n\ninterface RTCDTMFSenderEventMap {\n    \"tonechange\": RTCDTMFToneChangeEvent;\n}\n\ninterface RTCDTMFSender extends EventTarget {\n    readonly canInsertDTMF: boolean;\n    ontonechange: ((this: RTCDTMFSender, ev: RTCDTMFToneChangeEvent) => any) | null;\n    readonly toneBuffer: string;\n    insertDTMF(tones: string, duration?: number, interToneGap?: number): void;\n    addEventListener<K extends keyof RTCDTMFSenderEventMap>(type: K, listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof RTCDTMFSenderEventMap>(type: K, listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var RTCDTMFSender: {\n    prototype: RTCDTMFSender;\n    new(): RTCDTMFSender;\n};\n\n/** Events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event. */\ninterface RTCDTMFToneChangeEvent extends Event {\n    readonly tone: string;\n}\n\ndeclare var RTCDTMFToneChangeEvent: {\n    prototype: RTCDTMFToneChangeEvent;\n    new(type: string, eventInitDict?: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent;\n};\n\ninterface RTCDataChannelEventMap {\n    \"bufferedamountlow\": Event;\n    \"close\": Event;\n    \"closing\": Event;\n    \"error\": Event;\n    \"message\": MessageEvent;\n    \"open\": Event;\n}\n\ninterface RTCDataChannel extends EventTarget {\n    binaryType: BinaryType;\n    readonly bufferedAmount: number;\n    bufferedAmountLowThreshold: number;\n    readonly id: number | null;\n    readonly label: string;\n    readonly maxPacketLifeTime: number | null;\n    readonly maxRetransmits: number | null;\n    readonly negotiated: boolean;\n    onbufferedamountlow: ((this: RTCDataChannel, ev: Event) => any) | null;\n    onclose: ((this: RTCDataChannel, ev: Event) => any) | null;\n    onclosing: ((this: RTCDataChannel, ev: Event) => any) | null;\n    onerror: ((this: RTCDataChannel, ev: Event) => any) | null;\n    onmessage: ((this: RTCDataChannel, ev: MessageEvent) => any) | null;\n    onopen: ((this: RTCDataChannel, ev: Event) => any) | null;\n    readonly ordered: boolean;\n    readonly protocol: string;\n    readonly readyState: RTCDataChannelState;\n    close(): void;\n    send(data: string): void;\n    send(data: Blob): void;\n    send(data: ArrayBuffer): void;\n    send(data: ArrayBufferView): void;\n    addEventListener<K extends keyof RTCDataChannelEventMap>(type: K, listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof RTCDataChannelEventMap>(type: K, listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var RTCDataChannel: {\n    prototype: RTCDataChannel;\n    new(): RTCDataChannel;\n};\n\ninterface RTCDataChannelEvent extends Event {\n    readonly channel: RTCDataChannel;\n}\n\ndeclare var RTCDataChannelEvent: {\n    prototype: RTCDataChannelEvent;\n    new(type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent;\n};\n\ninterface RTCDtlsTransportEventMap {\n    \"error\": Event;\n    \"statechange\": Event;\n}\n\ninterface RTCDtlsTransport extends EventTarget {\n    readonly iceTransport: RTCIceTransport;\n    onerror: ((this: RTCDtlsTransport, ev: Event) => any) | null;\n    onstatechange: ((this: RTCDtlsTransport, ev: Event) => any) | null;\n    readonly state: RTCDtlsTransportState;\n    getRemoteCertificates(): ArrayBuffer[];\n    addEventListener<K extends keyof RTCDtlsTransportEventMap>(type: K, listener: (this: RTCDtlsTransport, ev: RTCDtlsTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof RTCDtlsTransportEventMap>(type: K, listener: (this: RTCDtlsTransport, ev: RTCDtlsTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var RTCDtlsTransport: {\n    prototype: RTCDtlsTransport;\n    new(): RTCDtlsTransport;\n};\n\ninterface RTCEncodedAudioFrame {\n    data: ArrayBuffer;\n    readonly timestamp: number;\n    getMetadata(): RTCEncodedAudioFrameMetadata;\n}\n\ndeclare var RTCEncodedAudioFrame: {\n    prototype: RTCEncodedAudioFrame;\n    new(): RTCEncodedAudioFrame;\n};\n\ninterface RTCEncodedVideoFrame {\n    data: ArrayBuffer;\n    readonly timestamp: number;\n    readonly type: RTCEncodedVideoFrameType;\n    getMetadata(): RTCEncodedVideoFrameMetadata;\n}\n\ndeclare var RTCEncodedVideoFrame: {\n    prototype: RTCEncodedVideoFrame;\n    new(): RTCEncodedVideoFrame;\n};\n\ninterface RTCError extends DOMException {\n    readonly errorDetail: RTCErrorDetailType;\n    readonly receivedAlert: number | null;\n    readonly sctpCauseCode: number | null;\n    readonly sdpLineNumber: number | null;\n    readonly sentAlert: number | null;\n}\n\ndeclare var RTCError: {\n    prototype: RTCError;\n    new(init: RTCErrorInit, message?: string): RTCError;\n};\n\ninterface RTCErrorEvent extends Event {\n    readonly error: RTCError;\n}\n\ndeclare var RTCErrorEvent: {\n    prototype: RTCErrorEvent;\n    new(type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent;\n};\n\n/** The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection. */\ninterface RTCIceCandidate {\n    readonly address: string | null;\n    readonly candidate: string;\n    readonly component: RTCIceComponent | null;\n    readonly foundation: string | null;\n    readonly port: number | null;\n    readonly priority: number | null;\n    readonly protocol: RTCIceProtocol | null;\n    readonly relatedAddress: string | null;\n    readonly relatedPort: number | null;\n    readonly sdpMLineIndex: number | null;\n    readonly sdpMid: string | null;\n    readonly tcpType: RTCIceTcpCandidateType | null;\n    readonly type: RTCIceCandidateType | null;\n    readonly usernameFragment: string | null;\n    toJSON(): RTCIceCandidateInit;\n}\n\ndeclare var RTCIceCandidate: {\n    prototype: RTCIceCandidate;\n    new(candidateInitDict?: RTCIceCandidateInit): RTCIceCandidate;\n};\n\ninterface RTCIceTransportEventMap {\n    \"gatheringstatechange\": Event;\n    \"statechange\": Event;\n}\n\n/** Provides access to information about the ICE transport layer over which the data is being sent and received. */\ninterface RTCIceTransport extends EventTarget {\n    readonly gatheringState: RTCIceGathererState;\n    ongatheringstatechange: ((this: RTCIceTransport, ev: Event) => any) | null;\n    onstatechange: ((this: RTCIceTransport, ev: Event) => any) | null;\n    readonly state: RTCIceTransportState;\n    addEventListener<K extends keyof RTCIceTransportEventMap>(type: K, listener: (this: RTCIceTransport, ev: RTCIceTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof RTCIceTransportEventMap>(type: K, listener: (this: RTCIceTransport, ev: RTCIceTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var RTCIceTransport: {\n    prototype: RTCIceTransport;\n    new(): RTCIceTransport;\n};\n\ninterface RTCPeerConnectionEventMap {\n    \"connectionstatechange\": Event;\n    \"datachannel\": RTCDataChannelEvent;\n    \"icecandidate\": RTCPeerConnectionIceEvent;\n    \"icecandidateerror\": Event;\n    \"iceconnectionstatechange\": Event;\n    \"icegatheringstatechange\": Event;\n    \"negotiationneeded\": Event;\n    \"signalingstatechange\": Event;\n    \"track\": RTCTrackEvent;\n}\n\n/** A WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed. */\ninterface RTCPeerConnection extends EventTarget {\n    readonly canTrickleIceCandidates: boolean | null;\n    readonly connectionState: RTCPeerConnectionState;\n    readonly currentLocalDescription: RTCSessionDescription | null;\n    readonly currentRemoteDescription: RTCSessionDescription | null;\n    readonly iceConnectionState: RTCIceConnectionState;\n    readonly iceGatheringState: RTCIceGatheringState;\n    readonly localDescription: RTCSessionDescription | null;\n    onconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    ondatachannel: ((this: RTCPeerConnection, ev: RTCDataChannelEvent) => any) | null;\n    onicecandidate: ((this: RTCPeerConnection, ev: RTCPeerConnectionIceEvent) => any) | null;\n    onicecandidateerror: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    oniceconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    onicegatheringstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    onnegotiationneeded: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    onsignalingstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    ontrack: ((this: RTCPeerConnection, ev: RTCTrackEvent) => any) | null;\n    readonly pendingLocalDescription: RTCSessionDescription | null;\n    readonly pendingRemoteDescription: RTCSessionDescription | null;\n    readonly remoteDescription: RTCSessionDescription | null;\n    readonly sctp: RTCSctpTransport | null;\n    readonly signalingState: RTCSignalingState;\n    addIceCandidate(candidate?: RTCIceCandidateInit): Promise<void>;\n    /** @deprecated */\n    addIceCandidate(candidate: RTCIceCandidateInit, successCallback: VoidFunction, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;\n    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender;\n    addTransceiver(trackOrKind: MediaStreamTrack | string, init?: RTCRtpTransceiverInit): RTCRtpTransceiver;\n    close(): void;\n    createAnswer(options?: RTCAnswerOptions): Promise<RTCSessionDescriptionInit>;\n    /** @deprecated */\n    createAnswer(successCallback: RTCSessionDescriptionCallback, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;\n    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel;\n    createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;\n    /** @deprecated */\n    createOffer(successCallback: RTCSessionDescriptionCallback, failureCallback: RTCPeerConnectionErrorCallback, options?: RTCOfferOptions): Promise<void>;\n    getConfiguration(): RTCConfiguration;\n    getReceivers(): RTCRtpReceiver[];\n    getSenders(): RTCRtpSender[];\n    getStats(selector?: MediaStreamTrack | null): Promise<RTCStatsReport>;\n    getTransceivers(): RTCRtpTransceiver[];\n    removeTrack(sender: RTCRtpSender): void;\n    restartIce(): void;\n    setConfiguration(configuration?: RTCConfiguration): void;\n    setLocalDescription(description?: RTCLocalSessionDescriptionInit): Promise<void>;\n    /** @deprecated */\n    setLocalDescription(description: RTCLocalSessionDescriptionInit, successCallback: VoidFunction, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;\n    setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void>;\n    /** @deprecated */\n    setRemoteDescription(description: RTCSessionDescriptionInit, successCallback: VoidFunction, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;\n    addEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var RTCPeerConnection: {\n    prototype: RTCPeerConnection;\n    new(configuration?: RTCConfiguration): RTCPeerConnection;\n    generateCertificate(keygenAlgorithm: AlgorithmIdentifier): Promise<RTCCertificate>;\n};\n\ninterface RTCPeerConnectionIceErrorEvent extends Event {\n    readonly address: string | null;\n    readonly errorCode: number;\n    readonly errorText: string;\n    readonly port: number | null;\n    readonly url: string;\n}\n\ndeclare var RTCPeerConnectionIceErrorEvent: {\n    prototype: RTCPeerConnectionIceErrorEvent;\n    new(type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent;\n};\n\n/** Events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate. */\ninterface RTCPeerConnectionIceEvent extends Event {\n    readonly candidate: RTCIceCandidate | null;\n}\n\ndeclare var RTCPeerConnectionIceEvent: {\n    prototype: RTCPeerConnectionIceEvent;\n    new(type: string, eventInitDict?: RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent;\n};\n\n/** This WebRTC API interface manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection. */\ninterface RTCRtpReceiver {\n    readonly track: MediaStreamTrack;\n    readonly transport: RTCDtlsTransport | null;\n    getContributingSources(): RTCRtpContributingSource[];\n    getParameters(): RTCRtpReceiveParameters;\n    getStats(): Promise<RTCStatsReport>;\n    getSynchronizationSources(): RTCRtpSynchronizationSource[];\n}\n\ndeclare var RTCRtpReceiver: {\n    prototype: RTCRtpReceiver;\n    new(): RTCRtpReceiver;\n    getCapabilities(kind: string): RTCRtpCapabilities | null;\n};\n\n/** Provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer. */\ninterface RTCRtpSender {\n    readonly dtmf: RTCDTMFSender | null;\n    readonly track: MediaStreamTrack | null;\n    readonly transport: RTCDtlsTransport | null;\n    getParameters(): RTCRtpSendParameters;\n    getStats(): Promise<RTCStatsReport>;\n    replaceTrack(withTrack: MediaStreamTrack | null): Promise<void>;\n    setParameters(parameters: RTCRtpSendParameters): Promise<void>;\n    setStreams(...streams: MediaStream[]): void;\n}\n\ndeclare var RTCRtpSender: {\n    prototype: RTCRtpSender;\n    new(): RTCRtpSender;\n    getCapabilities(kind: string): RTCRtpCapabilities | null;\n};\n\ninterface RTCRtpTransceiver {\n    readonly currentDirection: RTCRtpTransceiverDirection | null;\n    direction: RTCRtpTransceiverDirection;\n    readonly mid: string | null;\n    readonly receiver: RTCRtpReceiver;\n    readonly sender: RTCRtpSender;\n    setCodecPreferences(codecs: RTCRtpCodecCapability[]): void;\n    stop(): void;\n}\n\ndeclare var RTCRtpTransceiver: {\n    prototype: RTCRtpTransceiver;\n    new(): RTCRtpTransceiver;\n};\n\ninterface RTCSctpTransportEventMap {\n    \"statechange\": Event;\n}\n\ninterface RTCSctpTransport extends EventTarget {\n    readonly maxChannels: number | null;\n    readonly maxMessageSize: number;\n    onstatechange: ((this: RTCSctpTransport, ev: Event) => any) | null;\n    readonly state: RTCSctpTransportState;\n    readonly transport: RTCDtlsTransport;\n    addEventListener<K extends keyof RTCSctpTransportEventMap>(type: K, listener: (this: RTCSctpTransport, ev: RTCSctpTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof RTCSctpTransportEventMap>(type: K, listener: (this: RTCSctpTransport, ev: RTCSctpTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var RTCSctpTransport: {\n    prototype: RTCSctpTransport;\n    new(): RTCSctpTransport;\n};\n\n/** One end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session. */\ninterface RTCSessionDescription {\n    readonly sdp: string;\n    readonly type: RTCSdpType;\n    toJSON(): any;\n}\n\ndeclare var RTCSessionDescription: {\n    prototype: RTCSessionDescription;\n    new(descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription;\n};\n\ninterface RTCStatsReport {\n    forEach(callbackfn: (value: any, key: string, parent: RTCStatsReport) => void, thisArg?: any): void;\n}\n\ndeclare var RTCStatsReport: {\n    prototype: RTCStatsReport;\n    new(): RTCStatsReport;\n};\n\ninterface RTCTrackEvent extends Event {\n    readonly receiver: RTCRtpReceiver;\n    readonly streams: ReadonlyArray<MediaStream>;\n    readonly track: MediaStreamTrack;\n    readonly transceiver: RTCRtpTransceiver;\n}\n\ndeclare var RTCTrackEvent: {\n    prototype: RTCTrackEvent;\n    new(type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent;\n};\n\ninterface RadioNodeList extends NodeList {\n    value: string;\n}\n\ndeclare var RadioNodeList: {\n    prototype: RadioNodeList;\n    new(): RadioNodeList;\n};\n\n/** A fragment of a document that can contain nodes and parts of text nodes. */\ninterface Range extends AbstractRange {\n    /** Returns the node, furthest away from the document, that is an ancestor of both range's start node and end node. */\n    readonly commonAncestorContainer: Node;\n    cloneContents(): DocumentFragment;\n    cloneRange(): Range;\n    collapse(toStart?: boolean): void;\n    compareBoundaryPoints(how: number, sourceRange: Range): number;\n    /** Returns −1 if the point is before the range, 0 if the point is in the range, and 1 if the point is after the range. */\n    comparePoint(node: Node, offset: number): number;\n    createContextualFragment(fragment: string): DocumentFragment;\n    deleteContents(): void;\n    detach(): void;\n    extractContents(): DocumentFragment;\n    getBoundingClientRect(): DOMRect;\n    getClientRects(): DOMRectList;\n    insertNode(node: Node): void;\n    /** Returns whether range intersects node. */\n    intersectsNode(node: Node): boolean;\n    isPointInRange(node: Node, offset: number): boolean;\n    selectNode(node: Node): void;\n    selectNodeContents(node: Node): void;\n    setEnd(node: Node, offset: number): void;\n    setEndAfter(node: Node): void;\n    setEndBefore(node: Node): void;\n    setStart(node: Node, offset: number): void;\n    setStartAfter(node: Node): void;\n    setStartBefore(node: Node): void;\n    surroundContents(newParent: Node): void;\n    toString(): string;\n    readonly END_TO_END: number;\n    readonly END_TO_START: number;\n    readonly START_TO_END: number;\n    readonly START_TO_START: number;\n}\n\ndeclare var Range: {\n    prototype: Range;\n    new(): Range;\n    readonly END_TO_END: number;\n    readonly END_TO_START: number;\n    readonly START_TO_END: number;\n    readonly START_TO_START: number;\n    toString(): string;\n};\n\ninterface ReadableByteStreamController {\n    readonly byobRequest: ReadableStreamBYOBRequest | null;\n    readonly desiredSize: number | null;\n    close(): void;\n    enqueue(chunk: ArrayBufferView): void;\n    error(e?: any): void;\n}\n\ndeclare var ReadableByteStreamController: {\n    prototype: ReadableByteStreamController;\n    new(): ReadableByteStreamController;\n};\n\n/** This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object. */\ninterface ReadableStream<R = any> {\n    readonly locked: boolean;\n    cancel(reason?: any): Promise<void>;\n    getReader(): ReadableStreamDefaultReader<R>;\n    pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;\n    pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n    tee(): [ReadableStream<R>, ReadableStream<R>];\n}\n\ndeclare var ReadableStream: {\n    prototype: ReadableStream;\n    new<R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\n};\n\ninterface ReadableStreamBYOBReader extends ReadableStreamGenericReader {\n    read(view: ArrayBufferView): Promise<ReadableStreamReadResult<ArrayBufferView>>;\n    releaseLock(): void;\n}\n\ndeclare var ReadableStreamBYOBReader: {\n    prototype: ReadableStreamBYOBReader;\n    new(stream: ReadableStream): ReadableStreamBYOBReader;\n};\n\ninterface ReadableStreamBYOBRequest {\n    readonly view: ArrayBufferView | null;\n    respond(bytesWritten: number): void;\n    respondWithNewView(view: ArrayBufferView): void;\n}\n\ndeclare var ReadableStreamBYOBRequest: {\n    prototype: ReadableStreamBYOBRequest;\n    new(): ReadableStreamBYOBRequest;\n};\n\ninterface ReadableStreamDefaultController<R = any> {\n    readonly desiredSize: number | null;\n    close(): void;\n    enqueue(chunk?: R): void;\n    error(e?: any): void;\n}\n\ndeclare var ReadableStreamDefaultController: {\n    prototype: ReadableStreamDefaultController;\n    new(): ReadableStreamDefaultController;\n};\n\ninterface ReadableStreamDefaultReader<R = any> extends ReadableStreamGenericReader {\n    read(): Promise<ReadableStreamReadResult<R>>;\n    releaseLock(): void;\n}\n\ndeclare var ReadableStreamDefaultReader: {\n    prototype: ReadableStreamDefaultReader;\n    new<R = any>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;\n};\n\ninterface ReadableStreamGenericReader {\n    readonly closed: Promise<undefined>;\n    cancel(reason?: any): Promise<void>;\n}\n\ninterface RemotePlaybackEventMap {\n    \"connect\": Event;\n    \"connecting\": Event;\n    \"disconnect\": Event;\n}\n\ninterface RemotePlayback extends EventTarget {\n    onconnect: ((this: RemotePlayback, ev: Event) => any) | null;\n    onconnecting: ((this: RemotePlayback, ev: Event) => any) | null;\n    ondisconnect: ((this: RemotePlayback, ev: Event) => any) | null;\n    readonly state: RemotePlaybackState;\n    cancelWatchAvailability(id?: number): Promise<void>;\n    prompt(): Promise<void>;\n    watchAvailability(callback: RemotePlaybackAvailabilityCallback): Promise<number>;\n    addEventListener<K extends keyof RemotePlaybackEventMap>(type: K, listener: (this: RemotePlayback, ev: RemotePlaybackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof RemotePlaybackEventMap>(type: K, listener: (this: RemotePlayback, ev: RemotePlaybackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var RemotePlayback: {\n    prototype: RemotePlayback;\n    new(): RemotePlayback;\n};\n\n/** This Fetch API interface represents a resource request. */\ninterface Request extends Body {\n    /** Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching. */\n    readonly cache: RequestCache;\n    /** Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. */\n    readonly credentials: RequestCredentials;\n    /** Returns the kind of resource requested by request, e.g., \"document\" or \"script\". */\n    readonly destination: RequestDestination;\n    /** Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header. */\n    readonly headers: Headers;\n    /** Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI] */\n    readonly integrity: string;\n    /** Returns a boolean indicating whether or not request can outlive the global in which it was created. */\n    readonly keepalive: boolean;\n    /** Returns request's HTTP method, which is \"GET\" by default. */\n    readonly method: string;\n    /** Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs. */\n    readonly mode: RequestMode;\n    /** Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default. */\n    readonly redirect: RequestRedirect;\n    /** Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made. */\n    readonly referrer: string;\n    /** Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer. */\n    readonly referrerPolicy: ReferrerPolicy;\n    /** Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler. */\n    readonly signal: AbortSignal;\n    /** Returns the URL of request as a string. */\n    readonly url: string;\n    clone(): Request;\n}\n\ndeclare var Request: {\n    prototype: Request;\n    new(input: RequestInfo | URL, init?: RequestInit): Request;\n};\n\ninterface ResizeObserver {\n    disconnect(): void;\n    observe(target: Element, options?: ResizeObserverOptions): void;\n    unobserve(target: Element): void;\n}\n\ndeclare var ResizeObserver: {\n    prototype: ResizeObserver;\n    new(callback: ResizeObserverCallback): ResizeObserver;\n};\n\ninterface ResizeObserverEntry {\n    readonly borderBoxSize: ReadonlyArray<ResizeObserverSize>;\n    readonly contentBoxSize: ReadonlyArray<ResizeObserverSize>;\n    readonly contentRect: DOMRectReadOnly;\n    readonly devicePixelContentBoxSize: ReadonlyArray<ResizeObserverSize>;\n    readonly target: Element;\n}\n\ndeclare var ResizeObserverEntry: {\n    prototype: ResizeObserverEntry;\n    new(): ResizeObserverEntry;\n};\n\ninterface ResizeObserverSize {\n    readonly blockSize: number;\n    readonly inlineSize: number;\n}\n\ndeclare var ResizeObserverSize: {\n    prototype: ResizeObserverSize;\n    new(): ResizeObserverSize;\n};\n\n/** This Fetch API interface represents the response to a request. */\ninterface Response extends Body {\n    readonly headers: Headers;\n    readonly ok: boolean;\n    readonly redirected: boolean;\n    readonly status: number;\n    readonly statusText: string;\n    readonly type: ResponseType;\n    readonly url: string;\n    clone(): Response;\n}\n\ndeclare var Response: {\n    prototype: Response;\n    new(body?: BodyInit | null, init?: ResponseInit): Response;\n    json(data: unknown, init?: ResponseInit): Response;\n    error(): Response;\n    redirect(url: string | URL, status?: number): Response;\n};\n\n/** Provides access to the properties of <a> element, as well as methods to manipulate them. */\ninterface SVGAElement extends SVGGraphicsElement, SVGURIReference {\n    rel: string;\n    readonly relList: DOMTokenList;\n    readonly target: SVGAnimatedString;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGAElement: {\n    prototype: SVGAElement;\n    new(): SVGAElement;\n};\n\n/** Used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only. */\ninterface SVGAngle {\n    readonly unitType: number;\n    value: number;\n    valueAsString: string;\n    valueInSpecifiedUnits: number;\n    convertToSpecifiedUnits(unitType: number): void;\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\n    readonly SVG_ANGLETYPE_DEG: number;\n    readonly SVG_ANGLETYPE_GRAD: number;\n    readonly SVG_ANGLETYPE_RAD: number;\n    readonly SVG_ANGLETYPE_UNKNOWN: number;\n    readonly SVG_ANGLETYPE_UNSPECIFIED: number;\n}\n\ndeclare var SVGAngle: {\n    prototype: SVGAngle;\n    new(): SVGAngle;\n    readonly SVG_ANGLETYPE_DEG: number;\n    readonly SVG_ANGLETYPE_GRAD: number;\n    readonly SVG_ANGLETYPE_RAD: number;\n    readonly SVG_ANGLETYPE_UNKNOWN: number;\n    readonly SVG_ANGLETYPE_UNSPECIFIED: number;\n};\n\ninterface SVGAnimateElement extends SVGAnimationElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGAnimateElement: {\n    prototype: SVGAnimateElement;\n    new(): SVGAnimateElement;\n};\n\ninterface SVGAnimateMotionElement extends SVGAnimationElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateMotionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateMotionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGAnimateMotionElement: {\n    prototype: SVGAnimateMotionElement;\n    new(): SVGAnimateMotionElement;\n};\n\ninterface SVGAnimateTransformElement extends SVGAnimationElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateTransformElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateTransformElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGAnimateTransformElement: {\n    prototype: SVGAnimateTransformElement;\n    new(): SVGAnimateTransformElement;\n};\n\n/** Used for attributes of basic type <angle> which can be animated. */\ninterface SVGAnimatedAngle {\n    readonly animVal: SVGAngle;\n    readonly baseVal: SVGAngle;\n}\n\ndeclare var SVGAnimatedAngle: {\n    prototype: SVGAnimatedAngle;\n    new(): SVGAnimatedAngle;\n};\n\n/** Used for attributes of type boolean which can be animated. */\ninterface SVGAnimatedBoolean {\n    readonly animVal: boolean;\n    baseVal: boolean;\n}\n\ndeclare var SVGAnimatedBoolean: {\n    prototype: SVGAnimatedBoolean;\n    new(): SVGAnimatedBoolean;\n};\n\n/** Used for attributes whose value must be a constant from a particular enumeration and which can be animated. */\ninterface SVGAnimatedEnumeration {\n    readonly animVal: number;\n    baseVal: number;\n}\n\ndeclare var SVGAnimatedEnumeration: {\n    prototype: SVGAnimatedEnumeration;\n    new(): SVGAnimatedEnumeration;\n};\n\n/** Used for attributes of basic type <integer> which can be animated. */\ninterface SVGAnimatedInteger {\n    readonly animVal: number;\n    baseVal: number;\n}\n\ndeclare var SVGAnimatedInteger: {\n    prototype: SVGAnimatedInteger;\n    new(): SVGAnimatedInteger;\n};\n\n/** Used for attributes of basic type <length> which can be animated. */\ninterface SVGAnimatedLength {\n    readonly animVal: SVGLength;\n    readonly baseVal: SVGLength;\n}\n\ndeclare var SVGAnimatedLength: {\n    prototype: SVGAnimatedLength;\n    new(): SVGAnimatedLength;\n};\n\n/** Used for attributes of type SVGLengthList which can be animated. */\ninterface SVGAnimatedLengthList {\n    readonly animVal: SVGLengthList;\n    readonly baseVal: SVGLengthList;\n}\n\ndeclare var SVGAnimatedLengthList: {\n    prototype: SVGAnimatedLengthList;\n    new(): SVGAnimatedLengthList;\n};\n\n/** Used for attributes of basic type <Number> which can be animated. */\ninterface SVGAnimatedNumber {\n    readonly animVal: number;\n    baseVal: number;\n}\n\ndeclare var SVGAnimatedNumber: {\n    prototype: SVGAnimatedNumber;\n    new(): SVGAnimatedNumber;\n};\n\n/** The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated. */\ninterface SVGAnimatedNumberList {\n    readonly animVal: SVGNumberList;\n    readonly baseVal: SVGNumberList;\n}\n\ndeclare var SVGAnimatedNumberList: {\n    prototype: SVGAnimatedNumberList;\n    new(): SVGAnimatedNumberList;\n};\n\ninterface SVGAnimatedPoints {\n    readonly animatedPoints: SVGPointList;\n    readonly points: SVGPointList;\n}\n\n/** Used for attributes of type SVGPreserveAspectRatio which can be animated. */\ninterface SVGAnimatedPreserveAspectRatio {\n    readonly animVal: SVGPreserveAspectRatio;\n    readonly baseVal: SVGPreserveAspectRatio;\n}\n\ndeclare var SVGAnimatedPreserveAspectRatio: {\n    prototype: SVGAnimatedPreserveAspectRatio;\n    new(): SVGAnimatedPreserveAspectRatio;\n};\n\n/** Used for attributes of basic SVGRect which can be animated. */\ninterface SVGAnimatedRect {\n    readonly animVal: DOMRectReadOnly;\n    readonly baseVal: DOMRect;\n}\n\ndeclare var SVGAnimatedRect: {\n    prototype: SVGAnimatedRect;\n    new(): SVGAnimatedRect;\n};\n\n/** The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this. */\ninterface SVGAnimatedString {\n    readonly animVal: string;\n    baseVal: string;\n}\n\ndeclare var SVGAnimatedString: {\n    prototype: SVGAnimatedString;\n    new(): SVGAnimatedString;\n};\n\n/** Used for attributes which take a list of numbers and which can be animated. */\ninterface SVGAnimatedTransformList {\n    readonly animVal: SVGTransformList;\n    readonly baseVal: SVGTransformList;\n}\n\ndeclare var SVGAnimatedTransformList: {\n    prototype: SVGAnimatedTransformList;\n    new(): SVGAnimatedTransformList;\n};\n\ninterface SVGAnimationElement extends SVGElement, SVGTests {\n    readonly targetElement: SVGElement | null;\n    beginElement(): void;\n    beginElementAt(offset: number): void;\n    endElement(): void;\n    endElementAt(offset: number): void;\n    getCurrentTime(): number;\n    getSimpleDuration(): number;\n    getStartTime(): number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimationElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimationElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGAnimationElement: {\n    prototype: SVGAnimationElement;\n    new(): SVGAnimationElement;\n};\n\n/** An interface for the <circle> element. The circle element is defined by the cx and cy attributes that denote the coordinates of the centre of the circle. */\ninterface SVGCircleElement extends SVGGeometryElement {\n    readonly cx: SVGAnimatedLength;\n    readonly cy: SVGAnimatedLength;\n    readonly r: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGCircleElement: {\n    prototype: SVGCircleElement;\n    new(): SVGCircleElement;\n};\n\n/** Provides access to the properties of <clipPath> elements, as well as methods to manipulate them. */\ninterface SVGClipPathElement extends SVGElement {\n    readonly clipPathUnits: SVGAnimatedEnumeration;\n    readonly transform: SVGAnimatedTransformList;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGClipPathElement: {\n    prototype: SVGClipPathElement;\n    new(): SVGClipPathElement;\n};\n\n/** A base interface used by the component transfer function interfaces. */\ninterface SVGComponentTransferFunctionElement extends SVGElement {\n    readonly amplitude: SVGAnimatedNumber;\n    readonly exponent: SVGAnimatedNumber;\n    readonly intercept: SVGAnimatedNumber;\n    readonly offset: SVGAnimatedNumber;\n    readonly slope: SVGAnimatedNumber;\n    readonly tableValues: SVGAnimatedNumberList;\n    readonly type: SVGAnimatedEnumeration;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGComponentTransferFunctionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGComponentTransferFunctionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGComponentTransferFunctionElement: {\n    prototype: SVGComponentTransferFunctionElement;\n    new(): SVGComponentTransferFunctionElement;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\n};\n\n/** Corresponds to the <defs> element. */\ninterface SVGDefsElement extends SVGGraphicsElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGDefsElement: {\n    prototype: SVGDefsElement;\n    new(): SVGDefsElement;\n};\n\n/** Corresponds to the <desc> element. */\ninterface SVGDescElement extends SVGElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGDescElement: {\n    prototype: SVGDescElement;\n    new(): SVGDescElement;\n};\n\ninterface SVGElementEventMap extends ElementEventMap, DocumentAndElementEventHandlersEventMap, GlobalEventHandlersEventMap {\n}\n\n/** All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface. */\ninterface SVGElement extends Element, DocumentAndElementEventHandlers, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement {\n    /** @deprecated */\n    readonly className: any;\n    readonly ownerSVGElement: SVGSVGElement | null;\n    readonly viewportElement: SVGElement | null;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGElement: {\n    prototype: SVGElement;\n    new(): SVGElement;\n};\n\n/** Provides access to the properties of <ellipse> elements. */\ninterface SVGEllipseElement extends SVGGeometryElement {\n    readonly cx: SVGAnimatedLength;\n    readonly cy: SVGAnimatedLength;\n    readonly rx: SVGAnimatedLength;\n    readonly ry: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGEllipseElement: {\n    prototype: SVGEllipseElement;\n    new(): SVGEllipseElement;\n};\n\n/** Corresponds to the <feBlend> element. */\ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    readonly in2: SVGAnimatedString;\n    readonly mode: SVGAnimatedEnumeration;\n    readonly SVG_FEBLEND_MODE_COLOR: number;\n    readonly SVG_FEBLEND_MODE_COLOR_BURN: number;\n    readonly SVG_FEBLEND_MODE_COLOR_DODGE: number;\n    readonly SVG_FEBLEND_MODE_DARKEN: number;\n    readonly SVG_FEBLEND_MODE_DIFFERENCE: number;\n    readonly SVG_FEBLEND_MODE_EXCLUSION: number;\n    readonly SVG_FEBLEND_MODE_HARD_LIGHT: number;\n    readonly SVG_FEBLEND_MODE_HUE: number;\n    readonly SVG_FEBLEND_MODE_LIGHTEN: number;\n    readonly SVG_FEBLEND_MODE_LUMINOSITY: number;\n    readonly SVG_FEBLEND_MODE_MULTIPLY: number;\n    readonly SVG_FEBLEND_MODE_NORMAL: number;\n    readonly SVG_FEBLEND_MODE_OVERLAY: number;\n    readonly SVG_FEBLEND_MODE_SATURATION: number;\n    readonly SVG_FEBLEND_MODE_SCREEN: number;\n    readonly SVG_FEBLEND_MODE_SOFT_LIGHT: number;\n    readonly SVG_FEBLEND_MODE_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEBlendElement: {\n    prototype: SVGFEBlendElement;\n    new(): SVGFEBlendElement;\n    readonly SVG_FEBLEND_MODE_COLOR: number;\n    readonly SVG_FEBLEND_MODE_COLOR_BURN: number;\n    readonly SVG_FEBLEND_MODE_COLOR_DODGE: number;\n    readonly SVG_FEBLEND_MODE_DARKEN: number;\n    readonly SVG_FEBLEND_MODE_DIFFERENCE: number;\n    readonly SVG_FEBLEND_MODE_EXCLUSION: number;\n    readonly SVG_FEBLEND_MODE_HARD_LIGHT: number;\n    readonly SVG_FEBLEND_MODE_HUE: number;\n    readonly SVG_FEBLEND_MODE_LIGHTEN: number;\n    readonly SVG_FEBLEND_MODE_LUMINOSITY: number;\n    readonly SVG_FEBLEND_MODE_MULTIPLY: number;\n    readonly SVG_FEBLEND_MODE_NORMAL: number;\n    readonly SVG_FEBLEND_MODE_OVERLAY: number;\n    readonly SVG_FEBLEND_MODE_SATURATION: number;\n    readonly SVG_FEBLEND_MODE_SCREEN: number;\n    readonly SVG_FEBLEND_MODE_SOFT_LIGHT: number;\n    readonly SVG_FEBLEND_MODE_UNKNOWN: number;\n};\n\n/** Corresponds to the <feColorMatrix> element. */\ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    readonly type: SVGAnimatedEnumeration;\n    readonly values: SVGAnimatedNumberList;\n    readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\n    readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\n    readonly SVG_FECOLORMATRIX_TYPE_MATRIX: number;\n    readonly SVG_FECOLORMATRIX_TYPE_SATURATE: number;\n    readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEColorMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEColorMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEColorMatrixElement: {\n    prototype: SVGFEColorMatrixElement;\n    new(): SVGFEColorMatrixElement;\n    readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\n    readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\n    readonly SVG_FECOLORMATRIX_TYPE_MATRIX: number;\n    readonly SVG_FECOLORMATRIX_TYPE_SATURATE: number;\n    readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\n};\n\n/** Corresponds to the <feComponentTransfer> element. */\ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEComponentTransferElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEComponentTransferElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEComponentTransferElement: {\n    prototype: SVGFEComponentTransferElement;\n    new(): SVGFEComponentTransferElement;\n};\n\n/** Corresponds to the <feComposite> element. */\ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    readonly in2: SVGAnimatedString;\n    readonly k1: SVGAnimatedNumber;\n    readonly k2: SVGAnimatedNumber;\n    readonly k3: SVGAnimatedNumber;\n    readonly k4: SVGAnimatedNumber;\n    readonly operator: SVGAnimatedEnumeration;\n    readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_ATOP: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_IN: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_OUT: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_OVER: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_XOR: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFECompositeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFECompositeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFECompositeElement: {\n    prototype: SVGFECompositeElement;\n    new(): SVGFECompositeElement;\n    readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_ATOP: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_IN: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_OUT: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_OVER: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\n    readonly SVG_FECOMPOSITE_OPERATOR_XOR: number;\n};\n\n/** Corresponds to the <feConvolveMatrix> element. */\ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly bias: SVGAnimatedNumber;\n    readonly divisor: SVGAnimatedNumber;\n    readonly edgeMode: SVGAnimatedEnumeration;\n    readonly in1: SVGAnimatedString;\n    readonly kernelMatrix: SVGAnimatedNumberList;\n    readonly kernelUnitLengthX: SVGAnimatedNumber;\n    readonly kernelUnitLengthY: SVGAnimatedNumber;\n    readonly orderX: SVGAnimatedInteger;\n    readonly orderY: SVGAnimatedInteger;\n    readonly preserveAlpha: SVGAnimatedBoolean;\n    readonly targetX: SVGAnimatedInteger;\n    readonly targetY: SVGAnimatedInteger;\n    readonly SVG_EDGEMODE_DUPLICATE: number;\n    readonly SVG_EDGEMODE_NONE: number;\n    readonly SVG_EDGEMODE_UNKNOWN: number;\n    readonly SVG_EDGEMODE_WRAP: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEConvolveMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEConvolveMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEConvolveMatrixElement: {\n    prototype: SVGFEConvolveMatrixElement;\n    new(): SVGFEConvolveMatrixElement;\n    readonly SVG_EDGEMODE_DUPLICATE: number;\n    readonly SVG_EDGEMODE_NONE: number;\n    readonly SVG_EDGEMODE_UNKNOWN: number;\n    readonly SVG_EDGEMODE_WRAP: number;\n};\n\n/** Corresponds to the <feDiffuseLighting> element. */\ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly diffuseConstant: SVGAnimatedNumber;\n    readonly in1: SVGAnimatedString;\n    readonly kernelUnitLengthX: SVGAnimatedNumber;\n    readonly kernelUnitLengthY: SVGAnimatedNumber;\n    readonly surfaceScale: SVGAnimatedNumber;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDiffuseLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDiffuseLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEDiffuseLightingElement: {\n    prototype: SVGFEDiffuseLightingElement;\n    new(): SVGFEDiffuseLightingElement;\n};\n\n/** Corresponds to the <feDisplacementMap> element. */\ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    readonly in2: SVGAnimatedString;\n    readonly scale: SVGAnimatedNumber;\n    readonly xChannelSelector: SVGAnimatedEnumeration;\n    readonly yChannelSelector: SVGAnimatedEnumeration;\n    readonly SVG_CHANNEL_A: number;\n    readonly SVG_CHANNEL_B: number;\n    readonly SVG_CHANNEL_G: number;\n    readonly SVG_CHANNEL_R: number;\n    readonly SVG_CHANNEL_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDisplacementMapElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDisplacementMapElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEDisplacementMapElement: {\n    prototype: SVGFEDisplacementMapElement;\n    new(): SVGFEDisplacementMapElement;\n    readonly SVG_CHANNEL_A: number;\n    readonly SVG_CHANNEL_B: number;\n    readonly SVG_CHANNEL_G: number;\n    readonly SVG_CHANNEL_R: number;\n    readonly SVG_CHANNEL_UNKNOWN: number;\n};\n\n/** Corresponds to the <feDistantLight> element. */\ninterface SVGFEDistantLightElement extends SVGElement {\n    readonly azimuth: SVGAnimatedNumber;\n    readonly elevation: SVGAnimatedNumber;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDistantLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDistantLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEDistantLightElement: {\n    prototype: SVGFEDistantLightElement;\n    new(): SVGFEDistantLightElement;\n};\n\ninterface SVGFEDropShadowElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly dx: SVGAnimatedNumber;\n    readonly dy: SVGAnimatedNumber;\n    readonly in1: SVGAnimatedString;\n    readonly stdDeviationX: SVGAnimatedNumber;\n    readonly stdDeviationY: SVGAnimatedNumber;\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDropShadowElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDropShadowElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEDropShadowElement: {\n    prototype: SVGFEDropShadowElement;\n    new(): SVGFEDropShadowElement;\n};\n\n/** Corresponds to the <feFlood> element. */\ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEFloodElement: {\n    prototype: SVGFEFloodElement;\n    new(): SVGFEFloodElement;\n};\n\n/** Corresponds to the <feFuncA> element. */\ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEFuncAElement: {\n    prototype: SVGFEFuncAElement;\n    new(): SVGFEFuncAElement;\n};\n\n/** Corresponds to the <feFuncB> element. */\ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEFuncBElement: {\n    prototype: SVGFEFuncBElement;\n    new(): SVGFEFuncBElement;\n};\n\n/** Corresponds to the <feFuncG> element. */\ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEFuncGElement: {\n    prototype: SVGFEFuncGElement;\n    new(): SVGFEFuncGElement;\n};\n\n/** Corresponds to the <feFuncR> element. */\ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEFuncRElement: {\n    prototype: SVGFEFuncRElement;\n    new(): SVGFEFuncRElement;\n};\n\n/** Corresponds to the <feGaussianBlur> element. */\ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    readonly stdDeviationX: SVGAnimatedNumber;\n    readonly stdDeviationY: SVGAnimatedNumber;\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEGaussianBlurElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEGaussianBlurElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEGaussianBlurElement: {\n    prototype: SVGFEGaussianBlurElement;\n    new(): SVGFEGaussianBlurElement;\n};\n\n/** Corresponds to the <feImage> element. */\ninterface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGURIReference {\n    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEImageElement: {\n    prototype: SVGFEImageElement;\n    new(): SVGFEImageElement;\n};\n\n/** Corresponds to the <feMerge> element. */\ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEMergeElement: {\n    prototype: SVGFEMergeElement;\n    new(): SVGFEMergeElement;\n};\n\n/** Corresponds to the <feMergeNode> element. */\ninterface SVGFEMergeNodeElement extends SVGElement {\n    readonly in1: SVGAnimatedString;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeNodeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeNodeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEMergeNodeElement: {\n    prototype: SVGFEMergeNodeElement;\n    new(): SVGFEMergeNodeElement;\n};\n\n/** Corresponds to the <feMorphology> element. */\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    readonly operator: SVGAnimatedEnumeration;\n    readonly radiusX: SVGAnimatedNumber;\n    readonly radiusY: SVGAnimatedNumber;\n    readonly SVG_MORPHOLOGY_OPERATOR_DILATE: number;\n    readonly SVG_MORPHOLOGY_OPERATOR_ERODE: number;\n    readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMorphologyElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMorphologyElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEMorphologyElement: {\n    prototype: SVGFEMorphologyElement;\n    new(): SVGFEMorphologyElement;\n    readonly SVG_MORPHOLOGY_OPERATOR_DILATE: number;\n    readonly SVG_MORPHOLOGY_OPERATOR_ERODE: number;\n    readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\n};\n\n/** Corresponds to the <feOffset> element. */\ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly dx: SVGAnimatedNumber;\n    readonly dy: SVGAnimatedNumber;\n    readonly in1: SVGAnimatedString;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEOffsetElement: {\n    prototype: SVGFEOffsetElement;\n    new(): SVGFEOffsetElement;\n};\n\n/** Corresponds to the <fePointLight> element. */\ninterface SVGFEPointLightElement extends SVGElement {\n    readonly x: SVGAnimatedNumber;\n    readonly y: SVGAnimatedNumber;\n    readonly z: SVGAnimatedNumber;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEPointLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEPointLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFEPointLightElement: {\n    prototype: SVGFEPointLightElement;\n    new(): SVGFEPointLightElement;\n};\n\n/** Corresponds to the <feSpecularLighting> element. */\ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    readonly kernelUnitLengthX: SVGAnimatedNumber;\n    readonly kernelUnitLengthY: SVGAnimatedNumber;\n    readonly specularConstant: SVGAnimatedNumber;\n    readonly specularExponent: SVGAnimatedNumber;\n    readonly surfaceScale: SVGAnimatedNumber;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpecularLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpecularLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFESpecularLightingElement: {\n    prototype: SVGFESpecularLightingElement;\n    new(): SVGFESpecularLightingElement;\n};\n\n/** Corresponds to the <feSpotLight> element. */\ninterface SVGFESpotLightElement extends SVGElement {\n    readonly limitingConeAngle: SVGAnimatedNumber;\n    readonly pointsAtX: SVGAnimatedNumber;\n    readonly pointsAtY: SVGAnimatedNumber;\n    readonly pointsAtZ: SVGAnimatedNumber;\n    readonly specularExponent: SVGAnimatedNumber;\n    readonly x: SVGAnimatedNumber;\n    readonly y: SVGAnimatedNumber;\n    readonly z: SVGAnimatedNumber;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpotLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpotLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFESpotLightElement: {\n    prototype: SVGFESpotLightElement;\n    new(): SVGFESpotLightElement;\n};\n\n/** Corresponds to the <feTile> element. */\ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly in1: SVGAnimatedString;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFETileElement: {\n    prototype: SVGFETileElement;\n    new(): SVGFETileElement;\n};\n\n/** Corresponds to the <feTurbulence> element. */\ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    readonly baseFrequencyX: SVGAnimatedNumber;\n    readonly baseFrequencyY: SVGAnimatedNumber;\n    readonly numOctaves: SVGAnimatedInteger;\n    readonly seed: SVGAnimatedNumber;\n    readonly stitchTiles: SVGAnimatedEnumeration;\n    readonly type: SVGAnimatedEnumeration;\n    readonly SVG_STITCHTYPE_NOSTITCH: number;\n    readonly SVG_STITCHTYPE_STITCH: number;\n    readonly SVG_STITCHTYPE_UNKNOWN: number;\n    readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\n    readonly SVG_TURBULENCE_TYPE_TURBULENCE: number;\n    readonly SVG_TURBULENCE_TYPE_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETurbulenceElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETurbulenceElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFETurbulenceElement: {\n    prototype: SVGFETurbulenceElement;\n    new(): SVGFETurbulenceElement;\n    readonly SVG_STITCHTYPE_NOSTITCH: number;\n    readonly SVG_STITCHTYPE_STITCH: number;\n    readonly SVG_STITCHTYPE_UNKNOWN: number;\n    readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\n    readonly SVG_TURBULENCE_TYPE_TURBULENCE: number;\n    readonly SVG_TURBULENCE_TYPE_UNKNOWN: number;\n};\n\n/** Provides access to the properties of <filter> elements, as well as methods to manipulate them. */\ninterface SVGFilterElement extends SVGElement, SVGURIReference {\n    readonly filterUnits: SVGAnimatedEnumeration;\n    readonly height: SVGAnimatedLength;\n    readonly primitiveUnits: SVGAnimatedEnumeration;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGFilterElement: {\n    prototype: SVGFilterElement;\n    new(): SVGFilterElement;\n};\n\ninterface SVGFilterPrimitiveStandardAttributes {\n    readonly height: SVGAnimatedLength;\n    readonly result: SVGAnimatedString;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n}\n\ninterface SVGFitToViewBox {\n    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n    readonly viewBox: SVGAnimatedRect;\n}\n\n/** Provides access to the properties of <foreignObject> elements, as well as methods to manipulate them. */\ninterface SVGForeignObjectElement extends SVGGraphicsElement {\n    readonly height: SVGAnimatedLength;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGForeignObjectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGForeignObjectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGForeignObjectElement: {\n    prototype: SVGForeignObjectElement;\n    new(): SVGForeignObjectElement;\n};\n\n/** Corresponds to the <g> element. */\ninterface SVGGElement extends SVGGraphicsElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGGElement: {\n    prototype: SVGGElement;\n    new(): SVGGElement;\n};\n\ninterface SVGGeometryElement extends SVGGraphicsElement {\n    readonly pathLength: SVGAnimatedNumber;\n    getPointAtLength(distance: number): DOMPoint;\n    getTotalLength(): number;\n    isPointInFill(point?: DOMPointInit): boolean;\n    isPointInStroke(point?: DOMPointInit): boolean;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGeometryElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGeometryElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGGeometryElement: {\n    prototype: SVGGeometryElement;\n    new(): SVGGeometryElement;\n};\n\n/** The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement. */\ninterface SVGGradientElement extends SVGElement, SVGURIReference {\n    readonly gradientTransform: SVGAnimatedTransformList;\n    readonly gradientUnits: SVGAnimatedEnumeration;\n    readonly spreadMethod: SVGAnimatedEnumeration;\n    readonly SVG_SPREADMETHOD_PAD: number;\n    readonly SVG_SPREADMETHOD_REFLECT: number;\n    readonly SVG_SPREADMETHOD_REPEAT: number;\n    readonly SVG_SPREADMETHOD_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGGradientElement: {\n    prototype: SVGGradientElement;\n    new(): SVGGradientElement;\n    readonly SVG_SPREADMETHOD_PAD: number;\n    readonly SVG_SPREADMETHOD_REFLECT: number;\n    readonly SVG_SPREADMETHOD_REPEAT: number;\n    readonly SVG_SPREADMETHOD_UNKNOWN: number;\n};\n\n/** SVG elements whose primary purpose is to directly render graphics into a group. */\ninterface SVGGraphicsElement extends SVGElement, SVGTests {\n    readonly transform: SVGAnimatedTransformList;\n    getBBox(options?: SVGBoundingBoxOptions): DOMRect;\n    getCTM(): DOMMatrix | null;\n    getScreenCTM(): DOMMatrix | null;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGGraphicsElement: {\n    prototype: SVGGraphicsElement;\n    new(): SVGGraphicsElement;\n};\n\n/** Corresponds to the <image> element. */\ninterface SVGImageElement extends SVGGraphicsElement, SVGURIReference {\n    readonly height: SVGAnimatedLength;\n    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGImageElement: {\n    prototype: SVGImageElement;\n    new(): SVGImageElement;\n};\n\n/** Correspond to the <length> basic data type. */\ninterface SVGLength {\n    readonly unitType: number;\n    value: number;\n    valueAsString: string;\n    valueInSpecifiedUnits: number;\n    convertToSpecifiedUnits(unitType: number): void;\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\n    readonly SVG_LENGTHTYPE_CM: number;\n    readonly SVG_LENGTHTYPE_EMS: number;\n    readonly SVG_LENGTHTYPE_EXS: number;\n    readonly SVG_LENGTHTYPE_IN: number;\n    readonly SVG_LENGTHTYPE_MM: number;\n    readonly SVG_LENGTHTYPE_NUMBER: number;\n    readonly SVG_LENGTHTYPE_PC: number;\n    readonly SVG_LENGTHTYPE_PERCENTAGE: number;\n    readonly SVG_LENGTHTYPE_PT: number;\n    readonly SVG_LENGTHTYPE_PX: number;\n    readonly SVG_LENGTHTYPE_UNKNOWN: number;\n}\n\ndeclare var SVGLength: {\n    prototype: SVGLength;\n    new(): SVGLength;\n    readonly SVG_LENGTHTYPE_CM: number;\n    readonly SVG_LENGTHTYPE_EMS: number;\n    readonly SVG_LENGTHTYPE_EXS: number;\n    readonly SVG_LENGTHTYPE_IN: number;\n    readonly SVG_LENGTHTYPE_MM: number;\n    readonly SVG_LENGTHTYPE_NUMBER: number;\n    readonly SVG_LENGTHTYPE_PC: number;\n    readonly SVG_LENGTHTYPE_PERCENTAGE: number;\n    readonly SVG_LENGTHTYPE_PT: number;\n    readonly SVG_LENGTHTYPE_PX: number;\n    readonly SVG_LENGTHTYPE_UNKNOWN: number;\n};\n\n/** The SVGLengthList defines a list of SVGLength objects. */\ninterface SVGLengthList {\n    readonly length: number;\n    readonly numberOfItems: number;\n    appendItem(newItem: SVGLength): SVGLength;\n    clear(): void;\n    getItem(index: number): SVGLength;\n    initialize(newItem: SVGLength): SVGLength;\n    insertItemBefore(newItem: SVGLength, index: number): SVGLength;\n    removeItem(index: number): SVGLength;\n    replaceItem(newItem: SVGLength, index: number): SVGLength;\n    [index: number]: SVGLength;\n}\n\ndeclare var SVGLengthList: {\n    prototype: SVGLengthList;\n    new(): SVGLengthList;\n};\n\n/** Provides access to the properties of <line> elements, as well as methods to manipulate them. */\ninterface SVGLineElement extends SVGGeometryElement {\n    readonly x1: SVGAnimatedLength;\n    readonly x2: SVGAnimatedLength;\n    readonly y1: SVGAnimatedLength;\n    readonly y2: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGLineElement: {\n    prototype: SVGLineElement;\n    new(): SVGLineElement;\n};\n\n/** Corresponds to the <linearGradient> element. */\ninterface SVGLinearGradientElement extends SVGGradientElement {\n    readonly x1: SVGAnimatedLength;\n    readonly x2: SVGAnimatedLength;\n    readonly y1: SVGAnimatedLength;\n    readonly y2: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLinearGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLinearGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGLinearGradientElement: {\n    prototype: SVGLinearGradientElement;\n    new(): SVGLinearGradientElement;\n};\n\ninterface SVGMPathElement extends SVGElement, SVGURIReference {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGMPathElement: {\n    prototype: SVGMPathElement;\n    new(): SVGMPathElement;\n};\n\ninterface SVGMarkerElement extends SVGElement, SVGFitToViewBox {\n    readonly markerHeight: SVGAnimatedLength;\n    readonly markerUnits: SVGAnimatedEnumeration;\n    readonly markerWidth: SVGAnimatedLength;\n    readonly orientAngle: SVGAnimatedAngle;\n    readonly orientType: SVGAnimatedEnumeration;\n    readonly refX: SVGAnimatedLength;\n    readonly refY: SVGAnimatedLength;\n    setOrientToAngle(angle: SVGAngle): void;\n    setOrientToAuto(): void;\n    readonly SVG_MARKERUNITS_STROKEWIDTH: number;\n    readonly SVG_MARKERUNITS_UNKNOWN: number;\n    readonly SVG_MARKERUNITS_USERSPACEONUSE: number;\n    readonly SVG_MARKER_ORIENT_ANGLE: number;\n    readonly SVG_MARKER_ORIENT_AUTO: number;\n    readonly SVG_MARKER_ORIENT_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGMarkerElement: {\n    prototype: SVGMarkerElement;\n    new(): SVGMarkerElement;\n    readonly SVG_MARKERUNITS_STROKEWIDTH: number;\n    readonly SVG_MARKERUNITS_UNKNOWN: number;\n    readonly SVG_MARKERUNITS_USERSPACEONUSE: number;\n    readonly SVG_MARKER_ORIENT_ANGLE: number;\n    readonly SVG_MARKER_ORIENT_AUTO: number;\n    readonly SVG_MARKER_ORIENT_UNKNOWN: number;\n};\n\n/** Provides access to the properties of <mask> elements, as well as methods to manipulate them. */\ninterface SVGMaskElement extends SVGElement {\n    readonly height: SVGAnimatedLength;\n    readonly maskContentUnits: SVGAnimatedEnumeration;\n    readonly maskUnits: SVGAnimatedEnumeration;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGMaskElement: {\n    prototype: SVGMaskElement;\n    new(): SVGMaskElement;\n};\n\n/** Corresponds to the <metadata> element. */\ninterface SVGMetadataElement extends SVGElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGMetadataElement: {\n    prototype: SVGMetadataElement;\n    new(): SVGMetadataElement;\n};\n\n/** Corresponds to the <number> basic data type. */\ninterface SVGNumber {\n    value: number;\n}\n\ndeclare var SVGNumber: {\n    prototype: SVGNumber;\n    new(): SVGNumber;\n};\n\n/** The SVGNumberList defines a list of SVGNumber objects. */\ninterface SVGNumberList {\n    readonly length: number;\n    readonly numberOfItems: number;\n    appendItem(newItem: SVGNumber): SVGNumber;\n    clear(): void;\n    getItem(index: number): SVGNumber;\n    initialize(newItem: SVGNumber): SVGNumber;\n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;\n    removeItem(index: number): SVGNumber;\n    replaceItem(newItem: SVGNumber, index: number): SVGNumber;\n    [index: number]: SVGNumber;\n}\n\ndeclare var SVGNumberList: {\n    prototype: SVGNumberList;\n    new(): SVGNumberList;\n};\n\n/** Corresponds to the <path> element. */\ninterface SVGPathElement extends SVGGeometryElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGPathElement: {\n    prototype: SVGPathElement;\n    new(): SVGPathElement;\n};\n\n/** Corresponds to the <pattern> element. */\ninterface SVGPatternElement extends SVGElement, SVGFitToViewBox, SVGURIReference {\n    readonly height: SVGAnimatedLength;\n    readonly patternContentUnits: SVGAnimatedEnumeration;\n    readonly patternTransform: SVGAnimatedTransformList;\n    readonly patternUnits: SVGAnimatedEnumeration;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGPatternElement: {\n    prototype: SVGPatternElement;\n    new(): SVGPatternElement;\n};\n\ninterface SVGPointList {\n    readonly length: number;\n    readonly numberOfItems: number;\n    appendItem(newItem: DOMPoint): DOMPoint;\n    clear(): void;\n    getItem(index: number): DOMPoint;\n    initialize(newItem: DOMPoint): DOMPoint;\n    insertItemBefore(newItem: DOMPoint, index: number): DOMPoint;\n    removeItem(index: number): DOMPoint;\n    replaceItem(newItem: DOMPoint, index: number): DOMPoint;\n    [index: number]: DOMPoint;\n}\n\ndeclare var SVGPointList: {\n    prototype: SVGPointList;\n    new(): SVGPointList;\n};\n\n/** Provides access to the properties of <polygon> elements, as well as methods to manipulate them. */\ninterface SVGPolygonElement extends SVGGeometryElement, SVGAnimatedPoints {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGPolygonElement: {\n    prototype: SVGPolygonElement;\n    new(): SVGPolygonElement;\n};\n\n/** Provides access to the properties of <polyline> elements, as well as methods to manipulate them. */\ninterface SVGPolylineElement extends SVGGeometryElement, SVGAnimatedPoints {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGPolylineElement: {\n    prototype: SVGPolylineElement;\n    new(): SVGPolylineElement;\n};\n\n/** Corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements. */\ninterface SVGPreserveAspectRatio {\n    align: number;\n    meetOrSlice: number;\n    readonly SVG_MEETORSLICE_MEET: number;\n    readonly SVG_MEETORSLICE_SLICE: number;\n    readonly SVG_MEETORSLICE_UNKNOWN: number;\n    readonly SVG_PRESERVEASPECTRATIO_NONE: number;\n    readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMID: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\n}\n\ndeclare var SVGPreserveAspectRatio: {\n    prototype: SVGPreserveAspectRatio;\n    new(): SVGPreserveAspectRatio;\n    readonly SVG_MEETORSLICE_MEET: number;\n    readonly SVG_MEETORSLICE_SLICE: number;\n    readonly SVG_MEETORSLICE_UNKNOWN: number;\n    readonly SVG_PRESERVEASPECTRATIO_NONE: number;\n    readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMID: number;\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\n};\n\n/** Corresponds to the <RadialGradient> element. */\ninterface SVGRadialGradientElement extends SVGGradientElement {\n    readonly cx: SVGAnimatedLength;\n    readonly cy: SVGAnimatedLength;\n    readonly fr: SVGAnimatedLength;\n    readonly fx: SVGAnimatedLength;\n    readonly fy: SVGAnimatedLength;\n    readonly r: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRadialGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRadialGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGRadialGradientElement: {\n    prototype: SVGRadialGradientElement;\n    new(): SVGRadialGradientElement;\n};\n\n/** Provides access to the properties of <rect> elements, as well as methods to manipulate them. */\ninterface SVGRectElement extends SVGGeometryElement {\n    readonly height: SVGAnimatedLength;\n    readonly rx: SVGAnimatedLength;\n    readonly ry: SVGAnimatedLength;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGRectElement: {\n    prototype: SVGRectElement;\n    new(): SVGRectElement;\n};\n\ninterface SVGSVGElementEventMap extends SVGElementEventMap, WindowEventHandlersEventMap {\n}\n\n/** Provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices. */\ninterface SVGSVGElement extends SVGGraphicsElement, SVGFitToViewBox, WindowEventHandlers {\n    currentScale: number;\n    readonly currentTranslate: DOMPointReadOnly;\n    readonly height: SVGAnimatedLength;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    animationsPaused(): boolean;\n    checkEnclosure(element: SVGElement, rect: DOMRectReadOnly): boolean;\n    checkIntersection(element: SVGElement, rect: DOMRectReadOnly): boolean;\n    createSVGAngle(): SVGAngle;\n    createSVGLength(): SVGLength;\n    createSVGMatrix(): DOMMatrix;\n    createSVGNumber(): SVGNumber;\n    createSVGPoint(): DOMPoint;\n    createSVGRect(): DOMRect;\n    createSVGTransform(): SVGTransform;\n    createSVGTransformFromMatrix(matrix?: DOMMatrix2DInit): SVGTransform;\n    deselectAll(): void;\n    /** @deprecated */\n    forceRedraw(): void;\n    getCurrentTime(): number;\n    getElementById(elementId: string): Element;\n    getEnclosureList(rect: DOMRectReadOnly, referenceElement: SVGElement | null): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;\n    getIntersectionList(rect: DOMRectReadOnly, referenceElement: SVGElement | null): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;\n    pauseAnimations(): void;\n    setCurrentTime(seconds: number): void;\n    /** @deprecated */\n    suspendRedraw(maxWaitMilliseconds: number): number;\n    unpauseAnimations(): void;\n    /** @deprecated */\n    unsuspendRedraw(suspendHandleID: number): void;\n    /** @deprecated */\n    unsuspendRedrawAll(): void;\n    addEventListener<K extends keyof SVGSVGElementEventMap>(type: K, listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGSVGElementEventMap>(type: K, listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGSVGElement: {\n    prototype: SVGSVGElement;\n    new(): SVGSVGElement;\n};\n\n/** Corresponds to the SVG <script> element. */\ninterface SVGScriptElement extends SVGElement, SVGURIReference {\n    type: string;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGScriptElement: {\n    prototype: SVGScriptElement;\n    new(): SVGScriptElement;\n};\n\ninterface SVGSetElement extends SVGAnimationElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGSetElement: {\n    prototype: SVGSetElement;\n    new(): SVGSetElement;\n};\n\n/** Corresponds to the <stop> element. */\ninterface SVGStopElement extends SVGElement {\n    readonly offset: SVGAnimatedNumber;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGStopElement: {\n    prototype: SVGStopElement;\n    new(): SVGStopElement;\n};\n\n/** The SVGStringList defines a list of DOMString objects. */\ninterface SVGStringList {\n    readonly length: number;\n    readonly numberOfItems: number;\n    appendItem(newItem: string): string;\n    clear(): void;\n    getItem(index: number): string;\n    initialize(newItem: string): string;\n    insertItemBefore(newItem: string, index: number): string;\n    removeItem(index: number): string;\n    replaceItem(newItem: string, index: number): string;\n    [index: number]: string;\n}\n\ndeclare var SVGStringList: {\n    prototype: SVGStringList;\n    new(): SVGStringList;\n};\n\n/** Corresponds to the SVG <style> element. */\ninterface SVGStyleElement extends SVGElement, LinkStyle {\n    disabled: boolean;\n    media: string;\n    title: string;\n    type: string;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGStyleElement: {\n    prototype: SVGStyleElement;\n    new(): SVGStyleElement;\n};\n\n/** Corresponds to the <switch> element. */\ninterface SVGSwitchElement extends SVGGraphicsElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGSwitchElement: {\n    prototype: SVGSwitchElement;\n    new(): SVGSwitchElement;\n};\n\n/** Corresponds to the <symbol> element. */\ninterface SVGSymbolElement extends SVGElement, SVGFitToViewBox {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGSymbolElement: {\n    prototype: SVGSymbolElement;\n    new(): SVGSymbolElement;\n};\n\n/** A <tspan> element. */\ninterface SVGTSpanElement extends SVGTextPositioningElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGTSpanElement: {\n    prototype: SVGTSpanElement;\n    new(): SVGTSpanElement;\n};\n\ninterface SVGTests {\n    readonly requiredExtensions: SVGStringList;\n    readonly systemLanguage: SVGStringList;\n}\n\n/** Implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement. */\ninterface SVGTextContentElement extends SVGGraphicsElement {\n    readonly lengthAdjust: SVGAnimatedEnumeration;\n    readonly textLength: SVGAnimatedLength;\n    getCharNumAtPosition(point?: DOMPointInit): number;\n    getComputedTextLength(): number;\n    getEndPositionOfChar(charnum: number): DOMPoint;\n    getExtentOfChar(charnum: number): DOMRect;\n    getNumberOfChars(): number;\n    getRotationOfChar(charnum: number): number;\n    getStartPositionOfChar(charnum: number): DOMPoint;\n    getSubStringLength(charnum: number, nchars: number): number;\n    /** @deprecated */\n    selectSubString(charnum: number, nchars: number): void;\n    readonly LENGTHADJUST_SPACING: number;\n    readonly LENGTHADJUST_SPACINGANDGLYPHS: number;\n    readonly LENGTHADJUST_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextContentElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextContentElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGTextContentElement: {\n    prototype: SVGTextContentElement;\n    new(): SVGTextContentElement;\n    readonly LENGTHADJUST_SPACING: number;\n    readonly LENGTHADJUST_SPACINGANDGLYPHS: number;\n    readonly LENGTHADJUST_UNKNOWN: number;\n};\n\n/** Corresponds to the <text> elements. */\ninterface SVGTextElement extends SVGTextPositioningElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGTextElement: {\n    prototype: SVGTextElement;\n    new(): SVGTextElement;\n};\n\n/** Corresponds to the <textPath> element. */\ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {\n    readonly method: SVGAnimatedEnumeration;\n    readonly spacing: SVGAnimatedEnumeration;\n    readonly startOffset: SVGAnimatedLength;\n    readonly TEXTPATH_METHODTYPE_ALIGN: number;\n    readonly TEXTPATH_METHODTYPE_STRETCH: number;\n    readonly TEXTPATH_METHODTYPE_UNKNOWN: number;\n    readonly TEXTPATH_SPACINGTYPE_AUTO: number;\n    readonly TEXTPATH_SPACINGTYPE_EXACT: number;\n    readonly TEXTPATH_SPACINGTYPE_UNKNOWN: number;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGTextPathElement: {\n    prototype: SVGTextPathElement;\n    new(): SVGTextPathElement;\n    readonly TEXTPATH_METHODTYPE_ALIGN: number;\n    readonly TEXTPATH_METHODTYPE_STRETCH: number;\n    readonly TEXTPATH_METHODTYPE_UNKNOWN: number;\n    readonly TEXTPATH_SPACINGTYPE_AUTO: number;\n    readonly TEXTPATH_SPACINGTYPE_EXACT: number;\n    readonly TEXTPATH_SPACINGTYPE_UNKNOWN: number;\n};\n\n/** Implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement. */\ninterface SVGTextPositioningElement extends SVGTextContentElement {\n    readonly dx: SVGAnimatedLengthList;\n    readonly dy: SVGAnimatedLengthList;\n    readonly rotate: SVGAnimatedNumberList;\n    readonly x: SVGAnimatedLengthList;\n    readonly y: SVGAnimatedLengthList;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPositioningElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPositioningElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGTextPositioningElement: {\n    prototype: SVGTextPositioningElement;\n    new(): SVGTextPositioningElement;\n};\n\n/** Corresponds to the <title> element. */\ninterface SVGTitleElement extends SVGElement {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGTitleElement: {\n    prototype: SVGTitleElement;\n    new(): SVGTitleElement;\n};\n\n/** SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute. */\ninterface SVGTransform {\n    readonly angle: number;\n    readonly matrix: DOMMatrix;\n    readonly type: number;\n    setMatrix(matrix?: DOMMatrix2DInit): void;\n    setRotate(angle: number, cx: number, cy: number): void;\n    setScale(sx: number, sy: number): void;\n    setSkewX(angle: number): void;\n    setSkewY(angle: number): void;\n    setTranslate(tx: number, ty: number): void;\n    readonly SVG_TRANSFORM_MATRIX: number;\n    readonly SVG_TRANSFORM_ROTATE: number;\n    readonly SVG_TRANSFORM_SCALE: number;\n    readonly SVG_TRANSFORM_SKEWX: number;\n    readonly SVG_TRANSFORM_SKEWY: number;\n    readonly SVG_TRANSFORM_TRANSLATE: number;\n    readonly SVG_TRANSFORM_UNKNOWN: number;\n}\n\ndeclare var SVGTransform: {\n    prototype: SVGTransform;\n    new(): SVGTransform;\n    readonly SVG_TRANSFORM_MATRIX: number;\n    readonly SVG_TRANSFORM_ROTATE: number;\n    readonly SVG_TRANSFORM_SCALE: number;\n    readonly SVG_TRANSFORM_SKEWX: number;\n    readonly SVG_TRANSFORM_SKEWY: number;\n    readonly SVG_TRANSFORM_TRANSLATE: number;\n    readonly SVG_TRANSFORM_UNKNOWN: number;\n};\n\n/** The SVGTransformList defines a list of SVGTransform objects. */\ninterface SVGTransformList {\n    readonly length: number;\n    readonly numberOfItems: number;\n    appendItem(newItem: SVGTransform): SVGTransform;\n    clear(): void;\n    consolidate(): SVGTransform | null;\n    createSVGTransformFromMatrix(matrix?: DOMMatrix2DInit): SVGTransform;\n    getItem(index: number): SVGTransform;\n    initialize(newItem: SVGTransform): SVGTransform;\n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;\n    removeItem(index: number): SVGTransform;\n    replaceItem(newItem: SVGTransform, index: number): SVGTransform;\n    [index: number]: SVGTransform;\n}\n\ndeclare var SVGTransformList: {\n    prototype: SVGTransformList;\n    new(): SVGTransformList;\n};\n\ninterface SVGURIReference {\n    readonly href: SVGAnimatedString;\n}\n\n/** A commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes. */\ninterface SVGUnitTypes {\n    readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\n    readonly SVG_UNIT_TYPE_UNKNOWN: number;\n    readonly SVG_UNIT_TYPE_USERSPACEONUSE: number;\n}\n\ndeclare var SVGUnitTypes: {\n    prototype: SVGUnitTypes;\n    new(): SVGUnitTypes;\n    readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\n    readonly SVG_UNIT_TYPE_UNKNOWN: number;\n    readonly SVG_UNIT_TYPE_USERSPACEONUSE: number;\n};\n\n/** Corresponds to the <use> element. */\ninterface SVGUseElement extends SVGGraphicsElement, SVGURIReference {\n    readonly height: SVGAnimatedLength;\n    readonly width: SVGAnimatedLength;\n    readonly x: SVGAnimatedLength;\n    readonly y: SVGAnimatedLength;\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGUseElement: {\n    prototype: SVGUseElement;\n    new(): SVGUseElement;\n};\n\n/** Provides access to the properties of <view> elements, as well as methods to manipulate them. */\ninterface SVGViewElement extends SVGElement, SVGFitToViewBox {\n    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SVGViewElement: {\n    prototype: SVGViewElement;\n    new(): SVGViewElement;\n};\n\n/** A screen, usually the one on which the current window is being rendered, and is obtained using window.screen. */\ninterface Screen {\n    readonly availHeight: number;\n    readonly availWidth: number;\n    readonly colorDepth: number;\n    readonly height: number;\n    readonly orientation: ScreenOrientation;\n    readonly pixelDepth: number;\n    readonly width: number;\n}\n\ndeclare var Screen: {\n    prototype: Screen;\n    new(): Screen;\n};\n\ninterface ScreenOrientationEventMap {\n    \"change\": Event;\n}\n\ninterface ScreenOrientation extends EventTarget {\n    readonly angle: number;\n    onchange: ((this: ScreenOrientation, ev: Event) => any) | null;\n    readonly type: OrientationType;\n    lock(orientation: OrientationLockType): Promise<void>;\n    unlock(): void;\n    addEventListener<K extends keyof ScreenOrientationEventMap>(type: K, listener: (this: ScreenOrientation, ev: ScreenOrientationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ScreenOrientationEventMap>(type: K, listener: (this: ScreenOrientation, ev: ScreenOrientationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ScreenOrientation: {\n    prototype: ScreenOrientation;\n    new(): ScreenOrientation;\n};\n\ninterface ScriptProcessorNodeEventMap {\n    \"audioprocess\": AudioProcessingEvent;\n}\n\n/**\n * Allows the generation, processing, or analyzing of audio using JavaScript.\n * @deprecated As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and was replaced by AudioWorklet (see AudioWorkletNode).\n */\ninterface ScriptProcessorNode extends AudioNode {\n    /** @deprecated */\n    readonly bufferSize: number;\n    /** @deprecated */\n    onaudioprocess: ((this: ScriptProcessorNode, ev: AudioProcessingEvent) => any) | null;\n    addEventListener<K extends keyof ScriptProcessorNodeEventMap>(type: K, listener: (this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ScriptProcessorNodeEventMap>(type: K, listener: (this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** @deprecated */\ndeclare var ScriptProcessorNode: {\n    prototype: ScriptProcessorNode;\n    new(): ScriptProcessorNode;\n};\n\n/** Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated. */\ninterface SecurityPolicyViolationEvent extends Event {\n    readonly blockedURI: string;\n    readonly columnNumber: number;\n    readonly disposition: SecurityPolicyViolationEventDisposition;\n    readonly documentURI: string;\n    readonly effectiveDirective: string;\n    readonly lineNumber: number;\n    readonly originalPolicy: string;\n    readonly referrer: string;\n    readonly sample: string;\n    readonly sourceFile: string;\n    readonly statusCode: number;\n    readonly violatedDirective: string;\n}\n\ndeclare var SecurityPolicyViolationEvent: {\n    prototype: SecurityPolicyViolationEvent;\n    new(type: string, eventInitDict?: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent;\n};\n\n/** A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call Window.getSelection(). */\ninterface Selection {\n    readonly anchorNode: Node | null;\n    readonly anchorOffset: number;\n    readonly focusNode: Node | null;\n    readonly focusOffset: number;\n    readonly isCollapsed: boolean;\n    readonly rangeCount: number;\n    readonly type: string;\n    addRange(range: Range): void;\n    collapse(node: Node | null, offset?: number): void;\n    collapseToEnd(): void;\n    collapseToStart(): void;\n    containsNode(node: Node, allowPartialContainment?: boolean): boolean;\n    deleteFromDocument(): void;\n    empty(): void;\n    extend(node: Node, offset?: number): void;\n    getRangeAt(index: number): Range;\n    removeAllRanges(): void;\n    removeRange(range: Range): void;\n    selectAllChildren(node: Node): void;\n    setBaseAndExtent(anchorNode: Node, anchorOffset: number, focusNode: Node, focusOffset: number): void;\n    setPosition(node: Node | null, offset?: number): void;\n    toString(): string;\n}\n\ndeclare var Selection: {\n    prototype: Selection;\n    new(): Selection;\n    toString(): string;\n};\n\ninterface ServiceWorkerEventMap extends AbstractWorkerEventMap {\n    \"statechange\": Event;\n}\n\n/**\n * This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.\n * Available only in secure contexts.\n */\ninterface ServiceWorker extends EventTarget, AbstractWorker {\n    onstatechange: ((this: ServiceWorker, ev: Event) => any) | null;\n    readonly scriptURL: string;\n    readonly state: ServiceWorkerState;\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n    addEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ServiceWorker: {\n    prototype: ServiceWorker;\n    new(): ServiceWorker;\n};\n\ninterface ServiceWorkerContainerEventMap {\n    \"controllerchange\": Event;\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\n/**\n * The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.\n * Available only in secure contexts.\n */\ninterface ServiceWorkerContainer extends EventTarget {\n    readonly controller: ServiceWorker | null;\n    oncontrollerchange: ((this: ServiceWorkerContainer, ev: Event) => any) | null;\n    onmessage: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\n    readonly ready: Promise<ServiceWorkerRegistration>;\n    getRegistration(clientURL?: string | URL): Promise<ServiceWorkerRegistration | undefined>;\n    getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>;\n    register(scriptURL: string | URL, options?: RegistrationOptions): Promise<ServiceWorkerRegistration>;\n    startMessages(): void;\n    addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ServiceWorkerContainer: {\n    prototype: ServiceWorkerContainer;\n    new(): ServiceWorkerContainer;\n};\n\ninterface ServiceWorkerRegistrationEventMap {\n    \"updatefound\": Event;\n}\n\n/**\n * This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.\n * Available only in secure contexts.\n */\ninterface ServiceWorkerRegistration extends EventTarget {\n    readonly active: ServiceWorker | null;\n    readonly installing: ServiceWorker | null;\n    readonly navigationPreload: NavigationPreloadManager;\n    onupdatefound: ((this: ServiceWorkerRegistration, ev: Event) => any) | null;\n    readonly pushManager: PushManager;\n    readonly scope: string;\n    readonly updateViaCache: ServiceWorkerUpdateViaCache;\n    readonly waiting: ServiceWorker | null;\n    getNotifications(filter?: GetNotificationOptions): Promise<Notification[]>;\n    showNotification(title: string, options?: NotificationOptions): Promise<void>;\n    unregister(): Promise<boolean>;\n    update(): Promise<void>;\n    addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ServiceWorkerRegistration: {\n    prototype: ServiceWorkerRegistration;\n    new(): ServiceWorkerRegistration;\n};\n\ninterface ShadowRootEventMap {\n    \"slotchange\": Event;\n}\n\ninterface ShadowRoot extends DocumentFragment, DocumentOrShadowRoot, InnerHTML {\n    readonly delegatesFocus: boolean;\n    readonly host: Element;\n    readonly mode: ShadowRootMode;\n    onslotchange: ((this: ShadowRoot, ev: Event) => any) | null;\n    readonly slotAssignment: SlotAssignmentMode;\n    /** Throws a \"NotSupportedError\" DOMException if context object is a shadow root. */\n    addEventListener<K extends keyof ShadowRootEventMap>(type: K, listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ShadowRootEventMap>(type: K, listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ShadowRoot: {\n    prototype: ShadowRoot;\n    new(): ShadowRoot;\n};\n\ninterface SharedWorker extends EventTarget, AbstractWorker {\n    /** Returns sharedWorker's MessagePort object which can be used to communicate with the global environment. */\n    readonly port: MessagePort;\n    addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: SharedWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: SharedWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SharedWorker: {\n    prototype: SharedWorker;\n    new(scriptURL: string | URL, options?: string | WorkerOptions): SharedWorker;\n};\n\ninterface Slottable {\n    readonly assignedSlot: HTMLSlotElement | null;\n}\n\ninterface SourceBufferEventMap {\n    \"abort\": Event;\n    \"error\": Event;\n    \"update\": Event;\n    \"updateend\": Event;\n    \"updatestart\": Event;\n}\n\n/** A chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments. */\ninterface SourceBuffer extends EventTarget {\n    appendWindowEnd: number;\n    appendWindowStart: number;\n    readonly buffered: TimeRanges;\n    mode: AppendMode;\n    onabort: ((this: SourceBuffer, ev: Event) => any) | null;\n    onerror: ((this: SourceBuffer, ev: Event) => any) | null;\n    onupdate: ((this: SourceBuffer, ev: Event) => any) | null;\n    onupdateend: ((this: SourceBuffer, ev: Event) => any) | null;\n    onupdatestart: ((this: SourceBuffer, ev: Event) => any) | null;\n    timestampOffset: number;\n    readonly updating: boolean;\n    abort(): void;\n    appendBuffer(data: BufferSource): void;\n    changeType(type: string): void;\n    remove(start: number, end: number): void;\n    addEventListener<K extends keyof SourceBufferEventMap>(type: K, listener: (this: SourceBuffer, ev: SourceBufferEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SourceBufferEventMap>(type: K, listener: (this: SourceBuffer, ev: SourceBufferEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SourceBuffer: {\n    prototype: SourceBuffer;\n    new(): SourceBuffer;\n};\n\ninterface SourceBufferListEventMap {\n    \"addsourcebuffer\": Event;\n    \"removesourcebuffer\": Event;\n}\n\n/** A simple container list for multiple SourceBuffer objects. */\ninterface SourceBufferList extends EventTarget {\n    readonly length: number;\n    onaddsourcebuffer: ((this: SourceBufferList, ev: Event) => any) | null;\n    onremovesourcebuffer: ((this: SourceBufferList, ev: Event) => any) | null;\n    addEventListener<K extends keyof SourceBufferListEventMap>(type: K, listener: (this: SourceBufferList, ev: SourceBufferListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SourceBufferListEventMap>(type: K, listener: (this: SourceBufferList, ev: SourceBufferListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n    [index: number]: SourceBuffer;\n}\n\ndeclare var SourceBufferList: {\n    prototype: SourceBufferList;\n    new(): SourceBufferList;\n};\n\ninterface SpeechRecognitionAlternative {\n    readonly confidence: number;\n    readonly transcript: string;\n}\n\ndeclare var SpeechRecognitionAlternative: {\n    prototype: SpeechRecognitionAlternative;\n    new(): SpeechRecognitionAlternative;\n};\n\ninterface SpeechRecognitionResult {\n    readonly isFinal: boolean;\n    readonly length: number;\n    item(index: number): SpeechRecognitionAlternative;\n    [index: number]: SpeechRecognitionAlternative;\n}\n\ndeclare var SpeechRecognitionResult: {\n    prototype: SpeechRecognitionResult;\n    new(): SpeechRecognitionResult;\n};\n\ninterface SpeechRecognitionResultList {\n    readonly length: number;\n    item(index: number): SpeechRecognitionResult;\n    [index: number]: SpeechRecognitionResult;\n}\n\ndeclare var SpeechRecognitionResultList: {\n    prototype: SpeechRecognitionResultList;\n    new(): SpeechRecognitionResultList;\n};\n\ninterface SpeechSynthesisEventMap {\n    \"voiceschanged\": Event;\n}\n\n/** This Web Speech API interface is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides. */\ninterface SpeechSynthesis extends EventTarget {\n    onvoiceschanged: ((this: SpeechSynthesis, ev: Event) => any) | null;\n    readonly paused: boolean;\n    readonly pending: boolean;\n    readonly speaking: boolean;\n    cancel(): void;\n    getVoices(): SpeechSynthesisVoice[];\n    pause(): void;\n    resume(): void;\n    speak(utterance: SpeechSynthesisUtterance): void;\n    addEventListener<K extends keyof SpeechSynthesisEventMap>(type: K, listener: (this: SpeechSynthesis, ev: SpeechSynthesisEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SpeechSynthesisEventMap>(type: K, listener: (this: SpeechSynthesis, ev: SpeechSynthesisEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SpeechSynthesis: {\n    prototype: SpeechSynthesis;\n    new(): SpeechSynthesis;\n};\n\ninterface SpeechSynthesisErrorEvent extends SpeechSynthesisEvent {\n    readonly error: SpeechSynthesisErrorCode;\n}\n\ndeclare var SpeechSynthesisErrorEvent: {\n    prototype: SpeechSynthesisErrorEvent;\n    new(type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent;\n};\n\n/** This Web Speech API interface contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service. */\ninterface SpeechSynthesisEvent extends Event {\n    readonly charIndex: number;\n    readonly charLength: number;\n    readonly elapsedTime: number;\n    readonly name: string;\n    readonly utterance: SpeechSynthesisUtterance;\n}\n\ndeclare var SpeechSynthesisEvent: {\n    prototype: SpeechSynthesisEvent;\n    new(type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent;\n};\n\ninterface SpeechSynthesisUtteranceEventMap {\n    \"boundary\": SpeechSynthesisEvent;\n    \"end\": SpeechSynthesisEvent;\n    \"error\": SpeechSynthesisErrorEvent;\n    \"mark\": SpeechSynthesisEvent;\n    \"pause\": SpeechSynthesisEvent;\n    \"resume\": SpeechSynthesisEvent;\n    \"start\": SpeechSynthesisEvent;\n}\n\n/** This Web Speech API interface represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.) */\ninterface SpeechSynthesisUtterance extends EventTarget {\n    lang: string;\n    onboundary: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;\n    onend: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;\n    onerror: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisErrorEvent) => any) | null;\n    onmark: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;\n    onpause: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;\n    onresume: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;\n    onstart: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;\n    pitch: number;\n    rate: number;\n    text: string;\n    voice: SpeechSynthesisVoice | null;\n    volume: number;\n    addEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type: K, listener: (this: SpeechSynthesisUtterance, ev: SpeechSynthesisUtteranceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type: K, listener: (this: SpeechSynthesisUtterance, ev: SpeechSynthesisUtteranceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SpeechSynthesisUtterance: {\n    prototype: SpeechSynthesisUtterance;\n    new(text?: string): SpeechSynthesisUtterance;\n};\n\n/** This Web Speech API interface represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI. */\ninterface SpeechSynthesisVoice {\n    readonly default: boolean;\n    readonly lang: string;\n    readonly localService: boolean;\n    readonly name: string;\n    readonly voiceURI: string;\n}\n\ndeclare var SpeechSynthesisVoice: {\n    prototype: SpeechSynthesisVoice;\n    new(): SpeechSynthesisVoice;\n};\n\ninterface StaticRange extends AbstractRange {\n}\n\ndeclare var StaticRange: {\n    prototype: StaticRange;\n    new(init: StaticRangeInit): StaticRange;\n};\n\n/** The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode. */\ninterface StereoPannerNode extends AudioNode {\n    readonly pan: AudioParam;\n}\n\ndeclare var StereoPannerNode: {\n    prototype: StereoPannerNode;\n    new(context: BaseAudioContext, options?: StereoPannerOptions): StereoPannerNode;\n};\n\n/** This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items. */\ninterface Storage {\n    /** Returns the number of key/value pairs. */\n    readonly length: number;\n    /**\n     * Removes all key/value pairs, if there are any.\n     *\n     * Dispatches a storage event on Window objects holding an equivalent Storage object.\n     */\n    clear(): void;\n    /** Returns the current value associated with the given key, or null if the given key does not exist. */\n    getItem(key: string): string | null;\n    /** Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs. */\n    key(index: number): string | null;\n    /**\n     * Removes the key/value pair with the given key, if a key/value pair with the given key exists.\n     *\n     * Dispatches a storage event on Window objects holding an equivalent Storage object.\n     */\n    removeItem(key: string): void;\n    /**\n     * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n     *\n     * Throws a \"QuotaExceededError\" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)\n     *\n     * Dispatches a storage event on Window objects holding an equivalent Storage object.\n     */\n    setItem(key: string, value: string): void;\n    [name: string]: any;\n}\n\ndeclare var Storage: {\n    prototype: Storage;\n    new(): Storage;\n};\n\n/** A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document. */\ninterface StorageEvent extends Event {\n    /** Returns the key of the storage item being changed. */\n    readonly key: string | null;\n    /** Returns the new value of the key of the storage item whose value is being changed. */\n    readonly newValue: string | null;\n    /** Returns the old value of the key of the storage item whose value is being changed. */\n    readonly oldValue: string | null;\n    /** Returns the Storage object that was affected. */\n    readonly storageArea: Storage | null;\n    /** Returns the URL of the document whose storage item changed. */\n    readonly url: string;\n    initStorageEvent(type: string, bubbles?: boolean, cancelable?: boolean, key?: string | null, oldValue?: string | null, newValue?: string | null, url?: string | URL, storageArea?: Storage | null): void;\n}\n\ndeclare var StorageEvent: {\n    prototype: StorageEvent;\n    new(type: string, eventInitDict?: StorageEventInit): StorageEvent;\n};\n\n/** Available only in secure contexts. */\ninterface StorageManager {\n    estimate(): Promise<StorageEstimate>;\n    getDirectory(): Promise<FileSystemDirectoryHandle>;\n    persist(): Promise<boolean>;\n    persisted(): Promise<boolean>;\n}\n\ndeclare var StorageManager: {\n    prototype: StorageManager;\n    new(): StorageManager;\n};\n\n/** @deprecated */\ninterface StyleMedia {\n    type: string;\n    matchMedium(mediaquery: string): boolean;\n}\n\n/** A single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface. */\ninterface StyleSheet {\n    disabled: boolean;\n    readonly href: string | null;\n    readonly media: MediaList;\n    readonly ownerNode: Element | ProcessingInstruction | null;\n    readonly parentStyleSheet: CSSStyleSheet | null;\n    readonly title: string | null;\n    readonly type: string;\n}\n\ndeclare var StyleSheet: {\n    prototype: StyleSheet;\n    new(): StyleSheet;\n};\n\n/** A list of StyleSheet. */\ninterface StyleSheetList {\n    readonly length: number;\n    item(index: number): CSSStyleSheet | null;\n    [index: number]: CSSStyleSheet;\n}\n\ndeclare var StyleSheetList: {\n    prototype: StyleSheetList;\n    new(): StyleSheetList;\n};\n\ninterface SubmitEvent extends Event {\n    /** Returns the element representing the submit button that triggered the form submission, or null if the submission was not triggered by a button. */\n    readonly submitter: HTMLElement | null;\n}\n\ndeclare var SubmitEvent: {\n    prototype: SubmitEvent;\n    new(type: string, eventInitDict?: SubmitEventInit): SubmitEvent;\n};\n\n/**\n * This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).\n * Available only in secure contexts.\n */\ninterface SubtleCrypto {\n    decrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\n    deriveBits(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, length: number): Promise<ArrayBuffer>;\n    deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;\n    digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>;\n    encrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\n    exportKey(format: \"jwk\", key: CryptoKey): Promise<JsonWebKey>;\n    exportKey(format: Exclude<KeyFormat, \"jwk\">, key: CryptoKey): Promise<ArrayBuffer>;\n    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;\n    generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair | CryptoKey>;\n    importKey(format: \"jwk\", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    importKey(format: Exclude<KeyFormat, \"jwk\">, keyData: BufferSource, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;\n    sign(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\n    unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;\n    verify(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<boolean>;\n    wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<ArrayBuffer>;\n}\n\ndeclare var SubtleCrypto: {\n    prototype: SubtleCrypto;\n    new(): SubtleCrypto;\n};\n\n/** The textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children. */\ninterface Text extends CharacterData, Slottable {\n    /** Returns the combined data of all direct Text node siblings. */\n    readonly wholeText: string;\n    /** Splits data at the given offset and returns the remainder as Text node. */\n    splitText(offset: number): Text;\n}\n\ndeclare var Text: {\n    prototype: Text;\n    new(data?: string): Text;\n};\n\n/** A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\ninterface TextDecoder extends TextDecoderCommon {\n    /**\n     * Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented input. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.\n     *\n     * ```\n     * var string = \"\", decoder = new TextDecoder(encoding), buffer;\n     * while(buffer = next_chunk()) {\n     *   string += decoder.decode(buffer, {stream:true});\n     * }\n     * string += decoder.decode(); // end-of-queue\n     * ```\n     *\n     * If the error mode is \"fatal\" and encoding's decoder returns error, throws a TypeError.\n     */\n    decode(input?: BufferSource, options?: TextDecodeOptions): string;\n}\n\ndeclare var TextDecoder: {\n    prototype: TextDecoder;\n    new(label?: string, options?: TextDecoderOptions): TextDecoder;\n};\n\ninterface TextDecoderCommon {\n    /** Returns encoding's name, lowercased. */\n    readonly encoding: string;\n    /** Returns true if error mode is \"fatal\", otherwise false. */\n    readonly fatal: boolean;\n    /** Returns the value of ignore BOM. */\n    readonly ignoreBOM: boolean;\n}\n\ninterface TextDecoderStream extends GenericTransformStream, TextDecoderCommon {\n    readonly readable: ReadableStream<string>;\n    readonly writable: WritableStream<BufferSource>;\n}\n\ndeclare var TextDecoderStream: {\n    prototype: TextDecoderStream;\n    new(label?: string, options?: TextDecoderOptions): TextDecoderStream;\n};\n\n/** TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\ninterface TextEncoder extends TextEncoderCommon {\n    /** Returns the result of running UTF-8's encoder. */\n    encode(input?: string): Uint8Array;\n    /** Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as an object wherein read is the number of converted code units of source and written is the number of bytes modified in destination. */\n    encodeInto(source: string, destination: Uint8Array): TextEncoderEncodeIntoResult;\n}\n\ndeclare var TextEncoder: {\n    prototype: TextEncoder;\n    new(): TextEncoder;\n};\n\ninterface TextEncoderCommon {\n    /** Returns \"utf-8\". */\n    readonly encoding: string;\n}\n\ninterface TextEncoderStream extends GenericTransformStream, TextEncoderCommon {\n    readonly readable: ReadableStream<Uint8Array>;\n    readonly writable: WritableStream<string>;\n}\n\ndeclare var TextEncoderStream: {\n    prototype: TextEncoderStream;\n    new(): TextEncoderStream;\n};\n\n/** The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method. */\ninterface TextMetrics {\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxAscent: number;\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxDescent: number;\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxLeft: number;\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxRight: number;\n    /** Returns the measurement described below. */\n    readonly fontBoundingBoxAscent: number;\n    /** Returns the measurement described below. */\n    readonly fontBoundingBoxDescent: number;\n    /** Returns the measurement described below. */\n    readonly width: number;\n}\n\ndeclare var TextMetrics: {\n    prototype: TextMetrics;\n    new(): TextMetrics;\n};\n\ninterface TextTrackEventMap {\n    \"cuechange\": Event;\n}\n\n/** This interface also inherits properties from EventTarget. */\ninterface TextTrack extends EventTarget {\n    /** Returns the text track cues from the text track list of cues that are currently active (i.e. that start before the current playback position and end after it), as a TextTrackCueList object. */\n    readonly activeCues: TextTrackCueList | null;\n    /** Returns the text track list of cues, as a TextTrackCueList object. */\n    readonly cues: TextTrackCueList | null;\n    /**\n     * Returns the ID of the given track.\n     *\n     * For in-band tracks, this is the ID that can be used with a fragment if the format supports media fragment syntax, and that can be used with the getTrackById() method.\n     *\n     * For TextTrack objects corresponding to track elements, this is the ID of the track element.\n     */\n    readonly id: string;\n    /** Returns the text track in-band metadata track dispatch type string. */\n    readonly inBandMetadataTrackDispatchType: string;\n    /** Returns the text track kind string. */\n    readonly kind: TextTrackKind;\n    /** Returns the text track label, if there is one, or the empty string otherwise (indicating that a custom label probably needs to be generated from the other attributes of the object if the object is exposed to the user). */\n    readonly label: string;\n    /** Returns the text track language string. */\n    readonly language: string;\n    /**\n     * Returns the text track mode, represented by a string from the following list:\n     *\n     * Can be set, to change the mode.\n     */\n    mode: TextTrackMode;\n    oncuechange: ((this: TextTrack, ev: Event) => any) | null;\n    /** Adds the given cue to textTrack's text track list of cues. */\n    addCue(cue: TextTrackCue): void;\n    /** Removes the given cue from textTrack's text track list of cues. */\n    removeCue(cue: TextTrackCue): void;\n    addEventListener<K extends keyof TextTrackEventMap>(type: K, listener: (this: TextTrack, ev: TextTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof TextTrackEventMap>(type: K, listener: (this: TextTrack, ev: TextTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var TextTrack: {\n    prototype: TextTrack;\n    new(): TextTrack;\n};\n\ninterface TextTrackCueEventMap {\n    \"enter\": Event;\n    \"exit\": Event;\n}\n\n/** TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used. */\ninterface TextTrackCue extends EventTarget {\n    /**\n     * Returns the text track cue end time, in seconds.\n     *\n     * Can be set.\n     */\n    endTime: number;\n    /**\n     * Returns the text track cue identifier.\n     *\n     * Can be set.\n     */\n    id: string;\n    onenter: ((this: TextTrackCue, ev: Event) => any) | null;\n    onexit: ((this: TextTrackCue, ev: Event) => any) | null;\n    /**\n     * Returns true if the text track cue pause-on-exit flag is set, false otherwise.\n     *\n     * Can be set.\n     */\n    pauseOnExit: boolean;\n    /**\n     * Returns the text track cue start time, in seconds.\n     *\n     * Can be set.\n     */\n    startTime: number;\n    /** Returns the TextTrack object to which this text track cue belongs, if any, or null otherwise. */\n    readonly track: TextTrack | null;\n    addEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var TextTrackCue: {\n    prototype: TextTrackCue;\n    new(): TextTrackCue;\n};\n\ninterface TextTrackCueList {\n    /** Returns the number of cues in the list. */\n    readonly length: number;\n    /**\n     * Returns the first text track cue (in text track cue order) with text track cue identifier id.\n     *\n     * Returns null if none of the cues have the given identifier or if the argument is the empty string.\n     */\n    getCueById(id: string): TextTrackCue | null;\n    [index: number]: TextTrackCue;\n}\n\ndeclare var TextTrackCueList: {\n    prototype: TextTrackCueList;\n    new(): TextTrackCueList;\n};\n\ninterface TextTrackListEventMap {\n    \"addtrack\": TrackEvent;\n    \"change\": Event;\n    \"removetrack\": TrackEvent;\n}\n\ninterface TextTrackList extends EventTarget {\n    readonly length: number;\n    onaddtrack: ((this: TextTrackList, ev: TrackEvent) => any) | null;\n    onchange: ((this: TextTrackList, ev: Event) => any) | null;\n    onremovetrack: ((this: TextTrackList, ev: TrackEvent) => any) | null;\n    getTrackById(id: string): TextTrack | null;\n    addEventListener<K extends keyof TextTrackListEventMap>(type: K, listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof TextTrackListEventMap>(type: K, listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n    [index: number]: TextTrack;\n}\n\ndeclare var TextTrackList: {\n    prototype: TextTrackList;\n    new(): TextTrackList;\n};\n\n/** Used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements. */\ninterface TimeRanges {\n    /** Returns the number of ranges in the object. */\n    readonly length: number;\n    /**\n     * Returns the time for the end of the range with the given index.\n     *\n     * Throws an \"IndexSizeError\" DOMException if the index is out of range.\n     */\n    end(index: number): number;\n    /**\n     * Returns the time for the start of the range with the given index.\n     *\n     * Throws an \"IndexSizeError\" DOMException if the index is out of range.\n     */\n    start(index: number): number;\n}\n\ndeclare var TimeRanges: {\n    prototype: TimeRanges;\n    new(): TimeRanges;\n};\n\n/** A single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad. */\ninterface Touch {\n    readonly clientX: number;\n    readonly clientY: number;\n    readonly force: number;\n    readonly identifier: number;\n    readonly pageX: number;\n    readonly pageY: number;\n    readonly radiusX: number;\n    readonly radiusY: number;\n    readonly rotationAngle: number;\n    readonly screenX: number;\n    readonly screenY: number;\n    readonly target: EventTarget;\n}\n\ndeclare var Touch: {\n    prototype: Touch;\n    new(touchInitDict: TouchInit): Touch;\n};\n\n/** An event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth. */\ninterface TouchEvent extends UIEvent {\n    readonly altKey: boolean;\n    readonly changedTouches: TouchList;\n    readonly ctrlKey: boolean;\n    readonly metaKey: boolean;\n    readonly shiftKey: boolean;\n    readonly targetTouches: TouchList;\n    readonly touches: TouchList;\n}\n\ndeclare var TouchEvent: {\n    prototype: TouchEvent;\n    new(type: string, eventInitDict?: TouchEventInit): TouchEvent;\n};\n\n/** A list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries. */\ninterface TouchList {\n    readonly length: number;\n    item(index: number): Touch | null;\n    [index: number]: Touch;\n}\n\ndeclare var TouchList: {\n    prototype: TouchList;\n    new(): TouchList;\n};\n\n/** The TrackEvent interface, part of the HTML DOM specification, is used for events which represent changes to the set of available tracks on an HTML media element; these events are addtrack and removetrack. */\ninterface TrackEvent extends Event {\n    /** Returns the track object (TextTrack, AudioTrack, or VideoTrack) to which the event relates. */\n    readonly track: TextTrack | null;\n}\n\ndeclare var TrackEvent: {\n    prototype: TrackEvent;\n    new(type: string, eventInitDict?: TrackEventInit): TrackEvent;\n};\n\ninterface TransformStream<I = any, O = any> {\n    readonly readable: ReadableStream<O>;\n    readonly writable: WritableStream<I>;\n}\n\ndeclare var TransformStream: {\n    prototype: TransformStream;\n    new<I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;\n};\n\ninterface TransformStreamDefaultController<O = any> {\n    readonly desiredSize: number | null;\n    enqueue(chunk?: O): void;\n    error(reason?: any): void;\n    terminate(): void;\n}\n\ndeclare var TransformStreamDefaultController: {\n    prototype: TransformStreamDefaultController;\n    new(): TransformStreamDefaultController;\n};\n\n/** Events providing information related to transitions. */\ninterface TransitionEvent extends Event {\n    readonly elapsedTime: number;\n    readonly propertyName: string;\n    readonly pseudoElement: string;\n}\n\ndeclare var TransitionEvent: {\n    prototype: TransitionEvent;\n    new(type: string, transitionEventInitDict?: TransitionEventInit): TransitionEvent;\n};\n\n/** The nodes of a document subtree and a position within them. */\ninterface TreeWalker {\n    currentNode: Node;\n    readonly filter: NodeFilter | null;\n    readonly root: Node;\n    readonly whatToShow: number;\n    firstChild(): Node | null;\n    lastChild(): Node | null;\n    nextNode(): Node | null;\n    nextSibling(): Node | null;\n    parentNode(): Node | null;\n    previousNode(): Node | null;\n    previousSibling(): Node | null;\n}\n\ndeclare var TreeWalker: {\n    prototype: TreeWalker;\n    new(): TreeWalker;\n};\n\n/** Simple user interface events. */\ninterface UIEvent extends Event {\n    readonly detail: number;\n    readonly view: Window | null;\n    /** @deprecated */\n    readonly which: number;\n    /** @deprecated */\n    initUIEvent(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window | null, detailArg?: number): void;\n}\n\ndeclare var UIEvent: {\n    prototype: UIEvent;\n    new(type: string, eventInitDict?: UIEventInit): UIEvent;\n};\n\n/** The URL interface represents an object providing static methods used for creating object URLs. */\ninterface URL {\n    hash: string;\n    host: string;\n    hostname: string;\n    href: string;\n    toString(): string;\n    readonly origin: string;\n    password: string;\n    pathname: string;\n    port: string;\n    protocol: string;\n    search: string;\n    readonly searchParams: URLSearchParams;\n    username: string;\n    toJSON(): string;\n}\n\ndeclare var URL: {\n    prototype: URL;\n    new(url: string | URL, base?: string | URL): URL;\n    createObjectURL(obj: Blob | MediaSource): string;\n    revokeObjectURL(url: string): void;\n};\n\ntype webkitURL = URL;\ndeclare var webkitURL: typeof URL;\n\ninterface URLSearchParams {\n    /** Appends a specified key/value pair as a new search parameter. */\n    append(name: string, value: string): void;\n    /** Deletes the given search parameter, and its associated value, from the list of all search parameters. */\n    delete(name: string): void;\n    /** Returns the first value associated to the given search parameter. */\n    get(name: string): string | null;\n    /** Returns all the values association with a given search parameter. */\n    getAll(name: string): string[];\n    /** Returns a Boolean indicating if such a search parameter exists. */\n    has(name: string): boolean;\n    /** Sets the value associated to a given search parameter to the given value. If there were several values, delete the others. */\n    set(name: string, value: string): void;\n    sort(): void;\n    /** Returns a string containing a query string suitable for use in a URL. Does not include the question mark. */\n    toString(): string;\n    forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;\n}\n\ndeclare var URLSearchParams: {\n    prototype: URLSearchParams;\n    new(init?: string[][] | Record<string, string> | string | URLSearchParams): URLSearchParams;\n    toString(): string;\n};\n\ninterface VTTCue extends TextTrackCue {\n    align: AlignSetting;\n    line: LineAndPositionSetting;\n    lineAlign: LineAlignSetting;\n    position: LineAndPositionSetting;\n    positionAlign: PositionAlignSetting;\n    region: VTTRegion | null;\n    size: number;\n    snapToLines: boolean;\n    text: string;\n    vertical: DirectionSetting;\n    getCueAsHTML(): DocumentFragment;\n    addEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: VTTCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: VTTCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var VTTCue: {\n    prototype: VTTCue;\n    new(startTime: number, endTime: number, text: string): VTTCue;\n};\n\ninterface VTTRegion {\n    id: string;\n    lines: number;\n    regionAnchorX: number;\n    regionAnchorY: number;\n    scroll: ScrollSetting;\n    viewportAnchorX: number;\n    viewportAnchorY: number;\n    width: number;\n}\n\ndeclare var VTTRegion: {\n    prototype: VTTRegion;\n    new(): VTTRegion;\n};\n\n/** The validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid. */\ninterface ValidityState {\n    readonly badInput: boolean;\n    readonly customError: boolean;\n    readonly patternMismatch: boolean;\n    readonly rangeOverflow: boolean;\n    readonly rangeUnderflow: boolean;\n    readonly stepMismatch: boolean;\n    readonly tooLong: boolean;\n    readonly tooShort: boolean;\n    readonly typeMismatch: boolean;\n    readonly valid: boolean;\n    readonly valueMissing: boolean;\n}\n\ndeclare var ValidityState: {\n    prototype: ValidityState;\n    new(): ValidityState;\n};\n\ninterface VideoColorSpace {\n    readonly fullRange: boolean | null;\n    readonly matrix: VideoMatrixCoefficients | null;\n    readonly primaries: VideoColorPrimaries | null;\n    readonly transfer: VideoTransferCharacteristics | null;\n    toJSON(): VideoColorSpaceInit;\n}\n\ndeclare var VideoColorSpace: {\n    prototype: VideoColorSpace;\n    new(init?: VideoColorSpaceInit): VideoColorSpace;\n};\n\n/** Returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video. */\ninterface VideoPlaybackQuality {\n    /** @deprecated */\n    readonly corruptedVideoFrames: number;\n    readonly creationTime: DOMHighResTimeStamp;\n    readonly droppedVideoFrames: number;\n    readonly totalVideoFrames: number;\n}\n\ndeclare var VideoPlaybackQuality: {\n    prototype: VideoPlaybackQuality;\n    new(): VideoPlaybackQuality;\n};\n\ninterface VisualViewportEventMap {\n    \"resize\": Event;\n    \"scroll\": Event;\n}\n\ninterface VisualViewport extends EventTarget {\n    readonly height: number;\n    readonly offsetLeft: number;\n    readonly offsetTop: number;\n    onresize: ((this: VisualViewport, ev: Event) => any) | null;\n    onscroll: ((this: VisualViewport, ev: Event) => any) | null;\n    readonly pageLeft: number;\n    readonly pageTop: number;\n    readonly scale: number;\n    readonly width: number;\n    addEventListener<K extends keyof VisualViewportEventMap>(type: K, listener: (this: VisualViewport, ev: VisualViewportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof VisualViewportEventMap>(type: K, listener: (this: VisualViewport, ev: VisualViewportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var VisualViewport: {\n    prototype: VisualViewport;\n    new(): VisualViewport;\n};\n\ninterface WEBGL_color_buffer_float {\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum;\n    readonly RGBA32F_EXT: GLenum;\n    readonly UNSIGNED_NORMALIZED_EXT: GLenum;\n}\n\ninterface WEBGL_compressed_texture_astc {\n    getSupportedProfiles(): string[];\n    readonly COMPRESSED_RGBA_ASTC_10x10_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_10x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_10x6_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_10x8_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_12x10_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_12x12_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_4x4_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_5x4_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_5x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_6x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_6x6_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_8x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_8x6_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_8x8_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GLenum;\n}\n\ninterface WEBGL_compressed_texture_etc {\n    readonly COMPRESSED_R11_EAC: GLenum;\n    readonly COMPRESSED_RG11_EAC: GLenum;\n    readonly COMPRESSED_RGB8_ETC2: GLenum;\n    readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum;\n    readonly COMPRESSED_RGBA8_ETC2_EAC: GLenum;\n    readonly COMPRESSED_SIGNED_R11_EAC: GLenum;\n    readonly COMPRESSED_SIGNED_RG11_EAC: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum;\n    readonly COMPRESSED_SRGB8_ETC2: GLenum;\n    readonly COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum;\n}\n\ninterface WEBGL_compressed_texture_etc1 {\n    readonly COMPRESSED_RGB_ETC1_WEBGL: GLenum;\n}\n\n/** The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats. */\ninterface WEBGL_compressed_texture_s3tc {\n    readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: GLenum;\n    readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: GLenum;\n    readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: GLenum;\n    readonly COMPRESSED_RGB_S3TC_DXT1_EXT: GLenum;\n}\n\ninterface WEBGL_compressed_texture_s3tc_srgb {\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GLenum;\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GLenum;\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GLenum;\n    readonly COMPRESSED_SRGB_S3TC_DXT1_EXT: GLenum;\n}\n\n/** The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes. */\ninterface WEBGL_debug_renderer_info {\n    readonly UNMASKED_RENDERER_WEBGL: GLenum;\n    readonly UNMASKED_VENDOR_WEBGL: GLenum;\n}\n\ninterface WEBGL_debug_shaders {\n    getTranslatedShaderSource(shader: WebGLShader): string;\n}\n\n/** The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures. */\ninterface WEBGL_depth_texture {\n    readonly UNSIGNED_INT_24_8_WEBGL: GLenum;\n}\n\ninterface WEBGL_draw_buffers {\n    drawBuffersWEBGL(buffers: GLenum[]): void;\n    readonly COLOR_ATTACHMENT0_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT10_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT11_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT12_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT13_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT14_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT15_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT1_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT2_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT3_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT4_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT5_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT6_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT7_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT8_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT9_WEBGL: GLenum;\n    readonly DRAW_BUFFER0_WEBGL: GLenum;\n    readonly DRAW_BUFFER10_WEBGL: GLenum;\n    readonly DRAW_BUFFER11_WEBGL: GLenum;\n    readonly DRAW_BUFFER12_WEBGL: GLenum;\n    readonly DRAW_BUFFER13_WEBGL: GLenum;\n    readonly DRAW_BUFFER14_WEBGL: GLenum;\n    readonly DRAW_BUFFER15_WEBGL: GLenum;\n    readonly DRAW_BUFFER1_WEBGL: GLenum;\n    readonly DRAW_BUFFER2_WEBGL: GLenum;\n    readonly DRAW_BUFFER3_WEBGL: GLenum;\n    readonly DRAW_BUFFER4_WEBGL: GLenum;\n    readonly DRAW_BUFFER5_WEBGL: GLenum;\n    readonly DRAW_BUFFER6_WEBGL: GLenum;\n    readonly DRAW_BUFFER7_WEBGL: GLenum;\n    readonly DRAW_BUFFER8_WEBGL: GLenum;\n    readonly DRAW_BUFFER9_WEBGL: GLenum;\n    readonly MAX_COLOR_ATTACHMENTS_WEBGL: GLenum;\n    readonly MAX_DRAW_BUFFERS_WEBGL: GLenum;\n}\n\ninterface WEBGL_lose_context {\n    loseContext(): void;\n    restoreContext(): void;\n}\n\ninterface WEBGL_multi_draw {\n    multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Int32Array | GLint[], firstsOffset: GLuint, countsList: Int32Array | GLsizei[], countsOffset: GLuint, instanceCountsList: Int32Array | GLsizei[], instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawArraysWEBGL(mode: GLenum, firstsList: Int32Array | GLint[], firstsOffset: GLuint, countsList: Int32Array | GLsizei[], countsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Int32Array | GLint[], countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | GLsizei[], offsetsOffset: GLuint, instanceCountsList: Int32Array | GLsizei[], instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsWEBGL(mode: GLenum, countsList: Int32Array | GLint[], countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | GLsizei[], offsetsOffset: GLuint, drawcount: GLsizei): void;\n}\n\n/** A WaveShaperNode always has exactly one input and one output. */\ninterface WaveShaperNode extends AudioNode {\n    curve: Float32Array | null;\n    oversample: OverSampleType;\n}\n\ndeclare var WaveShaperNode: {\n    prototype: WaveShaperNode;\n    new(context: BaseAudioContext, options?: WaveShaperOptions): WaveShaperNode;\n};\n\ninterface WebGL2RenderingContext extends WebGL2RenderingContextBase, WebGL2RenderingContextOverloads, WebGLRenderingContextBase {\n}\n\ndeclare var WebGL2RenderingContext: {\n    prototype: WebGL2RenderingContext;\n    new(): WebGL2RenderingContext;\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\n    readonly ALREADY_SIGNALED: GLenum;\n    readonly ANY_SAMPLES_PASSED: GLenum;\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\n    readonly COLOR: GLenum;\n    readonly COLOR_ATTACHMENT1: GLenum;\n    readonly COLOR_ATTACHMENT10: GLenum;\n    readonly COLOR_ATTACHMENT11: GLenum;\n    readonly COLOR_ATTACHMENT12: GLenum;\n    readonly COLOR_ATTACHMENT13: GLenum;\n    readonly COLOR_ATTACHMENT14: GLenum;\n    readonly COLOR_ATTACHMENT15: GLenum;\n    readonly COLOR_ATTACHMENT2: GLenum;\n    readonly COLOR_ATTACHMENT3: GLenum;\n    readonly COLOR_ATTACHMENT4: GLenum;\n    readonly COLOR_ATTACHMENT5: GLenum;\n    readonly COLOR_ATTACHMENT6: GLenum;\n    readonly COLOR_ATTACHMENT7: GLenum;\n    readonly COLOR_ATTACHMENT8: GLenum;\n    readonly COLOR_ATTACHMENT9: GLenum;\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\n    readonly CONDITION_SATISFIED: GLenum;\n    readonly COPY_READ_BUFFER: GLenum;\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\n    readonly COPY_WRITE_BUFFER: GLenum;\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\n    readonly CURRENT_QUERY: GLenum;\n    readonly DEPTH: GLenum;\n    readonly DEPTH24_STENCIL8: GLenum;\n    readonly DEPTH32F_STENCIL8: GLenum;\n    readonly DEPTH_COMPONENT24: GLenum;\n    readonly DEPTH_COMPONENT32F: GLenum;\n    readonly DRAW_BUFFER0: GLenum;\n    readonly DRAW_BUFFER1: GLenum;\n    readonly DRAW_BUFFER10: GLenum;\n    readonly DRAW_BUFFER11: GLenum;\n    readonly DRAW_BUFFER12: GLenum;\n    readonly DRAW_BUFFER13: GLenum;\n    readonly DRAW_BUFFER14: GLenum;\n    readonly DRAW_BUFFER15: GLenum;\n    readonly DRAW_BUFFER2: GLenum;\n    readonly DRAW_BUFFER3: GLenum;\n    readonly DRAW_BUFFER4: GLenum;\n    readonly DRAW_BUFFER5: GLenum;\n    readonly DRAW_BUFFER6: GLenum;\n    readonly DRAW_BUFFER7: GLenum;\n    readonly DRAW_BUFFER8: GLenum;\n    readonly DRAW_BUFFER9: GLenum;\n    readonly DRAW_FRAMEBUFFER: GLenum;\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\n    readonly DYNAMIC_COPY: GLenum;\n    readonly DYNAMIC_READ: GLenum;\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\n    readonly FLOAT_MAT2x3: GLenum;\n    readonly FLOAT_MAT2x4: GLenum;\n    readonly FLOAT_MAT3x2: GLenum;\n    readonly FLOAT_MAT3x4: GLenum;\n    readonly FLOAT_MAT4x2: GLenum;\n    readonly FLOAT_MAT4x3: GLenum;\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\n    readonly HALF_FLOAT: GLenum;\n    readonly INTERLEAVED_ATTRIBS: GLenum;\n    readonly INT_2_10_10_10_REV: GLenum;\n    readonly INT_SAMPLER_2D: GLenum;\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly INT_SAMPLER_3D: GLenum;\n    readonly INT_SAMPLER_CUBE: GLenum;\n    readonly INVALID_INDEX: GLenum;\n    readonly MAX: GLenum;\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_DRAW_BUFFERS: GLenum;\n    readonly MAX_ELEMENTS_INDICES: GLenum;\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\n    readonly MAX_ELEMENT_INDEX: GLenum;\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly MAX_SAMPLES: GLenum;\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\n    readonly MAX_VARYING_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MIN: GLenum;\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly OBJECT_TYPE: GLenum;\n    readonly PACK_ROW_LENGTH: GLenum;\n    readonly PACK_SKIP_PIXELS: GLenum;\n    readonly PACK_SKIP_ROWS: GLenum;\n    readonly PIXEL_PACK_BUFFER: GLenum;\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\n    readonly QUERY_RESULT: GLenum;\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\n    readonly R11F_G11F_B10F: GLenum;\n    readonly R16F: GLenum;\n    readonly R16I: GLenum;\n    readonly R16UI: GLenum;\n    readonly R32F: GLenum;\n    readonly R32I: GLenum;\n    readonly R32UI: GLenum;\n    readonly R8: GLenum;\n    readonly R8I: GLenum;\n    readonly R8UI: GLenum;\n    readonly R8_SNORM: GLenum;\n    readonly RASTERIZER_DISCARD: GLenum;\n    readonly READ_BUFFER: GLenum;\n    readonly READ_FRAMEBUFFER: GLenum;\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\n    readonly RED: GLenum;\n    readonly RED_INTEGER: GLenum;\n    readonly RENDERBUFFER_SAMPLES: GLenum;\n    readonly RG: GLenum;\n    readonly RG16F: GLenum;\n    readonly RG16I: GLenum;\n    readonly RG16UI: GLenum;\n    readonly RG32F: GLenum;\n    readonly RG32I: GLenum;\n    readonly RG32UI: GLenum;\n    readonly RG8: GLenum;\n    readonly RG8I: GLenum;\n    readonly RG8UI: GLenum;\n    readonly RG8_SNORM: GLenum;\n    readonly RGB10_A2: GLenum;\n    readonly RGB10_A2UI: GLenum;\n    readonly RGB16F: GLenum;\n    readonly RGB16I: GLenum;\n    readonly RGB16UI: GLenum;\n    readonly RGB32F: GLenum;\n    readonly RGB32I: GLenum;\n    readonly RGB32UI: GLenum;\n    readonly RGB8: GLenum;\n    readonly RGB8I: GLenum;\n    readonly RGB8UI: GLenum;\n    readonly RGB8_SNORM: GLenum;\n    readonly RGB9_E5: GLenum;\n    readonly RGBA16F: GLenum;\n    readonly RGBA16I: GLenum;\n    readonly RGBA16UI: GLenum;\n    readonly RGBA32F: GLenum;\n    readonly RGBA32I: GLenum;\n    readonly RGBA32UI: GLenum;\n    readonly RGBA8: GLenum;\n    readonly RGBA8I: GLenum;\n    readonly RGBA8UI: GLenum;\n    readonly RGBA8_SNORM: GLenum;\n    readonly RGBA_INTEGER: GLenum;\n    readonly RGB_INTEGER: GLenum;\n    readonly RG_INTEGER: GLenum;\n    readonly SAMPLER_2D_ARRAY: GLenum;\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\n    readonly SAMPLER_2D_SHADOW: GLenum;\n    readonly SAMPLER_3D: GLenum;\n    readonly SAMPLER_BINDING: GLenum;\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\n    readonly SEPARATE_ATTRIBS: GLenum;\n    readonly SIGNALED: GLenum;\n    readonly SIGNED_NORMALIZED: GLenum;\n    readonly SRGB: GLenum;\n    readonly SRGB8: GLenum;\n    readonly SRGB8_ALPHA8: GLenum;\n    readonly STATIC_COPY: GLenum;\n    readonly STATIC_READ: GLenum;\n    readonly STENCIL: GLenum;\n    readonly STREAM_COPY: GLenum;\n    readonly STREAM_READ: GLenum;\n    readonly SYNC_CONDITION: GLenum;\n    readonly SYNC_FENCE: GLenum;\n    readonly SYNC_FLAGS: GLenum;\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\n    readonly SYNC_STATUS: GLenum;\n    readonly TEXTURE_2D_ARRAY: GLenum;\n    readonly TEXTURE_3D: GLenum;\n    readonly TEXTURE_BASE_LEVEL: GLenum;\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\n    readonly TEXTURE_BINDING_3D: GLenum;\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\n    readonly TEXTURE_COMPARE_MODE: GLenum;\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\n    readonly TEXTURE_MAX_LEVEL: GLenum;\n    readonly TEXTURE_MAX_LOD: GLenum;\n    readonly TEXTURE_MIN_LOD: GLenum;\n    readonly TEXTURE_WRAP_R: GLenum;\n    readonly TIMEOUT_EXPIRED: GLenum;\n    readonly TIMEOUT_IGNORED: GLint64;\n    readonly TRANSFORM_FEEDBACK: GLenum;\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\n    readonly UNIFORM_BUFFER: GLenum;\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\n    readonly UNIFORM_BUFFER_START: GLenum;\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\n    readonly UNIFORM_OFFSET: GLenum;\n    readonly UNIFORM_SIZE: GLenum;\n    readonly UNIFORM_TYPE: GLenum;\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\n    readonly UNPACK_ROW_LENGTH: GLenum;\n    readonly UNPACK_SKIP_IMAGES: GLenum;\n    readonly UNPACK_SKIP_PIXELS: GLenum;\n    readonly UNPACK_SKIP_ROWS: GLenum;\n    readonly UNSIGNALED: GLenum;\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\n    readonly UNSIGNED_INT_24_8: GLenum;\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\n    readonly UNSIGNED_INT_VEC2: GLenum;\n    readonly UNSIGNED_INT_VEC3: GLenum;\n    readonly UNSIGNED_INT_VEC4: GLenum;\n    readonly UNSIGNED_NORMALIZED: GLenum;\n    readonly VERTEX_ARRAY_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\n    readonly WAIT_FAILED: GLenum;\n    readonly ACTIVE_ATTRIBUTES: GLenum;\n    readonly ACTIVE_TEXTURE: GLenum;\n    readonly ACTIVE_UNIFORMS: GLenum;\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\n    readonly ALPHA: GLenum;\n    readonly ALPHA_BITS: GLenum;\n    readonly ALWAYS: GLenum;\n    readonly ARRAY_BUFFER: GLenum;\n    readonly ARRAY_BUFFER_BINDING: GLenum;\n    readonly ATTACHED_SHADERS: GLenum;\n    readonly BACK: GLenum;\n    readonly BLEND: GLenum;\n    readonly BLEND_COLOR: GLenum;\n    readonly BLEND_DST_ALPHA: GLenum;\n    readonly BLEND_DST_RGB: GLenum;\n    readonly BLEND_EQUATION: GLenum;\n    readonly BLEND_EQUATION_ALPHA: GLenum;\n    readonly BLEND_EQUATION_RGB: GLenum;\n    readonly BLEND_SRC_ALPHA: GLenum;\n    readonly BLEND_SRC_RGB: GLenum;\n    readonly BLUE_BITS: GLenum;\n    readonly BOOL: GLenum;\n    readonly BOOL_VEC2: GLenum;\n    readonly BOOL_VEC3: GLenum;\n    readonly BOOL_VEC4: GLenum;\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\n    readonly BUFFER_SIZE: GLenum;\n    readonly BUFFER_USAGE: GLenum;\n    readonly BYTE: GLenum;\n    readonly CCW: GLenum;\n    readonly CLAMP_TO_EDGE: GLenum;\n    readonly COLOR_ATTACHMENT0: GLenum;\n    readonly COLOR_BUFFER_BIT: GLenum;\n    readonly COLOR_CLEAR_VALUE: GLenum;\n    readonly COLOR_WRITEMASK: GLenum;\n    readonly COMPILE_STATUS: GLenum;\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\n    readonly CONSTANT_ALPHA: GLenum;\n    readonly CONSTANT_COLOR: GLenum;\n    readonly CONTEXT_LOST_WEBGL: GLenum;\n    readonly CULL_FACE: GLenum;\n    readonly CULL_FACE_MODE: GLenum;\n    readonly CURRENT_PROGRAM: GLenum;\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\n    readonly CW: GLenum;\n    readonly DECR: GLenum;\n    readonly DECR_WRAP: GLenum;\n    readonly DELETE_STATUS: GLenum;\n    readonly DEPTH_ATTACHMENT: GLenum;\n    readonly DEPTH_BITS: GLenum;\n    readonly DEPTH_BUFFER_BIT: GLenum;\n    readonly DEPTH_CLEAR_VALUE: GLenum;\n    readonly DEPTH_COMPONENT: GLenum;\n    readonly DEPTH_COMPONENT16: GLenum;\n    readonly DEPTH_FUNC: GLenum;\n    readonly DEPTH_RANGE: GLenum;\n    readonly DEPTH_STENCIL: GLenum;\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\n    readonly DEPTH_TEST: GLenum;\n    readonly DEPTH_WRITEMASK: GLenum;\n    readonly DITHER: GLenum;\n    readonly DONT_CARE: GLenum;\n    readonly DST_ALPHA: GLenum;\n    readonly DST_COLOR: GLenum;\n    readonly DYNAMIC_DRAW: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\n    readonly EQUAL: GLenum;\n    readonly FASTEST: GLenum;\n    readonly FLOAT: GLenum;\n    readonly FLOAT_MAT2: GLenum;\n    readonly FLOAT_MAT3: GLenum;\n    readonly FLOAT_MAT4: GLenum;\n    readonly FLOAT_VEC2: GLenum;\n    readonly FLOAT_VEC3: GLenum;\n    readonly FLOAT_VEC4: GLenum;\n    readonly FRAGMENT_SHADER: GLenum;\n    readonly FRAMEBUFFER: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\n    readonly FRAMEBUFFER_BINDING: GLenum;\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\n    readonly FRONT: GLenum;\n    readonly FRONT_AND_BACK: GLenum;\n    readonly FRONT_FACE: GLenum;\n    readonly FUNC_ADD: GLenum;\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\n    readonly FUNC_SUBTRACT: GLenum;\n    readonly GENERATE_MIPMAP_HINT: GLenum;\n    readonly GEQUAL: GLenum;\n    readonly GREATER: GLenum;\n    readonly GREEN_BITS: GLenum;\n    readonly HIGH_FLOAT: GLenum;\n    readonly HIGH_INT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\n    readonly INCR: GLenum;\n    readonly INCR_WRAP: GLenum;\n    readonly INT: GLenum;\n    readonly INT_VEC2: GLenum;\n    readonly INT_VEC3: GLenum;\n    readonly INT_VEC4: GLenum;\n    readonly INVALID_ENUM: GLenum;\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\n    readonly INVALID_OPERATION: GLenum;\n    readonly INVALID_VALUE: GLenum;\n    readonly INVERT: GLenum;\n    readonly KEEP: GLenum;\n    readonly LEQUAL: GLenum;\n    readonly LESS: GLenum;\n    readonly LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\n    readonly LINES: GLenum;\n    readonly LINE_LOOP: GLenum;\n    readonly LINE_STRIP: GLenum;\n    readonly LINE_WIDTH: GLenum;\n    readonly LINK_STATUS: GLenum;\n    readonly LOW_FLOAT: GLenum;\n    readonly LOW_INT: GLenum;\n    readonly LUMINANCE: GLenum;\n    readonly LUMINANCE_ALPHA: GLenum;\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_TEXTURE_SIZE: GLenum;\n    readonly MAX_VARYING_VECTORS: GLenum;\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\n    readonly MAX_VIEWPORT_DIMS: GLenum;\n    readonly MEDIUM_FLOAT: GLenum;\n    readonly MEDIUM_INT: GLenum;\n    readonly MIRRORED_REPEAT: GLenum;\n    readonly NEAREST: GLenum;\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\n    readonly NEVER: GLenum;\n    readonly NICEST: GLenum;\n    readonly NONE: GLenum;\n    readonly NOTEQUAL: GLenum;\n    readonly NO_ERROR: GLenum;\n    readonly ONE: GLenum;\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\n    readonly ONE_MINUS_DST_COLOR: GLenum;\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\n    readonly OUT_OF_MEMORY: GLenum;\n    readonly PACK_ALIGNMENT: GLenum;\n    readonly POINTS: GLenum;\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\n    readonly POLYGON_OFFSET_FILL: GLenum;\n    readonly POLYGON_OFFSET_UNITS: GLenum;\n    readonly RED_BITS: GLenum;\n    readonly RENDERBUFFER: GLenum;\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\n    readonly RENDERBUFFER_BINDING: GLenum;\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\n    readonly RENDERBUFFER_HEIGHT: GLenum;\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\n    readonly RENDERBUFFER_WIDTH: GLenum;\n    readonly RENDERER: GLenum;\n    readonly REPEAT: GLenum;\n    readonly REPLACE: GLenum;\n    readonly RGB: GLenum;\n    readonly RGB565: GLenum;\n    readonly RGB5_A1: GLenum;\n    readonly RGBA: GLenum;\n    readonly RGBA4: GLenum;\n    readonly SAMPLER_2D: GLenum;\n    readonly SAMPLER_CUBE: GLenum;\n    readonly SAMPLES: GLenum;\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\n    readonly SAMPLE_BUFFERS: GLenum;\n    readonly SAMPLE_COVERAGE: GLenum;\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\n    readonly SCISSOR_BOX: GLenum;\n    readonly SCISSOR_TEST: GLenum;\n    readonly SHADER_TYPE: GLenum;\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\n    readonly SHORT: GLenum;\n    readonly SRC_ALPHA: GLenum;\n    readonly SRC_ALPHA_SATURATE: GLenum;\n    readonly SRC_COLOR: GLenum;\n    readonly STATIC_DRAW: GLenum;\n    readonly STENCIL_ATTACHMENT: GLenum;\n    readonly STENCIL_BACK_FAIL: GLenum;\n    readonly STENCIL_BACK_FUNC: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_BACK_REF: GLenum;\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\n    readonly STENCIL_BITS: GLenum;\n    readonly STENCIL_BUFFER_BIT: GLenum;\n    readonly STENCIL_CLEAR_VALUE: GLenum;\n    readonly STENCIL_FAIL: GLenum;\n    readonly STENCIL_FUNC: GLenum;\n    readonly STENCIL_INDEX8: GLenum;\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_REF: GLenum;\n    readonly STENCIL_TEST: GLenum;\n    readonly STENCIL_VALUE_MASK: GLenum;\n    readonly STENCIL_WRITEMASK: GLenum;\n    readonly STREAM_DRAW: GLenum;\n    readonly SUBPIXEL_BITS: GLenum;\n    readonly TEXTURE: GLenum;\n    readonly TEXTURE0: GLenum;\n    readonly TEXTURE1: GLenum;\n    readonly TEXTURE10: GLenum;\n    readonly TEXTURE11: GLenum;\n    readonly TEXTURE12: GLenum;\n    readonly TEXTURE13: GLenum;\n    readonly TEXTURE14: GLenum;\n    readonly TEXTURE15: GLenum;\n    readonly TEXTURE16: GLenum;\n    readonly TEXTURE17: GLenum;\n    readonly TEXTURE18: GLenum;\n    readonly TEXTURE19: GLenum;\n    readonly TEXTURE2: GLenum;\n    readonly TEXTURE20: GLenum;\n    readonly TEXTURE21: GLenum;\n    readonly TEXTURE22: GLenum;\n    readonly TEXTURE23: GLenum;\n    readonly TEXTURE24: GLenum;\n    readonly TEXTURE25: GLenum;\n    readonly TEXTURE26: GLenum;\n    readonly TEXTURE27: GLenum;\n    readonly TEXTURE28: GLenum;\n    readonly TEXTURE29: GLenum;\n    readonly TEXTURE3: GLenum;\n    readonly TEXTURE30: GLenum;\n    readonly TEXTURE31: GLenum;\n    readonly TEXTURE4: GLenum;\n    readonly TEXTURE5: GLenum;\n    readonly TEXTURE6: GLenum;\n    readonly TEXTURE7: GLenum;\n    readonly TEXTURE8: GLenum;\n    readonly TEXTURE9: GLenum;\n    readonly TEXTURE_2D: GLenum;\n    readonly TEXTURE_BINDING_2D: GLenum;\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\n    readonly TEXTURE_MAG_FILTER: GLenum;\n    readonly TEXTURE_MIN_FILTER: GLenum;\n    readonly TEXTURE_WRAP_S: GLenum;\n    readonly TEXTURE_WRAP_T: GLenum;\n    readonly TRIANGLES: GLenum;\n    readonly TRIANGLE_FAN: GLenum;\n    readonly TRIANGLE_STRIP: GLenum;\n    readonly UNPACK_ALIGNMENT: GLenum;\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\n    readonly UNSIGNED_BYTE: GLenum;\n    readonly UNSIGNED_INT: GLenum;\n    readonly UNSIGNED_SHORT: GLenum;\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\n    readonly VALIDATE_STATUS: GLenum;\n    readonly VENDOR: GLenum;\n    readonly VERSION: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\n    readonly VERTEX_SHADER: GLenum;\n    readonly VIEWPORT: GLenum;\n    readonly ZERO: GLenum;\n};\n\ninterface WebGL2RenderingContextBase {\n    beginQuery(target: GLenum, query: WebGLQuery): void;\n    beginTransformFeedback(primitiveMode: GLenum): void;\n    bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer | null): void;\n    bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer | null, offset: GLintptr, size: GLsizeiptr): void;\n    bindSampler(unit: GLuint, sampler: WebGLSampler | null): void;\n    bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback | null): void;\n    bindVertexArray(array: WebGLVertexArrayObject | null): void;\n    blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;\n    clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;\n    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset?: GLuint): void;\n    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset?: GLuint): void;\n    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset?: GLuint): void;\n    clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum;\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;\n    copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    createQuery(): WebGLQuery | null;\n    createSampler(): WebGLSampler | null;\n    createTransformFeedback(): WebGLTransformFeedback | null;\n    createVertexArray(): WebGLVertexArrayObject | null;\n    deleteQuery(query: WebGLQuery | null): void;\n    deleteSampler(sampler: WebGLSampler | null): void;\n    deleteSync(sync: WebGLSync | null): void;\n    deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;\n    deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\n    drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;\n    drawBuffers(buffers: GLenum[]): void;\n    drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;\n    drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr): void;\n    endQuery(target: GLenum): void;\n    endTransformFeedback(): void;\n    fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync | null;\n    framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, layer: GLint): void;\n    getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): string | null;\n    getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): any;\n    getActiveUniforms(program: WebGLProgram, uniformIndices: GLuint[], pname: GLenum): any;\n    getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset?: GLuint, length?: GLuint): void;\n    getFragDataLocation(program: WebGLProgram, name: string): GLint;\n    getIndexedParameter(target: GLenum, index: GLuint): any;\n    getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): any;\n    getQuery(target: GLenum, pname: GLenum): WebGLQuery | null;\n    getQueryParameter(query: WebGLQuery, pname: GLenum): any;\n    getSamplerParameter(sampler: WebGLSampler, pname: GLenum): any;\n    getSyncParameter(sync: WebGLSync, pname: GLenum): any;\n    getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\n    getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): GLuint;\n    getUniformIndices(program: WebGLProgram, uniformNames: string[]): GLuint[] | null;\n    invalidateFramebuffer(target: GLenum, attachments: GLenum[]): void;\n    invalidateSubFramebuffer(target: GLenum, attachments: GLenum[], x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    isQuery(query: WebGLQuery | null): GLboolean;\n    isSampler(sampler: WebGLSampler | null): GLboolean;\n    isSync(sync: WebGLSync | null): GLboolean;\n    isTransformFeedback(tf: WebGLTransformFeedback | null): GLboolean;\n    isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;\n    pauseTransformFeedback(): void;\n    readBuffer(src: GLenum): void;\n    renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\n    resumeTransformFeedback(): void;\n    samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): void;\n    samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView | null): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\n    texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\n    texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView | null, srcOffset?: GLuint): void;\n    transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: GLenum): void;\n    uniform1ui(location: WebGLUniformLocation | null, v0: GLuint): void;\n    uniform1uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint): void;\n    uniform2uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint): void;\n    uniform3uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;\n    uniform4uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void;\n    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    vertexAttribDivisor(index: GLuint, divisor: GLuint): void;\n    vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;\n    vertexAttribI4iv(index: GLuint, values: Int32List): void;\n    vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;\n    vertexAttribI4uiv(index: GLuint, values: Uint32List): void;\n    vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;\n    waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): void;\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\n    readonly ALREADY_SIGNALED: GLenum;\n    readonly ANY_SAMPLES_PASSED: GLenum;\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\n    readonly COLOR: GLenum;\n    readonly COLOR_ATTACHMENT1: GLenum;\n    readonly COLOR_ATTACHMENT10: GLenum;\n    readonly COLOR_ATTACHMENT11: GLenum;\n    readonly COLOR_ATTACHMENT12: GLenum;\n    readonly COLOR_ATTACHMENT13: GLenum;\n    readonly COLOR_ATTACHMENT14: GLenum;\n    readonly COLOR_ATTACHMENT15: GLenum;\n    readonly COLOR_ATTACHMENT2: GLenum;\n    readonly COLOR_ATTACHMENT3: GLenum;\n    readonly COLOR_ATTACHMENT4: GLenum;\n    readonly COLOR_ATTACHMENT5: GLenum;\n    readonly COLOR_ATTACHMENT6: GLenum;\n    readonly COLOR_ATTACHMENT7: GLenum;\n    readonly COLOR_ATTACHMENT8: GLenum;\n    readonly COLOR_ATTACHMENT9: GLenum;\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\n    readonly CONDITION_SATISFIED: GLenum;\n    readonly COPY_READ_BUFFER: GLenum;\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\n    readonly COPY_WRITE_BUFFER: GLenum;\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\n    readonly CURRENT_QUERY: GLenum;\n    readonly DEPTH: GLenum;\n    readonly DEPTH24_STENCIL8: GLenum;\n    readonly DEPTH32F_STENCIL8: GLenum;\n    readonly DEPTH_COMPONENT24: GLenum;\n    readonly DEPTH_COMPONENT32F: GLenum;\n    readonly DRAW_BUFFER0: GLenum;\n    readonly DRAW_BUFFER1: GLenum;\n    readonly DRAW_BUFFER10: GLenum;\n    readonly DRAW_BUFFER11: GLenum;\n    readonly DRAW_BUFFER12: GLenum;\n    readonly DRAW_BUFFER13: GLenum;\n    readonly DRAW_BUFFER14: GLenum;\n    readonly DRAW_BUFFER15: GLenum;\n    readonly DRAW_BUFFER2: GLenum;\n    readonly DRAW_BUFFER3: GLenum;\n    readonly DRAW_BUFFER4: GLenum;\n    readonly DRAW_BUFFER5: GLenum;\n    readonly DRAW_BUFFER6: GLenum;\n    readonly DRAW_BUFFER7: GLenum;\n    readonly DRAW_BUFFER8: GLenum;\n    readonly DRAW_BUFFER9: GLenum;\n    readonly DRAW_FRAMEBUFFER: GLenum;\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\n    readonly DYNAMIC_COPY: GLenum;\n    readonly DYNAMIC_READ: GLenum;\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\n    readonly FLOAT_MAT2x3: GLenum;\n    readonly FLOAT_MAT2x4: GLenum;\n    readonly FLOAT_MAT3x2: GLenum;\n    readonly FLOAT_MAT3x4: GLenum;\n    readonly FLOAT_MAT4x2: GLenum;\n    readonly FLOAT_MAT4x3: GLenum;\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\n    readonly HALF_FLOAT: GLenum;\n    readonly INTERLEAVED_ATTRIBS: GLenum;\n    readonly INT_2_10_10_10_REV: GLenum;\n    readonly INT_SAMPLER_2D: GLenum;\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly INT_SAMPLER_3D: GLenum;\n    readonly INT_SAMPLER_CUBE: GLenum;\n    readonly INVALID_INDEX: GLenum;\n    readonly MAX: GLenum;\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_DRAW_BUFFERS: GLenum;\n    readonly MAX_ELEMENTS_INDICES: GLenum;\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\n    readonly MAX_ELEMENT_INDEX: GLenum;\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly MAX_SAMPLES: GLenum;\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\n    readonly MAX_VARYING_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MIN: GLenum;\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly OBJECT_TYPE: GLenum;\n    readonly PACK_ROW_LENGTH: GLenum;\n    readonly PACK_SKIP_PIXELS: GLenum;\n    readonly PACK_SKIP_ROWS: GLenum;\n    readonly PIXEL_PACK_BUFFER: GLenum;\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\n    readonly QUERY_RESULT: GLenum;\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\n    readonly R11F_G11F_B10F: GLenum;\n    readonly R16F: GLenum;\n    readonly R16I: GLenum;\n    readonly R16UI: GLenum;\n    readonly R32F: GLenum;\n    readonly R32I: GLenum;\n    readonly R32UI: GLenum;\n    readonly R8: GLenum;\n    readonly R8I: GLenum;\n    readonly R8UI: GLenum;\n    readonly R8_SNORM: GLenum;\n    readonly RASTERIZER_DISCARD: GLenum;\n    readonly READ_BUFFER: GLenum;\n    readonly READ_FRAMEBUFFER: GLenum;\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\n    readonly RED: GLenum;\n    readonly RED_INTEGER: GLenum;\n    readonly RENDERBUFFER_SAMPLES: GLenum;\n    readonly RG: GLenum;\n    readonly RG16F: GLenum;\n    readonly RG16I: GLenum;\n    readonly RG16UI: GLenum;\n    readonly RG32F: GLenum;\n    readonly RG32I: GLenum;\n    readonly RG32UI: GLenum;\n    readonly RG8: GLenum;\n    readonly RG8I: GLenum;\n    readonly RG8UI: GLenum;\n    readonly RG8_SNORM: GLenum;\n    readonly RGB10_A2: GLenum;\n    readonly RGB10_A2UI: GLenum;\n    readonly RGB16F: GLenum;\n    readonly RGB16I: GLenum;\n    readonly RGB16UI: GLenum;\n    readonly RGB32F: GLenum;\n    readonly RGB32I: GLenum;\n    readonly RGB32UI: GLenum;\n    readonly RGB8: GLenum;\n    readonly RGB8I: GLenum;\n    readonly RGB8UI: GLenum;\n    readonly RGB8_SNORM: GLenum;\n    readonly RGB9_E5: GLenum;\n    readonly RGBA16F: GLenum;\n    readonly RGBA16I: GLenum;\n    readonly RGBA16UI: GLenum;\n    readonly RGBA32F: GLenum;\n    readonly RGBA32I: GLenum;\n    readonly RGBA32UI: GLenum;\n    readonly RGBA8: GLenum;\n    readonly RGBA8I: GLenum;\n    readonly RGBA8UI: GLenum;\n    readonly RGBA8_SNORM: GLenum;\n    readonly RGBA_INTEGER: GLenum;\n    readonly RGB_INTEGER: GLenum;\n    readonly RG_INTEGER: GLenum;\n    readonly SAMPLER_2D_ARRAY: GLenum;\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\n    readonly SAMPLER_2D_SHADOW: GLenum;\n    readonly SAMPLER_3D: GLenum;\n    readonly SAMPLER_BINDING: GLenum;\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\n    readonly SEPARATE_ATTRIBS: GLenum;\n    readonly SIGNALED: GLenum;\n    readonly SIGNED_NORMALIZED: GLenum;\n    readonly SRGB: GLenum;\n    readonly SRGB8: GLenum;\n    readonly SRGB8_ALPHA8: GLenum;\n    readonly STATIC_COPY: GLenum;\n    readonly STATIC_READ: GLenum;\n    readonly STENCIL: GLenum;\n    readonly STREAM_COPY: GLenum;\n    readonly STREAM_READ: GLenum;\n    readonly SYNC_CONDITION: GLenum;\n    readonly SYNC_FENCE: GLenum;\n    readonly SYNC_FLAGS: GLenum;\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\n    readonly SYNC_STATUS: GLenum;\n    readonly TEXTURE_2D_ARRAY: GLenum;\n    readonly TEXTURE_3D: GLenum;\n    readonly TEXTURE_BASE_LEVEL: GLenum;\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\n    readonly TEXTURE_BINDING_3D: GLenum;\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\n    readonly TEXTURE_COMPARE_MODE: GLenum;\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\n    readonly TEXTURE_MAX_LEVEL: GLenum;\n    readonly TEXTURE_MAX_LOD: GLenum;\n    readonly TEXTURE_MIN_LOD: GLenum;\n    readonly TEXTURE_WRAP_R: GLenum;\n    readonly TIMEOUT_EXPIRED: GLenum;\n    readonly TIMEOUT_IGNORED: GLint64;\n    readonly TRANSFORM_FEEDBACK: GLenum;\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\n    readonly UNIFORM_BUFFER: GLenum;\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\n    readonly UNIFORM_BUFFER_START: GLenum;\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\n    readonly UNIFORM_OFFSET: GLenum;\n    readonly UNIFORM_SIZE: GLenum;\n    readonly UNIFORM_TYPE: GLenum;\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\n    readonly UNPACK_ROW_LENGTH: GLenum;\n    readonly UNPACK_SKIP_IMAGES: GLenum;\n    readonly UNPACK_SKIP_PIXELS: GLenum;\n    readonly UNPACK_SKIP_ROWS: GLenum;\n    readonly UNSIGNALED: GLenum;\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\n    readonly UNSIGNED_INT_24_8: GLenum;\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\n    readonly UNSIGNED_INT_VEC2: GLenum;\n    readonly UNSIGNED_INT_VEC3: GLenum;\n    readonly UNSIGNED_INT_VEC4: GLenum;\n    readonly UNSIGNED_NORMALIZED: GLenum;\n    readonly VERTEX_ARRAY_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\n    readonly WAIT_FAILED: GLenum;\n}\n\ninterface WebGL2RenderingContextOverloads {\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\n    bufferData(target: GLenum, srcData: BufferSource | null, usage: GLenum): void;\n    bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: GLuint, length?: GLuint): void;\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: BufferSource): void;\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: GLuint, length?: GLuint): void;\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView | null): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, offset: GLintptr): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView, dstOffset: GLuint): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\n    uniform1fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform1iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n}\n\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods. */\ninterface WebGLActiveInfo {\n    readonly name: string;\n    readonly size: GLint;\n    readonly type: GLenum;\n}\n\ndeclare var WebGLActiveInfo: {\n    prototype: WebGLActiveInfo;\n    new(): WebGLActiveInfo;\n};\n\n/** Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors. */\ninterface WebGLBuffer {\n}\n\ndeclare var WebGLBuffer: {\n    prototype: WebGLBuffer;\n    new(): WebGLBuffer;\n};\n\n/** The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context. */\ninterface WebGLContextEvent extends Event {\n    readonly statusMessage: string;\n}\n\ndeclare var WebGLContextEvent: {\n    prototype: WebGLContextEvent;\n    new(type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent;\n};\n\n/** Part of the WebGL API and represents a collection of buffers that serve as a rendering destination. */\ninterface WebGLFramebuffer {\n}\n\ndeclare var WebGLFramebuffer: {\n    prototype: WebGLFramebuffer;\n    new(): WebGLFramebuffer;\n};\n\n/** The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL). */\ninterface WebGLProgram {\n}\n\ndeclare var WebGLProgram: {\n    prototype: WebGLProgram;\n    new(): WebGLProgram;\n};\n\ninterface WebGLQuery {\n}\n\ndeclare var WebGLQuery: {\n    prototype: WebGLQuery;\n    new(): WebGLQuery;\n};\n\n/** Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation. */\ninterface WebGLRenderbuffer {\n}\n\ndeclare var WebGLRenderbuffer: {\n    prototype: WebGLRenderbuffer;\n    new(): WebGLRenderbuffer;\n};\n\n/** Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element. */\ninterface WebGLRenderingContext extends WebGLRenderingContextBase, WebGLRenderingContextOverloads {\n}\n\ndeclare var WebGLRenderingContext: {\n    prototype: WebGLRenderingContext;\n    new(): WebGLRenderingContext;\n    readonly ACTIVE_ATTRIBUTES: GLenum;\n    readonly ACTIVE_TEXTURE: GLenum;\n    readonly ACTIVE_UNIFORMS: GLenum;\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\n    readonly ALPHA: GLenum;\n    readonly ALPHA_BITS: GLenum;\n    readonly ALWAYS: GLenum;\n    readonly ARRAY_BUFFER: GLenum;\n    readonly ARRAY_BUFFER_BINDING: GLenum;\n    readonly ATTACHED_SHADERS: GLenum;\n    readonly BACK: GLenum;\n    readonly BLEND: GLenum;\n    readonly BLEND_COLOR: GLenum;\n    readonly BLEND_DST_ALPHA: GLenum;\n    readonly BLEND_DST_RGB: GLenum;\n    readonly BLEND_EQUATION: GLenum;\n    readonly BLEND_EQUATION_ALPHA: GLenum;\n    readonly BLEND_EQUATION_RGB: GLenum;\n    readonly BLEND_SRC_ALPHA: GLenum;\n    readonly BLEND_SRC_RGB: GLenum;\n    readonly BLUE_BITS: GLenum;\n    readonly BOOL: GLenum;\n    readonly BOOL_VEC2: GLenum;\n    readonly BOOL_VEC3: GLenum;\n    readonly BOOL_VEC4: GLenum;\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\n    readonly BUFFER_SIZE: GLenum;\n    readonly BUFFER_USAGE: GLenum;\n    readonly BYTE: GLenum;\n    readonly CCW: GLenum;\n    readonly CLAMP_TO_EDGE: GLenum;\n    readonly COLOR_ATTACHMENT0: GLenum;\n    readonly COLOR_BUFFER_BIT: GLenum;\n    readonly COLOR_CLEAR_VALUE: GLenum;\n    readonly COLOR_WRITEMASK: GLenum;\n    readonly COMPILE_STATUS: GLenum;\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\n    readonly CONSTANT_ALPHA: GLenum;\n    readonly CONSTANT_COLOR: GLenum;\n    readonly CONTEXT_LOST_WEBGL: GLenum;\n    readonly CULL_FACE: GLenum;\n    readonly CULL_FACE_MODE: GLenum;\n    readonly CURRENT_PROGRAM: GLenum;\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\n    readonly CW: GLenum;\n    readonly DECR: GLenum;\n    readonly DECR_WRAP: GLenum;\n    readonly DELETE_STATUS: GLenum;\n    readonly DEPTH_ATTACHMENT: GLenum;\n    readonly DEPTH_BITS: GLenum;\n    readonly DEPTH_BUFFER_BIT: GLenum;\n    readonly DEPTH_CLEAR_VALUE: GLenum;\n    readonly DEPTH_COMPONENT: GLenum;\n    readonly DEPTH_COMPONENT16: GLenum;\n    readonly DEPTH_FUNC: GLenum;\n    readonly DEPTH_RANGE: GLenum;\n    readonly DEPTH_STENCIL: GLenum;\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\n    readonly DEPTH_TEST: GLenum;\n    readonly DEPTH_WRITEMASK: GLenum;\n    readonly DITHER: GLenum;\n    readonly DONT_CARE: GLenum;\n    readonly DST_ALPHA: GLenum;\n    readonly DST_COLOR: GLenum;\n    readonly DYNAMIC_DRAW: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\n    readonly EQUAL: GLenum;\n    readonly FASTEST: GLenum;\n    readonly FLOAT: GLenum;\n    readonly FLOAT_MAT2: GLenum;\n    readonly FLOAT_MAT3: GLenum;\n    readonly FLOAT_MAT4: GLenum;\n    readonly FLOAT_VEC2: GLenum;\n    readonly FLOAT_VEC3: GLenum;\n    readonly FLOAT_VEC4: GLenum;\n    readonly FRAGMENT_SHADER: GLenum;\n    readonly FRAMEBUFFER: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\n    readonly FRAMEBUFFER_BINDING: GLenum;\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\n    readonly FRONT: GLenum;\n    readonly FRONT_AND_BACK: GLenum;\n    readonly FRONT_FACE: GLenum;\n    readonly FUNC_ADD: GLenum;\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\n    readonly FUNC_SUBTRACT: GLenum;\n    readonly GENERATE_MIPMAP_HINT: GLenum;\n    readonly GEQUAL: GLenum;\n    readonly GREATER: GLenum;\n    readonly GREEN_BITS: GLenum;\n    readonly HIGH_FLOAT: GLenum;\n    readonly HIGH_INT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\n    readonly INCR: GLenum;\n    readonly INCR_WRAP: GLenum;\n    readonly INT: GLenum;\n    readonly INT_VEC2: GLenum;\n    readonly INT_VEC3: GLenum;\n    readonly INT_VEC4: GLenum;\n    readonly INVALID_ENUM: GLenum;\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\n    readonly INVALID_OPERATION: GLenum;\n    readonly INVALID_VALUE: GLenum;\n    readonly INVERT: GLenum;\n    readonly KEEP: GLenum;\n    readonly LEQUAL: GLenum;\n    readonly LESS: GLenum;\n    readonly LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\n    readonly LINES: GLenum;\n    readonly LINE_LOOP: GLenum;\n    readonly LINE_STRIP: GLenum;\n    readonly LINE_WIDTH: GLenum;\n    readonly LINK_STATUS: GLenum;\n    readonly LOW_FLOAT: GLenum;\n    readonly LOW_INT: GLenum;\n    readonly LUMINANCE: GLenum;\n    readonly LUMINANCE_ALPHA: GLenum;\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_TEXTURE_SIZE: GLenum;\n    readonly MAX_VARYING_VECTORS: GLenum;\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\n    readonly MAX_VIEWPORT_DIMS: GLenum;\n    readonly MEDIUM_FLOAT: GLenum;\n    readonly MEDIUM_INT: GLenum;\n    readonly MIRRORED_REPEAT: GLenum;\n    readonly NEAREST: GLenum;\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\n    readonly NEVER: GLenum;\n    readonly NICEST: GLenum;\n    readonly NONE: GLenum;\n    readonly NOTEQUAL: GLenum;\n    readonly NO_ERROR: GLenum;\n    readonly ONE: GLenum;\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\n    readonly ONE_MINUS_DST_COLOR: GLenum;\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\n    readonly OUT_OF_MEMORY: GLenum;\n    readonly PACK_ALIGNMENT: GLenum;\n    readonly POINTS: GLenum;\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\n    readonly POLYGON_OFFSET_FILL: GLenum;\n    readonly POLYGON_OFFSET_UNITS: GLenum;\n    readonly RED_BITS: GLenum;\n    readonly RENDERBUFFER: GLenum;\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\n    readonly RENDERBUFFER_BINDING: GLenum;\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\n    readonly RENDERBUFFER_HEIGHT: GLenum;\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\n    readonly RENDERBUFFER_WIDTH: GLenum;\n    readonly RENDERER: GLenum;\n    readonly REPEAT: GLenum;\n    readonly REPLACE: GLenum;\n    readonly RGB: GLenum;\n    readonly RGB565: GLenum;\n    readonly RGB5_A1: GLenum;\n    readonly RGBA: GLenum;\n    readonly RGBA4: GLenum;\n    readonly SAMPLER_2D: GLenum;\n    readonly SAMPLER_CUBE: GLenum;\n    readonly SAMPLES: GLenum;\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\n    readonly SAMPLE_BUFFERS: GLenum;\n    readonly SAMPLE_COVERAGE: GLenum;\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\n    readonly SCISSOR_BOX: GLenum;\n    readonly SCISSOR_TEST: GLenum;\n    readonly SHADER_TYPE: GLenum;\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\n    readonly SHORT: GLenum;\n    readonly SRC_ALPHA: GLenum;\n    readonly SRC_ALPHA_SATURATE: GLenum;\n    readonly SRC_COLOR: GLenum;\n    readonly STATIC_DRAW: GLenum;\n    readonly STENCIL_ATTACHMENT: GLenum;\n    readonly STENCIL_BACK_FAIL: GLenum;\n    readonly STENCIL_BACK_FUNC: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_BACK_REF: GLenum;\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\n    readonly STENCIL_BITS: GLenum;\n    readonly STENCIL_BUFFER_BIT: GLenum;\n    readonly STENCIL_CLEAR_VALUE: GLenum;\n    readonly STENCIL_FAIL: GLenum;\n    readonly STENCIL_FUNC: GLenum;\n    readonly STENCIL_INDEX8: GLenum;\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_REF: GLenum;\n    readonly STENCIL_TEST: GLenum;\n    readonly STENCIL_VALUE_MASK: GLenum;\n    readonly STENCIL_WRITEMASK: GLenum;\n    readonly STREAM_DRAW: GLenum;\n    readonly SUBPIXEL_BITS: GLenum;\n    readonly TEXTURE: GLenum;\n    readonly TEXTURE0: GLenum;\n    readonly TEXTURE1: GLenum;\n    readonly TEXTURE10: GLenum;\n    readonly TEXTURE11: GLenum;\n    readonly TEXTURE12: GLenum;\n    readonly TEXTURE13: GLenum;\n    readonly TEXTURE14: GLenum;\n    readonly TEXTURE15: GLenum;\n    readonly TEXTURE16: GLenum;\n    readonly TEXTURE17: GLenum;\n    readonly TEXTURE18: GLenum;\n    readonly TEXTURE19: GLenum;\n    readonly TEXTURE2: GLenum;\n    readonly TEXTURE20: GLenum;\n    readonly TEXTURE21: GLenum;\n    readonly TEXTURE22: GLenum;\n    readonly TEXTURE23: GLenum;\n    readonly TEXTURE24: GLenum;\n    readonly TEXTURE25: GLenum;\n    readonly TEXTURE26: GLenum;\n    readonly TEXTURE27: GLenum;\n    readonly TEXTURE28: GLenum;\n    readonly TEXTURE29: GLenum;\n    readonly TEXTURE3: GLenum;\n    readonly TEXTURE30: GLenum;\n    readonly TEXTURE31: GLenum;\n    readonly TEXTURE4: GLenum;\n    readonly TEXTURE5: GLenum;\n    readonly TEXTURE6: GLenum;\n    readonly TEXTURE7: GLenum;\n    readonly TEXTURE8: GLenum;\n    readonly TEXTURE9: GLenum;\n    readonly TEXTURE_2D: GLenum;\n    readonly TEXTURE_BINDING_2D: GLenum;\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\n    readonly TEXTURE_MAG_FILTER: GLenum;\n    readonly TEXTURE_MIN_FILTER: GLenum;\n    readonly TEXTURE_WRAP_S: GLenum;\n    readonly TEXTURE_WRAP_T: GLenum;\n    readonly TRIANGLES: GLenum;\n    readonly TRIANGLE_FAN: GLenum;\n    readonly TRIANGLE_STRIP: GLenum;\n    readonly UNPACK_ALIGNMENT: GLenum;\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\n    readonly UNSIGNED_BYTE: GLenum;\n    readonly UNSIGNED_INT: GLenum;\n    readonly UNSIGNED_SHORT: GLenum;\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\n    readonly VALIDATE_STATUS: GLenum;\n    readonly VENDOR: GLenum;\n    readonly VERSION: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\n    readonly VERTEX_SHADER: GLenum;\n    readonly VIEWPORT: GLenum;\n    readonly ZERO: GLenum;\n};\n\ninterface WebGLRenderingContextBase {\n    readonly canvas: HTMLCanvasElement;\n    readonly drawingBufferHeight: GLsizei;\n    readonly drawingBufferWidth: GLsizei;\n    activeTexture(texture: GLenum): void;\n    attachShader(program: WebGLProgram, shader: WebGLShader): void;\n    bindAttribLocation(program: WebGLProgram, index: GLuint, name: string): void;\n    bindBuffer(target: GLenum, buffer: WebGLBuffer | null): void;\n    bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer | null): void;\n    bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\n    bindTexture(target: GLenum, texture: WebGLTexture | null): void;\n    blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\n    blendEquation(mode: GLenum): void;\n    blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;\n    blendFunc(sfactor: GLenum, dfactor: GLenum): void;\n    blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;\n    checkFramebufferStatus(target: GLenum): GLenum;\n    clear(mask: GLbitfield): void;\n    clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\n    clearDepth(depth: GLclampf): void;\n    clearStencil(s: GLint): void;\n    colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void;\n    compileShader(shader: WebGLShader): void;\n    copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;\n    copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    createBuffer(): WebGLBuffer | null;\n    createFramebuffer(): WebGLFramebuffer | null;\n    createProgram(): WebGLProgram | null;\n    createRenderbuffer(): WebGLRenderbuffer | null;\n    createShader(type: GLenum): WebGLShader | null;\n    createTexture(): WebGLTexture | null;\n    cullFace(mode: GLenum): void;\n    deleteBuffer(buffer: WebGLBuffer | null): void;\n    deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;\n    deleteProgram(program: WebGLProgram | null): void;\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;\n    deleteShader(shader: WebGLShader | null): void;\n    deleteTexture(texture: WebGLTexture | null): void;\n    depthFunc(func: GLenum): void;\n    depthMask(flag: GLboolean): void;\n    depthRange(zNear: GLclampf, zFar: GLclampf): void;\n    detachShader(program: WebGLProgram, shader: WebGLShader): void;\n    disable(cap: GLenum): void;\n    disableVertexAttribArray(index: GLuint): void;\n    drawArrays(mode: GLenum, first: GLint, count: GLsizei): void;\n    drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr): void;\n    enable(cap: GLenum): void;\n    enableVertexAttribArray(index: GLuint): void;\n    finish(): void;\n    flush(): void;\n    framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\n    framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture | null, level: GLint): void;\n    frontFace(mode: GLenum): void;\n    generateMipmap(target: GLenum): void;\n    getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\n    getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\n    getAttachedShaders(program: WebGLProgram): WebGLShader[] | null;\n    getAttribLocation(program: WebGLProgram, name: string): GLint;\n    getBufferParameter(target: GLenum, pname: GLenum): any;\n    getContextAttributes(): WebGLContextAttributes | null;\n    getError(): GLenum;\n    getExtension(extensionName: \"EXT_blend_minmax\"): EXT_blend_minmax | null;\n    getExtension(extensionName: \"EXT_color_buffer_float\"): EXT_color_buffer_float | null;\n    getExtension(extensionName: \"EXT_color_buffer_half_float\"): EXT_color_buffer_half_float | null;\n    getExtension(extensionName: \"EXT_float_blend\"): EXT_float_blend | null;\n    getExtension(extensionName: \"EXT_texture_filter_anisotropic\"): EXT_texture_filter_anisotropic | null;\n    getExtension(extensionName: \"EXT_frag_depth\"): EXT_frag_depth | null;\n    getExtension(extensionName: \"EXT_shader_texture_lod\"): EXT_shader_texture_lod | null;\n    getExtension(extensionName: \"EXT_sRGB\"): EXT_sRGB | null;\n    getExtension(extensionName: \"KHR_parallel_shader_compile\"): KHR_parallel_shader_compile | null;\n    getExtension(extensionName: \"OES_vertex_array_object\"): OES_vertex_array_object | null;\n    getExtension(extensionName: \"OVR_multiview2\"): OVR_multiview2 | null;\n    getExtension(extensionName: \"WEBGL_color_buffer_float\"): WEBGL_color_buffer_float | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_astc\"): WEBGL_compressed_texture_astc | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_etc\"): WEBGL_compressed_texture_etc | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_etc1\"): WEBGL_compressed_texture_etc1 | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_s3tc_srgb\"): WEBGL_compressed_texture_s3tc_srgb | null;\n    getExtension(extensionName: \"WEBGL_debug_shaders\"): WEBGL_debug_shaders | null;\n    getExtension(extensionName: \"WEBGL_draw_buffers\"): WEBGL_draw_buffers | null;\n    getExtension(extensionName: \"WEBGL_lose_context\"): WEBGL_lose_context | null;\n    getExtension(extensionName: \"WEBGL_depth_texture\"): WEBGL_depth_texture | null;\n    getExtension(extensionName: \"WEBGL_debug_renderer_info\"): WEBGL_debug_renderer_info | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_s3tc\"): WEBGL_compressed_texture_s3tc | null;\n    getExtension(extensionName: \"OES_texture_half_float_linear\"): OES_texture_half_float_linear | null;\n    getExtension(extensionName: \"OES_texture_half_float\"): OES_texture_half_float | null;\n    getExtension(extensionName: \"OES_texture_float_linear\"): OES_texture_float_linear | null;\n    getExtension(extensionName: \"OES_texture_float\"): OES_texture_float | null;\n    getExtension(extensionName: \"OES_standard_derivatives\"): OES_standard_derivatives | null;\n    getExtension(extensionName: \"OES_element_index_uint\"): OES_element_index_uint | null;\n    getExtension(extensionName: \"ANGLE_instanced_arrays\"): ANGLE_instanced_arrays | null;\n    getExtension(name: string): any;\n    getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): any;\n    getParameter(pname: GLenum): any;\n    getProgramInfoLog(program: WebGLProgram): string | null;\n    getProgramParameter(program: WebGLProgram, pname: GLenum): any;\n    getRenderbufferParameter(target: GLenum, pname: GLenum): any;\n    getShaderInfoLog(shader: WebGLShader): string | null;\n    getShaderParameter(shader: WebGLShader, pname: GLenum): any;\n    getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat | null;\n    getShaderSource(shader: WebGLShader): string | null;\n    getSupportedExtensions(): string[] | null;\n    getTexParameter(target: GLenum, pname: GLenum): any;\n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;\n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation | null;\n    getVertexAttrib(index: GLuint, pname: GLenum): any;\n    getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;\n    hint(target: GLenum, mode: GLenum): void;\n    isBuffer(buffer: WebGLBuffer | null): GLboolean;\n    isContextLost(): boolean;\n    isEnabled(cap: GLenum): GLboolean;\n    isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;\n    isProgram(program: WebGLProgram | null): GLboolean;\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;\n    isShader(shader: WebGLShader | null): GLboolean;\n    isTexture(texture: WebGLTexture | null): GLboolean;\n    lineWidth(width: GLfloat): void;\n    linkProgram(program: WebGLProgram): void;\n    pixelStorei(pname: GLenum, param: GLint | GLboolean): void;\n    polygonOffset(factor: GLfloat, units: GLfloat): void;\n    renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\n    sampleCoverage(value: GLclampf, invert: GLboolean): void;\n    scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    shaderSource(shader: WebGLShader, source: string): void;\n    stencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;\n    stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): void;\n    stencilMask(mask: GLuint): void;\n    stencilMaskSeparate(face: GLenum, mask: GLuint): void;\n    stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;\n    stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum): void;\n    texParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;\n    texParameteri(target: GLenum, pname: GLenum, param: GLint): void;\n    uniform1f(location: WebGLUniformLocation | null, x: GLfloat): void;\n    uniform1i(location: WebGLUniformLocation | null, x: GLint): void;\n    uniform2f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat): void;\n    uniform2i(location: WebGLUniformLocation | null, x: GLint, y: GLint): void;\n    uniform3f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat): void;\n    uniform3i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint): void;\n    uniform4f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\n    uniform4i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint, w: GLint): void;\n    useProgram(program: WebGLProgram | null): void;\n    validateProgram(program: WebGLProgram): void;\n    vertexAttrib1f(index: GLuint, x: GLfloat): void;\n    vertexAttrib1fv(index: GLuint, values: Float32List): void;\n    vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;\n    vertexAttrib2fv(index: GLuint, values: Float32List): void;\n    vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;\n    vertexAttrib3fv(index: GLuint, values: Float32List): void;\n    vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\n    vertexAttrib4fv(index: GLuint, values: Float32List): void;\n    vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void;\n    viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    readonly ACTIVE_ATTRIBUTES: GLenum;\n    readonly ACTIVE_TEXTURE: GLenum;\n    readonly ACTIVE_UNIFORMS: GLenum;\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\n    readonly ALPHA: GLenum;\n    readonly ALPHA_BITS: GLenum;\n    readonly ALWAYS: GLenum;\n    readonly ARRAY_BUFFER: GLenum;\n    readonly ARRAY_BUFFER_BINDING: GLenum;\n    readonly ATTACHED_SHADERS: GLenum;\n    readonly BACK: GLenum;\n    readonly BLEND: GLenum;\n    readonly BLEND_COLOR: GLenum;\n    readonly BLEND_DST_ALPHA: GLenum;\n    readonly BLEND_DST_RGB: GLenum;\n    readonly BLEND_EQUATION: GLenum;\n    readonly BLEND_EQUATION_ALPHA: GLenum;\n    readonly BLEND_EQUATION_RGB: GLenum;\n    readonly BLEND_SRC_ALPHA: GLenum;\n    readonly BLEND_SRC_RGB: GLenum;\n    readonly BLUE_BITS: GLenum;\n    readonly BOOL: GLenum;\n    readonly BOOL_VEC2: GLenum;\n    readonly BOOL_VEC3: GLenum;\n    readonly BOOL_VEC4: GLenum;\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\n    readonly BUFFER_SIZE: GLenum;\n    readonly BUFFER_USAGE: GLenum;\n    readonly BYTE: GLenum;\n    readonly CCW: GLenum;\n    readonly CLAMP_TO_EDGE: GLenum;\n    readonly COLOR_ATTACHMENT0: GLenum;\n    readonly COLOR_BUFFER_BIT: GLenum;\n    readonly COLOR_CLEAR_VALUE: GLenum;\n    readonly COLOR_WRITEMASK: GLenum;\n    readonly COMPILE_STATUS: GLenum;\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\n    readonly CONSTANT_ALPHA: GLenum;\n    readonly CONSTANT_COLOR: GLenum;\n    readonly CONTEXT_LOST_WEBGL: GLenum;\n    readonly CULL_FACE: GLenum;\n    readonly CULL_FACE_MODE: GLenum;\n    readonly CURRENT_PROGRAM: GLenum;\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\n    readonly CW: GLenum;\n    readonly DECR: GLenum;\n    readonly DECR_WRAP: GLenum;\n    readonly DELETE_STATUS: GLenum;\n    readonly DEPTH_ATTACHMENT: GLenum;\n    readonly DEPTH_BITS: GLenum;\n    readonly DEPTH_BUFFER_BIT: GLenum;\n    readonly DEPTH_CLEAR_VALUE: GLenum;\n    readonly DEPTH_COMPONENT: GLenum;\n    readonly DEPTH_COMPONENT16: GLenum;\n    readonly DEPTH_FUNC: GLenum;\n    readonly DEPTH_RANGE: GLenum;\n    readonly DEPTH_STENCIL: GLenum;\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\n    readonly DEPTH_TEST: GLenum;\n    readonly DEPTH_WRITEMASK: GLenum;\n    readonly DITHER: GLenum;\n    readonly DONT_CARE: GLenum;\n    readonly DST_ALPHA: GLenum;\n    readonly DST_COLOR: GLenum;\n    readonly DYNAMIC_DRAW: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\n    readonly EQUAL: GLenum;\n    readonly FASTEST: GLenum;\n    readonly FLOAT: GLenum;\n    readonly FLOAT_MAT2: GLenum;\n    readonly FLOAT_MAT3: GLenum;\n    readonly FLOAT_MAT4: GLenum;\n    readonly FLOAT_VEC2: GLenum;\n    readonly FLOAT_VEC3: GLenum;\n    readonly FLOAT_VEC4: GLenum;\n    readonly FRAGMENT_SHADER: GLenum;\n    readonly FRAMEBUFFER: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\n    readonly FRAMEBUFFER_BINDING: GLenum;\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\n    readonly FRONT: GLenum;\n    readonly FRONT_AND_BACK: GLenum;\n    readonly FRONT_FACE: GLenum;\n    readonly FUNC_ADD: GLenum;\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\n    readonly FUNC_SUBTRACT: GLenum;\n    readonly GENERATE_MIPMAP_HINT: GLenum;\n    readonly GEQUAL: GLenum;\n    readonly GREATER: GLenum;\n    readonly GREEN_BITS: GLenum;\n    readonly HIGH_FLOAT: GLenum;\n    readonly HIGH_INT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\n    readonly INCR: GLenum;\n    readonly INCR_WRAP: GLenum;\n    readonly INT: GLenum;\n    readonly INT_VEC2: GLenum;\n    readonly INT_VEC3: GLenum;\n    readonly INT_VEC4: GLenum;\n    readonly INVALID_ENUM: GLenum;\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\n    readonly INVALID_OPERATION: GLenum;\n    readonly INVALID_VALUE: GLenum;\n    readonly INVERT: GLenum;\n    readonly KEEP: GLenum;\n    readonly LEQUAL: GLenum;\n    readonly LESS: GLenum;\n    readonly LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\n    readonly LINES: GLenum;\n    readonly LINE_LOOP: GLenum;\n    readonly LINE_STRIP: GLenum;\n    readonly LINE_WIDTH: GLenum;\n    readonly LINK_STATUS: GLenum;\n    readonly LOW_FLOAT: GLenum;\n    readonly LOW_INT: GLenum;\n    readonly LUMINANCE: GLenum;\n    readonly LUMINANCE_ALPHA: GLenum;\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_TEXTURE_SIZE: GLenum;\n    readonly MAX_VARYING_VECTORS: GLenum;\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\n    readonly MAX_VIEWPORT_DIMS: GLenum;\n    readonly MEDIUM_FLOAT: GLenum;\n    readonly MEDIUM_INT: GLenum;\n    readonly MIRRORED_REPEAT: GLenum;\n    readonly NEAREST: GLenum;\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\n    readonly NEVER: GLenum;\n    readonly NICEST: GLenum;\n    readonly NONE: GLenum;\n    readonly NOTEQUAL: GLenum;\n    readonly NO_ERROR: GLenum;\n    readonly ONE: GLenum;\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\n    readonly ONE_MINUS_DST_COLOR: GLenum;\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\n    readonly OUT_OF_MEMORY: GLenum;\n    readonly PACK_ALIGNMENT: GLenum;\n    readonly POINTS: GLenum;\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\n    readonly POLYGON_OFFSET_FILL: GLenum;\n    readonly POLYGON_OFFSET_UNITS: GLenum;\n    readonly RED_BITS: GLenum;\n    readonly RENDERBUFFER: GLenum;\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\n    readonly RENDERBUFFER_BINDING: GLenum;\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\n    readonly RENDERBUFFER_HEIGHT: GLenum;\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\n    readonly RENDERBUFFER_WIDTH: GLenum;\n    readonly RENDERER: GLenum;\n    readonly REPEAT: GLenum;\n    readonly REPLACE: GLenum;\n    readonly RGB: GLenum;\n    readonly RGB565: GLenum;\n    readonly RGB5_A1: GLenum;\n    readonly RGBA: GLenum;\n    readonly RGBA4: GLenum;\n    readonly SAMPLER_2D: GLenum;\n    readonly SAMPLER_CUBE: GLenum;\n    readonly SAMPLES: GLenum;\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\n    readonly SAMPLE_BUFFERS: GLenum;\n    readonly SAMPLE_COVERAGE: GLenum;\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\n    readonly SCISSOR_BOX: GLenum;\n    readonly SCISSOR_TEST: GLenum;\n    readonly SHADER_TYPE: GLenum;\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\n    readonly SHORT: GLenum;\n    readonly SRC_ALPHA: GLenum;\n    readonly SRC_ALPHA_SATURATE: GLenum;\n    readonly SRC_COLOR: GLenum;\n    readonly STATIC_DRAW: GLenum;\n    readonly STENCIL_ATTACHMENT: GLenum;\n    readonly STENCIL_BACK_FAIL: GLenum;\n    readonly STENCIL_BACK_FUNC: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_BACK_REF: GLenum;\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\n    readonly STENCIL_BITS: GLenum;\n    readonly STENCIL_BUFFER_BIT: GLenum;\n    readonly STENCIL_CLEAR_VALUE: GLenum;\n    readonly STENCIL_FAIL: GLenum;\n    readonly STENCIL_FUNC: GLenum;\n    readonly STENCIL_INDEX8: GLenum;\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_REF: GLenum;\n    readonly STENCIL_TEST: GLenum;\n    readonly STENCIL_VALUE_MASK: GLenum;\n    readonly STENCIL_WRITEMASK: GLenum;\n    readonly STREAM_DRAW: GLenum;\n    readonly SUBPIXEL_BITS: GLenum;\n    readonly TEXTURE: GLenum;\n    readonly TEXTURE0: GLenum;\n    readonly TEXTURE1: GLenum;\n    readonly TEXTURE10: GLenum;\n    readonly TEXTURE11: GLenum;\n    readonly TEXTURE12: GLenum;\n    readonly TEXTURE13: GLenum;\n    readonly TEXTURE14: GLenum;\n    readonly TEXTURE15: GLenum;\n    readonly TEXTURE16: GLenum;\n    readonly TEXTURE17: GLenum;\n    readonly TEXTURE18: GLenum;\n    readonly TEXTURE19: GLenum;\n    readonly TEXTURE2: GLenum;\n    readonly TEXTURE20: GLenum;\n    readonly TEXTURE21: GLenum;\n    readonly TEXTURE22: GLenum;\n    readonly TEXTURE23: GLenum;\n    readonly TEXTURE24: GLenum;\n    readonly TEXTURE25: GLenum;\n    readonly TEXTURE26: GLenum;\n    readonly TEXTURE27: GLenum;\n    readonly TEXTURE28: GLenum;\n    readonly TEXTURE29: GLenum;\n    readonly TEXTURE3: GLenum;\n    readonly TEXTURE30: GLenum;\n    readonly TEXTURE31: GLenum;\n    readonly TEXTURE4: GLenum;\n    readonly TEXTURE5: GLenum;\n    readonly TEXTURE6: GLenum;\n    readonly TEXTURE7: GLenum;\n    readonly TEXTURE8: GLenum;\n    readonly TEXTURE9: GLenum;\n    readonly TEXTURE_2D: GLenum;\n    readonly TEXTURE_BINDING_2D: GLenum;\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\n    readonly TEXTURE_MAG_FILTER: GLenum;\n    readonly TEXTURE_MIN_FILTER: GLenum;\n    readonly TEXTURE_WRAP_S: GLenum;\n    readonly TEXTURE_WRAP_T: GLenum;\n    readonly TRIANGLES: GLenum;\n    readonly TRIANGLE_FAN: GLenum;\n    readonly TRIANGLE_STRIP: GLenum;\n    readonly UNPACK_ALIGNMENT: GLenum;\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\n    readonly UNSIGNED_BYTE: GLenum;\n    readonly UNSIGNED_INT: GLenum;\n    readonly UNSIGNED_SHORT: GLenum;\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\n    readonly VALIDATE_STATUS: GLenum;\n    readonly VENDOR: GLenum;\n    readonly VERSION: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\n    readonly VERTEX_SHADER: GLenum;\n    readonly VIEWPORT: GLenum;\n    readonly ZERO: GLenum;\n}\n\ninterface WebGLRenderingContextOverloads {\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\n    bufferData(target: GLenum, data: BufferSource | null, usage: GLenum): void;\n    bufferSubData(target: GLenum, offset: GLintptr, data: BufferSource): void;\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView): void;\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    uniform1fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform1iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniform2fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform2iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniform3fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform3iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniform4fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform4iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\n}\n\ninterface WebGLSampler {\n}\n\ndeclare var WebGLSampler: {\n    prototype: WebGLSampler;\n    new(): WebGLSampler;\n};\n\n/** The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders. */\ninterface WebGLShader {\n}\n\ndeclare var WebGLShader: {\n    prototype: WebGLShader;\n    new(): WebGLShader;\n};\n\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method. */\ninterface WebGLShaderPrecisionFormat {\n    readonly precision: GLint;\n    readonly rangeMax: GLint;\n    readonly rangeMin: GLint;\n}\n\ndeclare var WebGLShaderPrecisionFormat: {\n    prototype: WebGLShaderPrecisionFormat;\n    new(): WebGLShaderPrecisionFormat;\n};\n\ninterface WebGLSync {\n}\n\ndeclare var WebGLSync: {\n    prototype: WebGLSync;\n    new(): WebGLSync;\n};\n\n/** Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations. */\ninterface WebGLTexture {\n}\n\ndeclare var WebGLTexture: {\n    prototype: WebGLTexture;\n    new(): WebGLTexture;\n};\n\ninterface WebGLTransformFeedback {\n}\n\ndeclare var WebGLTransformFeedback: {\n    prototype: WebGLTransformFeedback;\n    new(): WebGLTransformFeedback;\n};\n\n/** Part of the WebGL API and represents the location of a uniform variable in a shader program. */\ninterface WebGLUniformLocation {\n}\n\ndeclare var WebGLUniformLocation: {\n    prototype: WebGLUniformLocation;\n    new(): WebGLUniformLocation;\n};\n\ninterface WebGLVertexArrayObject {\n}\n\ndeclare var WebGLVertexArrayObject: {\n    prototype: WebGLVertexArrayObject;\n    new(): WebGLVertexArrayObject;\n};\n\ninterface WebGLVertexArrayObjectOES {\n}\n\ninterface WebSocketEventMap {\n    \"close\": CloseEvent;\n    \"error\": Event;\n    \"message\": MessageEvent;\n    \"open\": Event;\n}\n\n/** Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection. */\ninterface WebSocket extends EventTarget {\n    /**\n     * Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n     *\n     * Can be set, to change how binary data is returned. The default is \"blob\".\n     */\n    binaryType: BinaryType;\n    /**\n     * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n     *\n     * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n     */\n    readonly bufferedAmount: number;\n    /** Returns the extensions selected by the server, if any. */\n    readonly extensions: string;\n    onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;\n    onerror: ((this: WebSocket, ev: Event) => any) | null;\n    onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;\n    onopen: ((this: WebSocket, ev: Event) => any) | null;\n    /** Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation. */\n    readonly protocol: string;\n    /** Returns the state of the WebSocket object's connection. It can have the values described below. */\n    readonly readyState: number;\n    /** Returns the URL that was used to establish the WebSocket connection. */\n    readonly url: string;\n    /** Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason. */\n    close(code?: number, reason?: string): void;\n    /** Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView. */\n    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;\n    readonly CLOSED: number;\n    readonly CLOSING: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var WebSocket: {\n    prototype: WebSocket;\n    new(url: string | URL, protocols?: string | string[]): WebSocket;\n    readonly CLOSED: number;\n    readonly CLOSING: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n};\n\n/** Events that occur due to the user moving a mouse wheel or similar input device. */\ninterface WheelEvent extends MouseEvent {\n    readonly deltaMode: number;\n    readonly deltaX: number;\n    readonly deltaY: number;\n    readonly deltaZ: number;\n    readonly DOM_DELTA_LINE: number;\n    readonly DOM_DELTA_PAGE: number;\n    readonly DOM_DELTA_PIXEL: number;\n}\n\ndeclare var WheelEvent: {\n    prototype: WheelEvent;\n    new(type: string, eventInitDict?: WheelEventInit): WheelEvent;\n    readonly DOM_DELTA_LINE: number;\n    readonly DOM_DELTA_PAGE: number;\n    readonly DOM_DELTA_PIXEL: number;\n};\n\ninterface WindowEventMap extends GlobalEventHandlersEventMap, WindowEventHandlersEventMap {\n    \"DOMContentLoaded\": Event;\n    \"devicemotion\": DeviceMotionEvent;\n    \"deviceorientation\": DeviceOrientationEvent;\n    \"gamepadconnected\": GamepadEvent;\n    \"gamepaddisconnected\": GamepadEvent;\n    \"orientationchange\": Event;\n}\n\n/** A window containing a DOM document; the document property points to the DOM document loaded in that window. */\ninterface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandlers, WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage {\n    /** @deprecated This is a legacy alias of `navigator`. */\n    readonly clientInformation: Navigator;\n    /** Returns true if the window has been closed, false otherwise. */\n    readonly closed: boolean;\n    /** Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element. */\n    readonly customElements: CustomElementRegistry;\n    readonly devicePixelRatio: number;\n    readonly document: Document;\n    /** @deprecated */\n    readonly event: Event | undefined;\n    /** @deprecated */\n    readonly external: External;\n    readonly frameElement: Element | null;\n    readonly frames: WindowProxy;\n    readonly history: History;\n    readonly innerHeight: number;\n    readonly innerWidth: number;\n    readonly length: number;\n    get location(): Location;\n    set location(href: string | Location);\n    /** Returns true if the location bar is visible; otherwise, returns false. */\n    readonly locationbar: BarProp;\n    /** Returns true if the menu bar is visible; otherwise, returns false. */\n    readonly menubar: BarProp;\n    name: string;\n    readonly navigator: Navigator;\n    /** Available only in secure contexts. */\n    ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;\n    /** Available only in secure contexts. */\n    ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;\n    /** @deprecated */\n    onorientationchange: ((this: Window, ev: Event) => any) | null;\n    opener: any;\n    /** @deprecated */\n    readonly orientation: number;\n    readonly outerHeight: number;\n    readonly outerWidth: number;\n    /** @deprecated This is a legacy alias of `scrollX`. */\n    readonly pageXOffset: number;\n    /** @deprecated This is a legacy alias of `scrollY`. */\n    readonly pageYOffset: number;\n    /**\n     * Refers to either the parent WindowProxy, or itself.\n     *\n     * It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.\n     */\n    readonly parent: WindowProxy;\n    /** Returns true if the personal bar is visible; otherwise, returns false. */\n    readonly personalbar: BarProp;\n    readonly screen: Screen;\n    readonly screenLeft: number;\n    readonly screenTop: number;\n    readonly screenX: number;\n    readonly screenY: number;\n    readonly scrollX: number;\n    readonly scrollY: number;\n    /** Returns true if the scrollbars are visible; otherwise, returns false. */\n    readonly scrollbars: BarProp;\n    readonly self: Window & typeof globalThis;\n    readonly speechSynthesis: SpeechSynthesis;\n    /** @deprecated */\n    status: string;\n    /** Returns true if the status bar is visible; otherwise, returns false. */\n    readonly statusbar: BarProp;\n    /** Returns true if the toolbar is visible; otherwise, returns false. */\n    readonly toolbar: BarProp;\n    readonly top: WindowProxy | null;\n    readonly visualViewport: VisualViewport | null;\n    readonly window: Window & typeof globalThis;\n    alert(message?: any): void;\n    blur(): void;\n    cancelIdleCallback(handle: number): void;\n    /** @deprecated */\n    captureEvents(): void;\n    /** Closes the window. */\n    close(): void;\n    confirm(message?: string): boolean;\n    /** Moves the focus to the window's browsing context, if any. */\n    focus(): void;\n    getComputedStyle(elt: Element, pseudoElt?: string | null): CSSStyleDeclaration;\n    getSelection(): Selection | null;\n    matchMedia(query: string): MediaQueryList;\n    moveBy(x: number, y: number): void;\n    moveTo(x: number, y: number): void;\n    open(url?: string | URL, target?: string, features?: string): WindowProxy | null;\n    /**\n     * Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.\n     *\n     * Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.\n     *\n     * A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to \"/\". This default restricts the message to same-origin targets only.\n     *\n     * If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to \"*\".\n     *\n     * Throws a \"DataCloneError\" DOMException if transfer array contains duplicate objects or if message could not be cloned.\n     */\n    postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void;\n    postMessage(message: any, options?: WindowPostMessageOptions): void;\n    print(): void;\n    prompt(message?: string, _default?: string): string | null;\n    /** @deprecated */\n    releaseEvents(): void;\n    requestIdleCallback(callback: IdleRequestCallback, options?: IdleRequestOptions): number;\n    resizeBy(x: number, y: number): void;\n    resizeTo(width: number, height: number): void;\n    scroll(options?: ScrollToOptions): void;\n    scroll(x: number, y: number): void;\n    scrollBy(options?: ScrollToOptions): void;\n    scrollBy(x: number, y: number): void;\n    scrollTo(options?: ScrollToOptions): void;\n    scrollTo(x: number, y: number): void;\n    /** Cancels the document load. */\n    stop(): void;\n    addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n    [index: number]: Window;\n}\n\ndeclare var Window: {\n    prototype: Window;\n    new(): Window;\n};\n\ninterface WindowEventHandlersEventMap {\n    \"afterprint\": Event;\n    \"beforeprint\": Event;\n    \"beforeunload\": BeforeUnloadEvent;\n    \"gamepadconnected\": GamepadEvent;\n    \"gamepaddisconnected\": GamepadEvent;\n    \"hashchange\": HashChangeEvent;\n    \"languagechange\": Event;\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n    \"offline\": Event;\n    \"online\": Event;\n    \"pagehide\": PageTransitionEvent;\n    \"pageshow\": PageTransitionEvent;\n    \"popstate\": PopStateEvent;\n    \"rejectionhandled\": PromiseRejectionEvent;\n    \"storage\": StorageEvent;\n    \"unhandledrejection\": PromiseRejectionEvent;\n    \"unload\": Event;\n}\n\ninterface WindowEventHandlers {\n    onafterprint: ((this: WindowEventHandlers, ev: Event) => any) | null;\n    onbeforeprint: ((this: WindowEventHandlers, ev: Event) => any) | null;\n    onbeforeunload: ((this: WindowEventHandlers, ev: BeforeUnloadEvent) => any) | null;\n    ongamepadconnected: ((this: WindowEventHandlers, ev: GamepadEvent) => any) | null;\n    ongamepaddisconnected: ((this: WindowEventHandlers, ev: GamepadEvent) => any) | null;\n    onhashchange: ((this: WindowEventHandlers, ev: HashChangeEvent) => any) | null;\n    onlanguagechange: ((this: WindowEventHandlers, ev: Event) => any) | null;\n    onmessage: ((this: WindowEventHandlers, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: WindowEventHandlers, ev: MessageEvent) => any) | null;\n    onoffline: ((this: WindowEventHandlers, ev: Event) => any) | null;\n    ononline: ((this: WindowEventHandlers, ev: Event) => any) | null;\n    onpagehide: ((this: WindowEventHandlers, ev: PageTransitionEvent) => any) | null;\n    onpageshow: ((this: WindowEventHandlers, ev: PageTransitionEvent) => any) | null;\n    onpopstate: ((this: WindowEventHandlers, ev: PopStateEvent) => any) | null;\n    onrejectionhandled: ((this: WindowEventHandlers, ev: PromiseRejectionEvent) => any) | null;\n    onstorage: ((this: WindowEventHandlers, ev: StorageEvent) => any) | null;\n    onunhandledrejection: ((this: WindowEventHandlers, ev: PromiseRejectionEvent) => any) | null;\n    onunload: ((this: WindowEventHandlers, ev: Event) => any) | null;\n    addEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: WindowEventHandlers, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: WindowEventHandlers, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ninterface WindowLocalStorage {\n    readonly localStorage: Storage;\n}\n\ninterface WindowOrWorkerGlobalScope {\n    /** Available only in secure contexts. */\n    readonly caches: CacheStorage;\n    readonly crossOriginIsolated: boolean;\n    readonly crypto: Crypto;\n    readonly indexedDB: IDBFactory;\n    readonly isSecureContext: boolean;\n    readonly origin: string;\n    readonly performance: Performance;\n    atob(data: string): string;\n    btoa(data: string): string;\n    clearInterval(id: number | undefined): void;\n    clearTimeout(id: number | undefined): void;\n    createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>;\n    createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;\n    fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;\n    queueMicrotask(callback: VoidFunction): void;\n    reportError(e: any): void;\n    setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\n    setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\n    structuredClone(value: any, options?: StructuredSerializeOptions): any;\n}\n\ninterface WindowSessionStorage {\n    readonly sessionStorage: Storage;\n}\n\ninterface WorkerEventMap extends AbstractWorkerEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\n/** This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread. */\ninterface Worker extends EventTarget, AbstractWorker {\n    onmessage: ((this: Worker, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: Worker, ev: MessageEvent) => any) | null;\n    /** Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned. */\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n    /** Aborts worker's associated global environment. */\n    terminate(): void;\n    addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Worker: {\n    prototype: Worker;\n    new(scriptURL: string | URL, options?: WorkerOptions): Worker;\n};\n\n/** Available only in secure contexts. */\ninterface Worklet {\n    /**\n     * Loads and executes the module script given by moduleURL into all of worklet's global scopes. It can also create additional global scopes as part of this process, depending on the worklet type. The returned promise will fulfill once the script has been successfully loaded and run in all global scopes.\n     *\n     * The credentials option can be set to a credentials mode to modify the script-fetching process. It defaults to \"same-origin\".\n     *\n     * Any failures in fetching the script or its dependencies will cause the returned promise to be rejected with an \"AbortError\" DOMException. Any errors in parsing the script or its dependencies will cause the returned promise to be rejected with the exception generated during parsing.\n     */\n    addModule(moduleURL: string | URL, options?: WorkletOptions): Promise<void>;\n}\n\ndeclare var Worklet: {\n    prototype: Worklet;\n    new(): Worklet;\n};\n\n/** This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing. */\ninterface WritableStream<W = any> {\n    readonly locked: boolean;\n    abort(reason?: any): Promise<void>;\n    close(): Promise<void>;\n    getWriter(): WritableStreamDefaultWriter<W>;\n}\n\ndeclare var WritableStream: {\n    prototype: WritableStream;\n    new<W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;\n};\n\n/** This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate. */\ninterface WritableStreamDefaultController {\n    readonly signal: AbortSignal;\n    error(e?: any): void;\n}\n\ndeclare var WritableStreamDefaultController: {\n    prototype: WritableStreamDefaultController;\n    new(): WritableStreamDefaultController;\n};\n\n/** This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink. */\ninterface WritableStreamDefaultWriter<W = any> {\n    readonly closed: Promise<undefined>;\n    readonly desiredSize: number | null;\n    readonly ready: Promise<undefined>;\n    abort(reason?: any): Promise<void>;\n    close(): Promise<void>;\n    releaseLock(): void;\n    write(chunk?: W): Promise<void>;\n}\n\ndeclare var WritableStreamDefaultWriter: {\n    prototype: WritableStreamDefaultWriter;\n    new<W = any>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;\n};\n\n/** An XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents. */\ninterface XMLDocument extends Document {\n    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: XMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: XMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var XMLDocument: {\n    prototype: XMLDocument;\n    new(): XMLDocument;\n};\n\ninterface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {\n    \"readystatechange\": Event;\n}\n\n/** Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. */\ninterface XMLHttpRequest extends XMLHttpRequestEventTarget {\n    onreadystatechange: ((this: XMLHttpRequest, ev: Event) => any) | null;\n    /** Returns client's state. */\n    readonly readyState: number;\n    /** Returns the response body. */\n    readonly response: any;\n    /**\n     * Returns response as text.\n     *\n     * Throws an \"InvalidStateError\" DOMException if responseType is not the empty string or \"text\".\n     */\n    readonly responseText: string;\n    /**\n     * Returns the response type.\n     *\n     * Can be set to change the response type. Values are: the empty string (default), \"arraybuffer\", \"blob\", \"document\", \"json\", and \"text\".\n     *\n     * When set: setting to \"document\" is ignored if current global object is not a Window object.\n     *\n     * When set: throws an \"InvalidStateError\" DOMException if state is loading or done.\n     *\n     * When set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.\n     */\n    responseType: XMLHttpRequestResponseType;\n    readonly responseURL: string;\n    /**\n     * Returns the response as document.\n     *\n     * Throws an \"InvalidStateError\" DOMException if responseType is not the empty string or \"document\".\n     */\n    readonly responseXML: Document | null;\n    readonly status: number;\n    readonly statusText: string;\n    /**\n     * Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a \"TimeoutError\" DOMException will be thrown otherwise (for the send() method).\n     *\n     * When set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.\n     */\n    timeout: number;\n    /** Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server. */\n    readonly upload: XMLHttpRequestUpload;\n    /**\n     * True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.\n     *\n     * When set: throws an \"InvalidStateError\" DOMException if state is not unsent or opened, or if the send() flag is set.\n     */\n    withCredentials: boolean;\n    /** Cancels any network activity. */\n    abort(): void;\n    getAllResponseHeaders(): string;\n    getResponseHeader(name: string): string | null;\n    /**\n     * Sets the request method, request URL, and synchronous flag.\n     *\n     * Throws a \"SyntaxError\" DOMException if either method is not a valid method or url cannot be parsed.\n     *\n     * Throws a \"SecurityError\" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.\n     *\n     * Throws an \"InvalidAccessError\" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.\n     */\n    open(method: string, url: string | URL): void;\n    open(method: string, url: string | URL, async: boolean, username?: string | null, password?: string | null): void;\n    /**\n     * Acts as if the `Content-Type` header value for a response is mime. (It does not change the header.)\n     *\n     * Throws an \"InvalidStateError\" DOMException if state is loading or done.\n     */\n    overrideMimeType(mime: string): void;\n    /**\n     * Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.\n     *\n     * Throws an \"InvalidStateError\" DOMException if either state is not opened or the send() flag is set.\n     */\n    send(body?: Document | XMLHttpRequestBodyInit | null): void;\n    /**\n     * Combines a header in author request headers.\n     *\n     * Throws an \"InvalidStateError\" DOMException if either state is not opened or the send() flag is set.\n     *\n     * Throws a \"SyntaxError\" DOMException if name is not a header name or if value is not a header value.\n     */\n    setRequestHeader(name: string, value: string): void;\n    readonly DONE: number;\n    readonly HEADERS_RECEIVED: number;\n    readonly LOADING: number;\n    readonly OPENED: number;\n    readonly UNSENT: number;\n    addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var XMLHttpRequest: {\n    prototype: XMLHttpRequest;\n    new(): XMLHttpRequest;\n    readonly DONE: number;\n    readonly HEADERS_RECEIVED: number;\n    readonly LOADING: number;\n    readonly OPENED: number;\n    readonly UNSENT: number;\n};\n\ninterface XMLHttpRequestEventTargetEventMap {\n    \"abort\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"error\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"load\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"loadend\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"loadstart\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"progress\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"timeout\": ProgressEvent<XMLHttpRequestEventTarget>;\n}\n\ninterface XMLHttpRequestEventTarget extends EventTarget {\n    onabort: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onerror: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onload: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onloadend: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onprogress: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var XMLHttpRequestEventTarget: {\n    prototype: XMLHttpRequestEventTarget;\n    new(): XMLHttpRequestEventTarget;\n};\n\ninterface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var XMLHttpRequestUpload: {\n    prototype: XMLHttpRequestUpload;\n    new(): XMLHttpRequestUpload;\n};\n\n/** Provides the serializeToString() method to construct an XML string representing a DOM tree. */\ninterface XMLSerializer {\n    serializeToString(root: Node): string;\n}\n\ndeclare var XMLSerializer: {\n    prototype: XMLSerializer;\n    new(): XMLSerializer;\n};\n\n/** The XPathEvaluator interface allows to compile and evaluate XPath expressions. */\ninterface XPathEvaluator extends XPathEvaluatorBase {\n}\n\ndeclare var XPathEvaluator: {\n    prototype: XPathEvaluator;\n    new(): XPathEvaluator;\n};\n\ninterface XPathEvaluatorBase {\n    createExpression(expression: string, resolver?: XPathNSResolver | null): XPathExpression;\n    createNSResolver(nodeResolver: Node): XPathNSResolver;\n    evaluate(expression: string, contextNode: Node, resolver?: XPathNSResolver | null, type?: number, result?: XPathResult | null): XPathResult;\n}\n\n/** This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information its DOM tree. */\ninterface XPathExpression {\n    evaluate(contextNode: Node, type?: number, result?: XPathResult | null): XPathResult;\n}\n\ndeclare var XPathExpression: {\n    prototype: XPathExpression;\n    new(): XPathExpression;\n};\n\n/** The results generated by evaluating an XPath expression within the context of a given node. */\ninterface XPathResult {\n    readonly booleanValue: boolean;\n    readonly invalidIteratorState: boolean;\n    readonly numberValue: number;\n    readonly resultType: number;\n    readonly singleNodeValue: Node | null;\n    readonly snapshotLength: number;\n    readonly stringValue: string;\n    iterateNext(): Node | null;\n    snapshotItem(index: number): Node | null;\n    readonly ANY_TYPE: number;\n    readonly ANY_UNORDERED_NODE_TYPE: number;\n    readonly BOOLEAN_TYPE: number;\n    readonly FIRST_ORDERED_NODE_TYPE: number;\n    readonly NUMBER_TYPE: number;\n    readonly ORDERED_NODE_ITERATOR_TYPE: number;\n    readonly ORDERED_NODE_SNAPSHOT_TYPE: number;\n    readonly STRING_TYPE: number;\n    readonly UNORDERED_NODE_ITERATOR_TYPE: number;\n    readonly UNORDERED_NODE_SNAPSHOT_TYPE: number;\n}\n\ndeclare var XPathResult: {\n    prototype: XPathResult;\n    new(): XPathResult;\n    readonly ANY_TYPE: number;\n    readonly ANY_UNORDERED_NODE_TYPE: number;\n    readonly BOOLEAN_TYPE: number;\n    readonly FIRST_ORDERED_NODE_TYPE: number;\n    readonly NUMBER_TYPE: number;\n    readonly ORDERED_NODE_ITERATOR_TYPE: number;\n    readonly ORDERED_NODE_SNAPSHOT_TYPE: number;\n    readonly STRING_TYPE: number;\n    readonly UNORDERED_NODE_ITERATOR_TYPE: number;\n    readonly UNORDERED_NODE_SNAPSHOT_TYPE: number;\n};\n\n/** An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents. */\ninterface XSLTProcessor {\n    clearParameters(): void;\n    getParameter(namespaceURI: string | null, localName: string): any;\n    importStylesheet(style: Node): void;\n    removeParameter(namespaceURI: string | null, localName: string): void;\n    reset(): void;\n    setParameter(namespaceURI: string | null, localName: string, value: any): void;\n    transformToDocument(source: Node): Document;\n    transformToFragment(source: Node, output: Document): DocumentFragment;\n}\n\ndeclare var XSLTProcessor: {\n    prototype: XSLTProcessor;\n    new(): XSLTProcessor;\n};\n\ninterface Console {\n    assert(condition?: boolean, ...data: any[]): void;\n    clear(): void;\n    count(label?: string): void;\n    countReset(label?: string): void;\n    debug(...data: any[]): void;\n    dir(item?: any, options?: any): void;\n    dirxml(...data: any[]): void;\n    error(...data: any[]): void;\n    group(...data: any[]): void;\n    groupCollapsed(...data: any[]): void;\n    groupEnd(): void;\n    info(...data: any[]): void;\n    log(...data: any[]): void;\n    table(tabularData?: any, properties?: string[]): void;\n    time(label?: string): void;\n    timeEnd(label?: string): void;\n    timeLog(label?: string, ...data: any[]): void;\n    timeStamp(label?: string): void;\n    trace(...data: any[]): void;\n    warn(...data: any[]): void;\n}\n\ndeclare var console: Console;\n\n/** Holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface. */\ndeclare namespace CSS {\n    function escape(ident: string): string;\n    function supports(property: string, value: string): boolean;\n    function supports(conditionText: string): boolean;\n}\n\ndeclare namespace WebAssembly {\n    interface CompileError extends Error {\n    }\n\n    var CompileError: {\n        prototype: CompileError;\n        new(message?: string): CompileError;\n        (message?: string): CompileError;\n    };\n\n    interface Global {\n        value: any;\n        valueOf(): any;\n    }\n\n    var Global: {\n        prototype: Global;\n        new(descriptor: GlobalDescriptor, v?: any): Global;\n    };\n\n    interface Instance {\n        readonly exports: Exports;\n    }\n\n    var Instance: {\n        prototype: Instance;\n        new(module: Module, importObject?: Imports): Instance;\n    };\n\n    interface LinkError extends Error {\n    }\n\n    var LinkError: {\n        prototype: LinkError;\n        new(message?: string): LinkError;\n        (message?: string): LinkError;\n    };\n\n    interface Memory {\n        readonly buffer: ArrayBuffer;\n        grow(delta: number): number;\n    }\n\n    var Memory: {\n        prototype: Memory;\n        new(descriptor: MemoryDescriptor): Memory;\n    };\n\n    interface Module {\n    }\n\n    var Module: {\n        prototype: Module;\n        new(bytes: BufferSource): Module;\n        customSections(moduleObject: Module, sectionName: string): ArrayBuffer[];\n        exports(moduleObject: Module): ModuleExportDescriptor[];\n        imports(moduleObject: Module): ModuleImportDescriptor[];\n    };\n\n    interface RuntimeError extends Error {\n    }\n\n    var RuntimeError: {\n        prototype: RuntimeError;\n        new(message?: string): RuntimeError;\n        (message?: string): RuntimeError;\n    };\n\n    interface Table {\n        readonly length: number;\n        get(index: number): any;\n        grow(delta: number, value?: any): number;\n        set(index: number, value?: any): void;\n    }\n\n    var Table: {\n        prototype: Table;\n        new(descriptor: TableDescriptor, value?: any): Table;\n    };\n\n    interface GlobalDescriptor {\n        mutable?: boolean;\n        value: ValueType;\n    }\n\n    interface MemoryDescriptor {\n        initial: number;\n        maximum?: number;\n        shared?: boolean;\n    }\n\n    interface ModuleExportDescriptor {\n        kind: ImportExportKind;\n        name: string;\n    }\n\n    interface ModuleImportDescriptor {\n        kind: ImportExportKind;\n        module: string;\n        name: string;\n    }\n\n    interface TableDescriptor {\n        element: TableKind;\n        initial: number;\n        maximum?: number;\n    }\n\n    interface WebAssemblyInstantiatedSource {\n        instance: Instance;\n        module: Module;\n    }\n\n    type ImportExportKind = \"function\" | \"global\" | \"memory\" | \"table\";\n    type TableKind = \"anyfunc\" | \"externref\";\n    type ValueType = \"anyfunc\" | \"externref\" | \"f32\" | \"f64\" | \"i32\" | \"i64\" | \"v128\";\n    type ExportValue = Function | Global | Memory | Table;\n    type Exports = Record<string, ExportValue>;\n    type ImportValue = ExportValue | number;\n    type Imports = Record<string, ModuleImports>;\n    type ModuleImports = Record<string, ImportValue>;\n    function compile(bytes: BufferSource): Promise<Module>;\n    function compileStreaming(source: Response | PromiseLike<Response>): Promise<Module>;\n    function instantiate(bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;\n    function instantiate(moduleObject: Module, importObject?: Imports): Promise<Instance>;\n    function instantiateStreaming(source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;\n    function validate(bytes: BufferSource): boolean;\n}\n\ninterface BlobCallback {\n    (blob: Blob | null): void;\n}\n\ninterface CustomElementConstructor {\n    new (...params: any[]): HTMLElement;\n}\n\ninterface DecodeErrorCallback {\n    (error: DOMException): void;\n}\n\ninterface DecodeSuccessCallback {\n    (decodedData: AudioBuffer): void;\n}\n\ninterface ErrorCallback {\n    (err: DOMException): void;\n}\n\ninterface FileCallback {\n    (file: File): void;\n}\n\ninterface FileSystemEntriesCallback {\n    (entries: FileSystemEntry[]): void;\n}\n\ninterface FileSystemEntryCallback {\n    (entry: FileSystemEntry): void;\n}\n\ninterface FrameRequestCallback {\n    (time: DOMHighResTimeStamp): void;\n}\n\ninterface FunctionStringCallback {\n    (data: string): void;\n}\n\ninterface IdleRequestCallback {\n    (deadline: IdleDeadline): void;\n}\n\ninterface IntersectionObserverCallback {\n    (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;\n}\n\ninterface LockGrantedCallback {\n    (lock: Lock | null): any;\n}\n\ninterface MediaSessionActionHandler {\n    (details: MediaSessionActionDetails): void;\n}\n\ninterface MutationCallback {\n    (mutations: MutationRecord[], observer: MutationObserver): void;\n}\n\ninterface NotificationPermissionCallback {\n    (permission: NotificationPermission): void;\n}\n\ninterface OnBeforeUnloadEventHandlerNonNull {\n    (event: Event): string | null;\n}\n\ninterface OnErrorEventHandlerNonNull {\n    (event: Event | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n}\n\ninterface PerformanceObserverCallback {\n    (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void;\n}\n\ninterface PositionCallback {\n    (position: GeolocationPosition): void;\n}\n\ninterface PositionErrorCallback {\n    (positionError: GeolocationPositionError): void;\n}\n\ninterface QueuingStrategySize<T = any> {\n    (chunk: T): number;\n}\n\ninterface RTCPeerConnectionErrorCallback {\n    (error: DOMException): void;\n}\n\ninterface RTCSessionDescriptionCallback {\n    (description: RTCSessionDescriptionInit): void;\n}\n\ninterface RemotePlaybackAvailabilityCallback {\n    (available: boolean): void;\n}\n\ninterface ResizeObserverCallback {\n    (entries: ResizeObserverEntry[], observer: ResizeObserver): void;\n}\n\ninterface TransformerFlushCallback<O> {\n    (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\n}\n\ninterface TransformerStartCallback<O> {\n    (controller: TransformStreamDefaultController<O>): any;\n}\n\ninterface TransformerTransformCallback<I, O> {\n    (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSinkAbortCallback {\n    (reason?: any): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSinkCloseCallback {\n    (): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSinkStartCallback {\n    (controller: WritableStreamDefaultController): any;\n}\n\ninterface UnderlyingSinkWriteCallback<W> {\n    (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSourceCancelCallback {\n    (reason?: any): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSourcePullCallback<R> {\n    (controller: ReadableStreamController<R>): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSourceStartCallback<R> {\n    (controller: ReadableStreamController<R>): any;\n}\n\ninterface VideoFrameRequestCallback {\n    (now: DOMHighResTimeStamp, metadata: VideoFrameMetadata): void;\n}\n\ninterface VoidFunction {\n    (): void;\n}\n\ninterface HTMLElementTagNameMap {\n    \"a\": HTMLAnchorElement;\n    \"abbr\": HTMLElement;\n    \"address\": HTMLElement;\n    \"area\": HTMLAreaElement;\n    \"article\": HTMLElement;\n    \"aside\": HTMLElement;\n    \"audio\": HTMLAudioElement;\n    \"b\": HTMLElement;\n    \"base\": HTMLBaseElement;\n    \"bdi\": HTMLElement;\n    \"bdo\": HTMLElement;\n    \"blockquote\": HTMLQuoteElement;\n    \"body\": HTMLBodyElement;\n    \"br\": HTMLBRElement;\n    \"button\": HTMLButtonElement;\n    \"canvas\": HTMLCanvasElement;\n    \"caption\": HTMLTableCaptionElement;\n    \"cite\": HTMLElement;\n    \"code\": HTMLElement;\n    \"col\": HTMLTableColElement;\n    \"colgroup\": HTMLTableColElement;\n    \"data\": HTMLDataElement;\n    \"datalist\": HTMLDataListElement;\n    \"dd\": HTMLElement;\n    \"del\": HTMLModElement;\n    \"details\": HTMLDetailsElement;\n    \"dfn\": HTMLElement;\n    \"dialog\": HTMLDialogElement;\n    \"div\": HTMLDivElement;\n    \"dl\": HTMLDListElement;\n    \"dt\": HTMLElement;\n    \"em\": HTMLElement;\n    \"embed\": HTMLEmbedElement;\n    \"fieldset\": HTMLFieldSetElement;\n    \"figcaption\": HTMLElement;\n    \"figure\": HTMLElement;\n    \"footer\": HTMLElement;\n    \"form\": HTMLFormElement;\n    \"h1\": HTMLHeadingElement;\n    \"h2\": HTMLHeadingElement;\n    \"h3\": HTMLHeadingElement;\n    \"h4\": HTMLHeadingElement;\n    \"h5\": HTMLHeadingElement;\n    \"h6\": HTMLHeadingElement;\n    \"head\": HTMLHeadElement;\n    \"header\": HTMLElement;\n    \"hgroup\": HTMLElement;\n    \"hr\": HTMLHRElement;\n    \"html\": HTMLHtmlElement;\n    \"i\": HTMLElement;\n    \"iframe\": HTMLIFrameElement;\n    \"img\": HTMLImageElement;\n    \"input\": HTMLInputElement;\n    \"ins\": HTMLModElement;\n    \"kbd\": HTMLElement;\n    \"label\": HTMLLabelElement;\n    \"legend\": HTMLLegendElement;\n    \"li\": HTMLLIElement;\n    \"link\": HTMLLinkElement;\n    \"main\": HTMLElement;\n    \"map\": HTMLMapElement;\n    \"mark\": HTMLElement;\n    \"menu\": HTMLMenuElement;\n    \"meta\": HTMLMetaElement;\n    \"meter\": HTMLMeterElement;\n    \"nav\": HTMLElement;\n    \"noscript\": HTMLElement;\n    \"object\": HTMLObjectElement;\n    \"ol\": HTMLOListElement;\n    \"optgroup\": HTMLOptGroupElement;\n    \"option\": HTMLOptionElement;\n    \"output\": HTMLOutputElement;\n    \"p\": HTMLParagraphElement;\n    \"picture\": HTMLPictureElement;\n    \"pre\": HTMLPreElement;\n    \"progress\": HTMLProgressElement;\n    \"q\": HTMLQuoteElement;\n    \"rp\": HTMLElement;\n    \"rt\": HTMLElement;\n    \"ruby\": HTMLElement;\n    \"s\": HTMLElement;\n    \"samp\": HTMLElement;\n    \"script\": HTMLScriptElement;\n    \"section\": HTMLElement;\n    \"select\": HTMLSelectElement;\n    \"slot\": HTMLSlotElement;\n    \"small\": HTMLElement;\n    \"source\": HTMLSourceElement;\n    \"span\": HTMLSpanElement;\n    \"strong\": HTMLElement;\n    \"style\": HTMLStyleElement;\n    \"sub\": HTMLElement;\n    \"summary\": HTMLElement;\n    \"sup\": HTMLElement;\n    \"table\": HTMLTableElement;\n    \"tbody\": HTMLTableSectionElement;\n    \"td\": HTMLTableCellElement;\n    \"template\": HTMLTemplateElement;\n    \"textarea\": HTMLTextAreaElement;\n    \"tfoot\": HTMLTableSectionElement;\n    \"th\": HTMLTableCellElement;\n    \"thead\": HTMLTableSectionElement;\n    \"time\": HTMLTimeElement;\n    \"title\": HTMLTitleElement;\n    \"tr\": HTMLTableRowElement;\n    \"track\": HTMLTrackElement;\n    \"u\": HTMLElement;\n    \"ul\": HTMLUListElement;\n    \"var\": HTMLElement;\n    \"video\": HTMLVideoElement;\n    \"wbr\": HTMLElement;\n}\n\ninterface HTMLElementDeprecatedTagNameMap {\n    \"acronym\": HTMLElement;\n    \"applet\": HTMLUnknownElement;\n    \"basefont\": HTMLElement;\n    \"bgsound\": HTMLUnknownElement;\n    \"big\": HTMLElement;\n    \"blink\": HTMLUnknownElement;\n    \"center\": HTMLElement;\n    \"dir\": HTMLDirectoryElement;\n    \"font\": HTMLFontElement;\n    \"frame\": HTMLFrameElement;\n    \"frameset\": HTMLFrameSetElement;\n    \"isindex\": HTMLUnknownElement;\n    \"keygen\": HTMLUnknownElement;\n    \"listing\": HTMLPreElement;\n    \"marquee\": HTMLMarqueeElement;\n    \"menuitem\": HTMLElement;\n    \"multicol\": HTMLUnknownElement;\n    \"nextid\": HTMLUnknownElement;\n    \"nobr\": HTMLElement;\n    \"noembed\": HTMLElement;\n    \"noframes\": HTMLElement;\n    \"param\": HTMLParamElement;\n    \"plaintext\": HTMLElement;\n    \"rb\": HTMLElement;\n    \"rtc\": HTMLElement;\n    \"spacer\": HTMLUnknownElement;\n    \"strike\": HTMLElement;\n    \"tt\": HTMLElement;\n    \"xmp\": HTMLPreElement;\n}\n\ninterface SVGElementTagNameMap {\n    \"a\": SVGAElement;\n    \"animate\": SVGAnimateElement;\n    \"animateMotion\": SVGAnimateMotionElement;\n    \"animateTransform\": SVGAnimateTransformElement;\n    \"circle\": SVGCircleElement;\n    \"clipPath\": SVGClipPathElement;\n    \"defs\": SVGDefsElement;\n    \"desc\": SVGDescElement;\n    \"ellipse\": SVGEllipseElement;\n    \"feBlend\": SVGFEBlendElement;\n    \"feColorMatrix\": SVGFEColorMatrixElement;\n    \"feComponentTransfer\": SVGFEComponentTransferElement;\n    \"feComposite\": SVGFECompositeElement;\n    \"feConvolveMatrix\": SVGFEConvolveMatrixElement;\n    \"feDiffuseLighting\": SVGFEDiffuseLightingElement;\n    \"feDisplacementMap\": SVGFEDisplacementMapElement;\n    \"feDistantLight\": SVGFEDistantLightElement;\n    \"feDropShadow\": SVGFEDropShadowElement;\n    \"feFlood\": SVGFEFloodElement;\n    \"feFuncA\": SVGFEFuncAElement;\n    \"feFuncB\": SVGFEFuncBElement;\n    \"feFuncG\": SVGFEFuncGElement;\n    \"feFuncR\": SVGFEFuncRElement;\n    \"feGaussianBlur\": SVGFEGaussianBlurElement;\n    \"feImage\": SVGFEImageElement;\n    \"feMerge\": SVGFEMergeElement;\n    \"feMergeNode\": SVGFEMergeNodeElement;\n    \"feMorphology\": SVGFEMorphologyElement;\n    \"feOffset\": SVGFEOffsetElement;\n    \"fePointLight\": SVGFEPointLightElement;\n    \"feSpecularLighting\": SVGFESpecularLightingElement;\n    \"feSpotLight\": SVGFESpotLightElement;\n    \"feTile\": SVGFETileElement;\n    \"feTurbulence\": SVGFETurbulenceElement;\n    \"filter\": SVGFilterElement;\n    \"foreignObject\": SVGForeignObjectElement;\n    \"g\": SVGGElement;\n    \"image\": SVGImageElement;\n    \"line\": SVGLineElement;\n    \"linearGradient\": SVGLinearGradientElement;\n    \"marker\": SVGMarkerElement;\n    \"mask\": SVGMaskElement;\n    \"metadata\": SVGMetadataElement;\n    \"mpath\": SVGMPathElement;\n    \"path\": SVGPathElement;\n    \"pattern\": SVGPatternElement;\n    \"polygon\": SVGPolygonElement;\n    \"polyline\": SVGPolylineElement;\n    \"radialGradient\": SVGRadialGradientElement;\n    \"rect\": SVGRectElement;\n    \"script\": SVGScriptElement;\n    \"set\": SVGSetElement;\n    \"stop\": SVGStopElement;\n    \"style\": SVGStyleElement;\n    \"svg\": SVGSVGElement;\n    \"switch\": SVGSwitchElement;\n    \"symbol\": SVGSymbolElement;\n    \"text\": SVGTextElement;\n    \"textPath\": SVGTextPathElement;\n    \"title\": SVGTitleElement;\n    \"tspan\": SVGTSpanElement;\n    \"use\": SVGUseElement;\n    \"view\": SVGViewElement;\n}\n\n/** @deprecated Directly use HTMLElementTagNameMap or SVGElementTagNameMap as appropriate, instead. */\ntype ElementTagNameMap = HTMLElementTagNameMap & Pick<SVGElementTagNameMap, Exclude<keyof SVGElementTagNameMap, keyof HTMLElementTagNameMap>>;\n\ndeclare var Audio: {\n    new(src?: string): HTMLAudioElement;\n};\ndeclare var Image: {\n    new(width?: number, height?: number): HTMLImageElement;\n};\ndeclare var Option: {\n    new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement;\n};\n/** @deprecated This is a legacy alias of `navigator`. */\ndeclare var clientInformation: Navigator;\n/** Returns true if the window has been closed, false otherwise. */\ndeclare var closed: boolean;\n/** Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element. */\ndeclare var customElements: CustomElementRegistry;\ndeclare var devicePixelRatio: number;\ndeclare var document: Document;\n/** @deprecated */\ndeclare var event: Event | undefined;\n/** @deprecated */\ndeclare var external: External;\ndeclare var frameElement: Element | null;\ndeclare var frames: WindowProxy;\ndeclare var history: History;\ndeclare var innerHeight: number;\ndeclare var innerWidth: number;\ndeclare var length: number;\ndeclare var location: Location;\n/** Returns true if the location bar is visible; otherwise, returns false. */\ndeclare var locationbar: BarProp;\n/** Returns true if the menu bar is visible; otherwise, returns false. */\ndeclare var menubar: BarProp;\n/** @deprecated */\ndeclare const name: void;\ndeclare var navigator: Navigator;\n/** Available only in secure contexts. */\ndeclare var ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;\n/** Available only in secure contexts. */\ndeclare var ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;\n/** @deprecated */\ndeclare var onorientationchange: ((this: Window, ev: Event) => any) | null;\ndeclare var opener: any;\n/** @deprecated */\ndeclare var orientation: number;\ndeclare var outerHeight: number;\ndeclare var outerWidth: number;\n/** @deprecated This is a legacy alias of `scrollX`. */\ndeclare var pageXOffset: number;\n/** @deprecated This is a legacy alias of `scrollY`. */\ndeclare var pageYOffset: number;\n/**\n * Refers to either the parent WindowProxy, or itself.\n *\n * It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.\n */\ndeclare var parent: WindowProxy;\n/** Returns true if the personal bar is visible; otherwise, returns false. */\ndeclare var personalbar: BarProp;\ndeclare var screen: Screen;\ndeclare var screenLeft: number;\ndeclare var screenTop: number;\ndeclare var screenX: number;\ndeclare var screenY: number;\ndeclare var scrollX: number;\ndeclare var scrollY: number;\n/** Returns true if the scrollbars are visible; otherwise, returns false. */\ndeclare var scrollbars: BarProp;\ndeclare var self: Window & typeof globalThis;\ndeclare var speechSynthesis: SpeechSynthesis;\n/** @deprecated */\ndeclare var status: string;\n/** Returns true if the status bar is visible; otherwise, returns false. */\ndeclare var statusbar: BarProp;\n/** Returns true if the toolbar is visible; otherwise, returns false. */\ndeclare var toolbar: BarProp;\ndeclare var top: WindowProxy | null;\ndeclare var visualViewport: VisualViewport | null;\ndeclare var window: Window & typeof globalThis;\ndeclare function alert(message?: any): void;\ndeclare function blur(): void;\ndeclare function cancelIdleCallback(handle: number): void;\n/** @deprecated */\ndeclare function captureEvents(): void;\n/** Closes the window. */\ndeclare function close(): void;\ndeclare function confirm(message?: string): boolean;\n/** Moves the focus to the window's browsing context, if any. */\ndeclare function focus(): void;\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string | null): CSSStyleDeclaration;\ndeclare function getSelection(): Selection | null;\ndeclare function matchMedia(query: string): MediaQueryList;\ndeclare function moveBy(x: number, y: number): void;\ndeclare function moveTo(x: number, y: number): void;\ndeclare function open(url?: string | URL, target?: string, features?: string): WindowProxy | null;\n/**\n * Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.\n *\n * Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.\n *\n * A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to \"/\". This default restricts the message to same-origin targets only.\n *\n * If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to \"*\".\n *\n * Throws a \"DataCloneError\" DOMException if transfer array contains duplicate objects or if message could not be cloned.\n */\ndeclare function postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void;\ndeclare function postMessage(message: any, options?: WindowPostMessageOptions): void;\ndeclare function print(): void;\ndeclare function prompt(message?: string, _default?: string): string | null;\n/** @deprecated */\ndeclare function releaseEvents(): void;\ndeclare function requestIdleCallback(callback: IdleRequestCallback, options?: IdleRequestOptions): number;\ndeclare function resizeBy(x: number, y: number): void;\ndeclare function resizeTo(width: number, height: number): void;\ndeclare function scroll(options?: ScrollToOptions): void;\ndeclare function scroll(x: number, y: number): void;\ndeclare function scrollBy(options?: ScrollToOptions): void;\ndeclare function scrollBy(x: number, y: number): void;\ndeclare function scrollTo(options?: ScrollToOptions): void;\ndeclare function scrollTo(x: number, y: number): void;\n/** Cancels the document load. */\ndeclare function stop(): void;\ndeclare function toString(): string;\n/** Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise. */\ndeclare function dispatchEvent(event: Event): boolean;\ndeclare function cancelAnimationFrame(handle: number): void;\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\n/**\n * Fires when the user aborts the download.\n * @param ev The event.\n */\ndeclare var onabort: ((this: Window, ev: UIEvent) => any) | null;\ndeclare var onanimationcancel: ((this: Window, ev: AnimationEvent) => any) | null;\ndeclare var onanimationend: ((this: Window, ev: AnimationEvent) => any) | null;\ndeclare var onanimationiteration: ((this: Window, ev: AnimationEvent) => any) | null;\ndeclare var onanimationstart: ((this: Window, ev: AnimationEvent) => any) | null;\ndeclare var onauxclick: ((this: Window, ev: MouseEvent) => any) | null;\n/**\n * Fires when the object loses the input focus.\n * @param ev The focus event.\n */\ndeclare var onblur: ((this: Window, ev: FocusEvent) => any) | null;\n/**\n * Occurs when playback is possible, but would require further buffering.\n * @param ev The event.\n */\ndeclare var oncanplay: ((this: Window, ev: Event) => any) | null;\ndeclare var oncanplaythrough: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when the contents of the object or selection have changed.\n * @param ev The event.\n */\ndeclare var onchange: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when the user clicks the left mouse button on the object\n * @param ev The mouse event.\n */\ndeclare var onclick: ((this: Window, ev: MouseEvent) => any) | null;\ndeclare var onclose: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when the user clicks the right mouse button in the client area, opening the context menu.\n * @param ev The mouse event.\n */\ndeclare var oncontextmenu: ((this: Window, ev: MouseEvent) => any) | null;\ndeclare var oncuechange: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when the user double-clicks the object.\n * @param ev The mouse event.\n */\ndeclare var ondblclick: ((this: Window, ev: MouseEvent) => any) | null;\n/**\n * Fires on the source object continuously during a drag operation.\n * @param ev The event.\n */\ndeclare var ondrag: ((this: Window, ev: DragEvent) => any) | null;\n/**\n * Fires on the source object when the user releases the mouse at the close of a drag operation.\n * @param ev The event.\n */\ndeclare var ondragend: ((this: Window, ev: DragEvent) => any) | null;\n/**\n * Fires on the target element when the user drags the object to a valid drop target.\n * @param ev The drag event.\n */\ndeclare var ondragenter: ((this: Window, ev: DragEvent) => any) | null;\n/**\n * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n * @param ev The drag event.\n */\ndeclare var ondragleave: ((this: Window, ev: DragEvent) => any) | null;\n/**\n * Fires on the target element continuously while the user drags the object over a valid drop target.\n * @param ev The event.\n */\ndeclare var ondragover: ((this: Window, ev: DragEvent) => any) | null;\n/**\n * Fires on the source object when the user starts to drag a text selection or selected object.\n * @param ev The event.\n */\ndeclare var ondragstart: ((this: Window, ev: DragEvent) => any) | null;\ndeclare var ondrop: ((this: Window, ev: DragEvent) => any) | null;\n/**\n * Occurs when the duration attribute is updated.\n * @param ev The event.\n */\ndeclare var ondurationchange: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when the media element is reset to its initial state.\n * @param ev The event.\n */\ndeclare var onemptied: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when the end of playback is reached.\n * @param ev The event\n */\ndeclare var onended: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when an error occurs during object loading.\n * @param ev The event.\n */\ndeclare var onerror: OnErrorEventHandler;\n/**\n * Fires when the object receives focus.\n * @param ev The event.\n */\ndeclare var onfocus: ((this: Window, ev: FocusEvent) => any) | null;\ndeclare var onformdata: ((this: Window, ev: FormDataEvent) => any) | null;\ndeclare var ongotpointercapture: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var oninput: ((this: Window, ev: Event) => any) | null;\ndeclare var oninvalid: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when the user presses a key.\n * @param ev The keyboard event\n */\ndeclare var onkeydown: ((this: Window, ev: KeyboardEvent) => any) | null;\n/**\n * Fires when the user presses an alphanumeric key.\n * @param ev The event.\n * @deprecated\n */\ndeclare var onkeypress: ((this: Window, ev: KeyboardEvent) => any) | null;\n/**\n * Fires when the user releases a key.\n * @param ev The keyboard event\n */\ndeclare var onkeyup: ((this: Window, ev: KeyboardEvent) => any) | null;\n/**\n * Fires immediately after the browser loads the object.\n * @param ev The event.\n */\ndeclare var onload: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when media data is loaded at the current playback position.\n * @param ev The event.\n */\ndeclare var onloadeddata: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when the duration and dimensions of the media have been determined.\n * @param ev The event.\n */\ndeclare var onloadedmetadata: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when Internet Explorer begins looking for media data.\n * @param ev The event.\n */\ndeclare var onloadstart: ((this: Window, ev: Event) => any) | null;\ndeclare var onlostpointercapture: ((this: Window, ev: PointerEvent) => any) | null;\n/**\n * Fires when the user clicks the object with either mouse button.\n * @param ev The mouse event.\n */\ndeclare var onmousedown: ((this: Window, ev: MouseEvent) => any) | null;\ndeclare var onmouseenter: ((this: Window, ev: MouseEvent) => any) | null;\ndeclare var onmouseleave: ((this: Window, ev: MouseEvent) => any) | null;\n/**\n * Fires when the user moves the mouse over the object.\n * @param ev The mouse event.\n */\ndeclare var onmousemove: ((this: Window, ev: MouseEvent) => any) | null;\n/**\n * Fires when the user moves the mouse pointer outside the boundaries of the object.\n * @param ev The mouse event.\n */\ndeclare var onmouseout: ((this: Window, ev: MouseEvent) => any) | null;\n/**\n * Fires when the user moves the mouse pointer into the object.\n * @param ev The mouse event.\n */\ndeclare var onmouseover: ((this: Window, ev: MouseEvent) => any) | null;\n/**\n * Fires when the user releases a mouse button while the mouse is over the object.\n * @param ev The mouse event.\n */\ndeclare var onmouseup: ((this: Window, ev: MouseEvent) => any) | null;\n/**\n * Occurs when playback is paused.\n * @param ev The event.\n */\ndeclare var onpause: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when the play method is requested.\n * @param ev The event.\n */\ndeclare var onplay: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when the audio or video has started playing.\n * @param ev The event.\n */\ndeclare var onplaying: ((this: Window, ev: Event) => any) | null;\ndeclare var onpointercancel: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var onpointerdown: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var onpointerenter: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var onpointerleave: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var onpointermove: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var onpointerout: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var onpointerover: ((this: Window, ev: PointerEvent) => any) | null;\ndeclare var onpointerup: ((this: Window, ev: PointerEvent) => any) | null;\n/**\n * Occurs to indicate progress while downloading media data.\n * @param ev The event.\n */\ndeclare var onprogress: ((this: Window, ev: ProgressEvent) => any) | null;\n/**\n * Occurs when the playback rate is increased or decreased.\n * @param ev The event.\n */\ndeclare var onratechange: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when the user resets a form.\n * @param ev The event.\n */\ndeclare var onreset: ((this: Window, ev: Event) => any) | null;\ndeclare var onresize: ((this: Window, ev: UIEvent) => any) | null;\n/**\n * Fires when the user repositions the scroll box in the scroll bar on the object.\n * @param ev The event.\n */\ndeclare var onscroll: ((this: Window, ev: Event) => any) | null;\ndeclare var onsecuritypolicyviolation: ((this: Window, ev: SecurityPolicyViolationEvent) => any) | null;\n/**\n * Occurs when the seek operation ends.\n * @param ev The event.\n */\ndeclare var onseeked: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when the current playback position is moved.\n * @param ev The event.\n */\ndeclare var onseeking: ((this: Window, ev: Event) => any) | null;\n/**\n * Fires when the current selection changes.\n * @param ev The event.\n */\ndeclare var onselect: ((this: Window, ev: Event) => any) | null;\ndeclare var onselectionchange: ((this: Window, ev: Event) => any) | null;\ndeclare var onselectstart: ((this: Window, ev: Event) => any) | null;\ndeclare var onslotchange: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when the download has stopped.\n * @param ev The event.\n */\ndeclare var onstalled: ((this: Window, ev: Event) => any) | null;\ndeclare var onsubmit: ((this: Window, ev: SubmitEvent) => any) | null;\n/**\n * Occurs if the load operation has been intentionally halted.\n * @param ev The event.\n */\ndeclare var onsuspend: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs to indicate the current playback position.\n * @param ev The event.\n */\ndeclare var ontimeupdate: ((this: Window, ev: Event) => any) | null;\ndeclare var ontoggle: ((this: Window, ev: Event) => any) | null;\ndeclare var ontouchcancel: ((this: Window, ev: TouchEvent) => any) | null | undefined;\ndeclare var ontouchend: ((this: Window, ev: TouchEvent) => any) | null | undefined;\ndeclare var ontouchmove: ((this: Window, ev: TouchEvent) => any) | null | undefined;\ndeclare var ontouchstart: ((this: Window, ev: TouchEvent) => any) | null | undefined;\ndeclare var ontransitioncancel: ((this: Window, ev: TransitionEvent) => any) | null;\ndeclare var ontransitionend: ((this: Window, ev: TransitionEvent) => any) | null;\ndeclare var ontransitionrun: ((this: Window, ev: TransitionEvent) => any) | null;\ndeclare var ontransitionstart: ((this: Window, ev: TransitionEvent) => any) | null;\n/**\n * Occurs when the volume is changed, or playback is muted or unmuted.\n * @param ev The event.\n */\ndeclare var onvolumechange: ((this: Window, ev: Event) => any) | null;\n/**\n * Occurs when playback stops because the next frame of a video resource is not available.\n * @param ev The event.\n */\ndeclare var onwaiting: ((this: Window, ev: Event) => any) | null;\n/** @deprecated This is a legacy alias of `onanimationend`. */\ndeclare var onwebkitanimationend: ((this: Window, ev: Event) => any) | null;\n/** @deprecated This is a legacy alias of `onanimationiteration`. */\ndeclare var onwebkitanimationiteration: ((this: Window, ev: Event) => any) | null;\n/** @deprecated This is a legacy alias of `onanimationstart`. */\ndeclare var onwebkitanimationstart: ((this: Window, ev: Event) => any) | null;\n/** @deprecated This is a legacy alias of `ontransitionend`. */\ndeclare var onwebkittransitionend: ((this: Window, ev: Event) => any) | null;\ndeclare var onwheel: ((this: Window, ev: WheelEvent) => any) | null;\ndeclare var onafterprint: ((this: Window, ev: Event) => any) | null;\ndeclare var onbeforeprint: ((this: Window, ev: Event) => any) | null;\ndeclare var onbeforeunload: ((this: Window, ev: BeforeUnloadEvent) => any) | null;\ndeclare var ongamepadconnected: ((this: Window, ev: GamepadEvent) => any) | null;\ndeclare var ongamepaddisconnected: ((this: Window, ev: GamepadEvent) => any) | null;\ndeclare var onhashchange: ((this: Window, ev: HashChangeEvent) => any) | null;\ndeclare var onlanguagechange: ((this: Window, ev: Event) => any) | null;\ndeclare var onmessage: ((this: Window, ev: MessageEvent) => any) | null;\ndeclare var onmessageerror: ((this: Window, ev: MessageEvent) => any) | null;\ndeclare var onoffline: ((this: Window, ev: Event) => any) | null;\ndeclare var ononline: ((this: Window, ev: Event) => any) | null;\ndeclare var onpagehide: ((this: Window, ev: PageTransitionEvent) => any) | null;\ndeclare var onpageshow: ((this: Window, ev: PageTransitionEvent) => any) | null;\ndeclare var onpopstate: ((this: Window, ev: PopStateEvent) => any) | null;\ndeclare var onrejectionhandled: ((this: Window, ev: PromiseRejectionEvent) => any) | null;\ndeclare var onstorage: ((this: Window, ev: StorageEvent) => any) | null;\ndeclare var onunhandledrejection: ((this: Window, ev: PromiseRejectionEvent) => any) | null;\ndeclare var onunload: ((this: Window, ev: Event) => any) | null;\ndeclare var localStorage: Storage;\n/** Available only in secure contexts. */\ndeclare var caches: CacheStorage;\ndeclare var crossOriginIsolated: boolean;\ndeclare var crypto: Crypto;\ndeclare var indexedDB: IDBFactory;\ndeclare var isSecureContext: boolean;\ndeclare var origin: string;\ndeclare var performance: Performance;\ndeclare function atob(data: string): string;\ndeclare function btoa(data: string): string;\ndeclare function clearInterval(id: number | undefined): void;\ndeclare function clearTimeout(id: number | undefined): void;\ndeclare function createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>;\ndeclare function createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;\ndeclare function fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;\ndeclare function queueMicrotask(callback: VoidFunction): void;\ndeclare function reportError(e: any): void;\ndeclare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\ndeclare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\ndeclare function structuredClone(value: any, options?: StructuredSerializeOptions): any;\ndeclare var sessionStorage: Storage;\ndeclare function addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\ndeclare function removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\ndeclare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\ntype AlgorithmIdentifier = Algorithm | string;\ntype BigInteger = Uint8Array;\ntype BinaryData = ArrayBuffer | ArrayBufferView;\ntype BlobPart = BufferSource | Blob | string;\ntype BodyInit = ReadableStream | XMLHttpRequestBodyInit;\ntype BufferSource = ArrayBufferView | ArrayBuffer;\ntype COSEAlgorithmIdentifier = number;\ntype CSSNumberish = number;\ntype CanvasImageSource = HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap;\ntype ClipboardItemData = Promise<string | Blob>;\ntype ClipboardItems = ClipboardItem[];\ntype ConstrainBoolean = boolean | ConstrainBooleanParameters;\ntype ConstrainDOMString = string | string[] | ConstrainDOMStringParameters;\ntype ConstrainDouble = number | ConstrainDoubleRange;\ntype ConstrainULong = number | ConstrainULongRange;\ntype DOMHighResTimeStamp = number;\ntype EpochTimeStamp = number;\ntype EventListenerOrEventListenerObject = EventListener | EventListenerObject;\ntype Float32List = Float32Array | GLfloat[];\ntype FormDataEntryValue = File | string;\ntype GLbitfield = number;\ntype GLboolean = boolean;\ntype GLclampf = number;\ntype GLenum = number;\ntype GLfloat = number;\ntype GLint = number;\ntype GLint64 = number;\ntype GLintptr = number;\ntype GLsizei = number;\ntype GLsizeiptr = number;\ntype GLuint = number;\ntype GLuint64 = number;\ntype HTMLOrSVGImageElement = HTMLImageElement | SVGImageElement;\ntype HTMLOrSVGScriptElement = HTMLScriptElement | SVGScriptElement;\ntype HashAlgorithmIdentifier = AlgorithmIdentifier;\ntype HeadersInit = [string, string][] | Record<string, string> | Headers;\ntype IDBValidKey = number | string | Date | BufferSource | IDBValidKey[];\ntype ImageBitmapSource = CanvasImageSource | Blob | ImageData;\ntype InsertPosition = \"beforebegin\" | \"afterbegin\" | \"beforeend\" | \"afterend\";\ntype Int32List = Int32Array | GLint[];\ntype LineAndPositionSetting = number | AutoKeyword;\ntype MediaProvider = MediaStream | MediaSource | Blob;\ntype MessageEventSource = WindowProxy | MessagePort | ServiceWorker;\ntype MutationRecordType = \"attributes\" | \"characterData\" | \"childList\";\ntype NamedCurve = string;\ntype OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull | null;\ntype OnErrorEventHandler = OnErrorEventHandlerNonNull | null;\ntype PerformanceEntryList = PerformanceEntry[];\ntype ReadableStreamController<T> = ReadableStreamDefaultController<T>;\ntype ReadableStreamReadResult<T> = ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult;\ntype ReadableStreamReader<T> = ReadableStreamDefaultReader<T>;\ntype RenderingContext = CanvasRenderingContext2D | ImageBitmapRenderingContext | WebGLRenderingContext | WebGL2RenderingContext;\ntype RequestInfo = Request | string;\ntype TexImageSource = ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement;\ntype TimerHandler = string | Function;\ntype Transferable = ArrayBuffer | MessagePort | ImageBitmap;\ntype Uint32List = Uint32Array | GLuint[];\ntype UvmEntries = UvmEntry[];\ntype UvmEntry = number[];\ntype VibratePattern = number | number[];\ntype WindowProxy = Window;\ntype XMLHttpRequestBodyInit = Blob | BufferSource | FormData | URLSearchParams | string;\ntype AlignSetting = \"center\" | \"end\" | \"left\" | \"right\" | \"start\";\ntype AnimationPlayState = \"finished\" | \"idle\" | \"paused\" | \"running\";\ntype AnimationReplaceState = \"active\" | \"persisted\" | \"removed\";\ntype AppendMode = \"segments\" | \"sequence\";\ntype AttestationConveyancePreference = \"direct\" | \"enterprise\" | \"indirect\" | \"none\";\ntype AudioContextLatencyCategory = \"balanced\" | \"interactive\" | \"playback\";\ntype AudioContextState = \"closed\" | \"running\" | \"suspended\";\ntype AuthenticatorAttachment = \"cross-platform\" | \"platform\";\ntype AuthenticatorTransport = \"ble\" | \"internal\" | \"nfc\" | \"usb\";\ntype AutoKeyword = \"auto\";\ntype AutomationRate = \"a-rate\" | \"k-rate\";\ntype BinaryType = \"arraybuffer\" | \"blob\";\ntype BiquadFilterType = \"allpass\" | \"bandpass\" | \"highpass\" | \"highshelf\" | \"lowpass\" | \"lowshelf\" | \"notch\" | \"peaking\";\ntype CanPlayTypeResult = \"\" | \"maybe\" | \"probably\";\ntype CanvasDirection = \"inherit\" | \"ltr\" | \"rtl\";\ntype CanvasFillRule = \"evenodd\" | \"nonzero\";\ntype CanvasFontKerning = \"auto\" | \"none\" | \"normal\";\ntype CanvasFontStretch = \"condensed\" | \"expanded\" | \"extra-condensed\" | \"extra-expanded\" | \"normal\" | \"semi-condensed\" | \"semi-expanded\" | \"ultra-condensed\" | \"ultra-expanded\";\ntype CanvasFontVariantCaps = \"all-petite-caps\" | \"all-small-caps\" | \"normal\" | \"petite-caps\" | \"small-caps\" | \"titling-caps\" | \"unicase\";\ntype CanvasLineCap = \"butt\" | \"round\" | \"square\";\ntype CanvasLineJoin = \"bevel\" | \"miter\" | \"round\";\ntype CanvasTextAlign = \"center\" | \"end\" | \"left\" | \"right\" | \"start\";\ntype CanvasTextBaseline = \"alphabetic\" | \"bottom\" | \"hanging\" | \"ideographic\" | \"middle\" | \"top\";\ntype CanvasTextRendering = \"auto\" | \"geometricPrecision\" | \"optimizeLegibility\" | \"optimizeSpeed\";\ntype ChannelCountMode = \"clamped-max\" | \"explicit\" | \"max\";\ntype ChannelInterpretation = \"discrete\" | \"speakers\";\ntype ClientTypes = \"all\" | \"sharedworker\" | \"window\" | \"worker\";\ntype ColorGamut = \"p3\" | \"rec2020\" | \"srgb\";\ntype ColorSpaceConversion = \"default\" | \"none\";\ntype CompositeOperation = \"accumulate\" | \"add\" | \"replace\";\ntype CompositeOperationOrAuto = \"accumulate\" | \"add\" | \"auto\" | \"replace\";\ntype CredentialMediationRequirement = \"optional\" | \"required\" | \"silent\";\ntype DOMParserSupportedType = \"application/xhtml+xml\" | \"application/xml\" | \"image/svg+xml\" | \"text/html\" | \"text/xml\";\ntype DirectionSetting = \"\" | \"lr\" | \"rl\";\ntype DisplayCaptureSurfaceType = \"browser\" | \"monitor\" | \"window\";\ntype DistanceModelType = \"exponential\" | \"inverse\" | \"linear\";\ntype DocumentReadyState = \"complete\" | \"interactive\" | \"loading\";\ntype DocumentVisibilityState = \"hidden\" | \"visible\";\ntype EndOfStreamError = \"decode\" | \"network\";\ntype EndingType = \"native\" | \"transparent\";\ntype FileSystemHandleKind = \"directory\" | \"file\";\ntype FillMode = \"auto\" | \"backwards\" | \"both\" | \"forwards\" | \"none\";\ntype FontFaceLoadStatus = \"error\" | \"loaded\" | \"loading\" | \"unloaded\";\ntype FontFaceSetLoadStatus = \"loaded\" | \"loading\";\ntype FullscreenNavigationUI = \"auto\" | \"hide\" | \"show\";\ntype GamepadHapticActuatorType = \"vibration\";\ntype GamepadMappingType = \"\" | \"standard\" | \"xr-standard\";\ntype GlobalCompositeOperation = \"color\" | \"color-burn\" | \"color-dodge\" | \"copy\" | \"darken\" | \"destination-atop\" | \"destination-in\" | \"destination-out\" | \"destination-over\" | \"difference\" | \"exclusion\" | \"hard-light\" | \"hue\" | \"lighten\" | \"lighter\" | \"luminosity\" | \"multiply\" | \"overlay\" | \"saturation\" | \"screen\" | \"soft-light\" | \"source-atop\" | \"source-in\" | \"source-out\" | \"source-over\" | \"xor\";\ntype HdrMetadataType = \"smpteSt2086\" | \"smpteSt2094-10\" | \"smpteSt2094-40\";\ntype IDBCursorDirection = \"next\" | \"nextunique\" | \"prev\" | \"prevunique\";\ntype IDBRequestReadyState = \"done\" | \"pending\";\ntype IDBTransactionDurability = \"default\" | \"relaxed\" | \"strict\";\ntype IDBTransactionMode = \"readonly\" | \"readwrite\" | \"versionchange\";\ntype ImageOrientation = \"flipY\" | \"none\";\ntype ImageSmoothingQuality = \"high\" | \"low\" | \"medium\";\ntype IterationCompositeOperation = \"accumulate\" | \"replace\";\ntype KeyFormat = \"jwk\" | \"pkcs8\" | \"raw\" | \"spki\";\ntype KeyType = \"private\" | \"public\" | \"secret\";\ntype KeyUsage = \"decrypt\" | \"deriveBits\" | \"deriveKey\" | \"encrypt\" | \"sign\" | \"unwrapKey\" | \"verify\" | \"wrapKey\";\ntype LineAlignSetting = \"center\" | \"end\" | \"start\";\ntype LockMode = \"exclusive\" | \"shared\";\ntype MediaDecodingType = \"file\" | \"media-source\" | \"webrtc\";\ntype MediaDeviceKind = \"audioinput\" | \"audiooutput\" | \"videoinput\";\ntype MediaEncodingType = \"record\" | \"webrtc\";\ntype MediaKeyMessageType = \"individualization-request\" | \"license-release\" | \"license-renewal\" | \"license-request\";\ntype MediaKeySessionClosedReason = \"closed-by-application\" | \"hardware-context-reset\" | \"internal-error\" | \"release-acknowledged\" | \"resource-evicted\";\ntype MediaKeySessionType = \"persistent-license\" | \"temporary\";\ntype MediaKeyStatus = \"expired\" | \"internal-error\" | \"output-downscaled\" | \"output-restricted\" | \"released\" | \"status-pending\" | \"usable\" | \"usable-in-future\";\ntype MediaKeysRequirement = \"not-allowed\" | \"optional\" | \"required\";\ntype MediaSessionAction = \"hangup\" | \"nexttrack\" | \"pause\" | \"play\" | \"previoustrack\" | \"seekbackward\" | \"seekforward\" | \"seekto\" | \"skipad\" | \"stop\" | \"togglecamera\" | \"togglemicrophone\";\ntype MediaSessionPlaybackState = \"none\" | \"paused\" | \"playing\";\ntype MediaStreamTrackState = \"ended\" | \"live\";\ntype NavigationTimingType = \"back_forward\" | \"navigate\" | \"prerender\" | \"reload\";\ntype NotificationDirection = \"auto\" | \"ltr\" | \"rtl\";\ntype NotificationPermission = \"default\" | \"denied\" | \"granted\";\ntype OrientationLockType = \"any\" | \"landscape\" | \"landscape-primary\" | \"landscape-secondary\" | \"natural\" | \"portrait\" | \"portrait-primary\" | \"portrait-secondary\";\ntype OrientationType = \"landscape-primary\" | \"landscape-secondary\" | \"portrait-primary\" | \"portrait-secondary\";\ntype OscillatorType = \"custom\" | \"sawtooth\" | \"sine\" | \"square\" | \"triangle\";\ntype OverSampleType = \"2x\" | \"4x\" | \"none\";\ntype PanningModelType = \"HRTF\" | \"equalpower\";\ntype PaymentComplete = \"fail\" | \"success\" | \"unknown\";\ntype PermissionName = \"geolocation\" | \"notifications\" | \"persistent-storage\" | \"push\" | \"screen-wake-lock\" | \"xr-spatial-tracking\";\ntype PermissionState = \"denied\" | \"granted\" | \"prompt\";\ntype PlaybackDirection = \"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\";\ntype PositionAlignSetting = \"auto\" | \"center\" | \"line-left\" | \"line-right\";\ntype PredefinedColorSpace = \"display-p3\" | \"srgb\";\ntype PremultiplyAlpha = \"default\" | \"none\" | \"premultiply\";\ntype PresentationStyle = \"attachment\" | \"inline\" | \"unspecified\";\ntype PublicKeyCredentialType = \"public-key\";\ntype PushEncryptionKeyName = \"auth\" | \"p256dh\";\ntype RTCBundlePolicy = \"balanced\" | \"max-bundle\" | \"max-compat\";\ntype RTCDataChannelState = \"closed\" | \"closing\" | \"connecting\" | \"open\";\ntype RTCDegradationPreference = \"balanced\" | \"maintain-framerate\" | \"maintain-resolution\";\ntype RTCDtlsTransportState = \"closed\" | \"connected\" | \"connecting\" | \"failed\" | \"new\";\ntype RTCEncodedVideoFrameType = \"delta\" | \"empty\" | \"key\";\ntype RTCErrorDetailType = \"data-channel-failure\" | \"dtls-failure\" | \"fingerprint-failure\" | \"hardware-encoder-error\" | \"hardware-encoder-not-available\" | \"sctp-failure\" | \"sdp-syntax-error\";\ntype RTCIceCandidateType = \"host\" | \"prflx\" | \"relay\" | \"srflx\";\ntype RTCIceComponent = \"rtcp\" | \"rtp\";\ntype RTCIceConnectionState = \"checking\" | \"closed\" | \"completed\" | \"connected\" | \"disconnected\" | \"failed\" | \"new\";\ntype RTCIceCredentialType = \"password\";\ntype RTCIceGathererState = \"complete\" | \"gathering\" | \"new\";\ntype RTCIceGatheringState = \"complete\" | \"gathering\" | \"new\";\ntype RTCIceProtocol = \"tcp\" | \"udp\";\ntype RTCIceTcpCandidateType = \"active\" | \"passive\" | \"so\";\ntype RTCIceTransportPolicy = \"all\" | \"relay\";\ntype RTCIceTransportState = \"checking\" | \"closed\" | \"completed\" | \"connected\" | \"disconnected\" | \"failed\" | \"new\";\ntype RTCPeerConnectionState = \"closed\" | \"connected\" | \"connecting\" | \"disconnected\" | \"failed\" | \"new\";\ntype RTCPriorityType = \"high\" | \"low\" | \"medium\" | \"very-low\";\ntype RTCRtcpMuxPolicy = \"require\";\ntype RTCRtpTransceiverDirection = \"inactive\" | \"recvonly\" | \"sendonly\" | \"sendrecv\" | \"stopped\";\ntype RTCSctpTransportState = \"closed\" | \"connected\" | \"connecting\";\ntype RTCSdpType = \"answer\" | \"offer\" | \"pranswer\" | \"rollback\";\ntype RTCSignalingState = \"closed\" | \"have-local-offer\" | \"have-local-pranswer\" | \"have-remote-offer\" | \"have-remote-pranswer\" | \"stable\";\ntype RTCStatsIceCandidatePairState = \"failed\" | \"frozen\" | \"in-progress\" | \"inprogress\" | \"succeeded\" | \"waiting\";\ntype RTCStatsType = \"candidate-pair\" | \"certificate\" | \"codec\" | \"csrc\" | \"data-channel\" | \"inbound-rtp\" | \"local-candidate\" | \"media-source\" | \"outbound-rtp\" | \"peer-connection\" | \"remote-candidate\" | \"remote-inbound-rtp\" | \"remote-outbound-rtp\" | \"track\" | \"transport\";\ntype ReadyState = \"closed\" | \"ended\" | \"open\";\ntype RecordingState = \"inactive\" | \"paused\" | \"recording\";\ntype ReferrerPolicy = \"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\";\ntype RemotePlaybackState = \"connected\" | \"connecting\" | \"disconnected\";\ntype RequestCache = \"default\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | \"reload\";\ntype RequestCredentials = \"include\" | \"omit\" | \"same-origin\";\ntype RequestDestination = \"\" | \"audio\" | \"audioworklet\" | \"document\" | \"embed\" | \"font\" | \"frame\" | \"iframe\" | \"image\" | \"manifest\" | \"object\" | \"paintworklet\" | \"report\" | \"script\" | \"sharedworker\" | \"style\" | \"track\" | \"video\" | \"worker\" | \"xslt\";\ntype RequestMode = \"cors\" | \"navigate\" | \"no-cors\" | \"same-origin\";\ntype RequestRedirect = \"error\" | \"follow\" | \"manual\";\ntype ResidentKeyRequirement = \"discouraged\" | \"preferred\" | \"required\";\ntype ResizeObserverBoxOptions = \"border-box\" | \"content-box\" | \"device-pixel-content-box\";\ntype ResizeQuality = \"high\" | \"low\" | \"medium\" | \"pixelated\";\ntype ResponseType = \"basic\" | \"cors\" | \"default\" | \"error\" | \"opaque\" | \"opaqueredirect\";\ntype ScrollBehavior = \"auto\" | \"smooth\";\ntype ScrollLogicalPosition = \"center\" | \"end\" | \"nearest\" | \"start\";\ntype ScrollRestoration = \"auto\" | \"manual\";\ntype ScrollSetting = \"\" | \"up\";\ntype SecurityPolicyViolationEventDisposition = \"enforce\" | \"report\";\ntype SelectionMode = \"end\" | \"preserve\" | \"select\" | \"start\";\ntype ServiceWorkerState = \"activated\" | \"activating\" | \"installed\" | \"installing\" | \"parsed\" | \"redundant\";\ntype ServiceWorkerUpdateViaCache = \"all\" | \"imports\" | \"none\";\ntype ShadowRootMode = \"closed\" | \"open\";\ntype SlotAssignmentMode = \"manual\" | \"named\";\ntype SpeechSynthesisErrorCode = \"audio-busy\" | \"audio-hardware\" | \"canceled\" | \"interrupted\" | \"invalid-argument\" | \"language-unavailable\" | \"network\" | \"not-allowed\" | \"synthesis-failed\" | \"synthesis-unavailable\" | \"text-too-long\" | \"voice-unavailable\";\ntype TextTrackKind = \"captions\" | \"chapters\" | \"descriptions\" | \"metadata\" | \"subtitles\";\ntype TextTrackMode = \"disabled\" | \"hidden\" | \"showing\";\ntype TouchType = \"direct\" | \"stylus\";\ntype TransferFunction = \"hlg\" | \"pq\" | \"srgb\";\ntype UserVerificationRequirement = \"discouraged\" | \"preferred\" | \"required\";\ntype VideoColorPrimaries = \"bt470bg\" | \"bt709\" | \"smpte170m\";\ntype VideoFacingModeEnum = \"environment\" | \"left\" | \"right\" | \"user\";\ntype VideoMatrixCoefficients = \"bt470bg\" | \"bt709\" | \"rgb\" | \"smpte170m\";\ntype VideoTransferCharacteristics = \"bt709\" | \"iec61966-2-1\" | \"smpte170m\";\ntype WebGLPowerPreference = \"default\" | \"high-performance\" | \"low-power\";\ntype WorkerType = \"classic\" | \"module\";\ntype XMLHttpRequestResponseType = \"\" | \"arraybuffer\" | \"blob\" | \"document\" | \"json\" | \"text\";\n","lib.dom.extras.d.ts":"// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n/*\n * This library contains DOM standards that are not currently included in the\n * distributed `lib.dom.d.ts` file with TypeScript.\n */\n\n/// <reference no-default-lib=\"true\"/>\n\ndeclare interface URLPatternInit {\n  protocol?: string;\n  username?: string;\n  password?: string;\n  hostname?: string;\n  port?: string;\n  pathname?: string;\n  search?: string;\n  hash?: string;\n  baseURL?: string;\n}\n\ndeclare type URLPatternInput = string | URLPatternInit;\n\ndeclare interface URLPatternComponentResult {\n  input: string;\n  groups: Record<string, string>;\n}\n\n/** `URLPatternResult` is the object returned from `URLPattern.exec`. */\ndeclare interface URLPatternResult {\n  /** The inputs provided when matching. */\n  inputs: [URLPatternInit] | [URLPatternInit, string];\n\n  /** The matched result for the `protocol` matcher. */\n  protocol: URLPatternComponentResult;\n  /** The matched result for the `username` matcher. */\n  username: URLPatternComponentResult;\n  /** The matched result for the `password` matcher. */\n  password: URLPatternComponentResult;\n  /** The matched result for the `hostname` matcher. */\n  hostname: URLPatternComponentResult;\n  /** The matched result for the `port` matcher. */\n  port: URLPatternComponentResult;\n  /** The matched result for the `pathname` matcher. */\n  pathname: URLPatternComponentResult;\n  /** The matched result for the `search` matcher. */\n  search: URLPatternComponentResult;\n  /** The matched result for the `hash` matcher. */\n  hash: URLPatternComponentResult;\n}\n\n/**\n * The URLPattern API provides a web platform primitive for matching URLs based\n * on a convenient pattern syntax.\n *\n * The syntax is based on path-to-regexp. Wildcards, named capture groups,\n * regular groups, and group modifiers are all supported.\n *\n * ```ts\n * // Specify the pattern as structured data.\n * const pattern = new URLPattern({ pathname: \"/users/:user\" });\n * const match = pattern.exec(\"/users/joe\");\n * console.log(match.pathname.groups.user); // joe\n * ```\n *\n * ```ts\n * // Specify a fully qualified string pattern.\n * const pattern = new URLPattern(\"https://example.com/books/:id\");\n * console.log(pattern.test(\"https://example.com/books/123\")); // true\n * console.log(pattern.test(\"https://deno.land/books/123\")); // false\n * ```\n *\n * ```ts\n * // Specify a relative string pattern with a base URL.\n * const pattern = new URLPattern(\"/:article\", \"https://blog.example.com\");\n * console.log(pattern.test(\"https://blog.example.com/article\")); // true\n * console.log(pattern.test(\"https://blog.example.com/article/123\")); // false\n * ```\n */\ndeclare class URLPattern {\n  constructor(input: URLPatternInput, baseURL?: string);\n\n  /**\n   * Test if the given input matches the stored pattern.\n   *\n   * The input can either be provided as a url string (with an optional base),\n   * or as individual components in the form of an object.\n   *\n   * ```ts\n   * const pattern = new URLPattern(\"https://example.com/books/:id\");\n   *\n   * // Test a url string.\n   * console.log(pattern.test(\"https://example.com/books/123\")); // true\n   *\n   * // Test a relative url with a base.\n   * console.log(pattern.test(\"/books/123\", \"https://example.com\")); // true\n   *\n   * // Test an object of url components.\n   * console.log(pattern.test({ pathname: \"/books/123\" })); // true\n   * ```\n   */\n  test(input: URLPatternInput, baseURL?: string): boolean;\n\n  /**\n   * Match the given input against the stored pattern.\n   *\n   * The input can either be provided as a url string (with an optional base),\n   * or as individual components in the form of an object.\n   *\n   * ```ts\n   * const pattern = new URLPattern(\"https://example.com/books/:id\");\n   *\n   * // Match a url string.\n   * let match = pattern.exec(\"https://example.com/books/123\");\n   * console.log(match.pathname.groups.id); // 123\n   *\n   * // Match a relative url with a base.\n   * match = pattern.exec(\"/books/123\", \"https://example.com\");\n   * console.log(match.pathname.groups.id); // 123\n   *\n   * // Match an object of url components.\n   * match = pattern.exec({ pathname: \"/books/123\" });\n   * console.log(match.pathname.groups.id); // 123\n   * ```\n   */\n  exec(input: URLPatternInput, baseURL?: string): URLPatternResult | null;\n\n  /** The pattern string for the `protocol`. */\n  readonly protocol: string;\n  /** The pattern string for the `username`. */\n  readonly username: string;\n  /** The pattern string for the `password`. */\n  readonly password: string;\n  /** The pattern string for the `hostname`. */\n  readonly hostname: string;\n  /** The pattern string for the `port`. */\n  readonly port: string;\n  /** The pattern string for the `pathname`. */\n  readonly pathname: string;\n  /** The pattern string for the `search`. */\n  readonly search: string;\n  /** The pattern string for the `hash`. */\n  readonly hash: string;\n}\n\ninterface ErrorConstructor {\n  /** See https://v8.dev/docs/stack-trace-api#stack-trace-collection-for-custom-exceptions. */\n  captureStackTrace(error: Object, constructor?: Function): void;\n}\n","lib.dom.iterable.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/////////////////////////////\n/// Window Iterable APIs\n/////////////////////////////\n\ninterface AudioParam {\n    setValueCurveAtTime(values: Iterable<number>, startTime: number, duration: number): AudioParam;\n}\n\ninterface AudioParamMap extends ReadonlyMap<string, AudioParam> {\n}\n\ninterface BaseAudioContext {\n    createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIRFilterNode;\n    createPeriodicWave(real: Iterable<number>, imag: Iterable<number>, constraints?: PeriodicWaveConstraints): PeriodicWave;\n}\n\ninterface CSSRuleList {\n    [Symbol.iterator](): IterableIterator<CSSRule>;\n}\n\ninterface CSSStyleDeclaration {\n    [Symbol.iterator](): IterableIterator<string>;\n}\n\ninterface Cache {\n    addAll(requests: Iterable<RequestInfo>): Promise<void>;\n}\n\ninterface CanvasPathDrawingStyles {\n    setLineDash(segments: Iterable<number>): void;\n}\n\ninterface DOMRectList {\n    [Symbol.iterator](): IterableIterator<DOMRect>;\n}\n\ninterface DOMStringList {\n    [Symbol.iterator](): IterableIterator<string>;\n}\n\ninterface DOMTokenList {\n    [Symbol.iterator](): IterableIterator<string>;\n    entries(): IterableIterator<[number, string]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<string>;\n}\n\ninterface DataTransferItemList {\n    [Symbol.iterator](): IterableIterator<DataTransferItem>;\n}\n\ninterface EventCounts extends ReadonlyMap<string, number> {\n}\n\ninterface FileList {\n    [Symbol.iterator](): IterableIterator<File>;\n}\n\ninterface FontFaceSet extends Set<FontFace> {\n}\n\ninterface FormData {\n    [Symbol.iterator](): IterableIterator<[string, FormDataEntryValue]>;\n    /** Returns an array of key, value pairs for every entry in the list. */\n    entries(): IterableIterator<[string, FormDataEntryValue]>;\n    /** Returns a list of keys in the list. */\n    keys(): IterableIterator<string>;\n    /** Returns a list of values in the list. */\n    values(): IterableIterator<FormDataEntryValue>;\n}\n\ninterface HTMLAllCollection {\n    [Symbol.iterator](): IterableIterator<Element>;\n}\n\ninterface HTMLCollectionBase {\n    [Symbol.iterator](): IterableIterator<Element>;\n}\n\ninterface HTMLCollectionOf<T extends Element> {\n    [Symbol.iterator](): IterableIterator<T>;\n}\n\ninterface HTMLFormElement {\n    [Symbol.iterator](): IterableIterator<Element>;\n}\n\ninterface HTMLSelectElement {\n    [Symbol.iterator](): IterableIterator<HTMLOptionElement>;\n}\n\ninterface Headers {\n    [Symbol.iterator](): IterableIterator<[string, string]>;\n    /** Returns an iterator allowing to go through all key/value pairs contained in this object. */\n    entries(): IterableIterator<[string, string]>;\n    /** Returns an iterator allowing to go through all keys of the key/value pairs contained in this object. */\n    keys(): IterableIterator<string>;\n    /** Returns an iterator allowing to go through all values of the key/value pairs contained in this object. */\n    values(): IterableIterator<string>;\n}\n\ninterface IDBDatabase {\n    /** Returns a new transaction with the given mode (\"readonly\" or \"readwrite\") and scope which can be a single object store name or an array of names. */\n    transaction(storeNames: string | Iterable<string>, mode?: IDBTransactionMode, options?: IDBTransactionOptions): IDBTransaction;\n}\n\ninterface IDBObjectStore {\n    /**\n     * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \"ConstraintError\" DOMException.\n     *\n     * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    createIndex(name: string, keyPath: string | Iterable<string>, options?: IDBIndexParameters): IDBIndex;\n}\n\ninterface MediaKeyStatusMap {\n    [Symbol.iterator](): IterableIterator<[BufferSource, MediaKeyStatus]>;\n    entries(): IterableIterator<[BufferSource, MediaKeyStatus]>;\n    keys(): IterableIterator<BufferSource>;\n    values(): IterableIterator<MediaKeyStatus>;\n}\n\ninterface MediaList {\n    [Symbol.iterator](): IterableIterator<string>;\n}\n\ninterface MessageEvent<T = any> {\n    /** @deprecated */\n    initMessageEvent(type: string, bubbles?: boolean, cancelable?: boolean, data?: any, origin?: string, lastEventId?: string, source?: MessageEventSource | null, ports?: Iterable<MessagePort>): void;\n}\n\ninterface MimeTypeArray {\n    [Symbol.iterator](): IterableIterator<MimeType>;\n}\n\ninterface NamedNodeMap {\n    [Symbol.iterator](): IterableIterator<Attr>;\n}\n\ninterface Navigator {\n    /** Available only in secure contexts. */\n    requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: Iterable<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>;\n    vibrate(pattern: Iterable<number>): boolean;\n}\n\ninterface NodeList {\n    [Symbol.iterator](): IterableIterator<Node>;\n    /** Returns an array of key, value pairs for every entry in the list. */\n    entries(): IterableIterator<[number, Node]>;\n    /** Returns an list of keys in the list. */\n    keys(): IterableIterator<number>;\n    /** Returns an list of values in the list. */\n    values(): IterableIterator<Node>;\n}\n\ninterface NodeListOf<TNode extends Node> {\n    [Symbol.iterator](): IterableIterator<TNode>;\n    /** Returns an array of key, value pairs for every entry in the list. */\n    entries(): IterableIterator<[number, TNode]>;\n    /** Returns an list of keys in the list. */\n    keys(): IterableIterator<number>;\n    /** Returns an list of values in the list. */\n    values(): IterableIterator<TNode>;\n}\n\ninterface Plugin {\n    [Symbol.iterator](): IterableIterator<MimeType>;\n}\n\ninterface PluginArray {\n    [Symbol.iterator](): IterableIterator<Plugin>;\n}\n\ninterface RTCRtpTransceiver {\n    setCodecPreferences(codecs: Iterable<RTCRtpCodecCapability>): void;\n}\n\ninterface RTCStatsReport extends ReadonlyMap<string, any> {\n}\n\ninterface SVGLengthList {\n    [Symbol.iterator](): IterableIterator<SVGLength>;\n}\n\ninterface SVGNumberList {\n    [Symbol.iterator](): IterableIterator<SVGNumber>;\n}\n\ninterface SVGPointList {\n    [Symbol.iterator](): IterableIterator<DOMPoint>;\n}\n\ninterface SVGStringList {\n    [Symbol.iterator](): IterableIterator<string>;\n}\n\ninterface SVGTransformList {\n    [Symbol.iterator](): IterableIterator<SVGTransform>;\n}\n\ninterface SourceBufferList {\n    [Symbol.iterator](): IterableIterator<SourceBuffer>;\n}\n\ninterface SpeechRecognitionResult {\n    [Symbol.iterator](): IterableIterator<SpeechRecognitionAlternative>;\n}\n\ninterface SpeechRecognitionResultList {\n    [Symbol.iterator](): IterableIterator<SpeechRecognitionResult>;\n}\n\ninterface StyleSheetList {\n    [Symbol.iterator](): IterableIterator<CSSStyleSheet>;\n}\n\ninterface SubtleCrypto {\n    deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;\n    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;\n    generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKeyPair | CryptoKey>;\n    importKey(format: \"jwk\", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    importKey(format: Exclude<KeyFormat, \"jwk\">, keyData: BufferSource, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;\n    unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;\n}\n\ninterface TextTrackCueList {\n    [Symbol.iterator](): IterableIterator<TextTrackCue>;\n}\n\ninterface TextTrackList {\n    [Symbol.iterator](): IterableIterator<TextTrack>;\n}\n\ninterface TouchList {\n    [Symbol.iterator](): IterableIterator<Touch>;\n}\n\ninterface URLSearchParams {\n    [Symbol.iterator](): IterableIterator<[string, string]>;\n    /** Returns an array of key, value pairs for every entry in the search params. */\n    entries(): IterableIterator<[string, string]>;\n    /** Returns a list of keys in the search params. */\n    keys(): IterableIterator<string>;\n    /** Returns a list of values in the search params. */\n    values(): IterableIterator<string>;\n}\n\ninterface WEBGL_draw_buffers {\n    drawBuffersWEBGL(buffers: Iterable<GLenum>): void;\n}\n\ninterface WEBGL_multi_draw {\n    multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Int32Array | Iterable<GLint>, firstsOffset: GLuint, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, instanceCountsList: Int32Array | Iterable<GLsizei>, instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawArraysWEBGL(mode: GLenum, firstsList: Int32Array | Iterable<GLint>, firstsOffset: GLuint, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Int32Array | Iterable<GLint>, countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | Iterable<GLsizei>, offsetsOffset: GLuint, instanceCountsList: Int32Array | Iterable<GLsizei>, instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsWEBGL(mode: GLenum, countsList: Int32Array | Iterable<GLint>, countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | Iterable<GLsizei>, offsetsOffset: GLuint, drawcount: GLsizei): void;\n}\n\ninterface WebGL2RenderingContextBase {\n    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLfloat>, srcOffset?: GLuint): void;\n    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLint>, srcOffset?: GLuint): void;\n    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLuint>, srcOffset?: GLuint): void;\n    drawBuffers(buffers: Iterable<GLenum>): void;\n    getActiveUniforms(program: WebGLProgram, uniformIndices: Iterable<GLuint>, pname: GLenum): any;\n    getUniformIndices(program: WebGLProgram, uniformNames: Iterable<string>): Iterable<GLuint> | null;\n    invalidateFramebuffer(target: GLenum, attachments: Iterable<GLenum>): void;\n    invalidateSubFramebuffer(target: GLenum, attachments: Iterable<GLenum>, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    transformFeedbackVaryings(program: WebGLProgram, varyings: Iterable<string>, bufferMode: GLenum): void;\n    uniform1uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    vertexAttribI4iv(index: GLuint, values: Iterable<GLint>): void;\n    vertexAttribI4uiv(index: GLuint, values: Iterable<GLuint>): void;\n}\n\ninterface WebGL2RenderingContextOverloads {\n    uniform1fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform1iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n}\n\ninterface WebGLRenderingContextBase {\n    vertexAttrib1fv(index: GLuint, values: Iterable<GLfloat>): void;\n    vertexAttrib2fv(index: GLuint, values: Iterable<GLfloat>): void;\n    vertexAttrib3fv(index: GLuint, values: Iterable<GLfloat>): void;\n    vertexAttrib4fv(index: GLuint, values: Iterable<GLfloat>): void;\n}\n\ninterface WebGLRenderingContextOverloads {\n    uniform1fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform1iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniform2fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform2iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniform3fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform3iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniform4fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform4iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;\n}\n","lib.es2015.collection.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Map<K, V> {\n\n    clear(): void;\n    /**\n     * @returns true if an element in the Map existed and has been removed, or false if the element does not exist.\n     */\n    delete(key: K): boolean;\n    /**\n     * Executes a provided function once per each key/value pair in the Map, in insertion order.\n     */\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;\n    /**\n     * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.\n     * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.\n     */\n    get(key: K): V | undefined;\n    /**\n     * @returns boolean indicating whether an element with the specified key exists or not.\n     */\n    has(key: K): boolean;\n    /**\n     * Adds a new element with a specified key and value to the Map. If an element with the same key already exists, the element will be updated.\n     */\n    set(key: K, value: V): this;\n    /**\n     * @returns the number of elements in the Map.\n     */\n    readonly size: number;\n}\n\ninterface MapConstructor {\n    new(): Map<any, any>;\n    new <K, V>(entries?: readonly (readonly [K, V])[] | null): Map<K, V>;\n    readonly prototype: Map<any, any>;\n}\ndeclare var Map: MapConstructor;\n\ninterface ReadonlyMap<K, V> {\n    forEach(callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void, thisArg?: any): void;\n    get(key: K): V | undefined;\n    has(key: K): boolean;\n    readonly size: number;\n}\n\ninterface WeakMap<K extends object, V> {\n    /**\n     * Removes the specified element from the WeakMap.\n     * @returns true if the element was successfully removed, or false if it was not present.\n     */\n    delete(key: K): boolean;\n    /**\n     * @returns a specified element.\n     */\n    get(key: K): V | undefined;\n    /**\n     * @returns a boolean indicating whether an element with the specified key exists or not.\n     */\n    has(key: K): boolean;\n    /**\n     * Adds a new element with a specified key and value.\n     * @param key Must be an object.\n     */\n    set(key: K, value: V): this;\n}\n\ninterface WeakMapConstructor {\n    new <K extends object = object, V = any>(entries?: readonly [K, V][] | null): WeakMap<K, V>;\n    readonly prototype: WeakMap<object, any>;\n}\ndeclare var WeakMap: WeakMapConstructor;\n\ninterface Set<T> {\n    /**\n     * Appends a new element with a specified value to the end of the Set.\n     */\n    add(value: T): this;\n\n    clear(): void;\n    /**\n     * Removes a specified value from the Set.\n     * @returns Returns true if an element in the Set existed and has been removed, or false if the element does not exist.\n     */\n    delete(value: T): boolean;\n    /**\n     * Executes a provided function once per each value in the Set object, in insertion order.\n     */\n    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\n    /**\n     * @returns a boolean indicating whether an element with the specified value exists in the Set or not.\n     */\n    has(value: T): boolean;\n    /**\n     * @returns the number of (unique) elements in Set.\n     */\n    readonly size: number;\n}\n\ninterface SetConstructor {\n    new <T = any>(values?: readonly T[] | null): Set<T>;\n    readonly prototype: Set<any>;\n}\ndeclare var Set: SetConstructor;\n\ninterface ReadonlySet<T> {\n    forEach(callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void, thisArg?: any): void;\n    has(value: T): boolean;\n    readonly size: number;\n}\n\ninterface WeakSet<T extends object> {\n    /**\n     * Appends a new object to the end of the WeakSet.\n     */\n    add(value: T): this;\n    /**\n     * Removes the specified element from the WeakSet.\n     * @returns Returns true if the element existed and has been removed, or false if the element does not exist.\n     */\n    delete(value: T): boolean;\n    /**\n     * @returns a boolean indicating whether an object exists in the WeakSet or not.\n     */\n    has(value: T): boolean;\n}\n\ninterface WeakSetConstructor {\n    new <T extends object = object>(values?: readonly T[] | null): WeakSet<T>;\n    readonly prototype: WeakSet<object>;\n}\ndeclare var WeakSet: WeakSetConstructor;\n","lib.es2015.core.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Array<T> {\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find<S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: T, start?: number, end?: number): this;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n}\n\ninterface ArrayConstructor {\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from<T>(arrayLike: ArrayLike<T>): T[];\n\n    /**\n     * Creates an array from an iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of<T>(...items: T[]): T[];\n}\n\ninterface DateConstructor {\n    new (value: number | string | Date): Date;\n}\n\ninterface Function {\n    /**\n     * Returns the name of the function. Function names are read-only and can not be changed.\n     */\n    readonly name: string;\n}\n\ninterface Math {\n    /**\n     * Returns the number of leading zero bits in the 32-bit binary representation of a number.\n     * @param x A numeric expression.\n     */\n    clz32(x: number): number;\n\n    /**\n     * Returns the result of 32-bit multiplication of two numbers.\n     * @param x First number\n     * @param y Second number\n     */\n    imul(x: number, y: number): number;\n\n    /**\n     * Returns the sign of the x, indicating whether x is positive, negative or zero.\n     * @param x The numeric expression to test\n     */\n    sign(x: number): number;\n\n    /**\n     * Returns the base 10 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log10(x: number): number;\n\n    /**\n     * Returns the base 2 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log2(x: number): number;\n\n    /**\n     * Returns the natural logarithm of 1 + x.\n     * @param x A numeric expression.\n     */\n    log1p(x: number): number;\n\n    /**\n     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to\n     * subtracting 1 from the exponential function of x (e raised to the power of x, where e\n     * is the base of the natural logarithms).\n     * @param x A numeric expression.\n     */\n    expm1(x: number): number;\n\n    /**\n     * Returns the hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cosh(x: number): number;\n\n    /**\n     * Returns the hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sinh(x: number): number;\n\n    /**\n     * Returns the hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tanh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    acosh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    asinh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    atanh(x: number): number;\n\n    /**\n     * Returns the square root of the sum of squares of its arguments.\n     * @param values Values to compute the square root for.\n     *     If no arguments are passed, the result is +0.\n     *     If there is only one argument, the result is the absolute value.\n     *     If any argument is +Infinity or -Infinity, the result is +Infinity.\n     *     If any argument is NaN, the result is NaN.\n     *     If all arguments are either +0 or −0, the result is +0.\n     */\n    hypot(...values: number[]): number;\n\n    /**\n     * Returns the integral part of the a numeric expression, x, removing any fractional digits.\n     * If x is already an integer, the result is x.\n     * @param x A numeric expression.\n     */\n    trunc(x: number): number;\n\n    /**\n     * Returns the nearest single precision float representation of a number.\n     * @param x A numeric expression.\n     */\n    fround(x: number): number;\n\n    /**\n     * Returns an implementation-dependent approximation to the cube root of number.\n     * @param x A numeric expression.\n     */\n    cbrt(x: number): number;\n}\n\ninterface NumberConstructor {\n    /**\n     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\n     * that is representable as a Number value, which is approximately:\n     * 2.2204460492503130808472633361816 x 10‍−‍16.\n     */\n    readonly EPSILON: number;\n\n    /**\n     * Returns true if passed value is finite.\n     * Unlike the global isFinite, Number.isFinite doesn't forcibly convert the parameter to a\n     * number. Only finite values of the type number, result in true.\n     * @param number A numeric value.\n     */\n    isFinite(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is an integer, false otherwise.\n     * @param number A numeric value.\n     */\n    isInteger(number: unknown): boolean;\n\n    /**\n     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\n     * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter\n     * to a number. Only values of the type number, that are also NaN, result in true.\n     * @param number A numeric value.\n     */\n    isNaN(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is a safe integer.\n     * @param number A numeric value.\n     */\n    isSafeInteger(number: unknown): boolean;\n\n    /**\n     * The value of the largest integer n such that n and n + 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.\n     */\n    readonly MAX_SAFE_INTEGER: number;\n\n    /**\n     * The value of the smallest integer n such that n and n − 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\n     */\n    readonly MIN_SAFE_INTEGER: number;\n\n    /**\n     * Converts a string to a floating-point number.\n     * @param string A string that contains a floating-point number.\n     */\n    parseFloat(string: string): number;\n\n    /**\n     * Converts A string to an integer.\n     * @param string A string to convert into a number.\n     * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n     * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n     * All other strings are considered decimal.\n     */\n    parseInt(string: string, radix?: number): number;\n}\n\ninterface ObjectConstructor {\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source The source object from which to copy properties.\n     */\n    assign<T extends {}, U>(target: T, source: U): T & U;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     */\n    assign<T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     * @param source3 The third source object from which to copy properties.\n     */\n    assign<T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param sources One or more source objects from which to copy properties\n     */\n    assign(target: object, ...sources: any[]): any;\n\n    /**\n     * Returns an array of all symbol properties found directly on object o.\n     * @param o Object to retrieve the symbols from.\n     */\n    getOwnPropertySymbols(o: any): symbol[];\n\n    /**\n     * Returns the names of the enumerable string properties and methods of an object.\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    keys(o: {}): string[];\n\n    /**\n     * Returns true if the values are the same value, false otherwise.\n     * @param value1 The first value.\n     * @param value2 The second value.\n     */\n    is(value1: any, value2: any): boolean;\n\n    /**\n     * Sets the prototype of a specified object o to object proto or null. Returns the object o.\n     * @param o The object to change its prototype.\n     * @param proto The value of the new prototype or null.\n     */\n    setPrototypeOf(o: any, proto: object | null): any;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find<S extends T>(predicate: (this: void, value: T, index: number, obj: readonly T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): T | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): number;\n}\n\ninterface RegExp {\n    /**\n     * Returns a string indicating the flags of the regular expression in question. This field is read-only.\n     * The characters in this string are sequenced and concatenated in the following order:\n     *\n     *    - \"g\" for global\n     *    - \"i\" for ignoreCase\n     *    - \"m\" for multiline\n     *    - \"u\" for unicode\n     *    - \"y\" for sticky\n     *\n     * If no flags are set, the value is the empty string.\n     */\n    readonly flags: string;\n\n    /**\n     * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly sticky: boolean;\n\n    /**\n     * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly unicode: boolean;\n}\n\ninterface RegExpConstructor {\n    new (pattern: RegExp | string, flags?: string): RegExp;\n    (pattern: RegExp | string, flags?: string): RegExp;\n}\n\ninterface String {\n    /**\n     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\n     * value of the UTF-16 encoded code point starting at the string element at position pos in\n     * the String resulting from converting this object to a String.\n     * If there is no element at that position, the result is undefined.\n     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\n     */\n    codePointAt(pos: number): number | undefined;\n\n    /**\n     * Returns true if searchString appears as a substring of the result of converting this\n     * object to a String, at one or more positions that are\n     * greater than or equal to position; otherwise, returns false.\n     * @param searchString search string\n     * @param position If position is undefined, 0 is assumed, so as to search all of the String.\n     */\n    includes(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * endPosition – length(this). Otherwise returns false.\n     */\n    endsWith(searchString: string, endPosition?: number): boolean;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\n     * is \"NFC\"\n     */\n    normalize(form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\n     * is \"NFC\"\n     */\n    normalize(form?: string): string;\n\n    /**\n     * Returns a String value that is made from count copies appended together. If count is 0,\n     * the empty string is returned.\n     * @param count number of copies to append\n     */\n    repeat(count: number): string;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * position. Otherwise returns false.\n     */\n    startsWith(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns an `<a>` HTML anchor element and sets the name attribute to the text value\n     * @deprecated A legacy feature for browser compatibility\n     * @param name\n     */\n    anchor(name: string): string;\n\n    /**\n     * Returns a `<big>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    big(): string;\n\n    /**\n     * Returns a `<blink>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    blink(): string;\n\n    /**\n     * Returns a `<b>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    bold(): string;\n\n    /**\n     * Returns a `<tt>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fixed(): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the color attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontcolor(color: string): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: number): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: string): string;\n\n    /**\n     * Returns an `<i>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    italics(): string;\n\n    /**\n     * Returns an `<a>` HTML element and sets the href attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    link(url: string): string;\n\n    /**\n     * Returns a `<small>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    small(): string;\n\n    /**\n     * Returns a `<strike>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    strike(): string;\n\n    /**\n     * Returns a `<sub>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sub(): string;\n\n    /**\n     * Returns a `<sup>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sup(): string;\n}\n\ninterface StringConstructor {\n    /**\n     * Return the String value whose elements are, in order, the elements in the List elements.\n     * If length is 0, the empty string is returned.\n     */\n    fromCodePoint(...codePoints: number[]): string;\n\n    /**\n     * String.raw is usually used as a tag function of a Tagged Template String. When called as\n     * such, the first argument will be a well formed template call site object and the rest\n     * parameter will contain the substitution values. It can also be called directly, for example,\n     * to interleave strings and values from your own tag function, and in this case the only thing\n     * it needs from the first argument is the raw property.\n     * @param template A well-formed template string call site representation.\n     * @param substitutions A set of substitution values.\n     */\n    raw(template: { raw: readonly string[] | ArrayLike<string>}, ...substitutions: any[]): string;\n}\n","lib.es2015.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es5\" />\n/// <reference lib=\"es2015.core\" />\n/// <reference lib=\"es2015.collection\" />\n/// <reference lib=\"es2015.iterable\" />\n/// <reference lib=\"es2015.generator\" />\n/// <reference lib=\"es2015.promise\" />\n/// <reference lib=\"es2015.proxy\" />\n/// <reference lib=\"es2015.reflect\" />\n/// <reference lib=\"es2015.symbol\" />\n/// <reference lib=\"es2015.symbol.wellknown\" />\n","lib.es2015.generator.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.iterable\" />\n\ninterface Generator<T = unknown, TReturn = any, TNext = unknown> extends Iterator<T, TReturn, TNext> {\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\n    return(value: TReturn): IteratorResult<T, TReturn>;\n    throw(e: any): IteratorResult<T, TReturn>;\n    [Symbol.iterator](): Generator<T, TReturn, TNext>;\n}\n\ninterface GeneratorFunction {\n    /**\n     * Creates a new Generator object.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: any[]): Generator;\n    /**\n     * Creates a new Generator object.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: any[]): Generator;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Generator;\n}\n\ninterface GeneratorFunctionConstructor {\n    /**\n     * Creates a new Generator function.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: string[]): GeneratorFunction;\n    /**\n     * Creates a new Generator function.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: string[]): GeneratorFunction;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: GeneratorFunction;\n}\n","lib.es2015.iterable.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.symbol\" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that returns the default iterator for an object. Called by the semantics of the\n     * for-of statement.\n     */\n    readonly iterator: unique symbol;\n}\n\ninterface IteratorYieldResult<TYield> {\n    done?: false;\n    value: TYield;\n}\n\ninterface IteratorReturnResult<TReturn> {\n    done: true;\n    value: TReturn;\n}\n\ntype IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\n\ninterface Iterator<T, TReturn = any, TNext = undefined> {\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\n    return?(value?: TReturn): IteratorResult<T, TReturn>;\n    throw?(e?: any): IteratorResult<T, TReturn>;\n}\n\ninterface Iterable<T> {\n    [Symbol.iterator](): Iterator<T>;\n}\n\ninterface IterableIterator<T> extends Iterator<T> {\n    [Symbol.iterator](): IterableIterator<T>;\n}\n\ninterface Array<T> {\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<T>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, T]>;\n\n    /**\n     * Returns an iterable of keys in the array\n     */\n    keys(): IterableIterator<number>;\n\n    /**\n     * Returns an iterable of values in the array\n     */\n    values(): IterableIterator<T>;\n}\n\ninterface ArrayConstructor {\n    /**\n     * Creates an array from an iterable object.\n     * @param iterable An iterable object to convert to an array.\n     */\n    from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];\n\n    /**\n     * Creates an array from an iterable object.\n     * @param iterable An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\n}\n\ninterface ReadonlyArray<T> {\n    /** Iterator of values in the array. */\n    [Symbol.iterator](): IterableIterator<T>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, T]>;\n\n    /**\n     * Returns an iterable of keys in the array\n     */\n    keys(): IterableIterator<number>;\n\n    /**\n     * Returns an iterable of values in the array\n     */\n    values(): IterableIterator<T>;\n}\n\ninterface IArguments {\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<any>;\n}\n\ninterface Map<K, V> {\n    /** Returns an iterable of entries in the map. */\n    [Symbol.iterator](): IterableIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the map.\n     */\n    entries(): IterableIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of keys in the map\n     */\n    keys(): IterableIterator<K>;\n\n    /**\n     * Returns an iterable of values in the map\n     */\n    values(): IterableIterator<V>;\n}\n\ninterface ReadonlyMap<K, V> {\n    /** Returns an iterable of entries in the map. */\n    [Symbol.iterator](): IterableIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the map.\n     */\n    entries(): IterableIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of keys in the map\n     */\n    keys(): IterableIterator<K>;\n\n    /**\n     * Returns an iterable of values in the map\n     */\n    values(): IterableIterator<V>;\n}\n\ninterface MapConstructor {\n    new(): Map<any, any>;\n    new <K, V>(iterable?: Iterable<readonly [K, V]> | null): Map<K, V>;\n}\n\ninterface WeakMap<K extends object, V> { }\n\ninterface WeakMapConstructor {\n    new <K extends object, V>(iterable: Iterable<readonly [K, V]>): WeakMap<K, V>;\n}\n\ninterface Set<T> {\n    /** Iterates over values in the set. */\n    [Symbol.iterator](): IterableIterator<T>;\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    entries(): IterableIterator<[T, T]>;\n    /**\n     * Despite its name, returns an iterable of the values in the set.\n     */\n    keys(): IterableIterator<T>;\n\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values(): IterableIterator<T>;\n}\n\ninterface ReadonlySet<T> {\n    /** Iterates over values in the set. */\n    [Symbol.iterator](): IterableIterator<T>;\n\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    entries(): IterableIterator<[T, T]>;\n\n    /**\n     * Despite its name, returns an iterable of the values in the set.\n     */\n    keys(): IterableIterator<T>;\n\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values(): IterableIterator<T>;\n}\n\ninterface SetConstructor {\n    new <T>(iterable?: Iterable<T> | null): Set<T>;\n}\n\ninterface WeakSet<T extends object> { }\n\ninterface WeakSetConstructor {\n    new <T extends object = object>(iterable: Iterable<T>): WeakSet<T>;\n}\n\ninterface Promise<T> { }\n\ninterface PromiseConstructor {\n    /**\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An iterable of Promises.\n     * @returns A new Promise.\n     */\n    all<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>;\n\n    /**\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An iterable of Promises.\n     * @returns A new Promise.\n     */\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>;\n}\n\ninterface String {\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<string>;\n}\n\ninterface Int8Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Int8ArrayConstructor {\n    new (elements: Iterable<number>): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\n}\n\ninterface Uint8Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Uint8ArrayConstructor {\n    new (elements: Iterable<number>): Uint8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\n}\n\ninterface Uint8ClampedArray {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (elements: Iterable<number>): Uint8ClampedArray;\n\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\n\ninterface Int16Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Int16ArrayConstructor {\n    new (elements: Iterable<number>): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\n}\n\ninterface Uint16Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Uint16ArrayConstructor {\n    new (elements: Iterable<number>): Uint16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\n}\n\ninterface Int32Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Int32ArrayConstructor {\n    new (elements: Iterable<number>): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\n}\n\ninterface Uint32Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Uint32ArrayConstructor {\n    new (elements: Iterable<number>): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\n}\n\ninterface Float32Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Float32ArrayConstructor {\n    new (elements: Iterable<number>): Float32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\n}\n\ninterface Float64Array {\n    [Symbol.iterator](): IterableIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): IterableIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): IterableIterator<number>;\n}\n\ninterface Float64ArrayConstructor {\n    new (elements: Iterable<number>): Float64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\n}\n","lib.es2015.promise.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface PromiseConstructor {\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Promise<any>;\n\n    /**\n     * Creates a new Promise.\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\n     * and a reject callback used to reject the promise with a provided reason or error.\n     */\n    new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n\n    /**\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    all<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>;\n\n    // see: lib.es2015.iterable.d.ts\n    // all<T>(values: Iterable<T | PromiseLike<T>>): Promise<T[]>;\n\n    /**\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    race<T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>;\n\n    // see: lib.es2015.iterable.d.ts\n    // race<T>(values: Iterable<T>): Promise<T extends PromiseLike<infer U> ? U : T>;\n\n    /**\n     * Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.\n     */\n    reject<T = never>(reason?: any): Promise<T>;\n\n    /**\n     * Creates a new resolved promise.\n     * @returns A resolved promise.\n     */\n    resolve(): Promise<void>;\n\n    /**\n     * Creates a new resolved promise for the provided value.\n     * @param value A promise.\n     * @returns A promise whose internal state matches the provided promise.\n     */\n    resolve<T>(value: T | PromiseLike<T>): Promise<T>;\n}\n\ndeclare var Promise: PromiseConstructor;\n","lib.es2015.proxy.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface ProxyHandler<T extends object> {\n    /**\n     * A trap method for a function call.\n     * @param target The original callable object which is being proxied.\n     */\n    apply?(target: T, thisArg: any, argArray: any[]): any;\n\n    /**\n     * A trap for the `new` operator.\n     * @param target The original object which is being proxied.\n     * @param newTarget The constructor that was originally called.\n     */\n    construct?(target: T, argArray: any[], newTarget: Function): object;\n\n    /**\n     * A trap for `Object.defineProperty()`.\n     * @param target The original object which is being proxied.\n     * @returns A `Boolean` indicating whether or not the property has been defined.\n     */\n    defineProperty?(target: T, property: string | symbol, attributes: PropertyDescriptor): boolean;\n\n    /**\n     * A trap for the `delete` operator.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to delete.\n     * @returns A `Boolean` indicating whether or not the property was deleted.\n     */\n    deleteProperty?(target: T, p: string | symbol): boolean;\n\n    /**\n     * A trap for getting a property value.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to get.\n     * @param receiver The proxy or an object that inherits from the proxy.\n     */\n    get?(target: T, p: string | symbol, receiver: any): any;\n\n    /**\n     * A trap for `Object.getOwnPropertyDescriptor()`.\n     * @param target The original object which is being proxied.\n     * @param p The name of the property whose description should be retrieved.\n     */\n    getOwnPropertyDescriptor?(target: T, p: string | symbol): PropertyDescriptor | undefined;\n\n    /**\n     * A trap for the `[[GetPrototypeOf]]` internal method.\n     * @param target The original object which is being proxied.\n     */\n    getPrototypeOf?(target: T): object | null;\n\n    /**\n     * A trap for the `in` operator.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to check for existence.\n     */\n    has?(target: T, p: string | symbol): boolean;\n\n    /**\n     * A trap for `Object.isExtensible()`.\n     * @param target The original object which is being proxied.\n     */\n    isExtensible?(target: T): boolean;\n\n    /**\n     * A trap for `Reflect.ownKeys()`.\n     * @param target The original object which is being proxied.\n     */\n    ownKeys?(target: T): ArrayLike<string | symbol>;\n\n    /**\n     * A trap for `Object.preventExtensions()`.\n     * @param target The original object which is being proxied.\n     */\n    preventExtensions?(target: T): boolean;\n\n    /**\n     * A trap for setting a property value.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to set.\n     * @param receiver The object to which the assignment was originally directed.\n     * @returns `A `Boolean` indicating whether or not the property was set.\n     */\n    set?(target: T, p: string | symbol, newValue: any, receiver: any): boolean;\n\n    /**\n     * A trap for `Object.setPrototypeOf()`.\n     * @param target The original object which is being proxied.\n     * @param newPrototype The object's new prototype or `null`.\n     */\n    setPrototypeOf?(target: T, v: object | null): boolean;\n}\n\ninterface ProxyConstructor {\n    /**\n     * Creates a revocable Proxy object.\n     * @param target A target object to wrap with Proxy.\n     * @param handler An object whose properties define the behavior of Proxy when an operation is attempted on it.\n     */\n    revocable<T extends object>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\n\n    /**\n     * Creates a Proxy object. The Proxy object allows you to create an object that can be used in place of the\n     * original object, but which may redefine fundamental Object operations like getting, setting, and defining\n     * properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs.\n     * @param target A target object to wrap with Proxy.\n     * @param handler An object whose properties define the behavior of Proxy when an operation is attempted on it.\n     */\n    new <T extends object>(target: T, handler: ProxyHandler<T>): T;\n}\ndeclare var Proxy: ProxyConstructor;\n","lib.es2015.reflect.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ndeclare namespace Reflect {\n    /**\n     * Calls the function with the specified object as the this value\n     * and the elements of specified array as the arguments.\n     * @param target The function to call.\n     * @param thisArgument The object to be used as the this object.\n     * @param argumentsList An array of argument values to be passed to the function.\n     */\n    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\n\n    /**\n     * Constructs the target with the elements of specified array as the arguments\n     * and the specified constructor as the `new.target` value.\n     * @param target The constructor to invoke.\n     * @param argumentsList An array of argument values to be passed to the constructor.\n     * @param newTarget The constructor to be used as the `new.target` object.\n     */\n    function construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any;\n\n    /**\n     * Adds a property to an object, or modifies attributes of an existing property.\n     * @param target Object on which to add or modify the property. This can be a native JavaScript object\n     *        (that is, a user-defined object or a built in object) or a DOM object.\n     * @param propertyKey The property name.\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n     */\n    function defineProperty(target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): boolean;\n\n    /**\n     * Removes a property from an object, equivalent to `delete target[propertyKey]`,\n     * except it won't throw if `target[propertyKey]` is non-configurable.\n     * @param target Object from which to remove the own property.\n     * @param propertyKey The property name.\n     */\n    function deleteProperty(target: object, propertyKey: PropertyKey): boolean;\n\n    /**\n     * Gets the property of target, equivalent to `target[propertyKey]` when `receiver === target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey The property name.\n     * @param receiver The reference to use as the `this` value in the getter function,\n     *        if `target[propertyKey]` is an accessor property.\n     */\n    function get(target: object, propertyKey: PropertyKey, receiver?: any): any;\n\n    /**\n     * Gets the own property descriptor of the specified object.\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\n     * @param target Object that contains the property.\n     * @param propertyKey The property name.\n     */\n    function getOwnPropertyDescriptor(target: object, propertyKey: PropertyKey): PropertyDescriptor | undefined;\n\n    /**\n     * Returns the prototype of an object.\n     * @param target The object that references the prototype.\n     */\n    function getPrototypeOf(target: object): object | null;\n\n    /**\n     * Equivalent to `propertyKey in target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey Name of the property.\n     */\n    function has(target: object, propertyKey: PropertyKey): boolean;\n\n    /**\n     * Returns a value that indicates whether new properties can be added to an object.\n     * @param target Object to test.\n     */\n    function isExtensible(target: object): boolean;\n\n    /**\n     * Returns the string and symbol keys of the own properties of an object. The own properties of an object\n     * are those that are defined directly on that object, and are not inherited from the object's prototype.\n     * @param target Object that contains the own properties.\n     */\n    function ownKeys(target: object): (string | symbol)[];\n\n    /**\n     * Prevents the addition of new properties to an object.\n     * @param target Object to make non-extensible.\n     * @return Whether the object has been made non-extensible.\n     */\n    function preventExtensions(target: object): boolean;\n\n    /**\n     * Sets the property of target, equivalent to `target[propertyKey] = value` when `receiver === target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey Name of the property.\n     * @param receiver The reference to use as the `this` value in the setter function,\n     *        if `target[propertyKey]` is an accessor property.\n     */\n    function set(target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean;\n\n    /**\n     * Sets the prototype of a specified object o to object proto or null.\n     * @param target The object to change its prototype.\n     * @param proto The value of the new prototype or null.\n     * @return Whether setting the prototype was successful.\n     */\n    function setPrototypeOf(target: object, proto: object | null): boolean;\n}\n","lib.es2015.symbol.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface SymbolConstructor {\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Symbol;\n\n    /**\n     * Returns a new unique Symbol value.\n     * @param  description Description of the new Symbol object.\n     */\n    (description?: string | number): symbol;\n\n    /**\n     * Returns a Symbol object from the global symbol registry matching the given key if found.\n     * Otherwise, returns a new symbol with this key.\n     * @param key key to search for.\n     */\n    for(key: string): symbol;\n\n    /**\n     * Returns a key from the global symbol registry matching the given Symbol if found.\n     * Otherwise, returns a undefined.\n     * @param sym Symbol to find the key for.\n     */\n    keyFor(sym: symbol): string | undefined;\n}\n\ndeclare var Symbol: SymbolConstructor;","lib.es2015.symbol.wellknown.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.symbol\" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that determines if a constructor object recognizes an object as one of the\n     * constructor’s instances. Called by the semantics of the instanceof operator.\n     */\n    readonly hasInstance: unique symbol;\n\n    /**\n     * A Boolean value that if true indicates that an object should flatten to its array elements\n     * by Array.prototype.concat.\n     */\n    readonly isConcatSpreadable: unique symbol;\n\n    /**\n     * A regular expression method that matches the regular expression against a string. Called\n     * by the String.prototype.match method.\n     */\n    readonly match: unique symbol;\n\n    /**\n     * A regular expression method that replaces matched substrings of a string. Called by the\n     * String.prototype.replace method.\n     */\n    readonly replace: unique symbol;\n\n    /**\n     * A regular expression method that returns the index within a string that matches the\n     * regular expression. Called by the String.prototype.search method.\n     */\n    readonly search: unique symbol;\n\n    /**\n     * A function valued property that is the constructor function that is used to create\n     * derived objects.\n     */\n    readonly species: unique symbol;\n\n    /**\n     * A regular expression method that splits a string at the indices that match the regular\n     * expression. Called by the String.prototype.split method.\n     */\n    readonly split: unique symbol;\n\n    /**\n     * A method that converts an object to a corresponding primitive value.\n     * Called by the ToPrimitive abstract operation.\n     */\n    readonly toPrimitive: unique symbol;\n\n    /**\n     * A String value that is used in the creation of the default string description of an object.\n     * Called by the built-in method Object.prototype.toString.\n     */\n    readonly toStringTag: unique symbol;\n\n    /**\n     * An Object whose own property names are property names that are excluded from the 'with'\n     * environment bindings of the associated objects.\n     */\n    readonly unscopables: unique symbol;\n}\n\ninterface Symbol {\n    /**\n     * Converts a Symbol object to a symbol.\n     */\n    [Symbol.toPrimitive](hint: string): symbol;\n\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Array<T> {\n    /**\n     * Returns an object whose properties have the value 'true'\n     * when they will be absent when used in a 'with' statement.\n     */\n    [Symbol.unscopables](): {\n        copyWithin: boolean;\n        entries: boolean;\n        fill: boolean;\n        find: boolean;\n        findIndex: boolean;\n        keys: boolean;\n        values: boolean;\n    };\n}\n\ninterface Date {\n    /**\n     * Converts a Date object to a string.\n     */\n    [Symbol.toPrimitive](hint: \"default\"): string;\n    /**\n     * Converts a Date object to a string.\n     */\n    [Symbol.toPrimitive](hint: \"string\"): string;\n    /**\n     * Converts a Date object to a number.\n     */\n    [Symbol.toPrimitive](hint: \"number\"): number;\n    /**\n     * Converts a Date object to a string or number.\n     *\n     * @param hint The strings \"number\", \"string\", or \"default\" to specify what primitive to return.\n     *\n     * @throws {TypeError} If 'hint' was given something other than \"number\", \"string\", or \"default\".\n     * @returns A number if 'hint' was \"number\", a string if 'hint' was \"string\" or \"default\".\n     */\n    [Symbol.toPrimitive](hint: string): string | number;\n}\n\ninterface Map<K, V> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface WeakMap<K extends object, V> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Set<T> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface WeakSet<T extends object> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface JSON {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Function {\n    /**\n     * Determines whether the given value inherits from this function if this function was used\n     * as a constructor function.\n     *\n     * A constructor function can control which objects are recognized as its instances by\n     * 'instanceof' by overriding this method.\n     */\n    [Symbol.hasInstance](value: any): boolean;\n}\n\ninterface GeneratorFunction {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Math {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Promise<T> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface PromiseConstructor {\n    readonly [Symbol.species]: PromiseConstructor;\n}\n\ninterface RegExp {\n    /**\n     * Matches a string with this regular expression, and returns an array containing the results of\n     * that search.\n     * @param string A string to search within.\n     */\n    [Symbol.match](string: string): RegExpMatchArray | null;\n\n    /**\n     * Replaces text in a string, using this regular expression.\n     * @param string A String object or string literal whose contents matching against\n     *               this regular expression will be replaced\n     * @param replaceValue A String object or string literal containing the text to replace for every\n     *                     successful match of this regular expression.\n     */\n    [Symbol.replace](string: string, replaceValue: string): string;\n\n    /**\n     * Replaces text in a string, using this regular expression.\n     * @param string A String object or string literal whose contents matching against\n     *               this regular expression will be replaced\n     * @param replacer A function that returns the replacement text.\n     */\n    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n     * Finds the position beginning first substring match in a regular expression search\n     * using this regular expression.\n     *\n     * @param string The string to search within.\n     */\n    [Symbol.search](string: string): number;\n\n    /**\n     * Returns an array of substrings that were delimited by strings in the original input that\n     * match against this regular expression.\n     *\n     * If the regular expression contains capturing parentheses, then each time this\n     * regular expression matches, the results (including any undefined results) of the\n     * capturing parentheses are spliced.\n     *\n     * @param string string value to split\n     * @param limit if not undefined, the output array is truncated so that it contains no more\n     * than 'limit' elements.\n     */\n    [Symbol.split](string: string, limit?: number): string[];\n}\n\ninterface RegExpConstructor {\n    readonly [Symbol.species]: RegExpConstructor;\n}\n\ninterface String {\n    /**\n     * Matches a string or an object that supports being matched against, and returns an array\n     * containing the results of that search, or null if no matches are found.\n     * @param matcher An object that supports being matched against.\n     */\n    match(matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null;\n\n    /**\n     * Replaces first match with string or all matches with RegExp.\n     * @param searchValue A string or RegExp search value.\n     * @param replaceValue A string containing the text to replace for match.\n     */\n    replace(searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string;\n\n    /**\n     * Replaces text in a string, using an object that supports replacement within a string.\n     * @param searchValue A object can search for and replace matches within a string.\n     * @param replacer A function that returns the replacement text.\n     */\n    replace(searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n     * Finds the first substring match in a regular expression search.\n     * @param searcher An object which supports searching within a string.\n     */\n    search(searcher: { [Symbol.search](string: string): number; }): number;\n\n    /**\n     * Split a string into substrings using the specified separator and return them as an array.\n     * @param splitter An object that can split a string.\n     * @param limit A value used to limit the number of elements returned in the array.\n     */\n    split(splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[];\n}\n\ninterface ArrayBuffer {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface DataView {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Int8Array {\n    readonly [Symbol.toStringTag]: \"Int8Array\";\n}\n\ninterface Uint8Array {\n    readonly [Symbol.toStringTag]: \"Uint8Array\";\n}\n\ninterface Uint8ClampedArray {\n    readonly [Symbol.toStringTag]: \"Uint8ClampedArray\";\n}\n\ninterface Int16Array {\n    readonly [Symbol.toStringTag]: \"Int16Array\";\n}\n\ninterface Uint16Array {\n    readonly [Symbol.toStringTag]: \"Uint16Array\";\n}\n\ninterface Int32Array {\n    readonly [Symbol.toStringTag]: \"Int32Array\";\n}\n\ninterface Uint32Array {\n    readonly [Symbol.toStringTag]: \"Uint32Array\";\n}\n\ninterface Float32Array {\n    readonly [Symbol.toStringTag]: \"Float32Array\";\n}\n\ninterface Float64Array {\n    readonly [Symbol.toStringTag]: \"Float64Array\";\n}\n\ninterface ArrayConstructor {\n    readonly [Symbol.species]: ArrayConstructor;\n}\ninterface MapConstructor {\n    readonly [Symbol.species]: MapConstructor;\n}\ninterface SetConstructor {\n    readonly [Symbol.species]: SetConstructor;\n}\ninterface ArrayBufferConstructor {\n    readonly [Symbol.species]: ArrayBufferConstructor;\n}\n","lib.es2016.array.include.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Array<T> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface Int8Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint8Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint8ClampedArray {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Int16Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint16Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Int32Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint32Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Float32Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Float64Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}","lib.es2016.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015\" />\n/// <reference lib=\"es2016.array.include\" />","lib.es2016.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2016\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />","lib.es2017.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2016\" />\n/// <reference lib=\"es2017.object\" />\n/// <reference lib=\"es2017.sharedmemory\" />\n/// <reference lib=\"es2017.string\" />\n/// <reference lib=\"es2017.intl\" />\n/// <reference lib=\"es2017.typedarrays\" />\n","lib.es2017.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2017\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />","lib.es2017.intl.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ndeclare namespace Intl {\n\n    interface DateTimeFormatPartTypesRegistry {\n        day: any\n        dayPeriod: any\n        era: any\n        hour: any\n        literal: any\n        minute: any\n        month: any\n        second: any\n        timeZoneName: any\n        weekday: any\n        year: any\n    }\n\n    type DateTimeFormatPartTypes = keyof DateTimeFormatPartTypesRegistry;\n\n    interface DateTimeFormatPart {\n        type: DateTimeFormatPartTypes;\n        value: string;\n    }\n\n    interface DateTimeFormat {\n        formatToParts(date?: Date | number): DateTimeFormatPart[];\n    }\n}\n","lib.es2017.object.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface ObjectConstructor {\n    /**\n     * Returns an array of values of the enumerable properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    values<T>(o: { [s: string]: T } | ArrayLike<T>): T[];\n\n    /**\n     * Returns an array of values of the enumerable properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    values(o: {}): any[];\n\n    /**\n     * Returns an array of key/values of the enumerable properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries<T>(o: { [s: string]: T } | ArrayLike<T>): [string, T][];\n\n    /**\n     * Returns an array of key/values of the enumerable properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries(o: {}): [string, any][];\n\n    /**\n     * Returns an object containing all own property descriptors of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    getOwnPropertyDescriptors<T>(o: T): {[P in keyof T]: TypedPropertyDescriptor<T[P]>} & { [x: string]: PropertyDescriptor };\n}\n","lib.es2017.sharedmemory.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.symbol\" />\n/// <reference lib=\"es2015.symbol.wellknown\" />\n\ninterface SharedArrayBuffer {\n    /**\n     * Read-only. The length of the ArrayBuffer (in bytes).\n     */\n    readonly byteLength: number;\n\n    /**\n     * Returns a section of an SharedArrayBuffer.\n     */\n    slice(begin: number, end?: number): SharedArrayBuffer;\n    readonly [Symbol.species]: SharedArrayBuffer;\n    readonly [Symbol.toStringTag]: \"SharedArrayBuffer\";\n}\n\ninterface SharedArrayBufferConstructor {\n    readonly prototype: SharedArrayBuffer;\n    new (byteLength: number): SharedArrayBuffer;\n}\ndeclare var SharedArrayBuffer: SharedArrayBufferConstructor;\n\ninterface ArrayBufferTypes {\n    SharedArrayBuffer: SharedArrayBuffer;\n}\n\ninterface Atomics {\n    /**\n     * Adds a value to the value at the given position in the array, returning the original value.\n     * Until this atomic operation completes, any other read or write operation against the array\n     * will block.\n     */\n    add(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Stores the bitwise AND of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or\n     * write operation against the array will block.\n     */\n    and(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Replaces the value at the given position in the array if the original value equals the given\n     * expected value, returning the original value. Until this atomic operation completes, any\n     * other read or write operation against the array will block.\n     */\n    compareExchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, expectedValue: number, replacementValue: number): number;\n\n    /**\n     * Replaces the value at the given position in the array, returning the original value. Until\n     * this atomic operation completes, any other read or write operation against the array will\n     * block.\n     */\n    exchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Returns a value indicating whether high-performance algorithms can use atomic operations\n     * (`true`) or must use locks (`false`) for the given number of bytes-per-element of a typed\n     * array.\n     */\n    isLockFree(size: number): boolean;\n\n    /**\n     * Returns the value at the given position in the array. Until this atomic operation completes,\n     * any other read or write operation against the array will block.\n     */\n    load(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number): number;\n\n    /**\n     * Stores the bitwise OR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    or(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Stores a value at the given position in the array, returning the new value. Until this\n     * atomic operation completes, any other read or write operation against the array will block.\n     */\n    store(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Subtracts a value from the value at the given position in the array, returning the original\n     * value. Until this atomic operation completes, any other read or write operation against the\n     * array will block.\n     */\n    sub(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * If the value at the given position in the array is equal to the provided value, the current\n     * agent is put to sleep causing execution to suspend until the timeout expires (returning\n     * `\"timed-out\"`) or until the agent is awoken (returning `\"ok\"`); otherwise, returns\n     * `\"not-equal\"`.\n     */\n    wait(typedArray: Int32Array, index: number, value: number, timeout?: number): \"ok\" | \"not-equal\" | \"timed-out\";\n\n    /**\n     * Wakes up sleeping agents that are waiting on the given index of the array, returning the\n     * number of agents that were awoken.\n     * @param typedArray A shared Int32Array.\n     * @param index The position in the typedArray to wake up on.\n     * @param count The number of sleeping agents to notify. Defaults to +Infinity.\n     */\n    notify(typedArray: Int32Array, index: number, count?: number): number;\n\n    /**\n     * Stores the bitwise XOR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    xor(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    readonly [Symbol.toStringTag]: \"Atomics\";\n}\n\ndeclare var Atomics: Atomics;\n","lib.es2017.string.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface String {\n    /**\n     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\n     * The padding is applied from the start (left) of the current string.\n     *\n     * @param maxLength The length of the resulting string once the current string has been padded.\n     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.\n     *\n     * @param fillString The string to pad the current string with.\n     *        If this string is too long, it will be truncated and the left-most part will be applied.\n     *        The default value for this parameter is \" \" (U+0020).\n     */\n    padStart(maxLength: number, fillString?: string): string;\n\n    /**\n     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\n     * The padding is applied from the end (right) of the current string.\n     *\n     * @param maxLength The length of the resulting string once the current string has been padded.\n     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.\n     *\n     * @param fillString The string to pad the current string with.\n     *        If this string is too long, it will be truncated and the left-most part will be applied.\n     *        The default value for this parameter is \" \" (U+0020).\n     */\n    padEnd(maxLength: number, fillString?: string): string;\n}\n","lib.es2017.typedarrays.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Int8ArrayConstructor {\n    new (): Int8Array;\n}\n\ninterface Uint8ArrayConstructor {\n    new (): Uint8Array;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (): Uint8ClampedArray;\n}\n\ninterface Int16ArrayConstructor {\n    new (): Int16Array;\n}\n\ninterface Uint16ArrayConstructor {\n    new (): Uint16Array;\n}\n\ninterface Int32ArrayConstructor {\n    new (): Int32Array;\n}\n\ninterface Uint32ArrayConstructor {\n    new (): Uint32Array;\n}\n\ninterface Float32ArrayConstructor {\n    new (): Float32Array;\n}\n\ninterface Float64ArrayConstructor {\n    new (): Float64Array;\n}\n","lib.es2018.asyncgenerator.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2018.asynciterable\" />\n\ninterface AsyncGenerator<T = unknown, TReturn = any, TNext = unknown> extends AsyncIterator<T, TReturn, TNext> {\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...args: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;\n    return(value: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\n    throw(e: any): Promise<IteratorResult<T, TReturn>>;\n    [Symbol.asyncIterator](): AsyncGenerator<T, TReturn, TNext>;\n}\n\ninterface AsyncGeneratorFunction {\n    /**\n     * Creates a new AsyncGenerator object.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: any[]): AsyncGenerator;\n    /**\n     * Creates a new AsyncGenerator object.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: any[]): AsyncGenerator;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: AsyncGenerator;\n}\n\ninterface AsyncGeneratorFunctionConstructor {\n    /**\n     * Creates a new AsyncGenerator function.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: string[]): AsyncGeneratorFunction;\n    /**\n     * Creates a new AsyncGenerator function.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: string[]): AsyncGeneratorFunction;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: AsyncGeneratorFunction;\n}\n","lib.es2018.asynciterable.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.symbol\" />\n/// <reference lib=\"es2015.iterable\" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that returns the default async iterator for an object. Called by the semantics of\n     * the for-await-of statement.\n     */\n    readonly asyncIterator: unique symbol;\n}\n\ninterface AsyncIterator<T, TReturn = any, TNext = undefined> {\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...args: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;\n    return?(value?: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\n    throw?(e?: any): Promise<IteratorResult<T, TReturn>>;\n}\n\ninterface AsyncIterable<T> {\n    [Symbol.asyncIterator](): AsyncIterator<T>;\n}\n\ninterface AsyncIterableIterator<T> extends AsyncIterator<T> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<T>;\n}","lib.es2018.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2017\" />\n/// <reference lib=\"es2018.asynciterable\" />\n/// <reference lib=\"es2018.asyncgenerator\" />\n/// <reference lib=\"es2018.promise\" />\n/// <reference lib=\"es2018.regexp\" />\n/// <reference lib=\"es2018.intl\" />\n","lib.es2018.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2018\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />","lib.es2018.intl.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ndeclare namespace Intl {\n\n    // http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Determining-Plural-Categories\n    type LDMLPluralRule = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\n    type PluralRuleType = \"cardinal\" | \"ordinal\";\n\n    interface PluralRulesOptions {\n        localeMatcher?: \"lookup\" | \"best fit\" | undefined;\n        type?: PluralRuleType | undefined;\n        minimumIntegerDigits?: number | undefined;\n        minimumFractionDigits?: number | undefined;\n        maximumFractionDigits?: number | undefined;\n        minimumSignificantDigits?: number | undefined;\n        maximumSignificantDigits?: number | undefined;\n    }\n\n    interface ResolvedPluralRulesOptions {\n        locale: string;\n        pluralCategories: LDMLPluralRule[];\n        type: PluralRuleType;\n        minimumIntegerDigits: number;\n        minimumFractionDigits: number;\n        maximumFractionDigits: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n    }\n\n    interface PluralRules {\n        resolvedOptions(): ResolvedPluralRulesOptions;\n        select(n: number): LDMLPluralRule;\n    }\n\n    const PluralRules: {\n        new (locales?: string | string[], options?: PluralRulesOptions): PluralRules;\n        (locales?: string | string[], options?: PluralRulesOptions): PluralRules;\n\n        supportedLocalesOf(locales: string | string[], options?: { localeMatcher?: \"lookup\" | \"best fit\" }): string[];\n    };\n\n    // We can only have one definition for 'type' in TypeScript, and so you can learn where the keys come from here:\n    type ES2018NumberFormatPartType = \"literal\" | \"nan\" | \"infinity\" | \"percent\" | \"integer\" | \"group\" | \"decimal\" | \"fraction\" | \"plusSign\" | \"minusSign\" | \"percentSign\" | \"currency\" | \"code\" | \"symbol\" | \"name\";\n    type ES2020NumberFormatPartType = \"compact\" | \"exponentInteger\" | \"exponentMinusSign\" | \"exponentSeparator\" | \"unit\" | \"unknown\";\n    type NumberFormatPartTypes = ES2018NumberFormatPartType | ES2020NumberFormatPartType;\n\n    interface NumberFormatPart {\n        type: NumberFormatPartTypes;\n        value: string;\n    }\n\n    interface NumberFormat {\n        formatToParts(number?: number | bigint): NumberFormatPart[];\n    }\n}\n","lib.es2018.promise.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): Promise<T>\n}\n","lib.es2018.regexp.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface RegExpMatchArray {\n    groups?: {\n        [key: string]: string\n    }\n}\n\ninterface RegExpExecArray {\n    groups?: {\n        [key: string]: string\n    }\n}\n\ninterface RegExp {\n    /**\n     * Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.\n     * Default is false. Read-only.\n     */\n    readonly dotAll: boolean;\n}","lib.es2019.array.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ntype FlatArray<Arr, Depth extends number> = {\n    \"done\": Arr,\n    \"recur\": Arr extends ReadonlyArray<infer InnerArr>\n        ? FlatArray<InnerArr, [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][Depth]>\n        : Arr\n}[Depth extends -1 ? \"done\" : \"recur\"];\n\ninterface ReadonlyArray<T> {\n\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined> (\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\n        thisArg?: This\n    ): U[]\n\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<A, D extends number = 1>(\n        this: A,\n        depth?: D\n    ): FlatArray<A, D>[]\n  }\n\ninterface Array<T> {\n\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined> (\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\n        thisArg?: This\n    ): U[]\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<A, D extends number = 1>(\n        this: A,\n        depth?: D\n    ): FlatArray<A, D>[]\n}\n","lib.es2019.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2018\" />\n/// <reference lib=\"es2019.array\" />\n/// <reference lib=\"es2019.object\" />\n/// <reference lib=\"es2019.string\" />\n/// <reference lib=\"es2019.symbol\" />\n","lib.es2019.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2019\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />\n","lib.es2019.object.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.iterable\" />\n\ninterface ObjectConstructor {\n    /**\n     * Returns an object created by key-value entries for properties and methods\n     * @param entries An iterable object that contains key-value entries for properties and methods.\n     */\n    fromEntries<T = any>(entries: Iterable<readonly [PropertyKey, T]>): { [k: string]: T };\n\n    /**\n     * Returns an object created by key-value entries for properties and methods\n     * @param entries An iterable object that contains key-value entries for properties and methods.\n     */\n    fromEntries(entries: Iterable<readonly any[]>): any;\n}\n","lib.es2019.string.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface String {\n    /** Removes the trailing white space and line terminator characters from a string. */\n    trimEnd(): string;\n\n    /** Removes the leading white space and line terminator characters from a string. */\n    trimStart(): string;\n\n    /**\n     * Removes the leading white space and line terminator characters from a string.\n     * @deprecated A legacy feature for browser compatibility. Use `trimStart` instead\n     */\n    trimLeft(): string;\n\n    /**\n     * Removes the trailing white space and line terminator characters from a string.\n     * @deprecated A legacy feature for browser compatibility. Use `trimEnd` instead\n     */\n    trimRight(): string;\n}\n","lib.es2019.symbol.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Symbol {\n    /**\n     * Expose the [[Description]] internal slot of a symbol directly.\n     */\n    readonly description: string | undefined;\n}\n","lib.es2020.bigint.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2020.intl\" />\n\ninterface BigIntToLocaleStringOptions {\n    /**\n     * The locale matching algorithm to use.The default is \"best fit\". For information about this option, see the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.\n     */\n    localeMatcher?: string;\n    /**\n     * The formatting style to use , the default is \"decimal\".\n     */\n    style?: string;\n\n    numberingSystem?: string;\n    /**\n     * The unit to use in unit formatting, Possible values are core unit identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from the full list was selected for use in ECMAScript. Pairs of simple units can be concatenated with \"-per-\" to make a compound unit. There is no default value; if the style is \"unit\", the unit property must be provided.\n     */\n    unit?: string;\n\n    /**\n     * The unit formatting style to use in unit formatting, the defaults is \"short\".\n     */\n    unitDisplay?: string;\n\n    /**\n     * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see the Current currency & funds code list. There is no default value; if the style is \"currency\", the currency property must be provided. It is only used when [[Style]] has the value \"currency\".\n     */\n    currency?: string;\n\n    /**\n     * How to display the currency in currency formatting. It is only used when [[Style]] has the value \"currency\". The default is \"symbol\".\n     *\n     * \"symbol\" to use a localized currency symbol such as €,\n     *\n     * \"code\" to use the ISO currency code,\n     *\n     * \"name\" to use a localized currency name such as \"dollar\"\n     */\n    currencyDisplay?: string;\n\n    /**\n     * Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is true.\n     */\n    useGrouping?: boolean;\n\n    /**\n     * The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.\n     */\n    minimumIntegerDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn't provide that information).\n     */\n    minimumFractionDigits?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;\n\n    /**\n     * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.\n     */\n    maximumFractionDigits?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;\n\n    /**\n     * The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.\n     */\n    minimumSignificantDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.\n     */\n    maximumSignificantDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The formatting that should be displayed for the number, the defaults is \"standard\"\n     *\n     *     \"standard\" plain number formatting\n     *\n     *     \"scientific\" return the order-of-magnitude for formatted number.\n     *\n     *     \"engineering\" return the exponent of ten when divisible by three\n     *\n     *     \"compact\" string representing exponent, defaults is using the \"short\" form\n     */\n    notation?: string;\n\n    /**\n     * used only when notation is \"compact\"\n     */\n    compactDisplay?: string;\n}\n\ninterface BigInt {\n    /**\n     * Returns a string representation of an object.\n     * @param radix Specifies a radix for converting numeric values to strings.\n     */\n    toString(radix?: number): string;\n\n    /** Returns a string representation appropriate to the host environment's current locale. */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: BigIntToLocaleStringOptions): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): bigint;\n\n    readonly [Symbol.toStringTag]: \"BigInt\";\n}\n\ninterface BigIntConstructor {\n    (value: bigint | boolean | number | string): bigint;\n    readonly prototype: BigInt;\n\n    /**\n     * Interprets the low bits of a BigInt as a 2's-complement signed integer.\n     * All higher bits are discarded.\n     * @param bits The number of low bits to use\n     * @param int The BigInt whose bits to extract\n     */\n    asIntN(bits: number, int: bigint): bigint;\n    /**\n     * Interprets the low bits of a BigInt as an unsigned integer.\n     * All higher bits are discarded.\n     * @param bits The number of low bits to use\n     * @param int The BigInt whose bits to extract\n     */\n    asUintN(bits: number, int: bigint): bigint;\n}\n\ndeclare var BigInt: BigIntConstructor;\n\n/**\n * A typed array of 64-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigInt64Array {\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /** The ArrayBuffer instance referenced by the array. */\n    readonly buffer: ArrayBufferLike;\n\n    /** The length in bytes of the array. */\n    readonly byteLength: number;\n\n    /** The offset in bytes of the array. */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /** Yields index, value pairs for every entry in the array. */\n    entries(): IterableIterator<[number, bigint]>;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns false,\n     * or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: bigint, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: bigint, index: number, array: BigInt64Array) => any, thisArg?: any): BigInt64Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): bigint | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: bigint, index: number, array: BigInt64Array) => void, thisArg?: any): void;\n\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: bigint, fromIndex?: number): boolean;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /** Yields each index in the array. */\n    keys(): IterableIterator<number>;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /** The length of the array. */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: bigint, index: number, array: BigInt64Array) => bigint, thisArg?: any): BigInt64Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array) => U, initialValue: U): U;\n\n    /** Reverses the elements in the array. */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<bigint>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): BigInt64Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls the\n     * predicate function for each element in the array until the predicate returns true, or until\n     * the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Sorts the array.\n     * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n     */\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n    /**\n     * Gets a new BigInt64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): BigInt64Array;\n\n    /** Converts the array to a string by using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns a string representation of the array. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): BigInt64Array;\n\n    /** Yields each value in the array. */\n    values(): IterableIterator<bigint>;\n\n    [Symbol.iterator](): IterableIterator<bigint>;\n\n    readonly [Symbol.toStringTag]: \"BigInt64Array\";\n\n    [index: number]: bigint;\n}\n\ninterface BigInt64ArrayConstructor {\n    readonly prototype: BigInt64Array;\n    new(length?: number): BigInt64Array;\n    new(array: Iterable<bigint>): BigInt64Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigInt64Array;\n\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: bigint[]): BigInt64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: ArrayLike<bigint>): BigInt64Array;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigInt64Array;\n}\n\ndeclare var BigInt64Array: BigInt64ArrayConstructor;\n\n/**\n * A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigUint64Array {\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /** The ArrayBuffer instance referenced by the array. */\n    readonly buffer: ArrayBufferLike;\n\n    /** The length in bytes of the array. */\n    readonly byteLength: number;\n\n    /** The offset in bytes of the array. */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /** Yields index, value pairs for every entry in the array. */\n    entries(): IterableIterator<[number, bigint]>;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns false,\n     * or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: bigint, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: bigint, index: number, array: BigUint64Array) => any, thisArg?: any): BigUint64Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): bigint | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: bigint, index: number, array: BigUint64Array) => void, thisArg?: any): void;\n\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: bigint, fromIndex?: number): boolean;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /** Yields each index in the array. */\n    keys(): IterableIterator<number>;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /** The length of the array. */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: bigint, index: number, array: BigUint64Array) => bigint, thisArg?: any): BigUint64Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array) => U, initialValue: U): U;\n\n    /** Reverses the elements in the array. */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<bigint>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): BigUint64Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls the\n     * predicate function for each element in the array until the predicate returns true, or until\n     * the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Sorts the array.\n     * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n     */\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n    /**\n     * Gets a new BigUint64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): BigUint64Array;\n\n    /** Converts the array to a string by using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns a string representation of the array. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): BigUint64Array;\n\n    /** Yields each value in the array. */\n    values(): IterableIterator<bigint>;\n\n    [Symbol.iterator](): IterableIterator<bigint>;\n\n    readonly [Symbol.toStringTag]: \"BigUint64Array\";\n\n    [index: number]: bigint;\n}\n\ninterface BigUint64ArrayConstructor {\n    readonly prototype: BigUint64Array;\n    new(length?: number): BigUint64Array;\n    new(array: Iterable<bigint>): BigUint64Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigUint64Array;\n\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: bigint[]): BigUint64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: ArrayLike<bigint>): BigUint64Array;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigUint64Array;\n}\n\ndeclare var BigUint64Array: BigUint64ArrayConstructor;\n\ninterface DataView {\n    /**\n     * Gets the BigInt64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getBigInt64(byteOffset: number, littleEndian?: boolean): bigint;\n\n    /**\n     * Gets the BigUint64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getBigUint64(byteOffset: number, littleEndian?: boolean): bigint;\n\n    /**\n     * Stores a BigInt64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n\n    /**\n     * Stores a BigUint64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n}\n\ndeclare namespace Intl{\n    interface NumberFormat {\n        format(value: number | bigint): string;\n        resolvedOptions(): ResolvedNumberFormatOptions;\n    }\n}\n","lib.es2020.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2019\" />\n/// <reference lib=\"es2020.bigint\" />\n/// <reference lib=\"es2020.date\" />\n/// <reference lib=\"es2020.number\" />\n/// <reference lib=\"es2020.promise\" />\n/// <reference lib=\"es2020.sharedmemory\" />\n/// <reference lib=\"es2020.string\" />\n/// <reference lib=\"es2020.symbol.wellknown\" />\n/// <reference lib=\"es2020.intl\" />\n","lib.es2020.date.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2020.intl\" />\n\ninterface Date {\n    /**\n     * Converts a date and time to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a date to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a time to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n}","lib.es2020.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2020\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />\n","lib.es2020.intl.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2018.intl\" />\ndeclare namespace Intl {\n\n    /**\n     * [Unicode BCP 47 Locale Identifiers](https://unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers) definition.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n     */\n    type UnicodeBCP47LocaleIdentifier = string;\n\n    /**\n     * Unit to use in the relative time internationalized message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format#Parameters).\n     */\n    type RelativeTimeFormatUnit =\n        | \"year\"\n        | \"years\"\n        | \"quarter\"\n        | \"quarters\"\n        | \"month\"\n        | \"months\"\n        | \"week\"\n        | \"weeks\"\n        | \"day\"\n        | \"days\"\n        | \"hour\"\n        | \"hours\"\n        | \"minute\"\n        | \"minutes\"\n        | \"second\"\n        | \"seconds\";\n\n    /**\n     * Value of the `unit` property in objects returned by\n     * `Intl.RelativeTimeFormat.prototype.formatToParts()`. `formatToParts` and\n     * `format` methods accept either singular or plural unit names as input,\n     * but `formatToParts` only outputs singular (e.g. \"day\") not plural (e.g.\n     * \"days\").\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts#Using_formatToParts).\n     */\n     type RelativeTimeFormatUnitSingular =\n        | \"year\"\n        | \"quarter\"\n        | \"month\"\n        | \"week\"\n        | \"day\"\n        | \"hour\"\n        | \"minute\"\n        | \"second\";\n\n    /**\n     * The locale matching algorithm to use.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).\n     */\n    type RelativeTimeFormatLocaleMatcher = \"lookup\" | \"best fit\";\n\n    /**\n     * The format of output message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    type RelativeTimeFormatNumeric = \"always\" | \"auto\";\n\n    /**\n     * The length of the internationalized message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    type RelativeTimeFormatStyle = \"long\" | \"short\" | \"narrow\";\n\n    /**\n     * [BCP 47 language tag](http://tools.ietf.org/html/rfc5646) definition.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n     */\n    type BCP47LanguageTag = string;\n\n    /**\n     * The locale(s) to use\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n     */\n    type LocalesArgument = UnicodeBCP47LocaleIdentifier | Locale | (UnicodeBCP47LocaleIdentifier | Locale)[] | undefined;\n\n    /**\n     * An object with some or all of properties of `options` parameter\n     * of `Intl.RelativeTimeFormat` constructor.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    interface RelativeTimeFormatOptions {\n        /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */\n        localeMatcher?: RelativeTimeFormatLocaleMatcher;\n        /** The format of output message. */\n        numeric?: RelativeTimeFormatNumeric;\n        /** The length of the internationalized message. */\n        style?: RelativeTimeFormatStyle;\n    }\n\n    /**\n     * An object with properties reflecting the locale\n     * and formatting options computed during initialization\n     * of the `Intl.RelativeTimeFormat` object\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions#Description).\n     */\n    interface ResolvedRelativeTimeFormatOptions {\n        locale: UnicodeBCP47LocaleIdentifier;\n        style: RelativeTimeFormatStyle;\n        numeric: RelativeTimeFormatNumeric;\n        numberingSystem: string;\n    }\n\n    /**\n     * An object representing the relative time format in parts\n     * that can be used for custom locale-aware formatting.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts#Using_formatToParts).\n     */\n    type RelativeTimeFormatPart =\n        | {\n              type: \"literal\";\n              value: string;\n          }\n        | {\n              type: Exclude<NumberFormatPartTypes, \"literal\">;\n              value: string;\n              unit: RelativeTimeFormatUnitSingular;\n          };\n\n    interface RelativeTimeFormat {\n        /**\n         * Formats a value and a unit according to the locale\n         * and formatting options of the given\n         * [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat)\n         * object.\n         *\n         * While this method automatically provides the correct plural forms,\n         * the grammatical form is otherwise as neutral as possible.\n         *\n         * It is the caller's responsibility to handle cut-off logic\n         * such as deciding between displaying \"in 7 days\" or \"in 1 week\".\n         * This API does not support relative dates involving compound units.\n         * e.g \"in 5 days and 4 hours\".\n         *\n         * @param value -  Numeric value to use in the internationalized relative time message\n         *\n         * @param unit - [Unit](https://tc39.es/ecma402/#sec-singularrelativetimeunit) to use in the relative time internationalized message.\n         *\n         * @throws `RangeError` if `unit` was given something other than `unit` possible values\n         *\n         * @returns {string} Internationalized relative time message as string\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format).\n         */\n        format(value: number, unit: RelativeTimeFormatUnit): string;\n\n        /**\n         *  Returns an array of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n         *\n         *  @param value - Numeric value to use in the internationalized relative time message\n         *\n         *  @param unit - [Unit](https://tc39.es/ecma402/#sec-singularrelativetimeunit) to use in the relative time internationalized message.\n         *\n         *  @throws `RangeError` if `unit` was given something other than `unit` possible values\n         *\n         *  [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts).\n         */\n        formatToParts(value: number, unit: RelativeTimeFormatUnit): RelativeTimeFormatPart[];\n\n        /**\n         * Provides access to the locale and options computed during initialization of this `Intl.RelativeTimeFormat` object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions).\n         */\n        resolvedOptions(): ResolvedRelativeTimeFormatOptions;\n    }\n\n    /**\n     * The [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat)\n     * object is a constructor for objects that enable language-sensitive relative time formatting.\n     *\n     * [Compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat#Browser_compatibility).\n     */\n    const RelativeTimeFormat: {\n        /**\n         * Creates [Intl.RelativeTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat) objects\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the locales argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters)\n         *  with some or all of options of `RelativeTimeFormatOptions`.\n         *\n         * @returns [Intl.RelativeTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat).\n         */\n        new(\n            locales?: UnicodeBCP47LocaleIdentifier | UnicodeBCP47LocaleIdentifier[],\n            options?: RelativeTimeFormatOptions,\n        ): RelativeTimeFormat;\n\n        /**\n         * Returns an array containing those of the provided locales\n         * that are supported in date and time formatting\n         * without having to fall back to the runtime's default locale.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the locales argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters)\n         *  with some or all of options of the formatting.\n         *\n         * @returns An array containing those of the provided locales\n         *  that are supported in date and time formatting\n         *  without having to fall back to the runtime's default locale.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/supportedLocalesOf).\n         */\n        supportedLocalesOf(\n            locales?: UnicodeBCP47LocaleIdentifier | UnicodeBCP47LocaleIdentifier[],\n            options?: RelativeTimeFormatOptions,\n        ): UnicodeBCP47LocaleIdentifier[];\n    };\n\n    interface NumberFormatOptions {\n        compactDisplay?: \"short\" | \"long\" | undefined;\n        notation?: \"standard\" | \"scientific\" | \"engineering\" | \"compact\" | undefined;\n        signDisplay?: \"auto\" | \"never\" | \"always\" | \"exceptZero\" | undefined;\n        unit?: string | undefined;\n        unitDisplay?: \"short\" | \"long\" | \"narrow\" | undefined;\n        currencyDisplay?: string | undefined;\n        currencySign?: string | undefined;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        compactDisplay?: \"short\" | \"long\";\n        notation?: \"standard\" | \"scientific\" | \"engineering\" | \"compact\";\n        signDisplay?: \"auto\" | \"never\" | \"always\" | \"exceptZero\";\n        unit?: string;\n        unitDisplay?: \"short\" | \"long\" | \"narrow\";\n        currencyDisplay?: string;\n        currencySign?: string;\n    }\n\n    interface DateTimeFormatOptions {\n        calendar?: string | undefined;\n        dayPeriod?: \"narrow\" | \"short\" | \"long\" | undefined;\n        numberingSystem?: string | undefined;\n\n        dateStyle?: \"full\" | \"long\" | \"medium\" | \"short\" | undefined;\n        timeStyle?: \"full\" | \"long\" | \"medium\" | \"short\" | undefined;\n        hourCycle?: \"h11\" | \"h12\" | \"h23\" | \"h24\" | undefined;\n    }\n\n    type LocaleHourCycleKey = \"h12\" | \"h23\" | \"h11\" | \"h24\";\n    type LocaleCollationCaseFirst = \"upper\" | \"lower\" | \"false\";\n\n    interface LocaleOptions {\n        /** A string containing the language, and the script and region if available. */\n        baseName?: string;\n        /** The part of the Locale that indicates the locale's calendar era. */\n        calendar?: string;\n        /** Flag that defines whether case is taken into account for the locale's collation rules. */\n        caseFirst?: LocaleCollationCaseFirst;\n        /** The collation type used for sorting */\n        collation?: string;\n        /** The time keeping format convention used by the locale. */\n        hourCycle?: LocaleHourCycleKey;\n        /** The primary language subtag associated with the locale. */\n        language?: string;\n        /** The numeral system used by the locale. */\n        numberingSystem?: string;\n        /** Flag that defines whether the locale has special collation handling for numeric characters. */\n        numeric?: boolean;\n        /** The region of the world (usually a country) associated with the locale. Possible values are region codes as defined by ISO 3166-1. */\n        region?: string;\n        /** The script used for writing the particular language used in the locale. Possible values are script codes as defined by ISO 15924. */\n        script?: string;\n    }\n\n    interface Locale extends LocaleOptions {\n        /** A string containing the language, and the script and region if available. */\n        baseName: string;\n        /** The primary language subtag associated with the locale. */\n        language: string;\n        /** Gets the most likely values for the language, script, and region of the locale based on existing values. */\n        maximize(): Locale;\n        /** Attempts to remove information about the locale that would be added by calling `Locale.maximize()`. */\n        minimize(): Locale;\n        /** Returns the locale's full locale identifier string. */\n        toString(): BCP47LanguageTag;\n    }\n\n    /**\n     * Constructor creates [Intl.Locale](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n     * objects\n     *\n     * @param tag - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646).\n     *  For the general form and interpretation of the locales argument,\n     *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n     *\n     * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale#Parameters) with some or all of options of the locale.\n     *\n     * @returns [Intl.Locale](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale).\n     */\n    const Locale: {\n        new (tag: BCP47LanguageTag | Locale, options?: LocaleOptions): Locale;\n    };\n\n    type DisplayNamesFallback =\n        | \"code\"\n        | \"none\";\n\n    type DisplayNamesType =\n        | \"language\"\n        | \"region\"\n        | \"script\"\n        | \"calendar\"\n        | \"dateTimeField\"\n        | \"currency\";\n\n    type DisplayNamesLanguageDisplay =\n        | \"dialect\"\n        | \"standard\";\n\n    interface DisplayNamesOptions {\n        localeMatcher?: RelativeTimeFormatLocaleMatcher;\n        style?: RelativeTimeFormatStyle;\n        type: DisplayNamesType;\n        languageDisplay?: DisplayNamesLanguageDisplay;\n        fallback?: DisplayNamesFallback;\n    }\n\n    interface ResolvedDisplayNamesOptions {\n        locale: UnicodeBCP47LocaleIdentifier;\n        style: RelativeTimeFormatStyle;\n        type: DisplayNamesType;\n        fallback: DisplayNamesFallback;\n        languageDisplay?: DisplayNamesLanguageDisplay;\n    }\n\n    interface DisplayNames {\n        /**\n         * Receives a code and returns a string based on the locale and options provided when instantiating\n         * [`Intl.DisplayNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames)\n         *\n         * @param code The `code` to provide depends on the `type` passed to display name during creation:\n         *  - If the type is `\"region\"`, code should be either an [ISO-3166 two letters region code](https://www.iso.org/iso-3166-country-codes.html),\n         *    or a [three digits UN M49 Geographic Regions](https://unstats.un.org/unsd/methodology/m49/).\n         *  - If the type is `\"script\"`, code should be an [ISO-15924 four letters script code](https://unicode.org/iso15924/iso15924-codes.html).\n         *  - If the type is `\"language\"`, code should be a `languageCode` [\"-\" `scriptCode`] [\"-\" `regionCode` ] *(\"-\" `variant` )\n         *    subsequence of the unicode_language_id grammar in [UTS 35's Unicode Language and Locale Identifiers grammar](https://unicode.org/reports/tr35/#Unicode_language_identifier).\n         *    `languageCode` is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.\n         *  - If the type is `\"currency\"`, code should be a [3-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of).\n         */\n        of(code: string): string | undefined;\n        /**\n         * Returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current\n         * [`Intl/DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/resolvedOptions).\n         */\n        resolvedOptions(): ResolvedDisplayNamesOptions;\n    }\n\n    /**\n     * The [`Intl.DisplayNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames)\n     * object enables the consistent translation of language, region and script display names.\n     *\n     * [Compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames#browser_compatibility).\n     */\n    const DisplayNames: {\n        prototype: DisplayNames;\n\n        /**\n         * @param locales A string with a BCP 47 language tag, or an array of such strings.\n         *   For the general form and interpretation of the `locales` argument, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n         *   page.\n         *\n         * @param options An object for setting up a display name.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames).\n         */\n        new(locales: LocalesArgument, options: DisplayNamesOptions): DisplayNames;\n\n        /**\n         * Returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime's default locale.\n         *\n         * @param locales A string with a BCP 47 language tag, or an array of such strings.\n         *   For the general form and interpretation of the `locales` argument, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n         *   page.\n         *\n         * @param options An object with a locale matcher.\n         *\n         * @returns An array of strings representing a subset of the given locale tags that are supported in display names without having to fall back to the runtime's default locale.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/supportedLocalesOf).\n         */\n        supportedLocalesOf(locales?: LocalesArgument, options?: { localeMatcher?: RelativeTimeFormatLocaleMatcher }): BCP47LanguageTag[];\n    };\n\n}\n","lib.es2020.number.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2020.intl\" />\n\ninterface Number {\n    /**\n     * Converts a number to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string;\n}\n","lib.es2020.promise.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface PromiseFulfilledResult<T> {\n    status: \"fulfilled\";\n    value: T;\n}\n\ninterface PromiseRejectedResult {\n    status: \"rejected\";\n    reason: any;\n}\n\ntype PromiseSettledResult<T> = PromiseFulfilledResult<T> | PromiseRejectedResult;\n\ninterface PromiseConstructor {\n    /**\n     * Creates a Promise that is resolved with an array of results when all\n     * of the provided Promises resolve or reject.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    allSettled<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: PromiseSettledResult<Awaited<T[P]>> }>;\n\n    /**\n     * Creates a Promise that is resolved with an array of results when all\n     * of the provided Promises resolve or reject.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    allSettled<T>(values: Iterable<T | PromiseLike<T>>): Promise<PromiseSettledResult<Awaited<T>>[]>;\n}\n","lib.es2020.sharedmemory.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Atomics {\n    /**\n     * Adds a value to the value at the given position in the array, returning the original value.\n     * Until this atomic operation completes, any other read or write operation against the array\n     * will block.\n     */\n    add(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Stores the bitwise AND of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or\n     * write operation against the array will block.\n     */\n    and(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Replaces the value at the given position in the array if the original value equals the given\n     * expected value, returning the original value. Until this atomic operation completes, any\n     * other read or write operation against the array will block.\n     */\n    compareExchange(typedArray: BigInt64Array | BigUint64Array, index: number, expectedValue: bigint, replacementValue: bigint): bigint;\n\n    /**\n     * Replaces the value at the given position in the array, returning the original value. Until\n     * this atomic operation completes, any other read or write operation against the array will\n     * block.\n     */\n    exchange(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Returns the value at the given position in the array. Until this atomic operation completes,\n     * any other read or write operation against the array will block.\n     */\n    load(typedArray: BigInt64Array | BigUint64Array, index: number): bigint;\n\n    /**\n     * Stores the bitwise OR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    or(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Stores a value at the given position in the array, returning the new value. Until this\n     * atomic operation completes, any other read or write operation against the array will block.\n     */\n    store(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Subtracts a value from the value at the given position in the array, returning the original\n     * value. Until this atomic operation completes, any other read or write operation against the\n     * array will block.\n     */\n    sub(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * If the value at the given position in the array is equal to the provided value, the current\n     * agent is put to sleep causing execution to suspend until the timeout expires (returning\n     * `\"timed-out\"`) or until the agent is awoken (returning `\"ok\"`); otherwise, returns\n     * `\"not-equal\"`.\n     */\n    wait(typedArray: BigInt64Array, index: number, value: bigint, timeout?: number): \"ok\" | \"not-equal\" | \"timed-out\";\n\n    /**\n     * Wakes up sleeping agents that are waiting on the given index of the array, returning the\n     * number of agents that were awoken.\n     * @param typedArray A shared BigInt64Array.\n     * @param index The position in the typedArray to wake up on.\n     * @param count The number of sleeping agents to notify. Defaults to +Infinity.\n     */\n    notify(typedArray: BigInt64Array, index: number, count?: number): number;\n\n    /**\n     * Stores the bitwise XOR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    xor(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n}\n","lib.es2020.string.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.iterable\" />\n\ninterface String {\n    /**\n     * Matches a string with a regular expression, and returns an iterable of matches\n     * containing the results of that search.\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n     */\n    matchAll(regexp: RegExp): IterableIterator<RegExpMatchArray>;\n}\n","lib.es2020.symbol.wellknown.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015.iterable\" />\n/// <reference lib=\"es2015.symbol\" />\n\ninterface SymbolConstructor {\n    /**\n     * A regular expression method that matches the regular expression against a string. Called\n     * by the String.prototype.matchAll method.\n     */\n    readonly matchAll: unique symbol;\n}\n\ninterface RegExp {\n    /**\n     * Matches a string with this regular expression, and returns an iterable of matches\n     * containing the results of that search.\n     * @param string A string to search within.\n     */\n    [Symbol.matchAll](str: string): IterableIterator<RegExpMatchArray>;\n}\n","lib.es2021.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2020\" />\n/// <reference lib=\"es2021.promise\" />\n/// <reference lib=\"es2021.string\" />\n/// <reference lib=\"es2021.weakref\" />\n/// <reference lib=\"es2021.intl\" />\n","lib.es2021.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2021\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />\n","lib.es2021.intl.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ndeclare namespace Intl {\n\n    interface DateTimeFormatPartTypesRegistry {\n        fractionalSecond: any\n     }\n\n    interface DateTimeFormatOptions {\n        formatMatcher?: \"basic\" | \"best fit\" | \"best fit\" | undefined;\n        dateStyle?: \"full\" | \"long\" | \"medium\" | \"short\" | undefined;\n        timeStyle?: \"full\" | \"long\" | \"medium\" | \"short\" | undefined;\n        dayPeriod?: \"narrow\" | \"short\" | \"long\" | undefined;\n        fractionalSecondDigits?: 1 | 2 | 3 | undefined;\n    }\n\n    interface DateTimeRangeFormatPart extends DateTimeFormatPart {\n        source: \"startRange\" | \"endRange\" | \"shared\"\n    }\n\n    interface DateTimeFormat {\n        formatRange(startDate: Date | number | bigint, endDate: Date | number | bigint): string;\n        formatRangeToParts(startDate: Date | number | bigint, endDate: Date | number | bigint): DateTimeRangeFormatPart[];\n    }\n\n    interface ResolvedDateTimeFormatOptions {\n        formatMatcher?: \"basic\" | \"best fit\" | \"best fit\";\n        dateStyle?: \"full\" | \"long\" | \"medium\" | \"short\";\n        timeStyle?: \"full\" | \"long\" | \"medium\" | \"short\";\n        hourCycle?: \"h11\" | \"h12\" | \"h23\" | \"h24\";\n        dayPeriod?: \"narrow\" | \"short\" | \"long\";\n        fractionalSecondDigits?: 1 | 2 | 3;\n    }\n\n    /**\n     * The locale matching algorithm to use.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    type ListFormatLocaleMatcher = \"lookup\" | \"best fit\";\n\n    /**\n     * The format of output message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    type ListFormatType = \"conjunction\" | \"disjunction\" | \"unit\";\n\n    /**\n     * The length of the formatted message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    type ListFormatStyle = \"long\" | \"short\" | \"narrow\";\n\n    /**\n     * An object with some or all properties of the `Intl.ListFormat` constructor `options` parameter.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    interface ListFormatOptions {\n        /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */\n        localeMatcher?: ListFormatLocaleMatcher | undefined;\n        /** The format of output message. */\n        type?: ListFormatType | undefined;\n        /** The length of the internationalized message. */\n        style?: ListFormatStyle | undefined;\n    }\n\n    interface ListFormat {\n        /**\n         * Returns a string with a language-specific representation of the list.\n         *\n         * @param list - An iterable object, such as an [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n         *\n         * @throws `TypeError` if `list` includes something other than the possible values.\n         *\n         * @returns {string} A language-specific formatted string representing the elements of the list.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format).\n         */\n        format(list: Iterable<string>): string;\n\n        /**\n         * Returns an Array of objects representing the different components that can be used to format a list of values in a locale-aware fashion.\n         *\n         * @param list - An iterable object, such as an [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), to be formatted according to a locale.\n         *\n         * @throws `TypeError` if `list` includes something other than the possible values.\n         *\n         * @returns {{ type: \"element\" | \"literal\", value: string; }[]} An Array of components which contains the formatted parts from the list.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/formatToParts).\n         */\n        formatToParts(list: Iterable<string>): { type: \"element\" | \"literal\", value: string; }[];\n    }\n\n    const ListFormat: {\n        prototype: ListFormat;\n\n        /**\n         * Creates [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) objects that\n         * enable language-sensitive list formatting.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters)\n         *  with some or all options of `ListFormatOptions`.\n         *\n         * @returns [Intl.ListFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat).\n         */\n        new(locales?: BCP47LanguageTag | BCP47LanguageTag[], options?: ListFormatOptions): ListFormat;\n\n        /**\n         * Returns an array containing those of the provided locales that are\n         * supported in list formatting without having to fall back to the runtime's default locale.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf#parameters).\n         *  with some or all possible options.\n         *\n         * @returns An array of strings representing a subset of the given locale tags that are supported in list\n         *  formatting without having to fall back to the runtime's default locale.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf).\n         */\n        supportedLocalesOf(locales: BCP47LanguageTag | BCP47LanguageTag[], options?: Pick<ListFormatOptions, \"localeMatcher\">): BCP47LanguageTag[];\n    };\n}\n","lib.es2021.promise.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface AggregateError extends Error {\n    errors: any[]\n}\n\ninterface AggregateErrorConstructor {\n    new(errors: Iterable<any>, message?: string): AggregateError;\n    (errors: Iterable<any>, message?: string): AggregateError;\n    readonly prototype: AggregateError;\n}\n\ndeclare var AggregateError: AggregateErrorConstructor;\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface PromiseConstructor {\n    /**\n     * The any function returns a promise that is fulfilled by the first given promise to be fulfilled, or rejected with an AggregateError containing an array of rejection reasons if all of the given promises are rejected. It resolves all elements of the passed iterable to promises as it runs this algorithm.\n     * @param values An array or iterable of Promises.\n     * @returns A new Promise.\n     */\n    any<T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>;\n\n    /**\n     * The any function returns a promise that is fulfilled by the first given promise to be fulfilled, or rejected with an AggregateError containing an array of rejection reasons if all of the given promises are rejected. It resolves all elements of the passed iterable to promises as it runs this algorithm.\n     * @param values An array or iterable of Promises.\n     * @returns A new Promise.\n     */\n    any<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>\n}\n","lib.es2021.string.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface String {\n    /**\n     * Replace all instances of a substring in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n     */\n    replaceAll(searchValue: string | RegExp, replaceValue: string): string;\n\n    /**\n     * Replace all instances of a substring in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replacer A function that returns the replacement text.\n     */\n    replaceAll(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n}\n","lib.es2021.weakref.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface WeakRef<T extends object> {\n    readonly [Symbol.toStringTag]: \"WeakRef\";\n\n    /**\n     * Returns the WeakRef instance's target object, or undefined if the target object has been\n     * reclaimed.\n     */\n    deref(): T | undefined;\n}\n\ninterface WeakRefConstructor {\n    readonly prototype: WeakRef<any>;\n\n    /**\n     * Creates a WeakRef instance for the given target object.\n     * @param target The target object for the WeakRef instance.\n     */\n    new<T extends object>(target: T): WeakRef<T>;\n}\n\ndeclare var WeakRef: WeakRefConstructor;\n\ninterface FinalizationRegistry<T> {\n    readonly [Symbol.toStringTag]: \"FinalizationRegistry\";\n\n    /**\n     * Registers an object with the registry.\n     * @param target The target object to register.\n     * @param heldValue The value to pass to the finalizer for this object. This cannot be the\n     * target object.\n     * @param unregisterToken The token to pass to the unregister method to unregister the target\n     * object. If provided (and not undefined), this must be an object. If not provided, the target\n     * cannot be unregistered.\n     */\n    register(target: object, heldValue: T, unregisterToken?: object): void;\n\n    /**\n     * Unregisters an object from the registry.\n     * @param unregisterToken The token that was used as the unregisterToken argument when calling\n     * register to register the target object.\n     */\n    unregister(unregisterToken: object): void;\n}\n\ninterface FinalizationRegistryConstructor {\n    readonly prototype: FinalizationRegistry<any>;\n\n    /**\n     * Creates a finalization registry with an associated cleanup callback\n     * @param cleanupCallback The callback to call after an object in the registry has been reclaimed.\n     */\n    new<T>(cleanupCallback: (heldValue: T) => void): FinalizationRegistry<T>;\n}\n\ndeclare var FinalizationRegistry: FinalizationRegistryConstructor;\n","lib.es2022.array.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Array<T> {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): T | undefined;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): T | undefined;\n}\n\ninterface Int8Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint8Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint8ClampedArray {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Int16Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint16Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Int32Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint32Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Float32Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Float64Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface BigInt64Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): bigint | undefined;\n}\n\ninterface BigUint64Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): bigint | undefined;\n}\n","lib.es2022.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2021\" />\n/// <reference lib=\"es2022.array\" />\n/// <reference lib=\"es2022.error\" />\n/// <reference lib=\"es2022.intl\" />\n/// <reference lib=\"es2022.object\" />\n/// <reference lib=\"es2022.sharedmemory\" />\n/// <reference lib=\"es2022.string\" />\n","lib.es2022.error.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface ErrorOptions {\n    cause?: unknown;\n}\n\ninterface Error {\n    cause?: unknown;\n}\n\ninterface ErrorConstructor {\n    new (message?: string, options?: ErrorOptions): Error;\n    (message?: string, options?: ErrorOptions): Error;\n}\n\ninterface EvalErrorConstructor {\n    new (message?: string, options?: ErrorOptions): EvalError;\n    (message?: string, options?: ErrorOptions): EvalError;\n}\n\ninterface RangeErrorConstructor {\n    new (message?: string, options?: ErrorOptions): RangeError;\n    (message?: string, options?: ErrorOptions): RangeError;\n}\n\ninterface ReferenceErrorConstructor {\n    new (message?: string, options?: ErrorOptions): ReferenceError;\n    (message?: string, options?: ErrorOptions): ReferenceError;\n}\n\ninterface SyntaxErrorConstructor {\n    new (message?: string, options?: ErrorOptions): SyntaxError;\n    (message?: string, options?: ErrorOptions): SyntaxError;\n}\n\ninterface TypeErrorConstructor {\n    new (message?: string, options?: ErrorOptions): TypeError;\n    (message?: string, options?: ErrorOptions): TypeError;\n}\n\ninterface URIErrorConstructor {\n    new (message?: string, options?: ErrorOptions): URIError;\n    (message?: string, options?: ErrorOptions): URIError;\n}\n\ninterface AggregateErrorConstructor {\n    new (\n        errors: Iterable<any>,\n        message?: string,\n        options?: ErrorOptions\n    ): AggregateError;\n    (\n        errors: Iterable<any>,\n        message?: string,\n        options?: ErrorOptions\n    ): AggregateError;\n}\n","lib.es2022.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2022\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />\n","lib.es2022.intl.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ndeclare namespace Intl {\n\n    /**\n     * An object with some or all properties of the `Intl.Segmenter` constructor `options` parameter.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter#parameters)\n     */\n    interface SegmenterOptions {\n        /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */\n        localeMatcher?: \"best fit\" | \"lookup\" | undefined;\n        /** The type of input to be split */\n        granularity?: \"grapheme\" | \"word\" | \"sentence\" | undefined;\n    }\n\n    interface Segmenter {\n        /**\n         * Returns `Segments` object containing the segments of the input string, using the segmenter's locale and granularity.\n         *\n         * @param input - The text to be segmented as a `string`.\n         *\n         * @returns A new iterable Segments object containing the segments of the input string, using the segmenter's locale and granularity.\n         */\n        segment(input: string): Segments;\n        resolvedOptions(): ResolvedSegmenterOptions;\n    }\n\n    interface ResolvedSegmenterOptions {\n        locale: string;\n        granularity: \"grapheme\" | \"word\" | \"sentence\";\n    }\n\n    interface Segments {\n        /**\n         * Returns an object describing the segment in the original string that includes the code unit at a specified index.\n         *\n         * @param codeUnitIndex - A number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to `0`.\n         */\n        containing(codeUnitIndex?: number): SegmentData;\n\n        /** Returns an iterator to iterate over the segments. */\n        [Symbol.iterator](): IterableIterator<SegmentData>;\n    }\n\n    interface SegmentData {\n        /** A string containing the segment extracted from the original input string. */\n        segment: string;\n        /** The code unit index in the original input string at which the segment begins. */\n        index: number;\n        /** The complete input string that was segmented. */\n        input: string;\n        /**\n         * A boolean value only if granularity is \"word\"; otherwise, undefined.\n         * If granularity is \"word\", then isWordLike is true when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, false.\n         */\n        isWordLike?: boolean;\n    }\n\n    const Segmenter: {\n        prototype: Segmenter;\n\n        /**\n         * Creates a new `Intl.Segmenter` object.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter#parameters)\n         *  with some or all options of `SegmenterOptions`.\n         *\n         * @returns [Intl.Segmenter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segments) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter).\n         */\n        new(locales?: BCP47LanguageTag | BCP47LanguageTag[], options?: SegmenterOptions): Segmenter;\n\n        /**\n         * Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf#parameters).\n         *  with some or all possible options.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf)\n         */\n        supportedLocalesOf(locales: BCP47LanguageTag | BCP47LanguageTag[], options?: Pick<SegmenterOptions, \"localeMatcher\">): BCP47LanguageTag[];\n    };\n}\n","lib.es2022.object.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface ObjectConstructor {\n    /**\n     * Determines whether an object has a property with the specified name.\n     * @param o An object.\n     * @param v A property name.\n     */\n    hasOwn(o: object, v: PropertyKey): boolean;\n}\n","lib.es2022.sharedmemory.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface Atomics {\n    /**\n     * A non-blocking, asynchronous version of wait which is usable on the main thread.\n     * Waits asynchronously on a shared memory location and returns a Promise\n     */\n    waitAsync(typedArray: BigInt64Array | Int32Array, index: number, value: bigint, timeout?: number): { async: false, value: \"ok\" | \"not-equal\" | \"timed-out\" } | { async: true, value: Promise<\"ok\" | \"not-equal\" | \"timed-out\"> };\n}\n","lib.es2022.string.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ninterface String {\n    /**\n     * Returns a new String consisting of the single UTF-16 code unit located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): string | undefined;\n}\n","lib.es5.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/////////////////////////////\n/// ECMAScript APIs\n/////////////////////////////\n\ndeclare var NaN: number;\ndeclare var Infinity: number;\n\n/**\n * Evaluates JavaScript code and executes it.\n * @param x A String value that contains valid JavaScript code.\n */\ndeclare function eval(x: string): any;\n\n/**\n * Converts a string to an integer.\n * @param string A string to convert into a number.\n * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n * All other strings are considered decimal.\n */\ndeclare function parseInt(string: string, radix?: number): number;\n\n/**\n * Converts a string to a floating-point number.\n * @param string A string that contains a floating-point number.\n */\ndeclare function parseFloat(string: string): number;\n\n/**\n * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\n * @param number A numeric value.\n */\ndeclare function isNaN(number: number): boolean;\n\n/**\n * Determines whether a supplied number is finite.\n * @param number Any numeric value.\n */\ndeclare function isFinite(number: number): boolean;\n\n/**\n * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\n * @param encodedURI A value representing an encoded URI.\n */\ndeclare function decodeURI(encodedURI: string): string;\n\n/**\n * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n * @param encodedURIComponent A value representing an encoded URI component.\n */\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\n/**\n * Encodes a text string as a valid Uniform Resource Identifier (URI)\n * @param uri A value representing an unencoded URI.\n */\ndeclare function encodeURI(uri: string): string;\n\n/**\n * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\n * @param uriComponent A value representing an unencoded URI component.\n */\ndeclare function encodeURIComponent(uriComponent: string | number | boolean): string;\n\n/**\n * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function escape(string: string): string;\n\n/**\n * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function unescape(string: string): string;\n\ninterface Symbol {\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): symbol;\n}\n\ndeclare type PropertyKey = string | number | symbol;\n\ninterface PropertyDescriptor {\n    configurable?: boolean;\n    enumerable?: boolean;\n    value?: any;\n    writable?: boolean;\n    get?(): any;\n    set?(v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n    [key: PropertyKey]: PropertyDescriptor;\n}\n\ninterface Object {\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\n    constructor: Function;\n\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns a date converted to a string using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    /**\n     * Determines whether an object has a property with the specified name.\n     * @param v A property name.\n     */\n    hasOwnProperty(v: PropertyKey): boolean;\n\n    /**\n     * Determines whether an object exists in another object's prototype chain.\n     * @param v Another object whose prototype chain is to be checked.\n     */\n    isPrototypeOf(v: Object): boolean;\n\n    /**\n     * Determines whether a specified property is enumerable.\n     * @param v A property name.\n     */\n    propertyIsEnumerable(v: PropertyKey): boolean;\n}\n\ninterface ObjectConstructor {\n    new(value?: any): Object;\n    (): any;\n    (value: any): any;\n\n    /** A reference to the prototype for a class of objects. */\n    readonly prototype: Object;\n\n    /**\n     * Returns the prototype of an object.\n     * @param o The object that references the prototype.\n     */\n    getPrototypeOf(o: any): any;\n\n    /**\n     * Gets the own property descriptor of the specified object.\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\n     * @param o Object that contains the property.\n     * @param p Name of the property.\n     */\n    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;\n\n    /**\n     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n     * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\n     * @param o Object that contains the own properties.\n     */\n    getOwnPropertyNames(o: any): string[];\n\n    /**\n     * Creates an object that has the specified prototype or that has null prototype.\n     * @param o Object to use as a prototype. May be null.\n     */\n    create(o: object | null): any;\n\n    /**\n     * Creates an object that has the specified prototype, and that optionally contains specified properties.\n     * @param o Object to use as a prototype. May be null\n     * @param properties JavaScript object that contains one or more property descriptors.\n     */\n    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\n\n    /**\n     * Adds a property to an object, or modifies attributes of an existing property.\n     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\n     * @param p The property name.\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n     */\n    defineProperty<T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): T;\n\n    /**\n     * Adds one or more properties to an object, and/or modifies attributes of existing properties.\n     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\n     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\n     */\n    defineProperties<T>(o: T, properties: PropertyDescriptorMap & ThisType<any>): T;\n\n    /**\n     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    seal<T>(o: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param a Object on which to lock the attributes.\n     */\n    freeze<T>(a: T[]): readonly T[];\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param f Object on which to lock the attributes.\n     */\n    freeze<T extends Function>(f: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T extends {[idx: string]: U | null | undefined | object}, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the addition of new properties to an object.\n     * @param o Object to make non-extensible.\n     */\n    preventExtensions<T>(o: T): T;\n\n    /**\n     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isSealed(o: any): boolean;\n\n    /**\n     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isFrozen(o: any): boolean;\n\n    /**\n     * Returns a value that indicates whether new properties can be added to an object.\n     * @param o Object to test.\n     */\n    isExtensible(o: any): boolean;\n\n    /**\n     * Returns the names of the enumerable string properties and methods of an object.\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    keys(o: object): string[];\n}\n\n/**\n * Provides functionality common to all JavaScript objects.\n */\ndeclare var Object: ObjectConstructor;\n\n/**\n * Creates a new function.\n */\ninterface Function {\n    /**\n     * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n     * @param thisArg The object to be used as the this object.\n     * @param argArray A set of arguments to be passed to the function.\n     */\n    apply(this: Function, thisArg: any, argArray?: any): any;\n\n    /**\n     * Calls a method of an object, substituting another object for the current object.\n     * @param thisArg The object to be used as the current object.\n     * @param argArray A list of arguments to be passed to the method.\n     */\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg An object to which the this keyword can refer inside the new function.\n     * @param argArray A list of arguments to be passed to the new function.\n     */\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\n\n    /** Returns a string representation of a function. */\n    toString(): string;\n\n    prototype: any;\n    readonly length: number;\n\n    // Non-standard extensions\n    arguments: any;\n    caller: Function;\n}\n\ninterface FunctionConstructor {\n    /**\n     * Creates a new function.\n     * @param args A list of arguments the function accepts.\n     */\n    new(...args: string[]): Function;\n    (...args: string[]): Function;\n    readonly prototype: Function;\n}\n\ndeclare var Function: FunctionConstructor;\n\n/**\n * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.\n */\ntype ThisParameterType<T> = T extends (this: infer U, ...args: never) => any ? U : unknown;\n\n/**\n * Removes the 'this' parameter from a function type.\n */\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\n\ninterface CallableFunction extends Function {\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args An array of argument values to be passed to the function.\n     */\n    apply<T, R>(this: (this: T) => R, thisArg: T): R;\n    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;\n\n    /**\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args Argument values to be passed to the function.\n     */\n    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     * @param args Arguments to bind to the parameters of the function.\n     */\n    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\n    bind<T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R;\n    bind<T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) => R;\n    bind<T, A0, A1, A2, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2): (...args: A) => R;\n    bind<T, A0, A1, A2, A3, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3): (...args: A) => R;\n    bind<T, AX, R>(this: (this: T, ...args: AX[]) => R, thisArg: T, ...args: AX[]): (...args: AX[]) => R;\n}\n\ninterface NewableFunction extends Function {\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args An array of argument values to be passed to the function.\n     */\n    apply<T>(this: new () => T, thisArg: T): void;\n    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;\n\n    /**\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args Argument values to be passed to the function.\n     */\n    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     * @param args Arguments to bind to the parameters of the function.\n     */\n    bind<T>(this: T, thisArg: any): T;\n    bind<A0, A extends any[], R>(this: new (arg0: A0, ...args: A) => R, thisArg: any, arg0: A0): new (...args: A) => R;\n    bind<A0, A1, A extends any[], R>(this: new (arg0: A0, arg1: A1, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1): new (...args: A) => R;\n    bind<A0, A1, A2, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2): new (...args: A) => R;\n    bind<A0, A1, A2, A3, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2, arg3: A3): new (...args: A) => R;\n    bind<AX, R>(this: new (...args: AX[]) => R, thisArg: any, ...args: AX[]): new (...args: AX[]) => R;\n}\n\ninterface IArguments {\n    [index: number]: any;\n    length: number;\n    callee: Function;\n}\n\ninterface String {\n    /** Returns a string representation of a string. */\n    toString(): string;\n\n    /**\n     * Returns the character at the specified index.\n     * @param pos The zero-based index of the desired character.\n     */\n    charAt(pos: number): string;\n\n    /**\n     * Returns the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    charCodeAt(index: number): number;\n\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param strings The strings to append to the end of the string.\n     */\n    concat(...strings: string[]): string;\n\n    /**\n     * Returns the position of the first occurrence of a substring.\n     * @param searchString The substring to search for in the string\n     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\n     */\n    indexOf(searchString: string, position?: number): number;\n\n    /**\n     * Returns the last occurrence of a substring in the string.\n     * @param searchString The substring to search for.\n     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\n     */\n    lastIndexOf(searchString: string, position?: number): number;\n\n    /**\n     * Determines whether two strings are equivalent in the current locale.\n     * @param that String to compare to target string\n     */\n    localeCompare(that: string): number;\n\n    /**\n     * Matches a string with a regular expression, and returns an array containing the results of that search.\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n     */\n    match(regexp: string | RegExp): RegExpMatchArray | null;\n\n    /**\n     * Replaces text in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n     */\n    replace(searchValue: string | RegExp, replaceValue: string): string;\n\n    /**\n     * Replaces text in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replacer A function that returns the replacement text.\n     */\n    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n     * Finds the first substring match in a regular expression search.\n     * @param regexp The regular expression pattern and applicable flags.\n     */\n    search(regexp: string | RegExp): number;\n\n    /**\n     * Returns a section of a string.\n     * @param start The index to the beginning of the specified portion of stringObj.\n     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\n     * If this value is not specified, the substring continues to the end of stringObj.\n     */\n    slice(start?: number, end?: number): string;\n\n    /**\n     * Split a string into substrings using the specified separator and return them as an array.\n     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n     * @param limit A value used to limit the number of elements returned in the array.\n     */\n    split(separator: string | RegExp, limit?: number): string[];\n\n    /**\n     * Returns the substring at the specified location within a String object.\n     * @param start The zero-based index number indicating the beginning of the substring.\n     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n     * If end is omitted, the characters from start through the end of the original string are returned.\n     */\n    substring(start: number, end?: number): string;\n\n    /** Converts all the alphabetic characters in a string to lowercase. */\n    toLowerCase(): string;\n\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\n    toLocaleLowerCase(locales?: string | string[]): string;\n\n    /** Converts all the alphabetic characters in a string to uppercase. */\n    toUpperCase(): string;\n\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\n    toLocaleUpperCase(locales?: string | string[]): string;\n\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\n    trim(): string;\n\n    /** Returns the length of a String object. */\n    readonly length: number;\n\n    // IE extensions\n    /**\n     * Gets a substring beginning at the specified location and having the specified length.\n     * @deprecated A legacy feature for browser compatibility\n     * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n     * @param length The number of characters to include in the returned substring.\n     */\n    substr(from: number, length?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): string;\n\n    readonly [index: number]: string;\n}\n\ninterface StringConstructor {\n    new(value?: any): String;\n    (value?: any): string;\n    readonly prototype: String;\n    fromCharCode(...codes: number[]): string;\n}\n\n/**\n * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\n */\ndeclare var String: StringConstructor;\n\ninterface Boolean {\n    /** Returns the primitive value of the specified object. */\n    valueOf(): boolean;\n}\n\ninterface BooleanConstructor {\n    new(value?: any): Boolean;\n    <T>(value?: T): boolean;\n    readonly prototype: Boolean;\n}\n\ndeclare var Boolean: BooleanConstructor;\n\ninterface Number {\n    /**\n     * Returns a string representation of an object.\n     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns a string representing a number in fixed-point notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toFixed(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented in exponential notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toExponential(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\n     */\n    toPrecision(precision?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): number;\n}\n\ninterface NumberConstructor {\n    new(value?: any): Number;\n    (value?: any): number;\n    readonly prototype: Number;\n\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n    readonly MAX_VALUE: number;\n\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n    readonly MIN_VALUE: number;\n\n    /**\n     * A value that is not a number.\n     * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n     */\n    readonly NaN: number;\n\n    /**\n     * A value that is less than the largest negative number that can be represented in JavaScript.\n     * JavaScript displays NEGATIVE_INFINITY values as -infinity.\n     */\n    readonly NEGATIVE_INFINITY: number;\n\n    /**\n     * A value greater than the largest number that can be represented in JavaScript.\n     * JavaScript displays POSITIVE_INFINITY values as infinity.\n     */\n    readonly POSITIVE_INFINITY: number;\n}\n\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare var Number: NumberConstructor;\n\ninterface TemplateStringsArray extends ReadonlyArray<string> {\n    readonly raw: readonly string[];\n}\n\n/**\n * The type of `import.meta`.\n *\n * If you need to declare that a given property exists on `import.meta`,\n * this type may be augmented via interface merging.\n */\ninterface ImportMeta {\n}\n\n/**\n * The type for the optional second argument to `import()`.\n *\n * If your host environment supports additional options, this type may be\n * augmented via interface merging.\n */\ninterface ImportCallOptions {\n    assert?: ImportAssertions;\n}\n\n/**\n * The type for the `assert` property of the optional second argument to `import()`.\n */\ninterface ImportAssertions {\n    [key: string]: string;\n}\n\ninterface Math {\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\n    readonly E: number;\n    /** The natural logarithm of 10. */\n    readonly LN10: number;\n    /** The natural logarithm of 2. */\n    readonly LN2: number;\n    /** The base-2 logarithm of e. */\n    readonly LOG2E: number;\n    /** The base-10 logarithm of e. */\n    readonly LOG10E: number;\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\n    readonly PI: number;\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n    readonly SQRT1_2: number;\n    /** The square root of 2. */\n    readonly SQRT2: number;\n    /**\n     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n     * For example, the absolute value of -5 is the same as the absolute value of 5.\n     * @param x A numeric expression for which the absolute value is needed.\n     */\n    abs(x: number): number;\n    /**\n     * Returns the arc cosine (or inverse cosine) of a number.\n     * @param x A numeric expression.\n     */\n    acos(x: number): number;\n    /**\n     * Returns the arcsine of a number.\n     * @param x A numeric expression.\n     */\n    asin(x: number): number;\n    /**\n     * Returns the arctangent of a number.\n     * @param x A numeric expression for which the arctangent is needed.\n     */\n    atan(x: number): number;\n    /**\n     * Returns the angle (in radians) from the X axis to a point.\n     * @param y A numeric expression representing the cartesian y-coordinate.\n     * @param x A numeric expression representing the cartesian x-coordinate.\n     */\n    atan2(y: number, x: number): number;\n    /**\n     * Returns the smallest integer greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    ceil(x: number): number;\n    /**\n     * Returns the cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cos(x: number): number;\n    /**\n     * Returns e (the base of natural logarithms) raised to a power.\n     * @param x A numeric expression representing the power of e.\n     */\n    exp(x: number): number;\n    /**\n     * Returns the greatest integer less than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    floor(x: number): number;\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A numeric expression.\n     */\n    log(x: number): number;\n    /**\n     * Returns the larger of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    max(...values: number[]): number;\n    /**\n     * Returns the smaller of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    min(...values: number[]): number;\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    pow(x: number, y: number): number;\n    /** Returns a pseudorandom number between 0 and 1. */\n    random(): number;\n    /**\n     * Returns a supplied numeric expression rounded to the nearest integer.\n     * @param x The value to be rounded to the nearest integer.\n     */\n    round(x: number): number;\n    /**\n     * Returns the sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sin(x: number): number;\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    sqrt(x: number): number;\n    /**\n     * Returns the tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tan(x: number): number;\n}\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare var Math: Math;\n\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\n    toString(): string;\n    /** Returns a date as a string value. */\n    toDateString(): string;\n    /** Returns a time as a string value. */\n    toTimeString(): string;\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\n    toLocaleString(): string;\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\n    toLocaleDateString(): string;\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\n    toLocaleTimeString(): string;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    valueOf(): number;\n    /** Gets the time value in milliseconds. */\n    getTime(): number;\n    /** Gets the year, using local time. */\n    getFullYear(): number;\n    /** Gets the year using Universal Coordinated Time (UTC). */\n    getUTCFullYear(): number;\n    /** Gets the month, using local time. */\n    getMonth(): number;\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMonth(): number;\n    /** Gets the day-of-the-month, using local time. */\n    getDate(): number;\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\n    getUTCDate(): number;\n    /** Gets the day of the week, using local time. */\n    getDay(): number;\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\n    getUTCDay(): number;\n    /** Gets the hours in a date, using local time. */\n    getHours(): number;\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\n    getUTCHours(): number;\n    /** Gets the minutes of a Date object, using local time. */\n    getMinutes(): number;\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMinutes(): number;\n    /** Gets the seconds of a Date object, using local time. */\n    getSeconds(): number;\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCSeconds(): number;\n    /** Gets the milliseconds of a Date, using local time. */\n    getMilliseconds(): number;\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMilliseconds(): number;\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\n    getTimezoneOffset(): number;\n    /**\n     * Sets the date and time value in the Date object.\n     * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\n     */\n    setTime(time: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using local time.\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setMilliseconds(ms: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setUTCMilliseconds(ms: number): number;\n\n    /**\n     * Sets the seconds value in the Date object using local time.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using local time.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hour value in the Date object using local time.\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the numeric day-of-the-month value of the Date object using local time.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setDate(date: number): number;\n    /**\n     * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCDate(date: number): number;\n    /**\n     * Sets the month value in the Date object using local time.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n     */\n    setMonth(month: number, date?: number): number;\n    /**\n     * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n     */\n    setUTCMonth(month: number, date?: number): number;\n    /**\n     * Sets the year of the Date object using local time.\n     * @param year A numeric value for the year.\n     * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n     * @param date A numeric value equal for the day of the month.\n     */\n    setFullYear(year: number, month?: number, date?: number): number;\n    /**\n     * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n     * @param year A numeric value equal to the year.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCFullYear(year: number, month?: number, date?: number): number;\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\n    toUTCString(): string;\n    /** Returns a date as a string value in ISO format. */\n    toISOString(): string;\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\n    toJSON(key?: any): string;\n}\n\ninterface DateConstructor {\n    new(): Date;\n    new(value: number | string): Date;\n    new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n    (): string;\n    readonly prototype: Date;\n    /**\n     * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n     * @param s A date string\n     */\n    parse(s: string): number;\n    /**\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param month The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n    now(): number;\n}\n\ndeclare var Date: DateConstructor;\n\ninterface RegExpMatchArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index?: number;\n    /**\n     * A copy of the search string.\n     */\n    input?: string;\n}\n\ninterface RegExpExecArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index: number;\n    /**\n     * A copy of the search string.\n     */\n    input: string;\n}\n\ninterface RegExp {\n    /**\n     * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n     * @param string The String object or string literal on which to perform the search.\n     */\n    exec(string: string): RegExpExecArray | null;\n\n    /**\n     * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n     * @param string String on which to perform the search.\n     */\n    test(string: string): boolean;\n\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\n    readonly source: string;\n\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n    readonly global: boolean;\n\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\n    readonly ignoreCase: boolean;\n\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\n    readonly multiline: boolean;\n\n    lastIndex: number;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    compile(pattern: string, flags?: string): this;\n}\n\ninterface RegExpConstructor {\n    new(pattern: RegExp | string): RegExp;\n    new(pattern: string, flags?: string): RegExp;\n    (pattern: RegExp | string): RegExp;\n    (pattern: string, flags?: string): RegExp;\n    readonly prototype: RegExp;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    $1: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $2: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $3: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $4: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $5: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $6: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $7: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $8: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $9: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    input: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    $_: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    lastMatch: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$&\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    lastParen: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$+\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    leftContext: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$`\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    rightContext: string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$'\": string;\n}\n\ndeclare var RegExp: RegExpConstructor;\n\ninterface Error {\n    name: string;\n    message: string;\n    stack?: string;\n}\n\ninterface ErrorConstructor {\n    new(message?: string): Error;\n    (message?: string): Error;\n    readonly prototype: Error;\n}\n\ndeclare var Error: ErrorConstructor;\n\ninterface EvalError extends Error {\n}\n\ninterface EvalErrorConstructor extends ErrorConstructor {\n    new(message?: string): EvalError;\n    (message?: string): EvalError;\n    readonly prototype: EvalError;\n}\n\ndeclare var EvalError: EvalErrorConstructor;\n\ninterface RangeError extends Error {\n}\n\ninterface RangeErrorConstructor extends ErrorConstructor {\n    new(message?: string): RangeError;\n    (message?: string): RangeError;\n    readonly prototype: RangeError;\n}\n\ndeclare var RangeError: RangeErrorConstructor;\n\ninterface ReferenceError extends Error {\n}\n\ninterface ReferenceErrorConstructor extends ErrorConstructor {\n    new(message?: string): ReferenceError;\n    (message?: string): ReferenceError;\n    readonly prototype: ReferenceError;\n}\n\ndeclare var ReferenceError: ReferenceErrorConstructor;\n\ninterface SyntaxError extends Error {\n}\n\ninterface SyntaxErrorConstructor extends ErrorConstructor {\n    new(message?: string): SyntaxError;\n    (message?: string): SyntaxError;\n    readonly prototype: SyntaxError;\n}\n\ndeclare var SyntaxError: SyntaxErrorConstructor;\n\ninterface TypeError extends Error {\n}\n\ninterface TypeErrorConstructor extends ErrorConstructor {\n    new(message?: string): TypeError;\n    (message?: string): TypeError;\n    readonly prototype: TypeError;\n}\n\ndeclare var TypeError: TypeErrorConstructor;\n\ninterface URIError extends Error {\n}\n\ninterface URIErrorConstructor extends ErrorConstructor {\n    new(message?: string): URIError;\n    (message?: string): URIError;\n    readonly prototype: URIError;\n}\n\ndeclare var URIError: URIErrorConstructor;\n\ninterface JSON {\n    /**\n     * Converts a JavaScript Object Notation (JSON) string into an object.\n     * @param text A valid JSON string.\n     * @param reviver A function that transforms the results. This function is called for each member of the object.\n     * If a member contains nested objects, the nested objects are transformed before the parent object is.\n     */\n    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer A function that transforms the results.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\n}\n\n/**\n * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n */\ndeclare var JSON: JSON;\n\n\n/////////////////////////////\n/// ECMAScript Array API (specially handled by compiler)\n/////////////////////////////\n\ninterface ReadonlyArray<T> {\n    /**\n     * Gets the length of the array. This is a number one higher than the highest element defined in an array.\n     */\n    readonly length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): this is readonly S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: readonly T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n\n    readonly [n: number]: T;\n}\n\ninterface ConcatArray<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n    join(separator?: string): string;\n    slice(start?: number, end?: number): T[];\n}\n\ninterface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n     * For example, -2 refers to the second to last element of the array.\n     * @param start The beginning index of the specified portion of the array.\n     * If start is undefined, then the slice begins at index 0.\n     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     * If end is undefined, then the slice extends to the end of the array.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Sorts an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: T, b: T) => number): this;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount?: number): T[];\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    /**\n     * Inserts new elements at the start of an array, and returns the new length of the array.\n     * @param items Elements to insert at the start of the array.\n     */\n    unshift(...items: T[]): number;\n    /**\n     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}\n\ninterface ArrayConstructor {\n    new(arrayLength?: number): any[];\n    new <T>(arrayLength: number): T[];\n    new <T>(...items: T[]): T[];\n    (arrayLength?: number): any[];\n    <T>(arrayLength: number): T[];\n    <T>(...items: T[]): T[];\n    isArray(arg: any): arg is any[];\n    readonly prototype: any[];\n}\n\ndeclare var Array: ArrayConstructor;\n\ninterface TypedPropertyDescriptor<T> {\n    enumerable?: boolean;\n    configurable?: boolean;\n    writable?: boolean;\n    value?: T;\n    get?: () => T;\n    set?: (value: T) => void;\n}\n\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\n\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\n\ninterface PromiseLike<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\n}\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\n\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\n}\n\n/**\n * Recursively unwraps the \"awaited type\" of a type. Non-promise \"thenables\" should resolve to `never`. This emulates the behavior of `await`.\n */\ntype Awaited<T> =\n    T extends null | undefined ? T : // special case for `null | undefined` when not in `--strictNullChecks` mode\n        T extends object & { then(onfulfilled: infer F): any } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped\n            F extends ((value: infer V, ...args: any) => any) ? // if the argument to `then` is callable, extracts the first argument\n                Awaited<V> : // recursively unwrap the value\n                never : // the argument to `then` was not callable\n        T; // non-object or non-thenable\n\ninterface ArrayLike<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n}\n\n/**\n * Make all properties in T optional\n */\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n/**\n * Make all properties in T required\n */\ntype Required<T> = {\n    [P in keyof T]-?: T[P];\n};\n\n/**\n * Make all properties in T readonly\n */\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * From T, pick a set of properties whose keys are in the union K\n */\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n/**\n * Construct a type with a set of properties K of type T\n */\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n/**\n * Exclude from T those types that are assignable to U\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\n/**\n * Extract from T those types that are assignable to U\n */\ntype Extract<T, U> = T extends U ? T : never;\n\n/**\n * Construct a type with the properties of T except for those in type K.\n */\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Exclude null and undefined from T\n */\ntype NonNullable<T> = T & {};\n\n/**\n * Obtain the parameters of a function type in a tuple\n */\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the parameters of a constructor function type in a tuple\n */\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the return type of a function type\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\n/**\n * Obtain the return type of a constructor function type\n */\ntype InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;\n\n/**\n * Convert string literal type to uppercase\n */\ntype Uppercase<S extends string> = intrinsic;\n\n/**\n * Convert string literal type to lowercase\n */\ntype Lowercase<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to uppercase\n */\ntype Capitalize<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to lowercase\n */\ntype Uncapitalize<S extends string> = intrinsic;\n\n/**\n * Marker for contextual 'this' type\n */\ninterface ThisType<T> { }\n\n/**\n * Represents a raw buffer of binary data, which is used to store data for the\n * different typed arrays. ArrayBuffers cannot be read from or written to directly,\n * but can be passed to a typed array or DataView Object to interpret the raw\n * buffer as needed.\n */\ninterface ArrayBuffer {\n    /**\n     * Read-only. The length of the ArrayBuffer (in bytes).\n     */\n    readonly byteLength: number;\n\n    /**\n     * Returns a section of an ArrayBuffer.\n     */\n    slice(begin: number, end?: number): ArrayBuffer;\n}\n\n/**\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\n */\ninterface ArrayBufferTypes {\n    ArrayBuffer: ArrayBuffer;\n}\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\n\ninterface ArrayBufferConstructor {\n    readonly prototype: ArrayBuffer;\n    new(byteLength: number): ArrayBuffer;\n    isView(arg: any): arg is ArrayBufferView;\n}\ndeclare var ArrayBuffer: ArrayBufferConstructor;\n\ninterface ArrayBufferView {\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    byteOffset: number;\n}\n\ninterface DataView {\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    /**\n     * Gets the Float32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Float64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Int8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getInt8(byteOffset: number): number;\n\n    /**\n     * Gets the Int16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\n    /**\n     * Gets the Int32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Uint8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getUint8(byteOffset: number): number;\n\n    /**\n     * Gets the Uint16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Uint32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Stores an Float32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Float64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Int8 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     */\n    setInt8(byteOffset: number, value: number): void;\n\n    /**\n     * Stores an Int16 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Int32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Uint8 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     */\n    setUint8(byteOffset: number, value: number): void;\n\n    /**\n     * Stores an Uint16 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Uint32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\n}\n\ninterface DataViewConstructor {\n    readonly prototype: DataView;\n    new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;\n}\ndeclare var DataView: DataViewConstructor;\n\n/**\n * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\n * number of bytes could not be allocated an exception is raised.\n */\ninterface Int8Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Int8Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Int8Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int8Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Int8Array;\n\n    [index: number]: number;\n}\ninterface Int8ArrayConstructor {\n    readonly prototype: Int8Array;\n    new(length: number): Int8Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Int8Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int8Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array;\n\n\n}\ndeclare var Int8Array: Int8ArrayConstructor;\n\n/**\n * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint8Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint8Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Uint8Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint8Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint8Array;\n\n    [index: number]: number;\n}\n\ninterface Uint8ArrayConstructor {\n    readonly prototype: Uint8Array;\n    new(length: number): Uint8Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Uint8Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;\n\n}\ndeclare var Uint8Array: Uint8ArrayConstructor;\n\n/**\n * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\n * If the requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint8ClampedArray {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint8ClampedArray;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Uint8ClampedArray;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint8ClampedArray;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint8ClampedArray;\n\n    [index: number]: number;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    readonly prototype: Uint8ClampedArray;\n    new(length: number): Uint8ClampedArray;\n    new(array: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8ClampedArray;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint8ClampedArray;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint8ClampedArray;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\n\n/**\n * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Int16Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Int16Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Int16Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int16Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Int16Array;\n\n    [index: number]: number;\n}\n\ninterface Int16ArrayConstructor {\n    readonly prototype: Int16Array;\n    new(length: number): Int16Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Int16Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int16Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array;\n\n\n}\ndeclare var Int16Array: Int16ArrayConstructor;\n\n/**\n * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint16Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint16Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Uint16Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint16Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint16Array;\n\n    [index: number]: number;\n}\n\ninterface Uint16ArrayConstructor {\n    readonly prototype: Uint16Array;\n    new(length: number): Uint16Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Uint16Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint16Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array;\n\n\n}\ndeclare var Uint16Array: Uint16ArrayConstructor;\n/**\n * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Int32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Int32Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Int32Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int32Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Int32Array;\n\n    [index: number]: number;\n}\n\ninterface Int32ArrayConstructor {\n    readonly prototype: Int32Array;\n    new(length: number): Int32Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Int32Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;\n\n}\ndeclare var Int32Array: Int32ArrayConstructor;\n\n/**\n * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint32Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Uint32Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint32Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint32Array;\n\n    [index: number]: number;\n}\n\ninterface Uint32ArrayConstructor {\n    readonly prototype: Uint32Array;\n    new(length: number): Uint32Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Uint32Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;\n\n}\ndeclare var Uint32Array: Uint32ArrayConstructor;\n\n/**\n * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\n * of bytes could not be allocated an exception is raised.\n */\ninterface Float32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Float32Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Float32Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Float32Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Float32Array;\n\n    [index: number]: number;\n}\n\ninterface Float32ArrayConstructor {\n    readonly prototype: Float32Array;\n    new(length: number): Float32Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Float32Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Float32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Float32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array;\n\n\n}\ndeclare var Float32Array: Float32ArrayConstructor;\n\n/**\n * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\n * number of bytes could not be allocated an exception is raised.\n */\ninterface Float64Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Float64Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): Float64Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Float64Array;\n\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Float64Array;\n\n    [index: number]: number;\n}\n\ninterface Float64ArrayConstructor {\n    readonly prototype: Float64Array;\n    new(length: number): Float64Array;\n    new(array: ArrayLike<number> | ArrayBufferLike): Float64Array;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float64Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Float64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Float64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;\n\n}\ndeclare var Float64Array: Float64ArrayConstructor;\n\n/////////////////////////////\n/// ECMAScript Internationalization API\n/////////////////////////////\n\ndeclare namespace Intl {\n    interface CollatorOptions {\n        usage?: string | undefined;\n        localeMatcher?: string | undefined;\n        numeric?: boolean | undefined;\n        caseFirst?: string | undefined;\n        sensitivity?: string | undefined;\n        ignorePunctuation?: boolean | undefined;\n    }\n\n    interface ResolvedCollatorOptions {\n        locale: string;\n        usage: string;\n        sensitivity: string;\n        ignorePunctuation: boolean;\n        collation: string;\n        caseFirst: string;\n        numeric: boolean;\n    }\n\n    interface Collator {\n        compare(x: string, y: string): number;\n        resolvedOptions(): ResolvedCollatorOptions;\n    }\n    var Collator: {\n        new(locales?: string | string[], options?: CollatorOptions): Collator;\n        (locales?: string | string[], options?: CollatorOptions): Collator;\n        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];\n    };\n\n    interface NumberFormatOptions {\n        localeMatcher?: string | undefined;\n        style?: string | undefined;\n        currency?: string | undefined;\n        currencySign?: string | undefined;\n        useGrouping?: boolean | undefined;\n        minimumIntegerDigits?: number | undefined;\n        minimumFractionDigits?: number | undefined;\n        maximumFractionDigits?: number | undefined;\n        minimumSignificantDigits?: number | undefined;\n        maximumSignificantDigits?: number | undefined;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        locale: string;\n        numberingSystem: string;\n        style: string;\n        currency?: string;\n        minimumIntegerDigits: number;\n        minimumFractionDigits: number;\n        maximumFractionDigits: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n        useGrouping: boolean;\n    }\n\n    interface NumberFormat {\n        format(value: number): string;\n        resolvedOptions(): ResolvedNumberFormatOptions;\n    }\n    var NumberFormat: {\n        new(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\n        readonly prototype: NumberFormat;\n    };\n\n    interface DateTimeFormatOptions {\n        localeMatcher?: \"best fit\" | \"lookup\" | undefined;\n        weekday?: \"long\" | \"short\" | \"narrow\" | undefined;\n        era?: \"long\" | \"short\" | \"narrow\" | undefined;\n        year?: \"numeric\" | \"2-digit\" | undefined;\n        month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\" | undefined;\n        day?: \"numeric\" | \"2-digit\" | undefined;\n        hour?: \"numeric\" | \"2-digit\" | undefined;\n        minute?: \"numeric\" | \"2-digit\" | undefined;\n        second?: \"numeric\" | \"2-digit\" | undefined;\n        timeZoneName?: \"short\" | \"long\" | \"shortOffset\" | \"longOffset\" | \"shortGeneric\" | \"longGeneric\" | undefined;\n        formatMatcher?: \"best fit\" | \"basic\" | undefined;\n        hour12?: boolean | undefined;\n        timeZone?: string | undefined;\n    }\n\n    interface ResolvedDateTimeFormatOptions {\n        locale: string;\n        calendar: string;\n        numberingSystem: string;\n        timeZone: string;\n        hour12?: boolean;\n        weekday?: string;\n        era?: string;\n        year?: string;\n        month?: string;\n        day?: string;\n        hour?: string;\n        minute?: string;\n        second?: string;\n        timeZoneName?: string;\n    }\n\n    interface DateTimeFormat {\n        format(date?: Date | number): string;\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\n    }\n    var DateTimeFormat: {\n        new(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\n        readonly prototype: DateTimeFormat;\n    };\n}\n\ninterface String {\n    /**\n     * Determines whether two strings are equivalent in the current or specified locale.\n     * @param that String to compare to target string\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\n     */\n    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\n}\n\ninterface Number {\n    /**\n     * Converts a number to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Date {\n    /**\n     * Converts a date and time to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n    /**\n     * Converts a date to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a time to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n}\n","lib.es6.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2015\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n","lib.esnext.array.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n/// <reference no-default-lib=\"true\"/>\n\ninterface Array<T> {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast<S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\n  findLast(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\n\n  /**\n  * Returns the index of the last element in the array where predicate is true, and -1\n  * otherwise.\n  * @param predicate find calls predicate once for each element of the array, in ascending\n  * order, until it finds one where predicate returns true. If such an element is found,\n  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n  * @param thisArg If provided, it will be used as the this value for each invocation of\n  * predicate. If it is not provided, undefined is used instead.\n  */\n   findLastIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): T[];\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: T, b: T) => number): T[];\n\n  /**\n   * Copies and elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n   * @param start The zero-based location in the array from which to start removing elements.\n   * @param deleteCount The number of elements to remove.\n   * @returns An array containing the elements that were deleted.\n   */\n  toSpliced(start: number, deleteCount?: number): T[];\n  /**\n   * Copies and removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n   * @param start The zero-based location in the array from which to start removing elements.\n   * @param deleteCount The number of elements to remove.\n   * @param items Elements to insert into the array in place of the deleted elements.\n   * @returns An array containing the elements that were deleted.\n   */\n  toSpliced<F>(start: number, deleteCount: number, ...items: F[]): (F | T)[];\n\n  /**\n   * Copies and replaces the element at the given index with the provided value.\n   * @param index The zero-based location in the array for which to replace an element.\n   * @param value Element to insert into the array in place of the replaced element.\n   */\n  with<F>(index: number, value: F): (F | T)[];\n }\n\ninterface ReadonlyArray<T> {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast<S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\n  findLast(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\n\n   /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLastIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): T[];\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: T, b: T) => number): T[];\n\n  /**\n   * Copies and elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n   * @param start The zero-based location in the array from which to start removing elements.\n   * @param deleteCount The number of elements to remove.\n   * @returns An array containing the elements that were deleted.\n   */\n  toSpliced(start: number, deleteCount?: number): T[];\n  /**\n   * Copies and removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n   * @param start The zero-based location in the array from which to start removing elements.\n   * @param deleteCount The number of elements to remove.\n   * @param items Elements to insert into the array in place of the deleted elements.\n   * @returns An array containing the elements that were deleted.\n   */\n  toSpliced<F>(start: number, deleteCount: number, ...items: F[]): (F | T)[];\n\n  /**\n   * Copies and replaces the element at the given index with the provided value.\n   * @param index The zero-based location in the array for which to replace an element.\n   * @param value Element to insert into the array in place of the replaced element.\n   */\n  with<F>(index: number, value: F): (F | T)[];\n}\n\ninterface Int8Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLastIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Int8Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Int8Array;\n\n  with(index: number, value: number): Int8Array;\n}\n\ninterface Uint8Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLastIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Uint8Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;\n\n  with(index: number, value: number): Uint8Array;\n}\n\ninterface Uint8ClampedArray {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Uint8ClampedArray;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Uint8ClampedArray;\n\n  with(index: number, value: number): Uint8ClampedArray;\n}\n\n\ninterface Int16Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;\n\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Int16Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Int16Array;\n\n  with(index: number, value: number): Int16Array;\n}\n\ninterface Uint16Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;\n\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Uint16Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Uint16Array;\n\n  with(index: number, value: number): Uint16Array;\n}\n\ninterface Int32Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Int32Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Int32Array;\n\n  with(index: number, value: number): Int32Array;\n}\n\ninterface Uint32Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Uint32Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Uint32Array;\n\n  with(index: number, value: number): Uint32Array;\n}\n\ninterface Float32Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Float32Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Float32Array;\n\n  with(index: number, value: number): Float32Array;\n}\n\ninterface Float64Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): Float64Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: number, b: number) => number): Float64Array;\n\n  with(index: number, value: number): Float64Array;\n}\n\ninterface BigInt64Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: bigint, index: number, obj: BigInt64Array) => boolean, thisArg?: any): bigint | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: bigint, index: number, obj: BigInt64Array) => boolean, thisArg?: any): bigint;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): BigInt64Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: bigint, b: bigint) => number | bigint): BigInt64Array;\n\n  with(index: number, value: number): BigInt64Array;\n}\n\ninterface BigUint64Array {\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(predicate: (value: bigint, index: number, obj: BigUint64Array) => boolean, thisArg?: any): bigint | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndexLast(predicate: (value: bigint, index: number, obj: BigUint64Array) => boolean, thisArg?: any): bigint;\n\n  /** Copies and reverses the elements in an array.*/\n  toReversed(): BigUint64Array;\n\n  /**\n   * Copies and sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending order.\n   * ```ts\n   * [11,2,22,1].sort((a, b) => a - b)\n   * ```\n   */\n  toSorted(compareFn?: (a: bigint, b: bigint) => number | bigint): BigUint64Array;\n\n  with(index: number, value: number): BigUint64Array;\n}\n","lib.esnext.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"es2022\" />\n/// <reference lib=\"esnext.array\" />\n/// <reference lib=\"esnext.intl\" />\n","lib.esnext.full.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"webworker.importscripts\" />\n/// <reference lib=\"scripthost\" />\n/// <reference lib=\"dom.iterable\" />","lib.esnext.intl.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\ndeclare namespace Intl {\n  interface NumberRangeFormatPart extends NumberFormatPart {\n    source: \"startRange\" | \"endRange\" | \"shared\"\n  }\n\n  interface NumberFormat {\n    formatRange(start: number | bigint, end: number | bigint): string;\n    formatRangeToParts(start: number | bigint, end: number | bigint): NumberRangeFormatPart[];\n  }\n}\n","lib.scripthost.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n\n\n/////////////////////////////\n/// Windows Script Host APIS\n/////////////////////////////\n\n\ninterface ActiveXObject {\n    new (s: string): any;\n}\ndeclare var ActiveXObject: ActiveXObject;\n\ninterface ITextWriter {\n    Write(s: string): void;\n    WriteLine(s: string): void;\n    Close(): void;\n}\n\ninterface TextStreamBase {\n    /**\n     * The column number of the current character position in an input stream.\n     */\n    Column: number;\n\n    /**\n     * The current line number in an input stream.\n     */\n    Line: number;\n\n    /**\n     * Closes a text stream.\n     * It is not necessary to close standard streams; they close automatically when the process ends. If\n     * you close a standard stream, be aware that any other pointers to that standard stream become invalid.\n     */\n    Close(): void;\n}\n\ninterface TextStreamWriter extends TextStreamBase {\n    /**\n     * Sends a string to an output stream.\n     */\n    Write(s: string): void;\n\n    /**\n     * Sends a specified number of blank lines (newline characters) to an output stream.\n     */\n    WriteBlankLines(intLines: number): void;\n\n    /**\n     * Sends a string followed by a newline character to an output stream.\n     */\n    WriteLine(s: string): void;\n}\n\ninterface TextStreamReader extends TextStreamBase {\n    /**\n     * Returns a specified number of characters from an input stream, starting at the current pointer position.\n     * Does not return until the ENTER key is pressed.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     */\n    Read(characters: number): string;\n\n    /**\n     * Returns all characters from an input stream.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     */\n    ReadAll(): string;\n\n    /**\n     * Returns an entire line from an input stream.\n     * Although this method extracts the newline character, it does not add it to the returned string.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     */\n    ReadLine(): string;\n\n    /**\n     * Skips a specified number of characters when reading from an input text stream.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     * @param characters Positive number of characters to skip forward. (Backward skipping is not supported.)\n     */\n    Skip(characters: number): void;\n\n    /**\n     * Skips the next line when reading from an input text stream.\n     * Can only be used on a stream in reading mode, not writing or appending mode.\n     */\n    SkipLine(): void;\n\n    /**\n     * Indicates whether the stream pointer position is at the end of a line.\n     */\n    AtEndOfLine: boolean;\n\n    /**\n     * Indicates whether the stream pointer position is at the end of a stream.\n     */\n    AtEndOfStream: boolean;\n}\n\ndeclare var WScript: {\n    /**\n     * Outputs text to either a message box (under WScript.exe) or the command console window followed by\n     * a newline (under CScript.exe).\n     */\n    Echo(s: any): void;\n\n    /**\n     * Exposes the write-only error output stream for the current script.\n     * Can be accessed only while using CScript.exe.\n     */\n    StdErr: TextStreamWriter;\n\n    /**\n     * Exposes the write-only output stream for the current script.\n     * Can be accessed only while using CScript.exe.\n     */\n    StdOut: TextStreamWriter;\n    Arguments: { length: number; Item(n: number): string; };\n\n    /**\n     *  The full path of the currently running script.\n     */\n    ScriptFullName: string;\n\n    /**\n     * Forces the script to stop immediately, with an optional exit code.\n     */\n    Quit(exitCode?: number): number;\n\n    /**\n     * The Windows Script Host build version number.\n     */\n    BuildVersion: number;\n\n    /**\n     * Fully qualified path of the host executable.\n     */\n    FullName: string;\n\n    /**\n     * Gets/sets the script mode - interactive(true) or batch(false).\n     */\n    Interactive: boolean;\n\n    /**\n     * The name of the host executable (WScript.exe or CScript.exe).\n     */\n    Name: string;\n\n    /**\n     * Path of the directory containing the host executable.\n     */\n    Path: string;\n\n    /**\n     * The filename of the currently running script.\n     */\n    ScriptName: string;\n\n    /**\n     * Exposes the read-only input stream for the current script.\n     * Can be accessed only while using CScript.exe.\n     */\n    StdIn: TextStreamReader;\n\n    /**\n     * Windows Script Host version\n     */\n    Version: string;\n\n    /**\n     * Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.\n     */\n    ConnectObject(objEventSource: any, strPrefix: string): void;\n\n    /**\n     * Creates a COM object.\n     * @param strProgiID\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\n     */\n    CreateObject(strProgID: string, strPrefix?: string): any;\n\n    /**\n     * Disconnects a COM object from its event sources.\n     */\n    DisconnectObject(obj: any): void;\n\n    /**\n     * Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.\n     * @param strPathname Fully qualified path to the file containing the object persisted to disk.\n     *                       For objects in memory, pass a zero-length string.\n     * @param strProgID\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\n     */\n    GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any;\n\n    /**\n     * Suspends script execution for a specified length of time, then continues execution.\n     * @param intTime Interval (in milliseconds) to suspend script execution.\n     */\n    Sleep(intTime: number): void;\n};\n\n/**\n * WSH is an alias for WScript under Windows Script Host\n */\ndeclare var WSH: typeof WScript;\n\n/**\n * Represents an Automation SAFEARRAY\n */\ndeclare class SafeArray<T = any> {\n    private constructor();\n    private SafeArray_typekey: SafeArray<T>;\n}\n\n/**\n * Allows enumerating over a COM collection, which may not have indexed item access.\n */\ninterface Enumerator<T = any> {\n    /**\n     * Returns true if the current item is the last one in the collection, or the collection is empty,\n     * or the current item is undefined.\n     */\n    atEnd(): boolean;\n\n    /**\n     * Returns the current item in the collection\n     */\n    item(): T;\n\n    /**\n     * Resets the current item in the collection to the first item. If there are no items in the collection,\n     * the current item is set to undefined.\n     */\n    moveFirst(): void;\n\n    /**\n     * Moves the current item to the next item in the collection. If the enumerator is at the end of\n     * the collection or the collection is empty, the current item is set to undefined.\n     */\n    moveNext(): void;\n}\n\ninterface EnumeratorConstructor {\n    new <T = any>(safearray: SafeArray<T>): Enumerator<T>;\n    new <T = any>(collection: { Item(index: any): T }): Enumerator<T>;\n    new <T = any>(collection: any): Enumerator<T>;\n}\n\ndeclare var Enumerator: EnumeratorConstructor;\n\n/**\n * Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions.\n */\ninterface VBArray<T = any> {\n    /**\n     * Returns the number of dimensions (1-based).\n     */\n    dimensions(): number;\n\n    /**\n     * Takes an index for each dimension in the array, and returns the item at the corresponding location.\n     */\n    getItem(dimension1Index: number, ...dimensionNIndexes: number[]): T;\n\n    /**\n     * Returns the smallest available index for a given dimension.\n     * @param dimension 1-based dimension (defaults to 1)\n     */\n    lbound(dimension?: number): number;\n\n    /**\n     * Returns the largest available index for a given dimension.\n     * @param dimension 1-based dimension (defaults to 1)\n     */\n    ubound(dimension?: number): number;\n\n    /**\n     * Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions,\n     * each successive dimension is appended to the end of the array.\n     * Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]\n     */\n    toArray(): T[];\n}\n\ninterface VBArrayConstructor {\n    new <T = any>(safeArray: SafeArray<T>): VBArray<T>;\n}\n\ndeclare var VBArray: VBArrayConstructor;\n\n/**\n * Automation date (VT_DATE)\n */\ndeclare class VarDate {\n    private constructor();\n    private VarDate_typekey: VarDate;\n}\n\ninterface DateConstructor {\n    new (vd: VarDate): Date;\n}\n\ninterface Date {\n    getVarDate: () => VarDate;\n}\n","lib.webworker.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/////////////////////////////\n/// Worker APIs\n/////////////////////////////\n\ninterface AddEventListenerOptions extends EventListenerOptions {\n    once?: boolean;\n    passive?: boolean;\n    signal?: AbortSignal;\n}\n\ninterface AesCbcParams extends Algorithm {\n    iv: BufferSource;\n}\n\ninterface AesCtrParams extends Algorithm {\n    counter: BufferSource;\n    length: number;\n}\n\ninterface AesDerivedKeyParams extends Algorithm {\n    length: number;\n}\n\ninterface AesGcmParams extends Algorithm {\n    additionalData?: BufferSource;\n    iv: BufferSource;\n    tagLength?: number;\n}\n\ninterface AesKeyAlgorithm extends KeyAlgorithm {\n    length: number;\n}\n\ninterface AesKeyGenParams extends Algorithm {\n    length: number;\n}\n\ninterface Algorithm {\n    name: string;\n}\n\ninterface AudioConfiguration {\n    bitrate?: number;\n    channels?: string;\n    contentType: string;\n    samplerate?: number;\n    spatialRendering?: boolean;\n}\n\ninterface BlobPropertyBag {\n    endings?: EndingType;\n    type?: string;\n}\n\ninterface CacheQueryOptions {\n    ignoreMethod?: boolean;\n    ignoreSearch?: boolean;\n    ignoreVary?: boolean;\n}\n\ninterface ClientQueryOptions {\n    includeUncontrolled?: boolean;\n    type?: ClientTypes;\n}\n\ninterface CloseEventInit extends EventInit {\n    code?: number;\n    reason?: string;\n    wasClean?: boolean;\n}\n\ninterface CryptoKeyPair {\n    privateKey: CryptoKey;\n    publicKey: CryptoKey;\n}\n\ninterface CustomEventInit<T = any> extends EventInit {\n    detail?: T;\n}\n\ninterface DOMMatrix2DInit {\n    a?: number;\n    b?: number;\n    c?: number;\n    d?: number;\n    e?: number;\n    f?: number;\n    m11?: number;\n    m12?: number;\n    m21?: number;\n    m22?: number;\n    m41?: number;\n    m42?: number;\n}\n\ninterface DOMMatrixInit extends DOMMatrix2DInit {\n    is2D?: boolean;\n    m13?: number;\n    m14?: number;\n    m23?: number;\n    m24?: number;\n    m31?: number;\n    m32?: number;\n    m33?: number;\n    m34?: number;\n    m43?: number;\n    m44?: number;\n}\n\ninterface DOMPointInit {\n    w?: number;\n    x?: number;\n    y?: number;\n    z?: number;\n}\n\ninterface DOMQuadInit {\n    p1?: DOMPointInit;\n    p2?: DOMPointInit;\n    p3?: DOMPointInit;\n    p4?: DOMPointInit;\n}\n\ninterface DOMRectInit {\n    height?: number;\n    width?: number;\n    x?: number;\n    y?: number;\n}\n\ninterface EcKeyGenParams extends Algorithm {\n    namedCurve: NamedCurve;\n}\n\ninterface EcKeyImportParams extends Algorithm {\n    namedCurve: NamedCurve;\n}\n\ninterface EcdhKeyDeriveParams extends Algorithm {\n    public: CryptoKey;\n}\n\ninterface EcdsaParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n}\n\ninterface ErrorEventInit extends EventInit {\n    colno?: number;\n    error?: any;\n    filename?: string;\n    lineno?: number;\n    message?: string;\n}\n\ninterface EventInit {\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n}\n\ninterface EventListenerOptions {\n    capture?: boolean;\n}\n\ninterface EventSourceInit {\n    withCredentials?: boolean;\n}\n\ninterface ExtendableEventInit extends EventInit {\n}\n\ninterface ExtendableMessageEventInit extends ExtendableEventInit {\n    data?: any;\n    lastEventId?: string;\n    origin?: string;\n    ports?: MessagePort[];\n    source?: Client | ServiceWorker | MessagePort | null;\n}\n\ninterface FetchEventInit extends ExtendableEventInit {\n    clientId?: string;\n    handled?: Promise<undefined>;\n    preloadResponse?: Promise<any>;\n    replacesClientId?: string;\n    request: Request;\n    resultingClientId?: string;\n}\n\ninterface FilePropertyBag extends BlobPropertyBag {\n    lastModified?: number;\n}\n\ninterface FileSystemGetDirectoryOptions {\n    create?: boolean;\n}\n\ninterface FileSystemGetFileOptions {\n    create?: boolean;\n}\n\ninterface FileSystemRemoveOptions {\n    recursive?: boolean;\n}\n\ninterface FontFaceDescriptors {\n    display?: string;\n    featureSettings?: string;\n    stretch?: string;\n    style?: string;\n    unicodeRange?: string;\n    variant?: string;\n    weight?: string;\n}\n\ninterface FontFaceSetLoadEventInit extends EventInit {\n    fontfaces?: FontFace[];\n}\n\ninterface GetNotificationOptions {\n    tag?: string;\n}\n\ninterface HkdfParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    info: BufferSource;\n    salt: BufferSource;\n}\n\ninterface HmacImportParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    length?: number;\n}\n\ninterface HmacKeyGenParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    length?: number;\n}\n\ninterface IDBDatabaseInfo {\n    name?: string;\n    version?: number;\n}\n\ninterface IDBIndexParameters {\n    multiEntry?: boolean;\n    unique?: boolean;\n}\n\ninterface IDBObjectStoreParameters {\n    autoIncrement?: boolean;\n    keyPath?: string | string[] | null;\n}\n\ninterface IDBTransactionOptions {\n    durability?: IDBTransactionDurability;\n}\n\ninterface IDBVersionChangeEventInit extends EventInit {\n    newVersion?: number | null;\n    oldVersion?: number;\n}\n\ninterface ImageBitmapOptions {\n    colorSpaceConversion?: ColorSpaceConversion;\n    imageOrientation?: ImageOrientation;\n    premultiplyAlpha?: PremultiplyAlpha;\n    resizeHeight?: number;\n    resizeQuality?: ResizeQuality;\n    resizeWidth?: number;\n}\n\ninterface ImageBitmapRenderingContextSettings {\n    alpha?: boolean;\n}\n\ninterface ImageDataSettings {\n    colorSpace?: PredefinedColorSpace;\n}\n\ninterface ImportMeta {\n    url: string;\n}\n\ninterface JsonWebKey {\n    alg?: string;\n    crv?: string;\n    d?: string;\n    dp?: string;\n    dq?: string;\n    e?: string;\n    ext?: boolean;\n    k?: string;\n    key_ops?: string[];\n    kty?: string;\n    n?: string;\n    oth?: RsaOtherPrimesInfo[];\n    p?: string;\n    q?: string;\n    qi?: string;\n    use?: string;\n    x?: string;\n    y?: string;\n}\n\ninterface KeyAlgorithm {\n    name: string;\n}\n\ninterface LockInfo {\n    clientId?: string;\n    mode?: LockMode;\n    name?: string;\n}\n\ninterface LockManagerSnapshot {\n    held?: LockInfo[];\n    pending?: LockInfo[];\n}\n\ninterface LockOptions {\n    ifAvailable?: boolean;\n    mode?: LockMode;\n    signal?: AbortSignal;\n    steal?: boolean;\n}\n\ninterface MediaCapabilitiesDecodingInfo extends MediaCapabilitiesInfo {\n    configuration?: MediaDecodingConfiguration;\n}\n\ninterface MediaCapabilitiesEncodingInfo extends MediaCapabilitiesInfo {\n    configuration?: MediaEncodingConfiguration;\n}\n\ninterface MediaCapabilitiesInfo {\n    powerEfficient: boolean;\n    smooth: boolean;\n    supported: boolean;\n}\n\ninterface MediaConfiguration {\n    audio?: AudioConfiguration;\n    video?: VideoConfiguration;\n}\n\ninterface MediaDecodingConfiguration extends MediaConfiguration {\n    type: MediaDecodingType;\n}\n\ninterface MediaEncodingConfiguration extends MediaConfiguration {\n    type: MediaEncodingType;\n}\n\ninterface MessageEventInit<T = any> extends EventInit {\n    data?: T;\n    lastEventId?: string;\n    origin?: string;\n    ports?: MessagePort[];\n    source?: MessageEventSource | null;\n}\n\ninterface MultiCacheQueryOptions extends CacheQueryOptions {\n    cacheName?: string;\n}\n\ninterface NavigationPreloadState {\n    enabled?: boolean;\n    headerValue?: string;\n}\n\ninterface NotificationAction {\n    action: string;\n    icon?: string;\n    title: string;\n}\n\ninterface NotificationEventInit extends ExtendableEventInit {\n    action?: string;\n    notification: Notification;\n}\n\ninterface NotificationOptions {\n    actions?: NotificationAction[];\n    badge?: string;\n    body?: string;\n    data?: any;\n    dir?: NotificationDirection;\n    icon?: string;\n    image?: string;\n    lang?: string;\n    renotify?: boolean;\n    requireInteraction?: boolean;\n    silent?: boolean;\n    tag?: string;\n    timestamp?: EpochTimeStamp;\n    vibrate?: VibratePattern;\n}\n\ninterface Pbkdf2Params extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n    iterations: number;\n    salt: BufferSource;\n}\n\ninterface PerformanceMarkOptions {\n    detail?: any;\n    startTime?: DOMHighResTimeStamp;\n}\n\ninterface PerformanceMeasureOptions {\n    detail?: any;\n    duration?: DOMHighResTimeStamp;\n    end?: string | DOMHighResTimeStamp;\n    start?: string | DOMHighResTimeStamp;\n}\n\ninterface PerformanceObserverInit {\n    buffered?: boolean;\n    entryTypes?: string[];\n    type?: string;\n}\n\ninterface PermissionDescriptor {\n    name: PermissionName;\n}\n\ninterface ProgressEventInit extends EventInit {\n    lengthComputable?: boolean;\n    loaded?: number;\n    total?: number;\n}\n\ninterface PromiseRejectionEventInit extends EventInit {\n    promise: Promise<any>;\n    reason?: any;\n}\n\ninterface PushEventInit extends ExtendableEventInit {\n    data?: PushMessageDataInit;\n}\n\ninterface PushSubscriptionJSON {\n    endpoint?: string;\n    expirationTime?: EpochTimeStamp | null;\n    keys?: Record<string, string>;\n}\n\ninterface PushSubscriptionOptionsInit {\n    applicationServerKey?: BufferSource | string | null;\n    userVisibleOnly?: boolean;\n}\n\ninterface QueuingStrategy<T = any> {\n    highWaterMark?: number;\n    size?: QueuingStrategySize<T>;\n}\n\ninterface QueuingStrategyInit {\n    /**\n     * Creates a new ByteLengthQueuingStrategy with the provided high water mark.\n     *\n     * Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.\n     */\n    highWaterMark: number;\n}\n\ninterface RTCEncodedAudioFrameMetadata {\n    contributingSources?: number[];\n    synchronizationSource?: number;\n}\n\ninterface RTCEncodedVideoFrameMetadata {\n    contributingSources?: number[];\n    dependencies?: number[];\n    frameId?: number;\n    height?: number;\n    spatialIndex?: number;\n    synchronizationSource?: number;\n    temporalIndex?: number;\n    width?: number;\n}\n\ninterface ReadableStreamReadDoneResult {\n    done: true;\n    value?: undefined;\n}\n\ninterface ReadableStreamReadValueResult<T> {\n    done: false;\n    value: T;\n}\n\ninterface ReadableWritablePair<R = any, W = any> {\n    readable: ReadableStream<R>;\n    /**\n     * Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other { writable, readable } pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.\n     *\n     * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n     */\n    writable: WritableStream<W>;\n}\n\ninterface RegistrationOptions {\n    scope?: string;\n    type?: WorkerType;\n    updateViaCache?: ServiceWorkerUpdateViaCache;\n}\n\ninterface RequestInit {\n    /** A BodyInit object or null to set request's body. */\n    body?: BodyInit | null;\n    /** A string indicating how the request will interact with the browser's cache to set request's cache. */\n    cache?: RequestCache;\n    /** A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials. */\n    credentials?: RequestCredentials;\n    /** A Headers object, an object literal, or an array of two-item arrays to set request's headers. */\n    headers?: HeadersInit;\n    /** A cryptographic hash of the resource to be fetched by request. Sets request's integrity. */\n    integrity?: string;\n    /** A boolean to set request's keepalive. */\n    keepalive?: boolean;\n    /** A string to set request's method. */\n    method?: string;\n    /** A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode. */\n    mode?: RequestMode;\n    /** A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect. */\n    redirect?: RequestRedirect;\n    /** A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer. */\n    referrer?: string;\n    /** A referrer policy to set request's referrerPolicy. */\n    referrerPolicy?: ReferrerPolicy;\n    /** An AbortSignal to set request's signal. */\n    signal?: AbortSignal | null;\n    /** Can only be null. Used to disassociate request from any Window. */\n    window?: null;\n}\n\ninterface ResponseInit {\n    headers?: HeadersInit;\n    status?: number;\n    statusText?: string;\n}\n\ninterface RsaHashedImportParams extends Algorithm {\n    hash: HashAlgorithmIdentifier;\n}\n\ninterface RsaHashedKeyGenParams extends RsaKeyGenParams {\n    hash: HashAlgorithmIdentifier;\n}\n\ninterface RsaKeyGenParams extends Algorithm {\n    modulusLength: number;\n    publicExponent: BigInteger;\n}\n\ninterface RsaOaepParams extends Algorithm {\n    label?: BufferSource;\n}\n\ninterface RsaOtherPrimesInfo {\n    d?: string;\n    r?: string;\n    t?: string;\n}\n\ninterface RsaPssParams extends Algorithm {\n    saltLength: number;\n}\n\ninterface SecurityPolicyViolationEventInit extends EventInit {\n    blockedURI?: string;\n    columnNumber?: number;\n    disposition: SecurityPolicyViolationEventDisposition;\n    documentURI: string;\n    effectiveDirective: string;\n    lineNumber?: number;\n    originalPolicy: string;\n    referrer?: string;\n    sample?: string;\n    sourceFile?: string;\n    statusCode: number;\n    violatedDirective: string;\n}\n\ninterface StorageEstimate {\n    quota?: number;\n    usage?: number;\n}\n\ninterface StreamPipeOptions {\n    preventAbort?: boolean;\n    preventCancel?: boolean;\n    /**\n     * Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.\n     *\n     * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n     *\n     * Errors and closures of the source and destination streams propagate as follows:\n     *\n     * An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.\n     *\n     * An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.\n     *\n     * When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.\n     *\n     * If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.\n     *\n     * The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.\n     */\n    preventClose?: boolean;\n    signal?: AbortSignal;\n}\n\ninterface StructuredSerializeOptions {\n    transfer?: Transferable[];\n}\n\ninterface TextDecodeOptions {\n    stream?: boolean;\n}\n\ninterface TextDecoderOptions {\n    fatal?: boolean;\n    ignoreBOM?: boolean;\n}\n\ninterface TextEncoderEncodeIntoResult {\n    read?: number;\n    written?: number;\n}\n\ninterface Transformer<I = any, O = any> {\n    flush?: TransformerFlushCallback<O>;\n    readableType?: undefined;\n    start?: TransformerStartCallback<O>;\n    transform?: TransformerTransformCallback<I, O>;\n    writableType?: undefined;\n}\n\ninterface UnderlyingSink<W = any> {\n    abort?: UnderlyingSinkAbortCallback;\n    close?: UnderlyingSinkCloseCallback;\n    start?: UnderlyingSinkStartCallback;\n    type?: undefined;\n    write?: UnderlyingSinkWriteCallback<W>;\n}\n\ninterface UnderlyingSource<R = any> {\n    cancel?: UnderlyingSourceCancelCallback;\n    pull?: UnderlyingSourcePullCallback<R>;\n    start?: UnderlyingSourceStartCallback<R>;\n    type?: undefined;\n}\n\ninterface VideoColorSpaceInit {\n    fullRange?: boolean;\n    matrix?: VideoMatrixCoefficients;\n    primaries?: VideoColorPrimaries;\n    transfer?: VideoTransferCharacteristics;\n}\n\ninterface VideoConfiguration {\n    bitrate: number;\n    colorGamut?: ColorGamut;\n    contentType: string;\n    framerate: number;\n    hdrMetadataType?: HdrMetadataType;\n    height: number;\n    scalabilityMode?: string;\n    transferFunction?: TransferFunction;\n    width: number;\n}\n\ninterface WebGLContextAttributes {\n    alpha?: boolean;\n    antialias?: boolean;\n    depth?: boolean;\n    desynchronized?: boolean;\n    failIfMajorPerformanceCaveat?: boolean;\n    powerPreference?: WebGLPowerPreference;\n    premultipliedAlpha?: boolean;\n    preserveDrawingBuffer?: boolean;\n    stencil?: boolean;\n}\n\ninterface WebGLContextEventInit extends EventInit {\n    statusMessage?: string;\n}\n\ninterface WorkerOptions {\n    credentials?: RequestCredentials;\n    name?: string;\n    type?: WorkerType;\n}\n\n/** The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type. */\ninterface ANGLE_instanced_arrays {\n    drawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void;\n    drawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei): void;\n    vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint): void;\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: GLenum;\n}\n\n/** A controller object that allows you to abort one or more DOM requests as and when desired. */\ninterface AbortController {\n    /** Returns the AbortSignal object associated with this object. */\n    readonly signal: AbortSignal;\n    /** Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted. */\n    // abort(): AbortSignal; - To be re-added in the future\n}\n\ndeclare var AbortController: {\n    prototype: AbortController;\n    new(): AbortController;\n};\n\ninterface AbortSignalEventMap {\n    \"abort\": Event;\n}\n\n/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */\ninterface AbortSignal extends EventTarget {\n    /** Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise. */\n    readonly aborted: boolean;\n    onabort: ((this: AbortSignal, ev: Event) => any) | null;\n    readonly reason: any;\n    throwIfAborted(): void;\n    addEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var AbortSignal: {\n    prototype: AbortSignal;\n    new(): AbortSignal;\n    abort(reason?: any): AbortSignal;\n};\n\ninterface AbstractWorkerEventMap {\n    \"error\": ErrorEvent;\n}\n\ninterface AbstractWorker {\n    onerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null;\n    addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ninterface AnimationFrameProvider {\n    cancelAnimationFrame(handle: number): void;\n    requestAnimationFrame(callback: FrameRequestCallback): number;\n}\n\n/** A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system. */\ninterface Blob {\n    readonly size: number;\n    readonly type: string;\n    arrayBuffer(): Promise<ArrayBuffer>;\n    slice(start?: number, end?: number, contentType?: string): Blob;\n    stream(): ReadableStream<Uint8Array>;\n    text(): Promise<string>;\n}\n\ndeclare var Blob: {\n    prototype: Blob;\n    new(blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;\n};\n\ninterface Body {\n    readonly body: ReadableStream<Uint8Array> | null;\n    readonly bodyUsed: boolean;\n    arrayBuffer(): Promise<ArrayBuffer>;\n    blob(): Promise<Blob>;\n    formData(): Promise<FormData>;\n    json(): Promise<any>;\n    text(): Promise<string>;\n}\n\ninterface BroadcastChannelEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\ninterface BroadcastChannel extends EventTarget {\n    /** Returns the channel name (as passed to the constructor). */\n    readonly name: string;\n    onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\n    /** Closes the BroadcastChannel object, opening it up to garbage collection. */\n    close(): void;\n    /** Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays. */\n    postMessage(message: any): void;\n    addEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var BroadcastChannel: {\n    prototype: BroadcastChannel;\n    new(name: string): BroadcastChannel;\n};\n\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\ninterface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {\n    readonly highWaterMark: number;\n    readonly size: QueuingStrategySize<ArrayBufferView>;\n}\n\ndeclare var ByteLengthQueuingStrategy: {\n    prototype: ByteLengthQueuingStrategy;\n    new(init: QueuingStrategyInit): ByteLengthQueuingStrategy;\n};\n\n/**\n * Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.\n * Available only in secure contexts.\n */\ninterface Cache {\n    add(request: RequestInfo | URL): Promise<void>;\n    addAll(requests: RequestInfo[]): Promise<void>;\n    delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;\n    keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;\n    match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;\n    matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;\n    put(request: RequestInfo | URL, response: Response): Promise<void>;\n}\n\ndeclare var Cache: {\n    prototype: Cache;\n    new(): Cache;\n};\n\n/**\n * The storage for Cache objects.\n * Available only in secure contexts.\n */\ninterface CacheStorage {\n    delete(cacheName: string): Promise<boolean>;\n    has(cacheName: string): Promise<boolean>;\n    keys(): Promise<string[]>;\n    match(request: RequestInfo | URL, options?: MultiCacheQueryOptions): Promise<Response | undefined>;\n    open(cacheName: string): Promise<Cache>;\n}\n\ndeclare var CacheStorage: {\n    prototype: CacheStorage;\n    new(): CacheStorage;\n};\n\n/** An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient(). */\ninterface CanvasGradient {\n    /**\n     * Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.\n     *\n     * Throws an \"IndexSizeError\" DOMException if the offset is out of range. Throws a \"SyntaxError\" DOMException if the color cannot be parsed.\n     */\n    addColorStop(offset: number, color: string): void;\n}\n\ndeclare var CanvasGradient: {\n    prototype: CanvasGradient;\n    new(): CanvasGradient;\n};\n\ninterface CanvasPath {\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\n    closePath(): void;\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;\n    lineTo(x: number, y: number): void;\n    moveTo(x: number, y: number): void;\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n    rect(x: number, y: number, w: number, h: number): void;\n}\n\n/** An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method. */\ninterface CanvasPattern {\n    /** Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation. */\n    setTransform(transform?: DOMMatrix2DInit): void;\n}\n\ndeclare var CanvasPattern: {\n    prototype: CanvasPattern;\n    new(): CanvasPattern;\n};\n\n/** The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get(). */\ninterface Client {\n    readonly frameType: FrameType;\n    readonly id: string;\n    readonly type: ClientTypes;\n    readonly url: string;\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n}\n\ndeclare var Client: {\n    prototype: Client;\n    new(): Client;\n};\n\n/** Provides access to Client objects. Access it via self.clients within a service worker. */\ninterface Clients {\n    claim(): Promise<void>;\n    get(id: string): Promise<Client | undefined>;\n    matchAll<T extends ClientQueryOptions>(options?: T): Promise<ReadonlyArray<T[\"type\"] extends \"window\" ? WindowClient : Client>>;\n    openWindow(url: string | URL): Promise<WindowClient | null>;\n}\n\ndeclare var Clients: {\n    prototype: Clients;\n    new(): Clients;\n};\n\n/** A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute. */\ninterface CloseEvent extends Event {\n    /** Returns the WebSocket connection close code provided by the server. */\n    readonly code: number;\n    /** Returns the WebSocket connection close reason provided by the server. */\n    readonly reason: string;\n    /** Returns true if the connection closed cleanly; false otherwise. */\n    readonly wasClean: boolean;\n}\n\ndeclare var CloseEvent: {\n    prototype: CloseEvent;\n    new(type: string, eventInitDict?: CloseEventInit): CloseEvent;\n};\n\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\ninterface CountQueuingStrategy extends QueuingStrategy {\n    readonly highWaterMark: number;\n    readonly size: QueuingStrategySize;\n}\n\ndeclare var CountQueuingStrategy: {\n    prototype: CountQueuingStrategy;\n    new(init: QueuingStrategyInit): CountQueuingStrategy;\n};\n\n/** Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives. */\ninterface Crypto {\n    /** Available only in secure contexts. */\n    readonly subtle: SubtleCrypto;\n    getRandomValues<T extends ArrayBufferView | null>(array: T): T;\n    /** Available only in secure contexts. */\n    randomUUID(): string;\n}\n\ndeclare var Crypto: {\n    prototype: Crypto;\n    new(): Crypto;\n};\n\n/**\n * The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.\n * Available only in secure contexts.\n */\ninterface CryptoKey {\n    readonly algorithm: KeyAlgorithm;\n    readonly extractable: boolean;\n    readonly type: KeyType;\n    readonly usages: KeyUsage[];\n}\n\ndeclare var CryptoKey: {\n    prototype: CryptoKey;\n    new(): CryptoKey;\n};\n\ninterface CustomEvent<T = any> extends Event {\n    /** Returns any custom data event was created with. Typically used for synthetic events. */\n    readonly detail: T;\n    /** @deprecated */\n    initCustomEvent(type: string, bubbles?: boolean, cancelable?: boolean, detail?: T): void;\n}\n\ndeclare var CustomEvent: {\n    prototype: CustomEvent;\n    new<T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;\n};\n\n/** An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. */\ninterface DOMException extends Error {\n    /** @deprecated */\n    readonly code: number;\n    readonly message: string;\n    readonly name: string;\n    readonly ABORT_ERR: number;\n    readonly DATA_CLONE_ERR: number;\n    readonly DOMSTRING_SIZE_ERR: number;\n    readonly HIERARCHY_REQUEST_ERR: number;\n    readonly INDEX_SIZE_ERR: number;\n    readonly INUSE_ATTRIBUTE_ERR: number;\n    readonly INVALID_ACCESS_ERR: number;\n    readonly INVALID_CHARACTER_ERR: number;\n    readonly INVALID_MODIFICATION_ERR: number;\n    readonly INVALID_NODE_TYPE_ERR: number;\n    readonly INVALID_STATE_ERR: number;\n    readonly NAMESPACE_ERR: number;\n    readonly NETWORK_ERR: number;\n    readonly NOT_FOUND_ERR: number;\n    readonly NOT_SUPPORTED_ERR: number;\n    readonly NO_DATA_ALLOWED_ERR: number;\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\n    readonly QUOTA_EXCEEDED_ERR: number;\n    readonly SECURITY_ERR: number;\n    readonly SYNTAX_ERR: number;\n    readonly TIMEOUT_ERR: number;\n    readonly TYPE_MISMATCH_ERR: number;\n    readonly URL_MISMATCH_ERR: number;\n    readonly VALIDATION_ERR: number;\n    readonly WRONG_DOCUMENT_ERR: number;\n}\n\ndeclare var DOMException: {\n    prototype: DOMException;\n    new(message?: string, name?: string): DOMException;\n    readonly ABORT_ERR: number;\n    readonly DATA_CLONE_ERR: number;\n    readonly DOMSTRING_SIZE_ERR: number;\n    readonly HIERARCHY_REQUEST_ERR: number;\n    readonly INDEX_SIZE_ERR: number;\n    readonly INUSE_ATTRIBUTE_ERR: number;\n    readonly INVALID_ACCESS_ERR: number;\n    readonly INVALID_CHARACTER_ERR: number;\n    readonly INVALID_MODIFICATION_ERR: number;\n    readonly INVALID_NODE_TYPE_ERR: number;\n    readonly INVALID_STATE_ERR: number;\n    readonly NAMESPACE_ERR: number;\n    readonly NETWORK_ERR: number;\n    readonly NOT_FOUND_ERR: number;\n    readonly NOT_SUPPORTED_ERR: number;\n    readonly NO_DATA_ALLOWED_ERR: number;\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\n    readonly QUOTA_EXCEEDED_ERR: number;\n    readonly SECURITY_ERR: number;\n    readonly SYNTAX_ERR: number;\n    readonly TIMEOUT_ERR: number;\n    readonly TYPE_MISMATCH_ERR: number;\n    readonly URL_MISMATCH_ERR: number;\n    readonly VALIDATION_ERR: number;\n    readonly WRONG_DOCUMENT_ERR: number;\n};\n\ninterface DOMMatrix extends DOMMatrixReadOnly {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n    e: number;\n    f: number;\n    m11: number;\n    m12: number;\n    m13: number;\n    m14: number;\n    m21: number;\n    m22: number;\n    m23: number;\n    m24: number;\n    m31: number;\n    m32: number;\n    m33: number;\n    m34: number;\n    m41: number;\n    m42: number;\n    m43: number;\n    m44: number;\n    invertSelf(): DOMMatrix;\n    multiplySelf(other?: DOMMatrixInit): DOMMatrix;\n    preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;\n    rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\n    rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;\n    rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\n    scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    skewXSelf(sx?: number): DOMMatrix;\n    skewYSelf(sy?: number): DOMMatrix;\n    translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;\n}\n\ndeclare var DOMMatrix: {\n    prototype: DOMMatrix;\n    new(init?: string | number[]): DOMMatrix;\n    fromFloat32Array(array32: Float32Array): DOMMatrix;\n    fromFloat64Array(array64: Float64Array): DOMMatrix;\n    fromMatrix(other?: DOMMatrixInit): DOMMatrix;\n};\n\ninterface DOMMatrixReadOnly {\n    readonly a: number;\n    readonly b: number;\n    readonly c: number;\n    readonly d: number;\n    readonly e: number;\n    readonly f: number;\n    readonly is2D: boolean;\n    readonly isIdentity: boolean;\n    readonly m11: number;\n    readonly m12: number;\n    readonly m13: number;\n    readonly m14: number;\n    readonly m21: number;\n    readonly m22: number;\n    readonly m23: number;\n    readonly m24: number;\n    readonly m31: number;\n    readonly m32: number;\n    readonly m33: number;\n    readonly m34: number;\n    readonly m41: number;\n    readonly m42: number;\n    readonly m43: number;\n    readonly m44: number;\n    flipX(): DOMMatrix;\n    flipY(): DOMMatrix;\n    inverse(): DOMMatrix;\n    multiply(other?: DOMMatrixInit): DOMMatrix;\n    rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\n    rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\n    rotateFromVector(x?: number, y?: number): DOMMatrix;\n    scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\n    /** @deprecated */\n    scaleNonUniform(scaleX?: number, scaleY?: number): DOMMatrix;\n    skewX(sx?: number): DOMMatrix;\n    skewY(sy?: number): DOMMatrix;\n    toFloat32Array(): Float32Array;\n    toFloat64Array(): Float64Array;\n    toJSON(): any;\n    transformPoint(point?: DOMPointInit): DOMPoint;\n    translate(tx?: number, ty?: number, tz?: number): DOMMatrix;\n}\n\ndeclare var DOMMatrixReadOnly: {\n    prototype: DOMMatrixReadOnly;\n    new(init?: string | number[]): DOMMatrixReadOnly;\n    fromFloat32Array(array32: Float32Array): DOMMatrixReadOnly;\n    fromFloat64Array(array64: Float64Array): DOMMatrixReadOnly;\n    fromMatrix(other?: DOMMatrixInit): DOMMatrixReadOnly;\n};\n\ninterface DOMPoint extends DOMPointReadOnly {\n    w: number;\n    x: number;\n    y: number;\n    z: number;\n}\n\ndeclare var DOMPoint: {\n    prototype: DOMPoint;\n    new(x?: number, y?: number, z?: number, w?: number): DOMPoint;\n    fromPoint(other?: DOMPointInit): DOMPoint;\n};\n\ninterface DOMPointReadOnly {\n    readonly w: number;\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    matrixTransform(matrix?: DOMMatrixInit): DOMPoint;\n    toJSON(): any;\n}\n\ndeclare var DOMPointReadOnly: {\n    prototype: DOMPointReadOnly;\n    new(x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly;\n    fromPoint(other?: DOMPointInit): DOMPointReadOnly;\n};\n\ninterface DOMQuad {\n    readonly p1: DOMPoint;\n    readonly p2: DOMPoint;\n    readonly p3: DOMPoint;\n    readonly p4: DOMPoint;\n    getBounds(): DOMRect;\n    toJSON(): any;\n}\n\ndeclare var DOMQuad: {\n    prototype: DOMQuad;\n    new(p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad;\n    fromQuad(other?: DOMQuadInit): DOMQuad;\n    fromRect(other?: DOMRectInit): DOMQuad;\n};\n\ninterface DOMRect extends DOMRectReadOnly {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n}\n\ndeclare var DOMRect: {\n    prototype: DOMRect;\n    new(x?: number, y?: number, width?: number, height?: number): DOMRect;\n    fromRect(other?: DOMRectInit): DOMRect;\n};\n\ninterface DOMRectReadOnly {\n    readonly bottom: number;\n    readonly height: number;\n    readonly left: number;\n    readonly right: number;\n    readonly top: number;\n    readonly width: number;\n    readonly x: number;\n    readonly y: number;\n    toJSON(): any;\n}\n\ndeclare var DOMRectReadOnly: {\n    prototype: DOMRectReadOnly;\n    new(x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly;\n    fromRect(other?: DOMRectInit): DOMRectReadOnly;\n};\n\n/** A type returned by some APIs which contains a list of DOMString (strings). */\ninterface DOMStringList {\n    /** Returns the number of strings in strings. */\n    readonly length: number;\n    /** Returns true if strings contains string, and false otherwise. */\n    contains(string: string): boolean;\n    /** Returns the string with index index from strings. */\n    item(index: number): string | null;\n    [index: number]: string;\n}\n\ndeclare var DOMStringList: {\n    prototype: DOMStringList;\n    new(): DOMStringList;\n};\n\ninterface DedicatedWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\n/** (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers. */\ninterface DedicatedWorkerGlobalScope extends WorkerGlobalScope, AnimationFrameProvider {\n    /** Returns dedicatedWorkerGlobal's name, i.e. the value given to the Worker constructor. Primarily useful for debugging. */\n    readonly name: string;\n    onmessage: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\n    /** Aborts dedicatedWorkerGlobal. */\n    close(): void;\n    /** Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned. */\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n    addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var DedicatedWorkerGlobalScope: {\n    prototype: DedicatedWorkerGlobalScope;\n    new(): DedicatedWorkerGlobalScope;\n};\n\ninterface EXT_blend_minmax {\n    readonly MAX_EXT: GLenum;\n    readonly MIN_EXT: GLenum;\n}\n\ninterface EXT_color_buffer_float {\n}\n\ninterface EXT_color_buffer_half_float {\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum;\n    readonly RGB16F_EXT: GLenum;\n    readonly RGBA16F_EXT: GLenum;\n    readonly UNSIGNED_NORMALIZED_EXT: GLenum;\n}\n\ninterface EXT_float_blend {\n}\n\n/** The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader. */\ninterface EXT_frag_depth {\n}\n\ninterface EXT_sRGB {\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: GLenum;\n    readonly SRGB8_ALPHA8_EXT: GLenum;\n    readonly SRGB_ALPHA_EXT: GLenum;\n    readonly SRGB_EXT: GLenum;\n}\n\ninterface EXT_shader_texture_lod {\n}\n\ninterface EXT_texture_compression_rgtc {\n    readonly COMPRESSED_RED_GREEN_RGTC2_EXT: GLenum;\n    readonly COMPRESSED_RED_RGTC1_EXT: GLenum;\n    readonly COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: GLenum;\n    readonly COMPRESSED_SIGNED_RED_RGTC1_EXT: GLenum;\n}\n\n/** The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF). */\ninterface EXT_texture_filter_anisotropic {\n    readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\n    readonly TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\n}\n\n/** Events providing information related to errors in scripts or in files. */\ninterface ErrorEvent extends Event {\n    readonly colno: number;\n    readonly error: any;\n    readonly filename: string;\n    readonly lineno: number;\n    readonly message: string;\n}\n\ndeclare var ErrorEvent: {\n    prototype: ErrorEvent;\n    new(type: string, eventInitDict?: ErrorEventInit): ErrorEvent;\n};\n\n/** An event which takes place in the DOM. */\ninterface Event {\n    /** Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise. */\n    readonly bubbles: boolean;\n    cancelBubble: boolean;\n    /** Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method. */\n    readonly cancelable: boolean;\n    /** Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise. */\n    readonly composed: boolean;\n    /** Returns the object whose event listener's callback is currently being invoked. */\n    readonly currentTarget: EventTarget | null;\n    /** Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise. */\n    readonly defaultPrevented: boolean;\n    /** Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE. */\n    readonly eventPhase: number;\n    /** Returns true if event was dispatched by the user agent, and false otherwise. */\n    readonly isTrusted: boolean;\n    /** @deprecated */\n    returnValue: boolean;\n    /** @deprecated */\n    readonly srcElement: EventTarget | null;\n    /** Returns the object to which event is dispatched (its target). */\n    readonly target: EventTarget | null;\n    /** Returns the event's timestamp as the number of milliseconds measured relative to the time origin. */\n    readonly timeStamp: DOMHighResTimeStamp;\n    /** Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\". */\n    readonly type: string;\n    /** Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \"closed\" that are not reachable from event's currentTarget. */\n    composedPath(): EventTarget[];\n    /** @deprecated */\n    initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\n    /** If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled. */\n    preventDefault(): void;\n    /** Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects. */\n    stopImmediatePropagation(): void;\n    /** When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object. */\n    stopPropagation(): void;\n    readonly AT_TARGET: number;\n    readonly BUBBLING_PHASE: number;\n    readonly CAPTURING_PHASE: number;\n    readonly NONE: number;\n}\n\ndeclare var Event: {\n    prototype: Event;\n    new(type: string, eventInitDict?: EventInit): Event;\n    readonly AT_TARGET: number;\n    readonly BUBBLING_PHASE: number;\n    readonly CAPTURING_PHASE: number;\n    readonly NONE: number;\n};\n\ninterface EventListener {\n    (evt: Event): void;\n}\n\ninterface EventListenerObject {\n    handleEvent(object: Event): void;\n}\n\ninterface EventSourceEventMap {\n    \"error\": Event;\n    \"message\": MessageEvent;\n    \"open\": Event;\n}\n\ninterface EventSource extends EventTarget {\n    onerror: ((this: EventSource, ev: Event) => any) | null;\n    onmessage: ((this: EventSource, ev: MessageEvent) => any) | null;\n    onopen: ((this: EventSource, ev: Event) => any) | null;\n    /** Returns the state of this EventSource object's connection. It can have the values described below. */\n    readonly readyState: number;\n    /** Returns the URL providing the event stream. */\n    readonly url: string;\n    /** Returns true if the credentials mode for connection requests to the URL providing the event stream is set to \"include\", and false otherwise. */\n    readonly withCredentials: boolean;\n    /** Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED. */\n    close(): void;\n    readonly CLOSED: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n    addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: (this: EventSource, event: MessageEvent) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: (this: EventSource, event: MessageEvent) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var EventSource: {\n    prototype: EventSource;\n    new(url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource;\n    readonly CLOSED: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n};\n\n/** EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them. */\ninterface EventTarget {\n    /**\n     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n     *\n     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n     *\n     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n     *\n     * When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n     *\n     * When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n     *\n     * If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n     *\n     * The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n     */\n    addEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: AddEventListenerOptions | boolean): void;\n    /** Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise. */\n    dispatchEvent(event: Event): boolean;\n    /** Removes the event listener in target's event listener list with the same type, callback, and options. */\n    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;\n}\n\ndeclare var EventTarget: {\n    prototype: EventTarget;\n    new(): EventTarget;\n};\n\n/** Extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries. */\ninterface ExtendableEvent extends Event {\n    waitUntil(f: Promise<any>): void;\n}\n\ndeclare var ExtendableEvent: {\n    prototype: ExtendableEvent;\n    new(type: string, eventInitDict?: ExtendableEventInit): ExtendableEvent;\n};\n\n/** This ServiceWorker API interface represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events. */\ninterface ExtendableMessageEvent extends ExtendableEvent {\n    readonly data: any;\n    readonly lastEventId: string;\n    readonly origin: string;\n    readonly ports: ReadonlyArray<MessagePort>;\n    readonly source: Client | ServiceWorker | MessagePort | null;\n}\n\ndeclare var ExtendableMessageEvent: {\n    prototype: ExtendableMessageEvent;\n    new(type: string, eventInitDict?: ExtendableMessageEventInit): ExtendableMessageEvent;\n};\n\n/** This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch. */\ninterface FetchEvent extends ExtendableEvent {\n    readonly clientId: string;\n    readonly handled: Promise<undefined>;\n    readonly preloadResponse: Promise<any>;\n    readonly request: Request;\n    readonly resultingClientId: string;\n    respondWith(r: Response | PromiseLike<Response>): void;\n}\n\ndeclare var FetchEvent: {\n    prototype: FetchEvent;\n    new(type: string, eventInitDict: FetchEventInit): FetchEvent;\n};\n\n/** Provides information about files and allows JavaScript in a web page to access their content. */\ninterface File extends Blob {\n    readonly lastModified: number;\n    readonly name: string;\n    readonly webkitRelativePath: string;\n}\n\ndeclare var File: {\n    prototype: File;\n    new(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File;\n};\n\n/** An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage. */\ninterface FileList {\n    readonly length: number;\n    item(index: number): File | null;\n    [index: number]: File;\n}\n\ndeclare var FileList: {\n    prototype: FileList;\n    new(): FileList;\n};\n\ninterface FileReaderEventMap {\n    \"abort\": ProgressEvent<FileReader>;\n    \"error\": ProgressEvent<FileReader>;\n    \"load\": ProgressEvent<FileReader>;\n    \"loadend\": ProgressEvent<FileReader>;\n    \"loadstart\": ProgressEvent<FileReader>;\n    \"progress\": ProgressEvent<FileReader>;\n}\n\n/** Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read. */\ninterface FileReader extends EventTarget {\n    readonly error: DOMException | null;\n    onabort: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onerror: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onload: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onloadend: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onloadstart: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    onprogress: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\n    readonly readyState: number;\n    readonly result: string | ArrayBuffer | null;\n    abort(): void;\n    readAsArrayBuffer(blob: Blob): void;\n    readAsBinaryString(blob: Blob): void;\n    readAsDataURL(blob: Blob): void;\n    readAsText(blob: Blob, encoding?: string): void;\n    readonly DONE: number;\n    readonly EMPTY: number;\n    readonly LOADING: number;\n    addEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var FileReader: {\n    prototype: FileReader;\n    new(): FileReader;\n    readonly DONE: number;\n    readonly EMPTY: number;\n    readonly LOADING: number;\n};\n\n/** Allows to read File or Blob objects in a synchronous way. */\ninterface FileReaderSync {\n    readAsArrayBuffer(blob: Blob): ArrayBuffer;\n    /** @deprecated */\n    readAsBinaryString(blob: Blob): string;\n    readAsDataURL(blob: Blob): string;\n    readAsText(blob: Blob, encoding?: string): string;\n}\n\ndeclare var FileReaderSync: {\n    prototype: FileReaderSync;\n    new(): FileReaderSync;\n};\n\n/** Available only in secure contexts. */\ninterface FileSystemDirectoryHandle extends FileSystemHandle {\n    readonly kind: \"directory\";\n    getDirectoryHandle(name: string, options?: FileSystemGetDirectoryOptions): Promise<FileSystemDirectoryHandle>;\n    getFileHandle(name: string, options?: FileSystemGetFileOptions): Promise<FileSystemFileHandle>;\n    removeEntry(name: string, options?: FileSystemRemoveOptions): Promise<void>;\n    resolve(possibleDescendant: FileSystemHandle): Promise<string[] | null>;\n}\n\ndeclare var FileSystemDirectoryHandle: {\n    prototype: FileSystemDirectoryHandle;\n    new(): FileSystemDirectoryHandle;\n};\n\n/** Available only in secure contexts. */\ninterface FileSystemFileHandle extends FileSystemHandle {\n    readonly kind: \"file\";\n    getFile(): Promise<File>;\n}\n\ndeclare var FileSystemFileHandle: {\n    prototype: FileSystemFileHandle;\n    new(): FileSystemFileHandle;\n};\n\n/** Available only in secure contexts. */\ninterface FileSystemHandle {\n    readonly kind: FileSystemHandleKind;\n    readonly name: string;\n    isSameEntry(other: FileSystemHandle): Promise<boolean>;\n}\n\ndeclare var FileSystemHandle: {\n    prototype: FileSystemHandle;\n    new(): FileSystemHandle;\n};\n\ninterface FontFace {\n    ascentOverride: string;\n    descentOverride: string;\n    display: string;\n    family: string;\n    featureSettings: string;\n    lineGapOverride: string;\n    readonly loaded: Promise<FontFace>;\n    readonly status: FontFaceLoadStatus;\n    stretch: string;\n    style: string;\n    unicodeRange: string;\n    variant: string;\n    variationSettings: string;\n    weight: string;\n    load(): Promise<FontFace>;\n}\n\ndeclare var FontFace: {\n    prototype: FontFace;\n    new(family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors): FontFace;\n};\n\ninterface FontFaceSetEventMap {\n    \"loading\": Event;\n    \"loadingdone\": Event;\n    \"loadingerror\": Event;\n}\n\ninterface FontFaceSet extends EventTarget {\n    onloading: ((this: FontFaceSet, ev: Event) => any) | null;\n    onloadingdone: ((this: FontFaceSet, ev: Event) => any) | null;\n    onloadingerror: ((this: FontFaceSet, ev: Event) => any) | null;\n    readonly ready: Promise<FontFaceSet>;\n    readonly status: FontFaceSetLoadStatus;\n    check(font: string, text?: string): boolean;\n    load(font: string, text?: string): Promise<FontFace[]>;\n    forEach(callbackfn: (value: FontFace, key: FontFace, parent: FontFaceSet) => void, thisArg?: any): void;\n    addEventListener<K extends keyof FontFaceSetEventMap>(type: K, listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof FontFaceSetEventMap>(type: K, listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var FontFaceSet: {\n    prototype: FontFaceSet;\n    new(initialFaces: FontFace[]): FontFaceSet;\n};\n\ninterface FontFaceSetLoadEvent extends Event {\n    readonly fontfaces: ReadonlyArray<FontFace>;\n}\n\ndeclare var FontFaceSetLoadEvent: {\n    prototype: FontFaceSetLoadEvent;\n    new(type: string, eventInitDict?: FontFaceSetLoadEventInit): FontFaceSetLoadEvent;\n};\n\ninterface FontFaceSource {\n    readonly fonts: FontFaceSet;\n}\n\n/** Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\". */\ninterface FormData {\n    append(name: string, value: string | Blob, fileName?: string): void;\n    delete(name: string): void;\n    get(name: string): FormDataEntryValue | null;\n    getAll(name: string): FormDataEntryValue[];\n    has(name: string): boolean;\n    set(name: string, value: string | Blob, fileName?: string): void;\n    forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;\n}\n\ndeclare var FormData: {\n    prototype: FormData;\n    new(): FormData;\n};\n\ninterface GenericTransformStream {\n    readonly readable: ReadableStream;\n    readonly writable: WritableStream;\n}\n\n/** This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence. */\ninterface Headers {\n    append(name: string, value: string): void;\n    delete(name: string): void;\n    get(name: string): string | null;\n    has(name: string): boolean;\n    set(name: string, value: string): void;\n    forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;\n}\n\ndeclare var Headers: {\n    prototype: Headers;\n    new(init?: HeadersInit): Headers;\n};\n\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. */\ninterface IDBCursor {\n    /** Returns the direction (\"next\", \"nextunique\", \"prev\" or \"prevunique\") of the cursor. */\n    readonly direction: IDBCursorDirection;\n    /** Returns the key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished. */\n    readonly key: IDBValidKey;\n    /** Returns the effective key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished. */\n    readonly primaryKey: IDBValidKey;\n    readonly request: IDBRequest;\n    /** Returns the IDBObjectStore or IDBIndex the cursor was opened from. */\n    readonly source: IDBObjectStore | IDBIndex;\n    /** Advances the cursor through the next count records in range. */\n    advance(count: number): void;\n    /** Advances the cursor to the next record in range. */\n    continue(key?: IDBValidKey): void;\n    /** Advances the cursor to the next record in range matching or after key and primaryKey. Throws an \"InvalidAccessError\" DOMException if the source is not an index. */\n    continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): void;\n    /**\n     * Delete the record pointed at by the cursor with a new value.\n     *\n     * If successful, request's result will be undefined.\n     */\n    delete(): IDBRequest<undefined>;\n    /**\n     * Updated the record pointed at by the cursor with a new value.\n     *\n     * Throws a \"DataError\" DOMException if the effective object store uses in-line keys and the key would have changed.\n     *\n     * If successful, request's result will be the record's key.\n     */\n    update(value: any): IDBRequest<IDBValidKey>;\n}\n\ndeclare var IDBCursor: {\n    prototype: IDBCursor;\n    new(): IDBCursor;\n};\n\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property. */\ninterface IDBCursorWithValue extends IDBCursor {\n    /** Returns the cursor's current value. */\n    readonly value: any;\n}\n\ndeclare var IDBCursorWithValue: {\n    prototype: IDBCursorWithValue;\n    new(): IDBCursorWithValue;\n};\n\ninterface IDBDatabaseEventMap {\n    \"abort\": Event;\n    \"close\": Event;\n    \"error\": Event;\n    \"versionchange\": IDBVersionChangeEvent;\n}\n\n/** This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database. */\ninterface IDBDatabase extends EventTarget {\n    /** Returns the name of the database. */\n    readonly name: string;\n    /** Returns a list of the names of object stores in the database. */\n    readonly objectStoreNames: DOMStringList;\n    onabort: ((this: IDBDatabase, ev: Event) => any) | null;\n    onclose: ((this: IDBDatabase, ev: Event) => any) | null;\n    onerror: ((this: IDBDatabase, ev: Event) => any) | null;\n    onversionchange: ((this: IDBDatabase, ev: IDBVersionChangeEvent) => any) | null;\n    /** Returns the version of the database. */\n    readonly version: number;\n    /** Closes the connection once all running transactions have finished. */\n    close(): void;\n    /**\n     * Creates a new object store with the given name and options and returns a new IDBObjectStore.\n     *\n     * Throws a \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    createObjectStore(name: string, options?: IDBObjectStoreParameters): IDBObjectStore;\n    /**\n     * Deletes the object store with the given name.\n     *\n     * Throws a \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    deleteObjectStore(name: string): void;\n    /** Returns a new transaction with the given mode (\"readonly\" or \"readwrite\") and scope which can be a single object store name or an array of names. */\n    transaction(storeNames: string | string[], mode?: IDBTransactionMode, options?: IDBTransactionOptions): IDBTransaction;\n    addEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBDatabase: {\n    prototype: IDBDatabase;\n    new(): IDBDatabase;\n};\n\n/** In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.) */\ninterface IDBFactory {\n    /**\n     * Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.\n     *\n     * Throws a \"DataError\" DOMException if either input is not a valid key.\n     */\n    cmp(first: any, second: any): number;\n    databases(): Promise<IDBDatabaseInfo[]>;\n    /** Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null. */\n    deleteDatabase(name: string): IDBOpenDBRequest;\n    /** Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection. */\n    open(name: string, version?: number): IDBOpenDBRequest;\n}\n\ndeclare var IDBFactory: {\n    prototype: IDBFactory;\n    new(): IDBFactory;\n};\n\n/** IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data. */\ninterface IDBIndex {\n    readonly keyPath: string | string[];\n    readonly multiEntry: boolean;\n    /** Returns the name of the index. */\n    name: string;\n    /** Returns the IDBObjectStore the index belongs to. */\n    readonly objectStore: IDBObjectStore;\n    readonly unique: boolean;\n    /**\n     * Retrieves the number of records matching the given key or key range in query.\n     *\n     * If successful, request's result will be the count.\n     */\n    count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\n    /**\n     * Retrieves the value of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the value, or undefined if there was no matching record.\n     */\n    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any>;\n    /**\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the values.\n     */\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\n    /**\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the keys.\n     */\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\n    /**\n     * Retrieves the key of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the key, or undefined if there was no matching record.\n     */\n    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\n    /**\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.\n     *\n     * If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.\n     */\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\n    /**\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.\n     *\n     * If successful, request's result will be an IDBCursor, or null if there were no matching records.\n     */\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\n}\n\ndeclare var IDBIndex: {\n    prototype: IDBIndex;\n    new(): IDBIndex;\n};\n\n/** A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs: */\ninterface IDBKeyRange {\n    /** Returns lower bound, or undefined if none. */\n    readonly lower: any;\n    /** Returns true if the lower open flag is set, and false otherwise. */\n    readonly lowerOpen: boolean;\n    /** Returns upper bound, or undefined if none. */\n    readonly upper: any;\n    /** Returns true if the upper open flag is set, and false otherwise. */\n    readonly upperOpen: boolean;\n    /** Returns true if key is included in the range, and false otherwise. */\n    includes(key: any): boolean;\n}\n\ndeclare var IDBKeyRange: {\n    prototype: IDBKeyRange;\n    new(): IDBKeyRange;\n    /** Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range. */\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\n    /** Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range. */\n    lowerBound(lower: any, open?: boolean): IDBKeyRange;\n    /** Returns a new IDBKeyRange spanning only key. */\n    only(value: any): IDBKeyRange;\n    /** Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range. */\n    upperBound(upper: any, open?: boolean): IDBKeyRange;\n};\n\n/** This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.) */\ninterface IDBObjectStore {\n    /** Returns true if the store has a key generator, and false otherwise. */\n    readonly autoIncrement: boolean;\n    /** Returns a list of the names of indexes in the store. */\n    readonly indexNames: DOMStringList;\n    /** Returns the key path of the store, or null if none. */\n    readonly keyPath: string | string[];\n    /** Returns the name of the store. */\n    name: string;\n    /** Returns the associated transaction. */\n    readonly transaction: IDBTransaction;\n    /**\n     * Adds or updates a record in store with the given value and key.\n     *\n     * If the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n     *\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n     *\n     * If successful, request's result will be the record's key.\n     */\n    add(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\n    /**\n     * Deletes all records in store.\n     *\n     * If successful, request's result will be undefined.\n     */\n    clear(): IDBRequest<undefined>;\n    /**\n     * Retrieves the number of records matching the given key or key range in query.\n     *\n     * If successful, request's result will be the count.\n     */\n    count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\n    /**\n     * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \"ConstraintError\" DOMException.\n     *\n     * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    createIndex(name: string, keyPath: string | string[], options?: IDBIndexParameters): IDBIndex;\n    /**\n     * Deletes records in store with the given key or in the given key range in query.\n     *\n     * If successful, request's result will be undefined.\n     */\n    delete(query: IDBValidKey | IDBKeyRange): IDBRequest<undefined>;\n    /**\n     * Deletes the index in store with the given name.\n     *\n     * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    deleteIndex(name: string): void;\n    /**\n     * Retrieves the value of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the value, or undefined if there was no matching record.\n     */\n    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any>;\n    /**\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the values.\n     */\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\n    /**\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\n     *\n     * If successful, request's result will be an Array of the keys.\n     */\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\n    /**\n     * Retrieves the key of the first record matching the given key or key range in query.\n     *\n     * If successful, request's result will be the key, or undefined if there was no matching record.\n     */\n    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\n    index(name: string): IDBIndex;\n    /**\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.\n     *\n     * If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.\n     */\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\n    /**\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.\n     *\n     * If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.\n     */\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\n    /**\n     * Adds or updates a record in store with the given value and key.\n     *\n     * If the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n     *\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n     *\n     * If successful, request's result will be the record's key.\n     */\n    put(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\n}\n\ndeclare var IDBObjectStore: {\n    prototype: IDBObjectStore;\n    new(): IDBObjectStore;\n};\n\ninterface IDBOpenDBRequestEventMap extends IDBRequestEventMap {\n    \"blocked\": Event;\n    \"upgradeneeded\": IDBVersionChangeEvent;\n}\n\n/** Also inherits methods from its parents IDBRequest and EventTarget. */\ninterface IDBOpenDBRequest extends IDBRequest<IDBDatabase> {\n    onblocked: ((this: IDBOpenDBRequest, ev: Event) => any) | null;\n    onupgradeneeded: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null;\n    addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBOpenDBRequest: {\n    prototype: IDBOpenDBRequest;\n    new(): IDBOpenDBRequest;\n};\n\ninterface IDBRequestEventMap {\n    \"error\": Event;\n    \"success\": Event;\n}\n\n/** The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance. */\ninterface IDBRequest<T = any> extends EventTarget {\n    /** When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a \"InvalidStateError\" DOMException if the request is still pending. */\n    readonly error: DOMException | null;\n    onerror: ((this: IDBRequest<T>, ev: Event) => any) | null;\n    onsuccess: ((this: IDBRequest<T>, ev: Event) => any) | null;\n    /** Returns \"pending\" until a request is complete, then returns \"done\". */\n    readonly readyState: IDBRequestReadyState;\n    /** When a request is completed, returns the result, or undefined if the request failed. Throws a \"InvalidStateError\" DOMException if the request is still pending. */\n    readonly result: T;\n    /** Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request. */\n    readonly source: IDBObjectStore | IDBIndex | IDBCursor;\n    /** Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise. */\n    readonly transaction: IDBTransaction | null;\n    addEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBRequest: {\n    prototype: IDBRequest;\n    new(): IDBRequest;\n};\n\ninterface IDBTransactionEventMap {\n    \"abort\": Event;\n    \"complete\": Event;\n    \"error\": Event;\n}\n\ninterface IDBTransaction extends EventTarget {\n    /** Returns the transaction's connection. */\n    readonly db: IDBDatabase;\n    readonly durability: IDBTransactionDurability;\n    /** If the transaction was aborted, returns the error (a DOMException) providing the reason. */\n    readonly error: DOMException | null;\n    /** Returns the mode the transaction was created with (\"readonly\" or \"readwrite\"), or \"versionchange\" for an upgrade transaction. */\n    readonly mode: IDBTransactionMode;\n    /** Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database. */\n    readonly objectStoreNames: DOMStringList;\n    onabort: ((this: IDBTransaction, ev: Event) => any) | null;\n    oncomplete: ((this: IDBTransaction, ev: Event) => any) | null;\n    onerror: ((this: IDBTransaction, ev: Event) => any) | null;\n    /** Aborts the transaction. All pending requests will fail with a \"AbortError\" DOMException and all changes made to the database will be reverted. */\n    abort(): void;\n    commit(): void;\n    /** Returns an IDBObjectStore in the transaction's scope. */\n    objectStore(name: string): IDBObjectStore;\n    addEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var IDBTransaction: {\n    prototype: IDBTransaction;\n    new(): IDBTransaction;\n};\n\n/** This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function. */\ninterface IDBVersionChangeEvent extends Event {\n    readonly newVersion: number | null;\n    readonly oldVersion: number;\n}\n\ndeclare var IDBVersionChangeEvent: {\n    prototype: IDBVersionChangeEvent;\n    new(type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent;\n};\n\ninterface ImageBitmap {\n    /** Returns the intrinsic height of the image, in CSS pixels. */\n    readonly height: number;\n    /** Returns the intrinsic width of the image, in CSS pixels. */\n    readonly width: number;\n    /** Releases imageBitmap's underlying bitmap data. */\n    close(): void;\n}\n\ndeclare var ImageBitmap: {\n    prototype: ImageBitmap;\n    new(): ImageBitmap;\n};\n\ninterface ImageBitmapRenderingContext {\n    /** Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound. */\n    transferFromImageBitmap(bitmap: ImageBitmap | null): void;\n}\n\ndeclare var ImageBitmapRenderingContext: {\n    prototype: ImageBitmapRenderingContext;\n    new(): ImageBitmapRenderingContext;\n};\n\n/** The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData(). */\ninterface ImageData {\n    readonly colorSpace: PredefinedColorSpace;\n    /** Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255. */\n    readonly data: Uint8ClampedArray;\n    /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n    readonly height: number;\n    /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n    readonly width: number;\n}\n\ndeclare var ImageData: {\n    prototype: ImageData;\n    new(sw: number, sh: number, settings?: ImageDataSettings): ImageData;\n    new(data: Uint8ClampedArray, sw: number, sh?: number, settings?: ImageDataSettings): ImageData;\n};\n\ninterface KHR_parallel_shader_compile {\n    readonly COMPLETION_STATUS_KHR: GLenum;\n}\n\n/** Available only in secure contexts. */\ninterface Lock {\n    readonly mode: LockMode;\n    readonly name: string;\n}\n\ndeclare var Lock: {\n    prototype: Lock;\n    new(): Lock;\n};\n\n/** Available only in secure contexts. */\ninterface LockManager {\n    query(): Promise<LockManagerSnapshot>;\n    request(name: string, callback: LockGrantedCallback): Promise<any>;\n    request(name: string, options: LockOptions, callback: LockGrantedCallback): Promise<any>;\n}\n\ndeclare var LockManager: {\n    prototype: LockManager;\n    new(): LockManager;\n};\n\ninterface MediaCapabilities {\n    decodingInfo(configuration: MediaDecodingConfiguration): Promise<MediaCapabilitiesDecodingInfo>;\n    encodingInfo(configuration: MediaEncodingConfiguration): Promise<MediaCapabilitiesEncodingInfo>;\n}\n\ndeclare var MediaCapabilities: {\n    prototype: MediaCapabilities;\n    new(): MediaCapabilities;\n};\n\n/** This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties. */\ninterface MessageChannel {\n    /** Returns the first MessagePort object. */\n    readonly port1: MessagePort;\n    /** Returns the second MessagePort object. */\n    readonly port2: MessagePort;\n}\n\ndeclare var MessageChannel: {\n    prototype: MessageChannel;\n    new(): MessageChannel;\n};\n\n/** A message received by a target object. */\ninterface MessageEvent<T = any> extends Event {\n    /** Returns the data of the message. */\n    readonly data: T;\n    /** Returns the last event ID string, for server-sent events. */\n    readonly lastEventId: string;\n    /** Returns the origin of the message, for server-sent events and cross-document messaging. */\n    readonly origin: string;\n    /** Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging. */\n    readonly ports: ReadonlyArray<MessagePort>;\n    /** Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects. */\n    readonly source: MessageEventSource | null;\n    /** @deprecated */\n    initMessageEvent(type: string, bubbles?: boolean, cancelable?: boolean, data?: any, origin?: string, lastEventId?: string, source?: MessageEventSource | null, ports?: MessagePort[]): void;\n}\n\ndeclare var MessageEvent: {\n    prototype: MessageEvent;\n    new<T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>;\n};\n\ninterface MessagePortEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\n/** This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other. */\ninterface MessagePort extends EventTarget {\n    onmessage: ((this: MessagePort, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: MessagePort, ev: MessageEvent) => any) | null;\n    /** Disconnects the port, so that it is no longer active. */\n    close(): void;\n    /**\n     * Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.\n     *\n     * Throws a \"DataCloneError\" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.\n     */\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n    /** Begins dispatching messages received on the port. */\n    start(): void;\n    addEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var MessagePort: {\n    prototype: MessagePort;\n    new(): MessagePort;\n};\n\n/** Available only in secure contexts. */\ninterface NavigationPreloadManager {\n    disable(): Promise<void>;\n    enable(): Promise<void>;\n    getState(): Promise<NavigationPreloadState>;\n    setHeaderValue(value: string): Promise<void>;\n}\n\ndeclare var NavigationPreloadManager: {\n    prototype: NavigationPreloadManager;\n    new(): NavigationPreloadManager;\n};\n\ninterface NavigatorConcurrentHardware {\n    readonly hardwareConcurrency: number;\n}\n\ninterface NavigatorID {\n    /** @deprecated */\n    readonly appCodeName: string;\n    /** @deprecated */\n    readonly appName: string;\n    /** @deprecated */\n    readonly appVersion: string;\n    readonly platform: string;\n    /** @deprecated */\n    readonly product: string;\n    readonly userAgent: string;\n}\n\ninterface NavigatorLanguage {\n    readonly language: string;\n    readonly languages: ReadonlyArray<string>;\n}\n\n/** Available only in secure contexts. */\ninterface NavigatorLocks {\n    readonly locks: LockManager;\n}\n\ninterface NavigatorOnLine {\n    readonly onLine: boolean;\n}\n\n/** Available only in secure contexts. */\ninterface NavigatorStorage {\n    readonly storage: StorageManager;\n}\n\ninterface NotificationEventMap {\n    \"click\": Event;\n    \"close\": Event;\n    \"error\": Event;\n    \"show\": Event;\n}\n\n/** This Notifications API interface is used to configure and display desktop notifications to the user. */\ninterface Notification extends EventTarget {\n    readonly body: string;\n    readonly data: any;\n    readonly dir: NotificationDirection;\n    readonly icon: string;\n    readonly lang: string;\n    onclick: ((this: Notification, ev: Event) => any) | null;\n    onclose: ((this: Notification, ev: Event) => any) | null;\n    onerror: ((this: Notification, ev: Event) => any) | null;\n    onshow: ((this: Notification, ev: Event) => any) | null;\n    readonly tag: string;\n    readonly title: string;\n    close(): void;\n    addEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Notification: {\n    prototype: Notification;\n    new(title: string, options?: NotificationOptions): Notification;\n    readonly permission: NotificationPermission;\n};\n\n/** The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. */\ninterface NotificationEvent extends ExtendableEvent {\n    readonly action: string;\n    readonly notification: Notification;\n}\n\ndeclare var NotificationEvent: {\n    prototype: NotificationEvent;\n    new(type: string, eventInitDict: NotificationEventInit): NotificationEvent;\n};\n\n/** The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements(). */\ninterface OES_element_index_uint {\n}\n\ninterface OES_fbo_render_mipmap {\n}\n\n/** The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth. */\ninterface OES_standard_derivatives {\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GLenum;\n}\n\n/** The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures. */\ninterface OES_texture_float {\n}\n\n/** The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures. */\ninterface OES_texture_float_linear {\n}\n\n/** The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components. */\ninterface OES_texture_half_float {\n    readonly HALF_FLOAT_OES: GLenum;\n}\n\n/** The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures. */\ninterface OES_texture_half_float_linear {\n}\n\ninterface OES_vertex_array_object {\n    bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\n    createVertexArrayOES(): WebGLVertexArrayObjectOES | null;\n    deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\n    isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): GLboolean;\n    readonly VERTEX_ARRAY_BINDING_OES: GLenum;\n}\n\ninterface OVR_multiview2 {\n    framebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, baseViewIndex: GLint, numViews: GLsizei): void;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: GLenum;\n    readonly MAX_VIEWS_OVR: GLenum;\n}\n\n/** @deprecated this is not available in most browsers */\ninterface OffscreenCanvas extends EventTarget {\n}\n\n/** This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired. */\ninterface Path2D extends CanvasPath {\n    /** Adds to the path the path given by the argument. */\n    addPath(path: Path2D, transform?: DOMMatrix2DInit): void;\n}\n\ndeclare var Path2D: {\n    prototype: Path2D;\n    new(path?: Path2D | string): Path2D;\n};\n\ninterface PerformanceEventMap {\n    \"resourcetimingbufferfull\": Event;\n}\n\n/** Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API. */\ninterface Performance extends EventTarget {\n    onresourcetimingbufferfull: ((this: Performance, ev: Event) => any) | null;\n    readonly timeOrigin: DOMHighResTimeStamp;\n    clearMarks(markName?: string): void;\n    clearMeasures(measureName?: string): void;\n    clearResourceTimings(): void;\n    getEntries(): PerformanceEntryList;\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\n    getEntriesByType(type: string): PerformanceEntryList;\n    mark(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;\n    measure(measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string): PerformanceMeasure;\n    now(): DOMHighResTimeStamp;\n    setResourceTimingBufferSize(maxSize: number): void;\n    toJSON(): any;\n    addEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Performance: {\n    prototype: Performance;\n    new(): Performance;\n};\n\n/** Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image). */\ninterface PerformanceEntry {\n    readonly duration: DOMHighResTimeStamp;\n    readonly entryType: string;\n    readonly name: string;\n    readonly startTime: DOMHighResTimeStamp;\n    toJSON(): any;\n}\n\ndeclare var PerformanceEntry: {\n    prototype: PerformanceEntry;\n    new(): PerformanceEntry;\n};\n\n/** PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of \"mark\". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline. */\ninterface PerformanceMark extends PerformanceEntry {\n    readonly detail: any;\n}\n\ndeclare var PerformanceMark: {\n    prototype: PerformanceMark;\n    new(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;\n};\n\n/** PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of \"measure\". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline. */\ninterface PerformanceMeasure extends PerformanceEntry {\n    readonly detail: any;\n}\n\ndeclare var PerformanceMeasure: {\n    prototype: PerformanceMeasure;\n    new(): PerformanceMeasure;\n};\n\ninterface PerformanceObserver {\n    disconnect(): void;\n    observe(options?: PerformanceObserverInit): void;\n    takeRecords(): PerformanceEntryList;\n}\n\ndeclare var PerformanceObserver: {\n    prototype: PerformanceObserver;\n    new(callback: PerformanceObserverCallback): PerformanceObserver;\n    readonly supportedEntryTypes: ReadonlyArray<string>;\n};\n\ninterface PerformanceObserverEntryList {\n    getEntries(): PerformanceEntryList;\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\n    getEntriesByType(type: string): PerformanceEntryList;\n}\n\ndeclare var PerformanceObserverEntryList: {\n    prototype: PerformanceObserverEntryList;\n    new(): PerformanceObserverEntryList;\n};\n\n/** Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script. */\ninterface PerformanceResourceTiming extends PerformanceEntry {\n    readonly connectEnd: DOMHighResTimeStamp;\n    readonly connectStart: DOMHighResTimeStamp;\n    readonly decodedBodySize: number;\n    readonly domainLookupEnd: DOMHighResTimeStamp;\n    readonly domainLookupStart: DOMHighResTimeStamp;\n    readonly encodedBodySize: number;\n    readonly fetchStart: DOMHighResTimeStamp;\n    readonly initiatorType: string;\n    readonly nextHopProtocol: string;\n    readonly redirectEnd: DOMHighResTimeStamp;\n    readonly redirectStart: DOMHighResTimeStamp;\n    readonly requestStart: DOMHighResTimeStamp;\n    readonly responseEnd: DOMHighResTimeStamp;\n    readonly responseStart: DOMHighResTimeStamp;\n    readonly secureConnectionStart: DOMHighResTimeStamp;\n    readonly serverTiming: ReadonlyArray<PerformanceServerTiming>;\n    readonly transferSize: number;\n    readonly workerStart: DOMHighResTimeStamp;\n    toJSON(): any;\n}\n\ndeclare var PerformanceResourceTiming: {\n    prototype: PerformanceResourceTiming;\n    new(): PerformanceResourceTiming;\n};\n\ninterface PerformanceServerTiming {\n    readonly description: string;\n    readonly duration: DOMHighResTimeStamp;\n    readonly name: string;\n    toJSON(): any;\n}\n\ndeclare var PerformanceServerTiming: {\n    prototype: PerformanceServerTiming;\n    new(): PerformanceServerTiming;\n};\n\ninterface PermissionStatusEventMap {\n    \"change\": Event;\n}\n\ninterface PermissionStatus extends EventTarget {\n    onchange: ((this: PermissionStatus, ev: Event) => any) | null;\n    readonly state: PermissionState;\n    addEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var PermissionStatus: {\n    prototype: PermissionStatus;\n    new(): PermissionStatus;\n};\n\ninterface Permissions {\n    query(permissionDesc: PermissionDescriptor): Promise<PermissionStatus>;\n}\n\ndeclare var Permissions: {\n    prototype: Permissions;\n    new(): Permissions;\n};\n\n/** Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>). */\ninterface ProgressEvent<T extends EventTarget = EventTarget> extends Event {\n    readonly lengthComputable: boolean;\n    readonly loaded: number;\n    readonly target: T | null;\n    readonly total: number;\n}\n\ndeclare var ProgressEvent: {\n    prototype: ProgressEvent;\n    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;\n};\n\ninterface PromiseRejectionEvent extends Event {\n    readonly promise: Promise<any>;\n    readonly reason: any;\n}\n\ndeclare var PromiseRejectionEvent: {\n    prototype: PromiseRejectionEvent;\n    new(type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent;\n};\n\n/**\n * This Push API interface represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.\n * Available only in secure contexts.\n */\ninterface PushEvent extends ExtendableEvent {\n    readonly data: PushMessageData | null;\n}\n\ndeclare var PushEvent: {\n    prototype: PushEvent;\n    new(type: string, eventInitDict?: PushEventInit): PushEvent;\n};\n\n/**\n * This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.\n * Available only in secure contexts.\n */\ninterface PushManager {\n    getSubscription(): Promise<PushSubscription | null>;\n    permissionState(options?: PushSubscriptionOptionsInit): Promise<PermissionState>;\n    subscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;\n}\n\ndeclare var PushManager: {\n    prototype: PushManager;\n    new(): PushManager;\n    readonly supportedContentEncodings: ReadonlyArray<string>;\n};\n\n/**\n * This Push API interface provides methods which let you retrieve the push data sent by a server in various formats.\n * Available only in secure contexts.\n */\ninterface PushMessageData {\n    arrayBuffer(): ArrayBuffer;\n    blob(): Blob;\n    json(): any;\n    text(): string;\n}\n\ndeclare var PushMessageData: {\n    prototype: PushMessageData;\n    new(): PushMessageData;\n};\n\n/**\n * This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.\n * Available only in secure contexts.\n */\ninterface PushSubscription {\n    readonly endpoint: string;\n    readonly expirationTime: EpochTimeStamp | null;\n    readonly options: PushSubscriptionOptions;\n    getKey(name: PushEncryptionKeyName): ArrayBuffer | null;\n    toJSON(): PushSubscriptionJSON;\n    unsubscribe(): Promise<boolean>;\n}\n\ndeclare var PushSubscription: {\n    prototype: PushSubscription;\n    new(): PushSubscription;\n};\n\n/** Available only in secure contexts. */\ninterface PushSubscriptionOptions {\n    readonly applicationServerKey: ArrayBuffer | null;\n}\n\ndeclare var PushSubscriptionOptions: {\n    prototype: PushSubscriptionOptions;\n    new(): PushSubscriptionOptions;\n};\n\ninterface RTCEncodedAudioFrame {\n    data: ArrayBuffer;\n    readonly timestamp: number;\n    getMetadata(): RTCEncodedAudioFrameMetadata;\n}\n\ndeclare var RTCEncodedAudioFrame: {\n    prototype: RTCEncodedAudioFrame;\n    new(): RTCEncodedAudioFrame;\n};\n\ninterface RTCEncodedVideoFrame {\n    data: ArrayBuffer;\n    readonly timestamp: number;\n    readonly type: RTCEncodedVideoFrameType;\n    getMetadata(): RTCEncodedVideoFrameMetadata;\n}\n\ndeclare var RTCEncodedVideoFrame: {\n    prototype: RTCEncodedVideoFrame;\n    new(): RTCEncodedVideoFrame;\n};\n\ninterface ReadableByteStreamController {\n    readonly byobRequest: ReadableStreamBYOBRequest | null;\n    readonly desiredSize: number | null;\n    close(): void;\n    enqueue(chunk: ArrayBufferView): void;\n    error(e?: any): void;\n}\n\ndeclare var ReadableByteStreamController: {\n    prototype: ReadableByteStreamController;\n    new(): ReadableByteStreamController;\n};\n\n/** This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object. */\ninterface ReadableStream<R = any> {\n    readonly locked: boolean;\n    cancel(reason?: any): Promise<void>;\n    getReader(): ReadableStreamDefaultReader<R>;\n    pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;\n    pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n    tee(): [ReadableStream<R>, ReadableStream<R>];\n}\n\ndeclare var ReadableStream: {\n    prototype: ReadableStream;\n    new<R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\n};\n\ninterface ReadableStreamBYOBReader extends ReadableStreamGenericReader {\n    read(view: ArrayBufferView): Promise<ReadableStreamReadResult<ArrayBufferView>>;\n    releaseLock(): void;\n}\n\ndeclare var ReadableStreamBYOBReader: {\n    prototype: ReadableStreamBYOBReader;\n    new(stream: ReadableStream): ReadableStreamBYOBReader;\n};\n\ninterface ReadableStreamBYOBRequest {\n    readonly view: ArrayBufferView | null;\n    respond(bytesWritten: number): void;\n    respondWithNewView(view: ArrayBufferView): void;\n}\n\ndeclare var ReadableStreamBYOBRequest: {\n    prototype: ReadableStreamBYOBRequest;\n    new(): ReadableStreamBYOBRequest;\n};\n\ninterface ReadableStreamDefaultController<R = any> {\n    readonly desiredSize: number | null;\n    close(): void;\n    enqueue(chunk?: R): void;\n    error(e?: any): void;\n}\n\ndeclare var ReadableStreamDefaultController: {\n    prototype: ReadableStreamDefaultController;\n    new(): ReadableStreamDefaultController;\n};\n\ninterface ReadableStreamDefaultReader<R = any> extends ReadableStreamGenericReader {\n    read(): Promise<ReadableStreamReadResult<R>>;\n    releaseLock(): void;\n}\n\ndeclare var ReadableStreamDefaultReader: {\n    prototype: ReadableStreamDefaultReader;\n    new<R = any>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;\n};\n\ninterface ReadableStreamGenericReader {\n    readonly closed: Promise<undefined>;\n    cancel(reason?: any): Promise<void>;\n}\n\n/** This Fetch API interface represents a resource request. */\ninterface Request extends Body {\n    /** Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching. */\n    readonly cache: RequestCache;\n    /** Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. */\n    readonly credentials: RequestCredentials;\n    /** Returns the kind of resource requested by request, e.g., \"document\" or \"script\". */\n    readonly destination: RequestDestination;\n    /** Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header. */\n    readonly headers: Headers;\n    /** Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI] */\n    readonly integrity: string;\n    /** Returns a boolean indicating whether or not request can outlive the global in which it was created. */\n    readonly keepalive: boolean;\n    /** Returns request's HTTP method, which is \"GET\" by default. */\n    readonly method: string;\n    /** Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs. */\n    readonly mode: RequestMode;\n    /** Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default. */\n    readonly redirect: RequestRedirect;\n    /** Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made. */\n    readonly referrer: string;\n    /** Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer. */\n    readonly referrerPolicy: ReferrerPolicy;\n    /** Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler. */\n    readonly signal: AbortSignal;\n    /** Returns the URL of request as a string. */\n    readonly url: string;\n    clone(): Request;\n}\n\ndeclare var Request: {\n    prototype: Request;\n    new(input: RequestInfo | URL, init?: RequestInit): Request;\n};\n\n/** This Fetch API interface represents the response to a request. */\ninterface Response extends Body {\n    readonly headers: Headers;\n    readonly ok: boolean;\n    readonly redirected: boolean;\n    readonly status: number;\n    readonly statusText: string;\n    readonly type: ResponseType;\n    readonly url: string;\n    clone(): Response;\n}\n\ndeclare var Response: {\n    prototype: Response;\n    new(body?: BodyInit | null, init?: ResponseInit): Response;\n    error(): Response;\n    redirect(url: string | URL, status?: number): Response;\n};\n\n/** Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated. */\ninterface SecurityPolicyViolationEvent extends Event {\n    readonly blockedURI: string;\n    readonly columnNumber: number;\n    readonly disposition: SecurityPolicyViolationEventDisposition;\n    readonly documentURI: string;\n    readonly effectiveDirective: string;\n    readonly lineNumber: number;\n    readonly originalPolicy: string;\n    readonly referrer: string;\n    readonly sample: string;\n    readonly sourceFile: string;\n    readonly statusCode: number;\n    readonly violatedDirective: string;\n}\n\ndeclare var SecurityPolicyViolationEvent: {\n    prototype: SecurityPolicyViolationEvent;\n    new(type: string, eventInitDict?: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent;\n};\n\ninterface ServiceWorkerEventMap extends AbstractWorkerEventMap {\n    \"statechange\": Event;\n}\n\n/**\n * This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.\n * Available only in secure contexts.\n */\ninterface ServiceWorker extends EventTarget, AbstractWorker {\n    onstatechange: ((this: ServiceWorker, ev: Event) => any) | null;\n    readonly scriptURL: string;\n    readonly state: ServiceWorkerState;\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n    addEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ServiceWorker: {\n    prototype: ServiceWorker;\n    new(): ServiceWorker;\n};\n\ninterface ServiceWorkerContainerEventMap {\n    \"controllerchange\": Event;\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\n/**\n * The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.\n * Available only in secure contexts.\n */\ninterface ServiceWorkerContainer extends EventTarget {\n    readonly controller: ServiceWorker | null;\n    oncontrollerchange: ((this: ServiceWorkerContainer, ev: Event) => any) | null;\n    onmessage: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\n    readonly ready: Promise<ServiceWorkerRegistration>;\n    getRegistration(clientURL?: string | URL): Promise<ServiceWorkerRegistration | undefined>;\n    getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>;\n    register(scriptURL: string | URL, options?: RegistrationOptions): Promise<ServiceWorkerRegistration>;\n    startMessages(): void;\n    addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ServiceWorkerContainer: {\n    prototype: ServiceWorkerContainer;\n    new(): ServiceWorkerContainer;\n};\n\ninterface ServiceWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\n    \"activate\": ExtendableEvent;\n    \"fetch\": FetchEvent;\n    \"install\": ExtendableEvent;\n    \"message\": ExtendableMessageEvent;\n    \"messageerror\": MessageEvent;\n    \"notificationclick\": NotificationEvent;\n    \"notificationclose\": NotificationEvent;\n    \"push\": PushEvent;\n}\n\n/** This ServiceWorker API interface represents the global execution context of a service worker. */\ninterface ServiceWorkerGlobalScope extends WorkerGlobalScope {\n    readonly clients: Clients;\n    onactivate: ((this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any) | null;\n    onfetch: ((this: ServiceWorkerGlobalScope, ev: FetchEvent) => any) | null;\n    oninstall: ((this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any) | null;\n    onmessage: ((this: ServiceWorkerGlobalScope, ev: ExtendableMessageEvent) => any) | null;\n    onmessageerror: ((this: ServiceWorkerGlobalScope, ev: MessageEvent) => any) | null;\n    onnotificationclick: ((this: ServiceWorkerGlobalScope, ev: NotificationEvent) => any) | null;\n    onnotificationclose: ((this: ServiceWorkerGlobalScope, ev: NotificationEvent) => any) | null;\n    onpush: ((this: ServiceWorkerGlobalScope, ev: PushEvent) => any) | null;\n    readonly registration: ServiceWorkerRegistration;\n    readonly serviceWorker: ServiceWorker;\n    skipWaiting(): Promise<void>;\n    addEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type: K, listener: (this: ServiceWorkerGlobalScope, ev: ServiceWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type: K, listener: (this: ServiceWorkerGlobalScope, ev: ServiceWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ServiceWorkerGlobalScope: {\n    prototype: ServiceWorkerGlobalScope;\n    new(): ServiceWorkerGlobalScope;\n};\n\ninterface ServiceWorkerRegistrationEventMap {\n    \"updatefound\": Event;\n}\n\n/**\n * This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.\n * Available only in secure contexts.\n */\ninterface ServiceWorkerRegistration extends EventTarget {\n    readonly active: ServiceWorker | null;\n    readonly installing: ServiceWorker | null;\n    readonly navigationPreload: NavigationPreloadManager;\n    onupdatefound: ((this: ServiceWorkerRegistration, ev: Event) => any) | null;\n    readonly pushManager: PushManager;\n    readonly scope: string;\n    readonly updateViaCache: ServiceWorkerUpdateViaCache;\n    readonly waiting: ServiceWorker | null;\n    getNotifications(filter?: GetNotificationOptions): Promise<Notification[]>;\n    showNotification(title: string, options?: NotificationOptions): Promise<void>;\n    unregister(): Promise<boolean>;\n    update(): Promise<void>;\n    addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var ServiceWorkerRegistration: {\n    prototype: ServiceWorkerRegistration;\n    new(): ServiceWorkerRegistration;\n};\n\ninterface SharedWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\n    \"connect\": MessageEvent;\n}\n\ninterface SharedWorkerGlobalScope extends WorkerGlobalScope {\n    /** Returns sharedWorkerGlobal's name, i.e. the value given to the SharedWorker constructor. Multiple SharedWorker objects can correspond to the same shared worker (and SharedWorkerGlobalScope), by reusing the same name. */\n    readonly name: string;\n    onconnect: ((this: SharedWorkerGlobalScope, ev: MessageEvent) => any) | null;\n    /** Aborts sharedWorkerGlobal. */\n    close(): void;\n    addEventListener<K extends keyof SharedWorkerGlobalScopeEventMap>(type: K, listener: (this: SharedWorkerGlobalScope, ev: SharedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof SharedWorkerGlobalScopeEventMap>(type: K, listener: (this: SharedWorkerGlobalScope, ev: SharedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var SharedWorkerGlobalScope: {\n    prototype: SharedWorkerGlobalScope;\n    new(): SharedWorkerGlobalScope;\n};\n\n/** Available only in secure contexts. */\ninterface StorageManager {\n    estimate(): Promise<StorageEstimate>;\n    getDirectory(): Promise<FileSystemDirectoryHandle>;\n    persisted(): Promise<boolean>;\n}\n\ndeclare var StorageManager: {\n    prototype: StorageManager;\n    new(): StorageManager;\n};\n\n/**\n * This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).\n * Available only in secure contexts.\n */\ninterface SubtleCrypto {\n    decrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\n    deriveBits(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, length: number): Promise<ArrayBuffer>;\n    deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;\n    digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>;\n    encrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\n    exportKey(format: \"jwk\", key: CryptoKey): Promise<JsonWebKey>;\n    exportKey(format: Exclude<KeyFormat, \"jwk\">, key: CryptoKey): Promise<ArrayBuffer>;\n    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;\n    generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair | CryptoKey>;\n    importKey(format: \"jwk\", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    importKey(format: Exclude<KeyFormat, \"jwk\">, keyData: BufferSource, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;\n    sign(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\n    unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;\n    verify(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<boolean>;\n    wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<ArrayBuffer>;\n}\n\ndeclare var SubtleCrypto: {\n    prototype: SubtleCrypto;\n    new(): SubtleCrypto;\n};\n\n/** A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\ninterface TextDecoder extends TextDecoderCommon {\n    /**\n     * Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented input. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.\n     *\n     * ```\n     * var string = \"\", decoder = new TextDecoder(encoding), buffer;\n     * while(buffer = next_chunk()) {\n     *   string += decoder.decode(buffer, {stream:true});\n     * }\n     * string += decoder.decode(); // end-of-queue\n     * ```\n     *\n     * If the error mode is \"fatal\" and encoding's decoder returns error, throws a TypeError.\n     */\n    decode(input?: BufferSource, options?: TextDecodeOptions): string;\n}\n\ndeclare var TextDecoder: {\n    prototype: TextDecoder;\n    new(label?: string, options?: TextDecoderOptions): TextDecoder;\n};\n\ninterface TextDecoderCommon {\n    /** Returns encoding's name, lowercased. */\n    readonly encoding: string;\n    /** Returns true if error mode is \"fatal\", otherwise false. */\n    readonly fatal: boolean;\n    /** Returns the value of ignore BOM. */\n    readonly ignoreBOM: boolean;\n}\n\ninterface TextDecoderStream extends GenericTransformStream, TextDecoderCommon {\n    readonly readable: ReadableStream<string>;\n    readonly writable: WritableStream<BufferSource>;\n}\n\ndeclare var TextDecoderStream: {\n    prototype: TextDecoderStream;\n    new(label?: string, options?: TextDecoderOptions): TextDecoderStream;\n};\n\n/** TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\ninterface TextEncoder extends TextEncoderCommon {\n    /** Returns the result of running UTF-8's encoder. */\n    encode(input?: string): Uint8Array;\n    /** Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as an object wherein read is the number of converted code units of source and written is the number of bytes modified in destination. */\n    encodeInto(source: string, destination: Uint8Array): TextEncoderEncodeIntoResult;\n}\n\ndeclare var TextEncoder: {\n    prototype: TextEncoder;\n    new(): TextEncoder;\n};\n\ninterface TextEncoderCommon {\n    /** Returns \"utf-8\". */\n    readonly encoding: string;\n}\n\ninterface TextEncoderStream extends GenericTransformStream, TextEncoderCommon {\n    readonly readable: ReadableStream<Uint8Array>;\n    readonly writable: WritableStream<string>;\n}\n\ndeclare var TextEncoderStream: {\n    prototype: TextEncoderStream;\n    new(): TextEncoderStream;\n};\n\n/** The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method. */\ninterface TextMetrics {\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxAscent: number;\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxDescent: number;\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxLeft: number;\n    /** Returns the measurement described below. */\n    readonly actualBoundingBoxRight: number;\n    /** Returns the measurement described below. */\n    readonly fontBoundingBoxAscent: number;\n    /** Returns the measurement described below. */\n    readonly fontBoundingBoxDescent: number;\n    /** Returns the measurement described below. */\n    readonly width: number;\n}\n\ndeclare var TextMetrics: {\n    prototype: TextMetrics;\n    new(): TextMetrics;\n};\n\ninterface TransformStream<I = any, O = any> {\n    readonly readable: ReadableStream<O>;\n    readonly writable: WritableStream<I>;\n}\n\ndeclare var TransformStream: {\n    prototype: TransformStream;\n    new<I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;\n};\n\ninterface TransformStreamDefaultController<O = any> {\n    readonly desiredSize: number | null;\n    enqueue(chunk?: O): void;\n    error(reason?: any): void;\n    terminate(): void;\n}\n\ndeclare var TransformStreamDefaultController: {\n    prototype: TransformStreamDefaultController;\n    new(): TransformStreamDefaultController;\n};\n\n/** The URL interface represents an object providing static methods used for creating object URLs. */\ninterface URL {\n    hash: string;\n    host: string;\n    hostname: string;\n    href: string;\n    toString(): string;\n    readonly origin: string;\n    password: string;\n    pathname: string;\n    port: string;\n    protocol: string;\n    search: string;\n    readonly searchParams: URLSearchParams;\n    username: string;\n    toJSON(): string;\n}\n\ndeclare var URL: {\n    prototype: URL;\n    new(url: string | URL, base?: string | URL): URL;\n    createObjectURL(obj: Blob): string;\n    revokeObjectURL(url: string): void;\n};\n\ninterface URLSearchParams {\n    /** Appends a specified key/value pair as a new search parameter. */\n    append(name: string, value: string): void;\n    /** Deletes the given search parameter, and its associated value, from the list of all search parameters. */\n    delete(name: string): void;\n    /** Returns the first value associated to the given search parameter. */\n    get(name: string): string | null;\n    /** Returns all the values association with a given search parameter. */\n    getAll(name: string): string[];\n    /** Returns a Boolean indicating if such a search parameter exists. */\n    has(name: string): boolean;\n    /** Sets the value associated to a given search parameter to the given value. If there were several values, delete the others. */\n    set(name: string, value: string): void;\n    sort(): void;\n    /** Returns a string containing a query string suitable for use in a URL. Does not include the question mark. */\n    toString(): string;\n    forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;\n}\n\ndeclare var URLSearchParams: {\n    prototype: URLSearchParams;\n    new(init?: string[][] | Record<string, string> | string | URLSearchParams): URLSearchParams;\n    toString(): string;\n};\n\ninterface VideoColorSpace {\n    readonly fullRange: boolean | null;\n    readonly matrix: VideoMatrixCoefficients | null;\n    readonly primaries: VideoColorPrimaries | null;\n    readonly transfer: VideoTransferCharacteristics | null;\n    toJSON(): VideoColorSpaceInit;\n}\n\ndeclare var VideoColorSpace: {\n    prototype: VideoColorSpace;\n    new(init?: VideoColorSpaceInit): VideoColorSpace;\n};\n\ninterface WEBGL_color_buffer_float {\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum;\n    readonly RGBA32F_EXT: GLenum;\n    readonly UNSIGNED_NORMALIZED_EXT: GLenum;\n}\n\ninterface WEBGL_compressed_texture_astc {\n    getSupportedProfiles(): string[];\n    readonly COMPRESSED_RGBA_ASTC_10x10_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_10x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_10x6_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_10x8_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_12x10_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_12x12_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_4x4_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_5x4_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_5x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_6x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_6x6_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_8x5_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_8x6_KHR: GLenum;\n    readonly COMPRESSED_RGBA_ASTC_8x8_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GLenum;\n}\n\ninterface WEBGL_compressed_texture_etc {\n    readonly COMPRESSED_R11_EAC: GLenum;\n    readonly COMPRESSED_RG11_EAC: GLenum;\n    readonly COMPRESSED_RGB8_ETC2: GLenum;\n    readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum;\n    readonly COMPRESSED_RGBA8_ETC2_EAC: GLenum;\n    readonly COMPRESSED_SIGNED_R11_EAC: GLenum;\n    readonly COMPRESSED_SIGNED_RG11_EAC: GLenum;\n    readonly COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum;\n    readonly COMPRESSED_SRGB8_ETC2: GLenum;\n    readonly COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum;\n}\n\ninterface WEBGL_compressed_texture_etc1 {\n    readonly COMPRESSED_RGB_ETC1_WEBGL: GLenum;\n}\n\n/** The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats. */\ninterface WEBGL_compressed_texture_s3tc {\n    readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: GLenum;\n    readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: GLenum;\n    readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: GLenum;\n    readonly COMPRESSED_RGB_S3TC_DXT1_EXT: GLenum;\n}\n\ninterface WEBGL_compressed_texture_s3tc_srgb {\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GLenum;\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GLenum;\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GLenum;\n    readonly COMPRESSED_SRGB_S3TC_DXT1_EXT: GLenum;\n}\n\n/** The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes. */\ninterface WEBGL_debug_renderer_info {\n    readonly UNMASKED_RENDERER_WEBGL: GLenum;\n    readonly UNMASKED_VENDOR_WEBGL: GLenum;\n}\n\ninterface WEBGL_debug_shaders {\n    getTranslatedShaderSource(shader: WebGLShader): string;\n}\n\n/** The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures. */\ninterface WEBGL_depth_texture {\n    readonly UNSIGNED_INT_24_8_WEBGL: GLenum;\n}\n\ninterface WEBGL_draw_buffers {\n    drawBuffersWEBGL(buffers: GLenum[]): void;\n    readonly COLOR_ATTACHMENT0_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT10_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT11_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT12_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT13_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT14_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT15_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT1_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT2_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT3_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT4_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT5_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT6_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT7_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT8_WEBGL: GLenum;\n    readonly COLOR_ATTACHMENT9_WEBGL: GLenum;\n    readonly DRAW_BUFFER0_WEBGL: GLenum;\n    readonly DRAW_BUFFER10_WEBGL: GLenum;\n    readonly DRAW_BUFFER11_WEBGL: GLenum;\n    readonly DRAW_BUFFER12_WEBGL: GLenum;\n    readonly DRAW_BUFFER13_WEBGL: GLenum;\n    readonly DRAW_BUFFER14_WEBGL: GLenum;\n    readonly DRAW_BUFFER15_WEBGL: GLenum;\n    readonly DRAW_BUFFER1_WEBGL: GLenum;\n    readonly DRAW_BUFFER2_WEBGL: GLenum;\n    readonly DRAW_BUFFER3_WEBGL: GLenum;\n    readonly DRAW_BUFFER4_WEBGL: GLenum;\n    readonly DRAW_BUFFER5_WEBGL: GLenum;\n    readonly DRAW_BUFFER6_WEBGL: GLenum;\n    readonly DRAW_BUFFER7_WEBGL: GLenum;\n    readonly DRAW_BUFFER8_WEBGL: GLenum;\n    readonly DRAW_BUFFER9_WEBGL: GLenum;\n    readonly MAX_COLOR_ATTACHMENTS_WEBGL: GLenum;\n    readonly MAX_DRAW_BUFFERS_WEBGL: GLenum;\n}\n\ninterface WEBGL_lose_context {\n    loseContext(): void;\n    restoreContext(): void;\n}\n\ninterface WEBGL_multi_draw {\n    multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Int32Array | GLint[], firstsOffset: GLuint, countsList: Int32Array | GLsizei[], countsOffset: GLuint, instanceCountsList: Int32Array | GLsizei[], instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawArraysWEBGL(mode: GLenum, firstsList: Int32Array | GLint[], firstsOffset: GLuint, countsList: Int32Array | GLsizei[], countsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Int32Array | GLint[], countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | GLsizei[], offsetsOffset: GLuint, instanceCountsList: Int32Array | GLsizei[], instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsWEBGL(mode: GLenum, countsList: Int32Array | GLint[], countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | GLsizei[], offsetsOffset: GLuint, drawcount: GLsizei): void;\n}\n\ninterface WebGL2RenderingContext extends WebGL2RenderingContextBase, WebGL2RenderingContextOverloads, WebGLRenderingContextBase {\n}\n\ndeclare var WebGL2RenderingContext: {\n    prototype: WebGL2RenderingContext;\n    new(): WebGL2RenderingContext;\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\n    readonly ALREADY_SIGNALED: GLenum;\n    readonly ANY_SAMPLES_PASSED: GLenum;\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\n    readonly COLOR: GLenum;\n    readonly COLOR_ATTACHMENT1: GLenum;\n    readonly COLOR_ATTACHMENT10: GLenum;\n    readonly COLOR_ATTACHMENT11: GLenum;\n    readonly COLOR_ATTACHMENT12: GLenum;\n    readonly COLOR_ATTACHMENT13: GLenum;\n    readonly COLOR_ATTACHMENT14: GLenum;\n    readonly COLOR_ATTACHMENT15: GLenum;\n    readonly COLOR_ATTACHMENT2: GLenum;\n    readonly COLOR_ATTACHMENT3: GLenum;\n    readonly COLOR_ATTACHMENT4: GLenum;\n    readonly COLOR_ATTACHMENT5: GLenum;\n    readonly COLOR_ATTACHMENT6: GLenum;\n    readonly COLOR_ATTACHMENT7: GLenum;\n    readonly COLOR_ATTACHMENT8: GLenum;\n    readonly COLOR_ATTACHMENT9: GLenum;\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\n    readonly CONDITION_SATISFIED: GLenum;\n    readonly COPY_READ_BUFFER: GLenum;\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\n    readonly COPY_WRITE_BUFFER: GLenum;\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\n    readonly CURRENT_QUERY: GLenum;\n    readonly DEPTH: GLenum;\n    readonly DEPTH24_STENCIL8: GLenum;\n    readonly DEPTH32F_STENCIL8: GLenum;\n    readonly DEPTH_COMPONENT24: GLenum;\n    readonly DEPTH_COMPONENT32F: GLenum;\n    readonly DRAW_BUFFER0: GLenum;\n    readonly DRAW_BUFFER1: GLenum;\n    readonly DRAW_BUFFER10: GLenum;\n    readonly DRAW_BUFFER11: GLenum;\n    readonly DRAW_BUFFER12: GLenum;\n    readonly DRAW_BUFFER13: GLenum;\n    readonly DRAW_BUFFER14: GLenum;\n    readonly DRAW_BUFFER15: GLenum;\n    readonly DRAW_BUFFER2: GLenum;\n    readonly DRAW_BUFFER3: GLenum;\n    readonly DRAW_BUFFER4: GLenum;\n    readonly DRAW_BUFFER5: GLenum;\n    readonly DRAW_BUFFER6: GLenum;\n    readonly DRAW_BUFFER7: GLenum;\n    readonly DRAW_BUFFER8: GLenum;\n    readonly DRAW_BUFFER9: GLenum;\n    readonly DRAW_FRAMEBUFFER: GLenum;\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\n    readonly DYNAMIC_COPY: GLenum;\n    readonly DYNAMIC_READ: GLenum;\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\n    readonly FLOAT_MAT2x3: GLenum;\n    readonly FLOAT_MAT2x4: GLenum;\n    readonly FLOAT_MAT3x2: GLenum;\n    readonly FLOAT_MAT3x4: GLenum;\n    readonly FLOAT_MAT4x2: GLenum;\n    readonly FLOAT_MAT4x3: GLenum;\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\n    readonly HALF_FLOAT: GLenum;\n    readonly INTERLEAVED_ATTRIBS: GLenum;\n    readonly INT_2_10_10_10_REV: GLenum;\n    readonly INT_SAMPLER_2D: GLenum;\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly INT_SAMPLER_3D: GLenum;\n    readonly INT_SAMPLER_CUBE: GLenum;\n    readonly INVALID_INDEX: GLenum;\n    readonly MAX: GLenum;\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_DRAW_BUFFERS: GLenum;\n    readonly MAX_ELEMENTS_INDICES: GLenum;\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\n    readonly MAX_ELEMENT_INDEX: GLenum;\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly MAX_SAMPLES: GLenum;\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\n    readonly MAX_VARYING_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MIN: GLenum;\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly OBJECT_TYPE: GLenum;\n    readonly PACK_ROW_LENGTH: GLenum;\n    readonly PACK_SKIP_PIXELS: GLenum;\n    readonly PACK_SKIP_ROWS: GLenum;\n    readonly PIXEL_PACK_BUFFER: GLenum;\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\n    readonly QUERY_RESULT: GLenum;\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\n    readonly R11F_G11F_B10F: GLenum;\n    readonly R16F: GLenum;\n    readonly R16I: GLenum;\n    readonly R16UI: GLenum;\n    readonly R32F: GLenum;\n    readonly R32I: GLenum;\n    readonly R32UI: GLenum;\n    readonly R8: GLenum;\n    readonly R8I: GLenum;\n    readonly R8UI: GLenum;\n    readonly R8_SNORM: GLenum;\n    readonly RASTERIZER_DISCARD: GLenum;\n    readonly READ_BUFFER: GLenum;\n    readonly READ_FRAMEBUFFER: GLenum;\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\n    readonly RED: GLenum;\n    readonly RED_INTEGER: GLenum;\n    readonly RENDERBUFFER_SAMPLES: GLenum;\n    readonly RG: GLenum;\n    readonly RG16F: GLenum;\n    readonly RG16I: GLenum;\n    readonly RG16UI: GLenum;\n    readonly RG32F: GLenum;\n    readonly RG32I: GLenum;\n    readonly RG32UI: GLenum;\n    readonly RG8: GLenum;\n    readonly RG8I: GLenum;\n    readonly RG8UI: GLenum;\n    readonly RG8_SNORM: GLenum;\n    readonly RGB10_A2: GLenum;\n    readonly RGB10_A2UI: GLenum;\n    readonly RGB16F: GLenum;\n    readonly RGB16I: GLenum;\n    readonly RGB16UI: GLenum;\n    readonly RGB32F: GLenum;\n    readonly RGB32I: GLenum;\n    readonly RGB32UI: GLenum;\n    readonly RGB8: GLenum;\n    readonly RGB8I: GLenum;\n    readonly RGB8UI: GLenum;\n    readonly RGB8_SNORM: GLenum;\n    readonly RGB9_E5: GLenum;\n    readonly RGBA16F: GLenum;\n    readonly RGBA16I: GLenum;\n    readonly RGBA16UI: GLenum;\n    readonly RGBA32F: GLenum;\n    readonly RGBA32I: GLenum;\n    readonly RGBA32UI: GLenum;\n    readonly RGBA8: GLenum;\n    readonly RGBA8I: GLenum;\n    readonly RGBA8UI: GLenum;\n    readonly RGBA8_SNORM: GLenum;\n    readonly RGBA_INTEGER: GLenum;\n    readonly RGB_INTEGER: GLenum;\n    readonly RG_INTEGER: GLenum;\n    readonly SAMPLER_2D_ARRAY: GLenum;\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\n    readonly SAMPLER_2D_SHADOW: GLenum;\n    readonly SAMPLER_3D: GLenum;\n    readonly SAMPLER_BINDING: GLenum;\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\n    readonly SEPARATE_ATTRIBS: GLenum;\n    readonly SIGNALED: GLenum;\n    readonly SIGNED_NORMALIZED: GLenum;\n    readonly SRGB: GLenum;\n    readonly SRGB8: GLenum;\n    readonly SRGB8_ALPHA8: GLenum;\n    readonly STATIC_COPY: GLenum;\n    readonly STATIC_READ: GLenum;\n    readonly STENCIL: GLenum;\n    readonly STREAM_COPY: GLenum;\n    readonly STREAM_READ: GLenum;\n    readonly SYNC_CONDITION: GLenum;\n    readonly SYNC_FENCE: GLenum;\n    readonly SYNC_FLAGS: GLenum;\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\n    readonly SYNC_STATUS: GLenum;\n    readonly TEXTURE_2D_ARRAY: GLenum;\n    readonly TEXTURE_3D: GLenum;\n    readonly TEXTURE_BASE_LEVEL: GLenum;\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\n    readonly TEXTURE_BINDING_3D: GLenum;\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\n    readonly TEXTURE_COMPARE_MODE: GLenum;\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\n    readonly TEXTURE_MAX_LEVEL: GLenum;\n    readonly TEXTURE_MAX_LOD: GLenum;\n    readonly TEXTURE_MIN_LOD: GLenum;\n    readonly TEXTURE_WRAP_R: GLenum;\n    readonly TIMEOUT_EXPIRED: GLenum;\n    readonly TIMEOUT_IGNORED: GLint64;\n    readonly TRANSFORM_FEEDBACK: GLenum;\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\n    readonly UNIFORM_BUFFER: GLenum;\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\n    readonly UNIFORM_BUFFER_START: GLenum;\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\n    readonly UNIFORM_OFFSET: GLenum;\n    readonly UNIFORM_SIZE: GLenum;\n    readonly UNIFORM_TYPE: GLenum;\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\n    readonly UNPACK_ROW_LENGTH: GLenum;\n    readonly UNPACK_SKIP_IMAGES: GLenum;\n    readonly UNPACK_SKIP_PIXELS: GLenum;\n    readonly UNPACK_SKIP_ROWS: GLenum;\n    readonly UNSIGNALED: GLenum;\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\n    readonly UNSIGNED_INT_24_8: GLenum;\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\n    readonly UNSIGNED_INT_VEC2: GLenum;\n    readonly UNSIGNED_INT_VEC3: GLenum;\n    readonly UNSIGNED_INT_VEC4: GLenum;\n    readonly UNSIGNED_NORMALIZED: GLenum;\n    readonly VERTEX_ARRAY_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\n    readonly WAIT_FAILED: GLenum;\n    readonly ACTIVE_ATTRIBUTES: GLenum;\n    readonly ACTIVE_TEXTURE: GLenum;\n    readonly ACTIVE_UNIFORMS: GLenum;\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\n    readonly ALPHA: GLenum;\n    readonly ALPHA_BITS: GLenum;\n    readonly ALWAYS: GLenum;\n    readonly ARRAY_BUFFER: GLenum;\n    readonly ARRAY_BUFFER_BINDING: GLenum;\n    readonly ATTACHED_SHADERS: GLenum;\n    readonly BACK: GLenum;\n    readonly BLEND: GLenum;\n    readonly BLEND_COLOR: GLenum;\n    readonly BLEND_DST_ALPHA: GLenum;\n    readonly BLEND_DST_RGB: GLenum;\n    readonly BLEND_EQUATION: GLenum;\n    readonly BLEND_EQUATION_ALPHA: GLenum;\n    readonly BLEND_EQUATION_RGB: GLenum;\n    readonly BLEND_SRC_ALPHA: GLenum;\n    readonly BLEND_SRC_RGB: GLenum;\n    readonly BLUE_BITS: GLenum;\n    readonly BOOL: GLenum;\n    readonly BOOL_VEC2: GLenum;\n    readonly BOOL_VEC3: GLenum;\n    readonly BOOL_VEC4: GLenum;\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\n    readonly BUFFER_SIZE: GLenum;\n    readonly BUFFER_USAGE: GLenum;\n    readonly BYTE: GLenum;\n    readonly CCW: GLenum;\n    readonly CLAMP_TO_EDGE: GLenum;\n    readonly COLOR_ATTACHMENT0: GLenum;\n    readonly COLOR_BUFFER_BIT: GLenum;\n    readonly COLOR_CLEAR_VALUE: GLenum;\n    readonly COLOR_WRITEMASK: GLenum;\n    readonly COMPILE_STATUS: GLenum;\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\n    readonly CONSTANT_ALPHA: GLenum;\n    readonly CONSTANT_COLOR: GLenum;\n    readonly CONTEXT_LOST_WEBGL: GLenum;\n    readonly CULL_FACE: GLenum;\n    readonly CULL_FACE_MODE: GLenum;\n    readonly CURRENT_PROGRAM: GLenum;\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\n    readonly CW: GLenum;\n    readonly DECR: GLenum;\n    readonly DECR_WRAP: GLenum;\n    readonly DELETE_STATUS: GLenum;\n    readonly DEPTH_ATTACHMENT: GLenum;\n    readonly DEPTH_BITS: GLenum;\n    readonly DEPTH_BUFFER_BIT: GLenum;\n    readonly DEPTH_CLEAR_VALUE: GLenum;\n    readonly DEPTH_COMPONENT: GLenum;\n    readonly DEPTH_COMPONENT16: GLenum;\n    readonly DEPTH_FUNC: GLenum;\n    readonly DEPTH_RANGE: GLenum;\n    readonly DEPTH_STENCIL: GLenum;\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\n    readonly DEPTH_TEST: GLenum;\n    readonly DEPTH_WRITEMASK: GLenum;\n    readonly DITHER: GLenum;\n    readonly DONT_CARE: GLenum;\n    readonly DST_ALPHA: GLenum;\n    readonly DST_COLOR: GLenum;\n    readonly DYNAMIC_DRAW: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\n    readonly EQUAL: GLenum;\n    readonly FASTEST: GLenum;\n    readonly FLOAT: GLenum;\n    readonly FLOAT_MAT2: GLenum;\n    readonly FLOAT_MAT3: GLenum;\n    readonly FLOAT_MAT4: GLenum;\n    readonly FLOAT_VEC2: GLenum;\n    readonly FLOAT_VEC3: GLenum;\n    readonly FLOAT_VEC4: GLenum;\n    readonly FRAGMENT_SHADER: GLenum;\n    readonly FRAMEBUFFER: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\n    readonly FRAMEBUFFER_BINDING: GLenum;\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\n    readonly FRONT: GLenum;\n    readonly FRONT_AND_BACK: GLenum;\n    readonly FRONT_FACE: GLenum;\n    readonly FUNC_ADD: GLenum;\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\n    readonly FUNC_SUBTRACT: GLenum;\n    readonly GENERATE_MIPMAP_HINT: GLenum;\n    readonly GEQUAL: GLenum;\n    readonly GREATER: GLenum;\n    readonly GREEN_BITS: GLenum;\n    readonly HIGH_FLOAT: GLenum;\n    readonly HIGH_INT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\n    readonly INCR: GLenum;\n    readonly INCR_WRAP: GLenum;\n    readonly INT: GLenum;\n    readonly INT_VEC2: GLenum;\n    readonly INT_VEC3: GLenum;\n    readonly INT_VEC4: GLenum;\n    readonly INVALID_ENUM: GLenum;\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\n    readonly INVALID_OPERATION: GLenum;\n    readonly INVALID_VALUE: GLenum;\n    readonly INVERT: GLenum;\n    readonly KEEP: GLenum;\n    readonly LEQUAL: GLenum;\n    readonly LESS: GLenum;\n    readonly LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\n    readonly LINES: GLenum;\n    readonly LINE_LOOP: GLenum;\n    readonly LINE_STRIP: GLenum;\n    readonly LINE_WIDTH: GLenum;\n    readonly LINK_STATUS: GLenum;\n    readonly LOW_FLOAT: GLenum;\n    readonly LOW_INT: GLenum;\n    readonly LUMINANCE: GLenum;\n    readonly LUMINANCE_ALPHA: GLenum;\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_TEXTURE_SIZE: GLenum;\n    readonly MAX_VARYING_VECTORS: GLenum;\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\n    readonly MAX_VIEWPORT_DIMS: GLenum;\n    readonly MEDIUM_FLOAT: GLenum;\n    readonly MEDIUM_INT: GLenum;\n    readonly MIRRORED_REPEAT: GLenum;\n    readonly NEAREST: GLenum;\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\n    readonly NEVER: GLenum;\n    readonly NICEST: GLenum;\n    readonly NONE: GLenum;\n    readonly NOTEQUAL: GLenum;\n    readonly NO_ERROR: GLenum;\n    readonly ONE: GLenum;\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\n    readonly ONE_MINUS_DST_COLOR: GLenum;\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\n    readonly OUT_OF_MEMORY: GLenum;\n    readonly PACK_ALIGNMENT: GLenum;\n    readonly POINTS: GLenum;\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\n    readonly POLYGON_OFFSET_FILL: GLenum;\n    readonly POLYGON_OFFSET_UNITS: GLenum;\n    readonly RED_BITS: GLenum;\n    readonly RENDERBUFFER: GLenum;\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\n    readonly RENDERBUFFER_BINDING: GLenum;\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\n    readonly RENDERBUFFER_HEIGHT: GLenum;\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\n    readonly RENDERBUFFER_WIDTH: GLenum;\n    readonly RENDERER: GLenum;\n    readonly REPEAT: GLenum;\n    readonly REPLACE: GLenum;\n    readonly RGB: GLenum;\n    readonly RGB565: GLenum;\n    readonly RGB5_A1: GLenum;\n    readonly RGBA: GLenum;\n    readonly RGBA4: GLenum;\n    readonly SAMPLER_2D: GLenum;\n    readonly SAMPLER_CUBE: GLenum;\n    readonly SAMPLES: GLenum;\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\n    readonly SAMPLE_BUFFERS: GLenum;\n    readonly SAMPLE_COVERAGE: GLenum;\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\n    readonly SCISSOR_BOX: GLenum;\n    readonly SCISSOR_TEST: GLenum;\n    readonly SHADER_TYPE: GLenum;\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\n    readonly SHORT: GLenum;\n    readonly SRC_ALPHA: GLenum;\n    readonly SRC_ALPHA_SATURATE: GLenum;\n    readonly SRC_COLOR: GLenum;\n    readonly STATIC_DRAW: GLenum;\n    readonly STENCIL_ATTACHMENT: GLenum;\n    readonly STENCIL_BACK_FAIL: GLenum;\n    readonly STENCIL_BACK_FUNC: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_BACK_REF: GLenum;\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\n    readonly STENCIL_BITS: GLenum;\n    readonly STENCIL_BUFFER_BIT: GLenum;\n    readonly STENCIL_CLEAR_VALUE: GLenum;\n    readonly STENCIL_FAIL: GLenum;\n    readonly STENCIL_FUNC: GLenum;\n    readonly STENCIL_INDEX8: GLenum;\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_REF: GLenum;\n    readonly STENCIL_TEST: GLenum;\n    readonly STENCIL_VALUE_MASK: GLenum;\n    readonly STENCIL_WRITEMASK: GLenum;\n    readonly STREAM_DRAW: GLenum;\n    readonly SUBPIXEL_BITS: GLenum;\n    readonly TEXTURE: GLenum;\n    readonly TEXTURE0: GLenum;\n    readonly TEXTURE1: GLenum;\n    readonly TEXTURE10: GLenum;\n    readonly TEXTURE11: GLenum;\n    readonly TEXTURE12: GLenum;\n    readonly TEXTURE13: GLenum;\n    readonly TEXTURE14: GLenum;\n    readonly TEXTURE15: GLenum;\n    readonly TEXTURE16: GLenum;\n    readonly TEXTURE17: GLenum;\n    readonly TEXTURE18: GLenum;\n    readonly TEXTURE19: GLenum;\n    readonly TEXTURE2: GLenum;\n    readonly TEXTURE20: GLenum;\n    readonly TEXTURE21: GLenum;\n    readonly TEXTURE22: GLenum;\n    readonly TEXTURE23: GLenum;\n    readonly TEXTURE24: GLenum;\n    readonly TEXTURE25: GLenum;\n    readonly TEXTURE26: GLenum;\n    readonly TEXTURE27: GLenum;\n    readonly TEXTURE28: GLenum;\n    readonly TEXTURE29: GLenum;\n    readonly TEXTURE3: GLenum;\n    readonly TEXTURE30: GLenum;\n    readonly TEXTURE31: GLenum;\n    readonly TEXTURE4: GLenum;\n    readonly TEXTURE5: GLenum;\n    readonly TEXTURE6: GLenum;\n    readonly TEXTURE7: GLenum;\n    readonly TEXTURE8: GLenum;\n    readonly TEXTURE9: GLenum;\n    readonly TEXTURE_2D: GLenum;\n    readonly TEXTURE_BINDING_2D: GLenum;\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\n    readonly TEXTURE_MAG_FILTER: GLenum;\n    readonly TEXTURE_MIN_FILTER: GLenum;\n    readonly TEXTURE_WRAP_S: GLenum;\n    readonly TEXTURE_WRAP_T: GLenum;\n    readonly TRIANGLES: GLenum;\n    readonly TRIANGLE_FAN: GLenum;\n    readonly TRIANGLE_STRIP: GLenum;\n    readonly UNPACK_ALIGNMENT: GLenum;\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\n    readonly UNSIGNED_BYTE: GLenum;\n    readonly UNSIGNED_INT: GLenum;\n    readonly UNSIGNED_SHORT: GLenum;\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\n    readonly VALIDATE_STATUS: GLenum;\n    readonly VENDOR: GLenum;\n    readonly VERSION: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\n    readonly VERTEX_SHADER: GLenum;\n    readonly VIEWPORT: GLenum;\n    readonly ZERO: GLenum;\n};\n\ninterface WebGL2RenderingContextBase {\n    beginQuery(target: GLenum, query: WebGLQuery): void;\n    beginTransformFeedback(primitiveMode: GLenum): void;\n    bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer | null): void;\n    bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer | null, offset: GLintptr, size: GLsizeiptr): void;\n    bindSampler(unit: GLuint, sampler: WebGLSampler | null): void;\n    bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback | null): void;\n    bindVertexArray(array: WebGLVertexArrayObject | null): void;\n    blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;\n    clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;\n    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset?: GLuint): void;\n    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset?: GLuint): void;\n    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset?: GLuint): void;\n    clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum;\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;\n    copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    createQuery(): WebGLQuery | null;\n    createSampler(): WebGLSampler | null;\n    createTransformFeedback(): WebGLTransformFeedback | null;\n    createVertexArray(): WebGLVertexArrayObject | null;\n    deleteQuery(query: WebGLQuery | null): void;\n    deleteSampler(sampler: WebGLSampler | null): void;\n    deleteSync(sync: WebGLSync | null): void;\n    deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;\n    deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\n    drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;\n    drawBuffers(buffers: GLenum[]): void;\n    drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;\n    drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr): void;\n    endQuery(target: GLenum): void;\n    endTransformFeedback(): void;\n    fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync | null;\n    framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, layer: GLint): void;\n    getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): string | null;\n    getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): any;\n    getActiveUniforms(program: WebGLProgram, uniformIndices: GLuint[], pname: GLenum): any;\n    getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset?: GLuint, length?: GLuint): void;\n    getFragDataLocation(program: WebGLProgram, name: string): GLint;\n    getIndexedParameter(target: GLenum, index: GLuint): any;\n    getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): any;\n    getQuery(target: GLenum, pname: GLenum): WebGLQuery | null;\n    getQueryParameter(query: WebGLQuery, pname: GLenum): any;\n    getSamplerParameter(sampler: WebGLSampler, pname: GLenum): any;\n    getSyncParameter(sync: WebGLSync, pname: GLenum): any;\n    getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\n    getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): GLuint;\n    getUniformIndices(program: WebGLProgram, uniformNames: string[]): GLuint[] | null;\n    invalidateFramebuffer(target: GLenum, attachments: GLenum[]): void;\n    invalidateSubFramebuffer(target: GLenum, attachments: GLenum[], x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    isQuery(query: WebGLQuery | null): GLboolean;\n    isSampler(sampler: WebGLSampler | null): GLboolean;\n    isSync(sync: WebGLSync | null): GLboolean;\n    isTransformFeedback(tf: WebGLTransformFeedback | null): GLboolean;\n    isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;\n    pauseTransformFeedback(): void;\n    readBuffer(src: GLenum): void;\n    renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\n    resumeTransformFeedback(): void;\n    samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): void;\n    samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView | null): void;\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\n    texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\n    texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView | null, srcOffset?: GLuint): void;\n    transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: GLenum): void;\n    uniform1ui(location: WebGLUniformLocation | null, v0: GLuint): void;\n    uniform1uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint): void;\n    uniform2uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint): void;\n    uniform3uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;\n    uniform4uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void;\n    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    vertexAttribDivisor(index: GLuint, divisor: GLuint): void;\n    vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;\n    vertexAttribI4iv(index: GLuint, values: Int32List): void;\n    vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;\n    vertexAttribI4uiv(index: GLuint, values: Uint32List): void;\n    vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;\n    waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): void;\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\n    readonly ALREADY_SIGNALED: GLenum;\n    readonly ANY_SAMPLES_PASSED: GLenum;\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\n    readonly COLOR: GLenum;\n    readonly COLOR_ATTACHMENT1: GLenum;\n    readonly COLOR_ATTACHMENT10: GLenum;\n    readonly COLOR_ATTACHMENT11: GLenum;\n    readonly COLOR_ATTACHMENT12: GLenum;\n    readonly COLOR_ATTACHMENT13: GLenum;\n    readonly COLOR_ATTACHMENT14: GLenum;\n    readonly COLOR_ATTACHMENT15: GLenum;\n    readonly COLOR_ATTACHMENT2: GLenum;\n    readonly COLOR_ATTACHMENT3: GLenum;\n    readonly COLOR_ATTACHMENT4: GLenum;\n    readonly COLOR_ATTACHMENT5: GLenum;\n    readonly COLOR_ATTACHMENT6: GLenum;\n    readonly COLOR_ATTACHMENT7: GLenum;\n    readonly COLOR_ATTACHMENT8: GLenum;\n    readonly COLOR_ATTACHMENT9: GLenum;\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\n    readonly CONDITION_SATISFIED: GLenum;\n    readonly COPY_READ_BUFFER: GLenum;\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\n    readonly COPY_WRITE_BUFFER: GLenum;\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\n    readonly CURRENT_QUERY: GLenum;\n    readonly DEPTH: GLenum;\n    readonly DEPTH24_STENCIL8: GLenum;\n    readonly DEPTH32F_STENCIL8: GLenum;\n    readonly DEPTH_COMPONENT24: GLenum;\n    readonly DEPTH_COMPONENT32F: GLenum;\n    readonly DRAW_BUFFER0: GLenum;\n    readonly DRAW_BUFFER1: GLenum;\n    readonly DRAW_BUFFER10: GLenum;\n    readonly DRAW_BUFFER11: GLenum;\n    readonly DRAW_BUFFER12: GLenum;\n    readonly DRAW_BUFFER13: GLenum;\n    readonly DRAW_BUFFER14: GLenum;\n    readonly DRAW_BUFFER15: GLenum;\n    readonly DRAW_BUFFER2: GLenum;\n    readonly DRAW_BUFFER3: GLenum;\n    readonly DRAW_BUFFER4: GLenum;\n    readonly DRAW_BUFFER5: GLenum;\n    readonly DRAW_BUFFER6: GLenum;\n    readonly DRAW_BUFFER7: GLenum;\n    readonly DRAW_BUFFER8: GLenum;\n    readonly DRAW_BUFFER9: GLenum;\n    readonly DRAW_FRAMEBUFFER: GLenum;\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\n    readonly DYNAMIC_COPY: GLenum;\n    readonly DYNAMIC_READ: GLenum;\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\n    readonly FLOAT_MAT2x3: GLenum;\n    readonly FLOAT_MAT2x4: GLenum;\n    readonly FLOAT_MAT3x2: GLenum;\n    readonly FLOAT_MAT3x4: GLenum;\n    readonly FLOAT_MAT4x2: GLenum;\n    readonly FLOAT_MAT4x3: GLenum;\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\n    readonly HALF_FLOAT: GLenum;\n    readonly INTERLEAVED_ATTRIBS: GLenum;\n    readonly INT_2_10_10_10_REV: GLenum;\n    readonly INT_SAMPLER_2D: GLenum;\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly INT_SAMPLER_3D: GLenum;\n    readonly INT_SAMPLER_CUBE: GLenum;\n    readonly INVALID_INDEX: GLenum;\n    readonly MAX: GLenum;\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_DRAW_BUFFERS: GLenum;\n    readonly MAX_ELEMENTS_INDICES: GLenum;\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\n    readonly MAX_ELEMENT_INDEX: GLenum;\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly MAX_SAMPLES: GLenum;\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\n    readonly MAX_VARYING_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\n    readonly MIN: GLenum;\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\n    readonly OBJECT_TYPE: GLenum;\n    readonly PACK_ROW_LENGTH: GLenum;\n    readonly PACK_SKIP_PIXELS: GLenum;\n    readonly PACK_SKIP_ROWS: GLenum;\n    readonly PIXEL_PACK_BUFFER: GLenum;\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\n    readonly QUERY_RESULT: GLenum;\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\n    readonly R11F_G11F_B10F: GLenum;\n    readonly R16F: GLenum;\n    readonly R16I: GLenum;\n    readonly R16UI: GLenum;\n    readonly R32F: GLenum;\n    readonly R32I: GLenum;\n    readonly R32UI: GLenum;\n    readonly R8: GLenum;\n    readonly R8I: GLenum;\n    readonly R8UI: GLenum;\n    readonly R8_SNORM: GLenum;\n    readonly RASTERIZER_DISCARD: GLenum;\n    readonly READ_BUFFER: GLenum;\n    readonly READ_FRAMEBUFFER: GLenum;\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\n    readonly RED: GLenum;\n    readonly RED_INTEGER: GLenum;\n    readonly RENDERBUFFER_SAMPLES: GLenum;\n    readonly RG: GLenum;\n    readonly RG16F: GLenum;\n    readonly RG16I: GLenum;\n    readonly RG16UI: GLenum;\n    readonly RG32F: GLenum;\n    readonly RG32I: GLenum;\n    readonly RG32UI: GLenum;\n    readonly RG8: GLenum;\n    readonly RG8I: GLenum;\n    readonly RG8UI: GLenum;\n    readonly RG8_SNORM: GLenum;\n    readonly RGB10_A2: GLenum;\n    readonly RGB10_A2UI: GLenum;\n    readonly RGB16F: GLenum;\n    readonly RGB16I: GLenum;\n    readonly RGB16UI: GLenum;\n    readonly RGB32F: GLenum;\n    readonly RGB32I: GLenum;\n    readonly RGB32UI: GLenum;\n    readonly RGB8: GLenum;\n    readonly RGB8I: GLenum;\n    readonly RGB8UI: GLenum;\n    readonly RGB8_SNORM: GLenum;\n    readonly RGB9_E5: GLenum;\n    readonly RGBA16F: GLenum;\n    readonly RGBA16I: GLenum;\n    readonly RGBA16UI: GLenum;\n    readonly RGBA32F: GLenum;\n    readonly RGBA32I: GLenum;\n    readonly RGBA32UI: GLenum;\n    readonly RGBA8: GLenum;\n    readonly RGBA8I: GLenum;\n    readonly RGBA8UI: GLenum;\n    readonly RGBA8_SNORM: GLenum;\n    readonly RGBA_INTEGER: GLenum;\n    readonly RGB_INTEGER: GLenum;\n    readonly RG_INTEGER: GLenum;\n    readonly SAMPLER_2D_ARRAY: GLenum;\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\n    readonly SAMPLER_2D_SHADOW: GLenum;\n    readonly SAMPLER_3D: GLenum;\n    readonly SAMPLER_BINDING: GLenum;\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\n    readonly SEPARATE_ATTRIBS: GLenum;\n    readonly SIGNALED: GLenum;\n    readonly SIGNED_NORMALIZED: GLenum;\n    readonly SRGB: GLenum;\n    readonly SRGB8: GLenum;\n    readonly SRGB8_ALPHA8: GLenum;\n    readonly STATIC_COPY: GLenum;\n    readonly STATIC_READ: GLenum;\n    readonly STENCIL: GLenum;\n    readonly STREAM_COPY: GLenum;\n    readonly STREAM_READ: GLenum;\n    readonly SYNC_CONDITION: GLenum;\n    readonly SYNC_FENCE: GLenum;\n    readonly SYNC_FLAGS: GLenum;\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\n    readonly SYNC_STATUS: GLenum;\n    readonly TEXTURE_2D_ARRAY: GLenum;\n    readonly TEXTURE_3D: GLenum;\n    readonly TEXTURE_BASE_LEVEL: GLenum;\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\n    readonly TEXTURE_BINDING_3D: GLenum;\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\n    readonly TEXTURE_COMPARE_MODE: GLenum;\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\n    readonly TEXTURE_MAX_LEVEL: GLenum;\n    readonly TEXTURE_MAX_LOD: GLenum;\n    readonly TEXTURE_MIN_LOD: GLenum;\n    readonly TEXTURE_WRAP_R: GLenum;\n    readonly TIMEOUT_EXPIRED: GLenum;\n    readonly TIMEOUT_IGNORED: GLint64;\n    readonly TRANSFORM_FEEDBACK: GLenum;\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\n    readonly UNIFORM_BUFFER: GLenum;\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\n    readonly UNIFORM_BUFFER_START: GLenum;\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\n    readonly UNIFORM_OFFSET: GLenum;\n    readonly UNIFORM_SIZE: GLenum;\n    readonly UNIFORM_TYPE: GLenum;\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\n    readonly UNPACK_ROW_LENGTH: GLenum;\n    readonly UNPACK_SKIP_IMAGES: GLenum;\n    readonly UNPACK_SKIP_PIXELS: GLenum;\n    readonly UNPACK_SKIP_ROWS: GLenum;\n    readonly UNSIGNALED: GLenum;\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\n    readonly UNSIGNED_INT_24_8: GLenum;\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\n    readonly UNSIGNED_INT_VEC2: GLenum;\n    readonly UNSIGNED_INT_VEC3: GLenum;\n    readonly UNSIGNED_INT_VEC4: GLenum;\n    readonly UNSIGNED_NORMALIZED: GLenum;\n    readonly VERTEX_ARRAY_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\n    readonly WAIT_FAILED: GLenum;\n}\n\ninterface WebGL2RenderingContextOverloads {\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\n    bufferData(target: GLenum, srcData: BufferSource | null, usage: GLenum): void;\n    bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: GLuint, length?: GLuint): void;\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: BufferSource): void;\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: GLuint, length?: GLuint): void;\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView | null): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, offset: GLintptr): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView, dstOffset: GLuint): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\n    uniform1fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform1iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\n}\n\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods. */\ninterface WebGLActiveInfo {\n    readonly name: string;\n    readonly size: GLint;\n    readonly type: GLenum;\n}\n\ndeclare var WebGLActiveInfo: {\n    prototype: WebGLActiveInfo;\n    new(): WebGLActiveInfo;\n};\n\n/** Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors. */\ninterface WebGLBuffer {\n}\n\ndeclare var WebGLBuffer: {\n    prototype: WebGLBuffer;\n    new(): WebGLBuffer;\n};\n\n/** The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context. */\ninterface WebGLContextEvent extends Event {\n    readonly statusMessage: string;\n}\n\ndeclare var WebGLContextEvent: {\n    prototype: WebGLContextEvent;\n    new(type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent;\n};\n\n/** Part of the WebGL API and represents a collection of buffers that serve as a rendering destination. */\ninterface WebGLFramebuffer {\n}\n\ndeclare var WebGLFramebuffer: {\n    prototype: WebGLFramebuffer;\n    new(): WebGLFramebuffer;\n};\n\n/** The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL). */\ninterface WebGLProgram {\n}\n\ndeclare var WebGLProgram: {\n    prototype: WebGLProgram;\n    new(): WebGLProgram;\n};\n\ninterface WebGLQuery {\n}\n\ndeclare var WebGLQuery: {\n    prototype: WebGLQuery;\n    new(): WebGLQuery;\n};\n\n/** Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation. */\ninterface WebGLRenderbuffer {\n}\n\ndeclare var WebGLRenderbuffer: {\n    prototype: WebGLRenderbuffer;\n    new(): WebGLRenderbuffer;\n};\n\n/** Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element. */\ninterface WebGLRenderingContext extends WebGLRenderingContextBase, WebGLRenderingContextOverloads {\n}\n\ndeclare var WebGLRenderingContext: {\n    prototype: WebGLRenderingContext;\n    new(): WebGLRenderingContext;\n    readonly ACTIVE_ATTRIBUTES: GLenum;\n    readonly ACTIVE_TEXTURE: GLenum;\n    readonly ACTIVE_UNIFORMS: GLenum;\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\n    readonly ALPHA: GLenum;\n    readonly ALPHA_BITS: GLenum;\n    readonly ALWAYS: GLenum;\n    readonly ARRAY_BUFFER: GLenum;\n    readonly ARRAY_BUFFER_BINDING: GLenum;\n    readonly ATTACHED_SHADERS: GLenum;\n    readonly BACK: GLenum;\n    readonly BLEND: GLenum;\n    readonly BLEND_COLOR: GLenum;\n    readonly BLEND_DST_ALPHA: GLenum;\n    readonly BLEND_DST_RGB: GLenum;\n    readonly BLEND_EQUATION: GLenum;\n    readonly BLEND_EQUATION_ALPHA: GLenum;\n    readonly BLEND_EQUATION_RGB: GLenum;\n    readonly BLEND_SRC_ALPHA: GLenum;\n    readonly BLEND_SRC_RGB: GLenum;\n    readonly BLUE_BITS: GLenum;\n    readonly BOOL: GLenum;\n    readonly BOOL_VEC2: GLenum;\n    readonly BOOL_VEC3: GLenum;\n    readonly BOOL_VEC4: GLenum;\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\n    readonly BUFFER_SIZE: GLenum;\n    readonly BUFFER_USAGE: GLenum;\n    readonly BYTE: GLenum;\n    readonly CCW: GLenum;\n    readonly CLAMP_TO_EDGE: GLenum;\n    readonly COLOR_ATTACHMENT0: GLenum;\n    readonly COLOR_BUFFER_BIT: GLenum;\n    readonly COLOR_CLEAR_VALUE: GLenum;\n    readonly COLOR_WRITEMASK: GLenum;\n    readonly COMPILE_STATUS: GLenum;\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\n    readonly CONSTANT_ALPHA: GLenum;\n    readonly CONSTANT_COLOR: GLenum;\n    readonly CONTEXT_LOST_WEBGL: GLenum;\n    readonly CULL_FACE: GLenum;\n    readonly CULL_FACE_MODE: GLenum;\n    readonly CURRENT_PROGRAM: GLenum;\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\n    readonly CW: GLenum;\n    readonly DECR: GLenum;\n    readonly DECR_WRAP: GLenum;\n    readonly DELETE_STATUS: GLenum;\n    readonly DEPTH_ATTACHMENT: GLenum;\n    readonly DEPTH_BITS: GLenum;\n    readonly DEPTH_BUFFER_BIT: GLenum;\n    readonly DEPTH_CLEAR_VALUE: GLenum;\n    readonly DEPTH_COMPONENT: GLenum;\n    readonly DEPTH_COMPONENT16: GLenum;\n    readonly DEPTH_FUNC: GLenum;\n    readonly DEPTH_RANGE: GLenum;\n    readonly DEPTH_STENCIL: GLenum;\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\n    readonly DEPTH_TEST: GLenum;\n    readonly DEPTH_WRITEMASK: GLenum;\n    readonly DITHER: GLenum;\n    readonly DONT_CARE: GLenum;\n    readonly DST_ALPHA: GLenum;\n    readonly DST_COLOR: GLenum;\n    readonly DYNAMIC_DRAW: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\n    readonly EQUAL: GLenum;\n    readonly FASTEST: GLenum;\n    readonly FLOAT: GLenum;\n    readonly FLOAT_MAT2: GLenum;\n    readonly FLOAT_MAT3: GLenum;\n    readonly FLOAT_MAT4: GLenum;\n    readonly FLOAT_VEC2: GLenum;\n    readonly FLOAT_VEC3: GLenum;\n    readonly FLOAT_VEC4: GLenum;\n    readonly FRAGMENT_SHADER: GLenum;\n    readonly FRAMEBUFFER: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\n    readonly FRAMEBUFFER_BINDING: GLenum;\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\n    readonly FRONT: GLenum;\n    readonly FRONT_AND_BACK: GLenum;\n    readonly FRONT_FACE: GLenum;\n    readonly FUNC_ADD: GLenum;\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\n    readonly FUNC_SUBTRACT: GLenum;\n    readonly GENERATE_MIPMAP_HINT: GLenum;\n    readonly GEQUAL: GLenum;\n    readonly GREATER: GLenum;\n    readonly GREEN_BITS: GLenum;\n    readonly HIGH_FLOAT: GLenum;\n    readonly HIGH_INT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\n    readonly INCR: GLenum;\n    readonly INCR_WRAP: GLenum;\n    readonly INT: GLenum;\n    readonly INT_VEC2: GLenum;\n    readonly INT_VEC3: GLenum;\n    readonly INT_VEC4: GLenum;\n    readonly INVALID_ENUM: GLenum;\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\n    readonly INVALID_OPERATION: GLenum;\n    readonly INVALID_VALUE: GLenum;\n    readonly INVERT: GLenum;\n    readonly KEEP: GLenum;\n    readonly LEQUAL: GLenum;\n    readonly LESS: GLenum;\n    readonly LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\n    readonly LINES: GLenum;\n    readonly LINE_LOOP: GLenum;\n    readonly LINE_STRIP: GLenum;\n    readonly LINE_WIDTH: GLenum;\n    readonly LINK_STATUS: GLenum;\n    readonly LOW_FLOAT: GLenum;\n    readonly LOW_INT: GLenum;\n    readonly LUMINANCE: GLenum;\n    readonly LUMINANCE_ALPHA: GLenum;\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_TEXTURE_SIZE: GLenum;\n    readonly MAX_VARYING_VECTORS: GLenum;\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\n    readonly MAX_VIEWPORT_DIMS: GLenum;\n    readonly MEDIUM_FLOAT: GLenum;\n    readonly MEDIUM_INT: GLenum;\n    readonly MIRRORED_REPEAT: GLenum;\n    readonly NEAREST: GLenum;\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\n    readonly NEVER: GLenum;\n    readonly NICEST: GLenum;\n    readonly NONE: GLenum;\n    readonly NOTEQUAL: GLenum;\n    readonly NO_ERROR: GLenum;\n    readonly ONE: GLenum;\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\n    readonly ONE_MINUS_DST_COLOR: GLenum;\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\n    readonly OUT_OF_MEMORY: GLenum;\n    readonly PACK_ALIGNMENT: GLenum;\n    readonly POINTS: GLenum;\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\n    readonly POLYGON_OFFSET_FILL: GLenum;\n    readonly POLYGON_OFFSET_UNITS: GLenum;\n    readonly RED_BITS: GLenum;\n    readonly RENDERBUFFER: GLenum;\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\n    readonly RENDERBUFFER_BINDING: GLenum;\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\n    readonly RENDERBUFFER_HEIGHT: GLenum;\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\n    readonly RENDERBUFFER_WIDTH: GLenum;\n    readonly RENDERER: GLenum;\n    readonly REPEAT: GLenum;\n    readonly REPLACE: GLenum;\n    readonly RGB: GLenum;\n    readonly RGB565: GLenum;\n    readonly RGB5_A1: GLenum;\n    readonly RGBA: GLenum;\n    readonly RGBA4: GLenum;\n    readonly SAMPLER_2D: GLenum;\n    readonly SAMPLER_CUBE: GLenum;\n    readonly SAMPLES: GLenum;\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\n    readonly SAMPLE_BUFFERS: GLenum;\n    readonly SAMPLE_COVERAGE: GLenum;\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\n    readonly SCISSOR_BOX: GLenum;\n    readonly SCISSOR_TEST: GLenum;\n    readonly SHADER_TYPE: GLenum;\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\n    readonly SHORT: GLenum;\n    readonly SRC_ALPHA: GLenum;\n    readonly SRC_ALPHA_SATURATE: GLenum;\n    readonly SRC_COLOR: GLenum;\n    readonly STATIC_DRAW: GLenum;\n    readonly STENCIL_ATTACHMENT: GLenum;\n    readonly STENCIL_BACK_FAIL: GLenum;\n    readonly STENCIL_BACK_FUNC: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_BACK_REF: GLenum;\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\n    readonly STENCIL_BITS: GLenum;\n    readonly STENCIL_BUFFER_BIT: GLenum;\n    readonly STENCIL_CLEAR_VALUE: GLenum;\n    readonly STENCIL_FAIL: GLenum;\n    readonly STENCIL_FUNC: GLenum;\n    readonly STENCIL_INDEX8: GLenum;\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_REF: GLenum;\n    readonly STENCIL_TEST: GLenum;\n    readonly STENCIL_VALUE_MASK: GLenum;\n    readonly STENCIL_WRITEMASK: GLenum;\n    readonly STREAM_DRAW: GLenum;\n    readonly SUBPIXEL_BITS: GLenum;\n    readonly TEXTURE: GLenum;\n    readonly TEXTURE0: GLenum;\n    readonly TEXTURE1: GLenum;\n    readonly TEXTURE10: GLenum;\n    readonly TEXTURE11: GLenum;\n    readonly TEXTURE12: GLenum;\n    readonly TEXTURE13: GLenum;\n    readonly TEXTURE14: GLenum;\n    readonly TEXTURE15: GLenum;\n    readonly TEXTURE16: GLenum;\n    readonly TEXTURE17: GLenum;\n    readonly TEXTURE18: GLenum;\n    readonly TEXTURE19: GLenum;\n    readonly TEXTURE2: GLenum;\n    readonly TEXTURE20: GLenum;\n    readonly TEXTURE21: GLenum;\n    readonly TEXTURE22: GLenum;\n    readonly TEXTURE23: GLenum;\n    readonly TEXTURE24: GLenum;\n    readonly TEXTURE25: GLenum;\n    readonly TEXTURE26: GLenum;\n    readonly TEXTURE27: GLenum;\n    readonly TEXTURE28: GLenum;\n    readonly TEXTURE29: GLenum;\n    readonly TEXTURE3: GLenum;\n    readonly TEXTURE30: GLenum;\n    readonly TEXTURE31: GLenum;\n    readonly TEXTURE4: GLenum;\n    readonly TEXTURE5: GLenum;\n    readonly TEXTURE6: GLenum;\n    readonly TEXTURE7: GLenum;\n    readonly TEXTURE8: GLenum;\n    readonly TEXTURE9: GLenum;\n    readonly TEXTURE_2D: GLenum;\n    readonly TEXTURE_BINDING_2D: GLenum;\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\n    readonly TEXTURE_MAG_FILTER: GLenum;\n    readonly TEXTURE_MIN_FILTER: GLenum;\n    readonly TEXTURE_WRAP_S: GLenum;\n    readonly TEXTURE_WRAP_T: GLenum;\n    readonly TRIANGLES: GLenum;\n    readonly TRIANGLE_FAN: GLenum;\n    readonly TRIANGLE_STRIP: GLenum;\n    readonly UNPACK_ALIGNMENT: GLenum;\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\n    readonly UNSIGNED_BYTE: GLenum;\n    readonly UNSIGNED_INT: GLenum;\n    readonly UNSIGNED_SHORT: GLenum;\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\n    readonly VALIDATE_STATUS: GLenum;\n    readonly VENDOR: GLenum;\n    readonly VERSION: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\n    readonly VERTEX_SHADER: GLenum;\n    readonly VIEWPORT: GLenum;\n    readonly ZERO: GLenum;\n};\n\ninterface WebGLRenderingContextBase {\n    readonly drawingBufferHeight: GLsizei;\n    readonly drawingBufferWidth: GLsizei;\n    activeTexture(texture: GLenum): void;\n    attachShader(program: WebGLProgram, shader: WebGLShader): void;\n    bindAttribLocation(program: WebGLProgram, index: GLuint, name: string): void;\n    bindBuffer(target: GLenum, buffer: WebGLBuffer | null): void;\n    bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer | null): void;\n    bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\n    bindTexture(target: GLenum, texture: WebGLTexture | null): void;\n    blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\n    blendEquation(mode: GLenum): void;\n    blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;\n    blendFunc(sfactor: GLenum, dfactor: GLenum): void;\n    blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;\n    checkFramebufferStatus(target: GLenum): GLenum;\n    clear(mask: GLbitfield): void;\n    clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\n    clearDepth(depth: GLclampf): void;\n    clearStencil(s: GLint): void;\n    colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void;\n    compileShader(shader: WebGLShader): void;\n    copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;\n    copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    createBuffer(): WebGLBuffer | null;\n    createFramebuffer(): WebGLFramebuffer | null;\n    createProgram(): WebGLProgram | null;\n    createRenderbuffer(): WebGLRenderbuffer | null;\n    createShader(type: GLenum): WebGLShader | null;\n    createTexture(): WebGLTexture | null;\n    cullFace(mode: GLenum): void;\n    deleteBuffer(buffer: WebGLBuffer | null): void;\n    deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;\n    deleteProgram(program: WebGLProgram | null): void;\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;\n    deleteShader(shader: WebGLShader | null): void;\n    deleteTexture(texture: WebGLTexture | null): void;\n    depthFunc(func: GLenum): void;\n    depthMask(flag: GLboolean): void;\n    depthRange(zNear: GLclampf, zFar: GLclampf): void;\n    detachShader(program: WebGLProgram, shader: WebGLShader): void;\n    disable(cap: GLenum): void;\n    disableVertexAttribArray(index: GLuint): void;\n    drawArrays(mode: GLenum, first: GLint, count: GLsizei): void;\n    drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr): void;\n    enable(cap: GLenum): void;\n    enableVertexAttribArray(index: GLuint): void;\n    finish(): void;\n    flush(): void;\n    framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\n    framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture | null, level: GLint): void;\n    frontFace(mode: GLenum): void;\n    generateMipmap(target: GLenum): void;\n    getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\n    getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\n    getAttachedShaders(program: WebGLProgram): WebGLShader[] | null;\n    getAttribLocation(program: WebGLProgram, name: string): GLint;\n    getBufferParameter(target: GLenum, pname: GLenum): any;\n    getContextAttributes(): WebGLContextAttributes | null;\n    getError(): GLenum;\n    getExtension(extensionName: \"EXT_blend_minmax\"): EXT_blend_minmax | null;\n    getExtension(extensionName: \"EXT_color_buffer_float\"): EXT_color_buffer_float | null;\n    getExtension(extensionName: \"EXT_color_buffer_half_float\"): EXT_color_buffer_half_float | null;\n    getExtension(extensionName: \"EXT_float_blend\"): EXT_float_blend | null;\n    getExtension(extensionName: \"EXT_texture_filter_anisotropic\"): EXT_texture_filter_anisotropic | null;\n    getExtension(extensionName: \"EXT_frag_depth\"): EXT_frag_depth | null;\n    getExtension(extensionName: \"EXT_shader_texture_lod\"): EXT_shader_texture_lod | null;\n    getExtension(extensionName: \"EXT_sRGB\"): EXT_sRGB | null;\n    getExtension(extensionName: \"KHR_parallel_shader_compile\"): KHR_parallel_shader_compile | null;\n    getExtension(extensionName: \"OES_vertex_array_object\"): OES_vertex_array_object | null;\n    getExtension(extensionName: \"OVR_multiview2\"): OVR_multiview2 | null;\n    getExtension(extensionName: \"WEBGL_color_buffer_float\"): WEBGL_color_buffer_float | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_astc\"): WEBGL_compressed_texture_astc | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_etc\"): WEBGL_compressed_texture_etc | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_etc1\"): WEBGL_compressed_texture_etc1 | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_s3tc_srgb\"): WEBGL_compressed_texture_s3tc_srgb | null;\n    getExtension(extensionName: \"WEBGL_debug_shaders\"): WEBGL_debug_shaders | null;\n    getExtension(extensionName: \"WEBGL_draw_buffers\"): WEBGL_draw_buffers | null;\n    getExtension(extensionName: \"WEBGL_lose_context\"): WEBGL_lose_context | null;\n    getExtension(extensionName: \"WEBGL_depth_texture\"): WEBGL_depth_texture | null;\n    getExtension(extensionName: \"WEBGL_debug_renderer_info\"): WEBGL_debug_renderer_info | null;\n    getExtension(extensionName: \"WEBGL_compressed_texture_s3tc\"): WEBGL_compressed_texture_s3tc | null;\n    getExtension(extensionName: \"OES_texture_half_float_linear\"): OES_texture_half_float_linear | null;\n    getExtension(extensionName: \"OES_texture_half_float\"): OES_texture_half_float | null;\n    getExtension(extensionName: \"OES_texture_float_linear\"): OES_texture_float_linear | null;\n    getExtension(extensionName: \"OES_texture_float\"): OES_texture_float | null;\n    getExtension(extensionName: \"OES_standard_derivatives\"): OES_standard_derivatives | null;\n    getExtension(extensionName: \"OES_element_index_uint\"): OES_element_index_uint | null;\n    getExtension(extensionName: \"ANGLE_instanced_arrays\"): ANGLE_instanced_arrays | null;\n    getExtension(name: string): any;\n    getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): any;\n    getParameter(pname: GLenum): any;\n    getProgramInfoLog(program: WebGLProgram): string | null;\n    getProgramParameter(program: WebGLProgram, pname: GLenum): any;\n    getRenderbufferParameter(target: GLenum, pname: GLenum): any;\n    getShaderInfoLog(shader: WebGLShader): string | null;\n    getShaderParameter(shader: WebGLShader, pname: GLenum): any;\n    getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat | null;\n    getShaderSource(shader: WebGLShader): string | null;\n    getSupportedExtensions(): string[] | null;\n    getTexParameter(target: GLenum, pname: GLenum): any;\n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;\n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation | null;\n    getVertexAttrib(index: GLuint, pname: GLenum): any;\n    getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;\n    hint(target: GLenum, mode: GLenum): void;\n    isBuffer(buffer: WebGLBuffer | null): GLboolean;\n    isContextLost(): boolean;\n    isEnabled(cap: GLenum): GLboolean;\n    isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;\n    isProgram(program: WebGLProgram | null): GLboolean;\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;\n    isShader(shader: WebGLShader | null): GLboolean;\n    isTexture(texture: WebGLTexture | null): GLboolean;\n    lineWidth(width: GLfloat): void;\n    linkProgram(program: WebGLProgram): void;\n    pixelStorei(pname: GLenum, param: GLint | GLboolean): void;\n    polygonOffset(factor: GLfloat, units: GLfloat): void;\n    renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\n    sampleCoverage(value: GLclampf, invert: GLboolean): void;\n    scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    shaderSource(shader: WebGLShader, source: string): void;\n    stencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;\n    stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): void;\n    stencilMask(mask: GLuint): void;\n    stencilMaskSeparate(face: GLenum, mask: GLuint): void;\n    stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;\n    stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum): void;\n    texParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;\n    texParameteri(target: GLenum, pname: GLenum, param: GLint): void;\n    uniform1f(location: WebGLUniformLocation | null, x: GLfloat): void;\n    uniform1i(location: WebGLUniformLocation | null, x: GLint): void;\n    uniform2f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat): void;\n    uniform2i(location: WebGLUniformLocation | null, x: GLint, y: GLint): void;\n    uniform3f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat): void;\n    uniform3i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint): void;\n    uniform4f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\n    uniform4i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint, w: GLint): void;\n    useProgram(program: WebGLProgram | null): void;\n    validateProgram(program: WebGLProgram): void;\n    vertexAttrib1f(index: GLuint, x: GLfloat): void;\n    vertexAttrib1fv(index: GLuint, values: Float32List): void;\n    vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;\n    vertexAttrib2fv(index: GLuint, values: Float32List): void;\n    vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;\n    vertexAttrib3fv(index: GLuint, values: Float32List): void;\n    vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\n    vertexAttrib4fv(index: GLuint, values: Float32List): void;\n    vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void;\n    viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    readonly ACTIVE_ATTRIBUTES: GLenum;\n    readonly ACTIVE_TEXTURE: GLenum;\n    readonly ACTIVE_UNIFORMS: GLenum;\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\n    readonly ALPHA: GLenum;\n    readonly ALPHA_BITS: GLenum;\n    readonly ALWAYS: GLenum;\n    readonly ARRAY_BUFFER: GLenum;\n    readonly ARRAY_BUFFER_BINDING: GLenum;\n    readonly ATTACHED_SHADERS: GLenum;\n    readonly BACK: GLenum;\n    readonly BLEND: GLenum;\n    readonly BLEND_COLOR: GLenum;\n    readonly BLEND_DST_ALPHA: GLenum;\n    readonly BLEND_DST_RGB: GLenum;\n    readonly BLEND_EQUATION: GLenum;\n    readonly BLEND_EQUATION_ALPHA: GLenum;\n    readonly BLEND_EQUATION_RGB: GLenum;\n    readonly BLEND_SRC_ALPHA: GLenum;\n    readonly BLEND_SRC_RGB: GLenum;\n    readonly BLUE_BITS: GLenum;\n    readonly BOOL: GLenum;\n    readonly BOOL_VEC2: GLenum;\n    readonly BOOL_VEC3: GLenum;\n    readonly BOOL_VEC4: GLenum;\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\n    readonly BUFFER_SIZE: GLenum;\n    readonly BUFFER_USAGE: GLenum;\n    readonly BYTE: GLenum;\n    readonly CCW: GLenum;\n    readonly CLAMP_TO_EDGE: GLenum;\n    readonly COLOR_ATTACHMENT0: GLenum;\n    readonly COLOR_BUFFER_BIT: GLenum;\n    readonly COLOR_CLEAR_VALUE: GLenum;\n    readonly COLOR_WRITEMASK: GLenum;\n    readonly COMPILE_STATUS: GLenum;\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\n    readonly CONSTANT_ALPHA: GLenum;\n    readonly CONSTANT_COLOR: GLenum;\n    readonly CONTEXT_LOST_WEBGL: GLenum;\n    readonly CULL_FACE: GLenum;\n    readonly CULL_FACE_MODE: GLenum;\n    readonly CURRENT_PROGRAM: GLenum;\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\n    readonly CW: GLenum;\n    readonly DECR: GLenum;\n    readonly DECR_WRAP: GLenum;\n    readonly DELETE_STATUS: GLenum;\n    readonly DEPTH_ATTACHMENT: GLenum;\n    readonly DEPTH_BITS: GLenum;\n    readonly DEPTH_BUFFER_BIT: GLenum;\n    readonly DEPTH_CLEAR_VALUE: GLenum;\n    readonly DEPTH_COMPONENT: GLenum;\n    readonly DEPTH_COMPONENT16: GLenum;\n    readonly DEPTH_FUNC: GLenum;\n    readonly DEPTH_RANGE: GLenum;\n    readonly DEPTH_STENCIL: GLenum;\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\n    readonly DEPTH_TEST: GLenum;\n    readonly DEPTH_WRITEMASK: GLenum;\n    readonly DITHER: GLenum;\n    readonly DONT_CARE: GLenum;\n    readonly DST_ALPHA: GLenum;\n    readonly DST_COLOR: GLenum;\n    readonly DYNAMIC_DRAW: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\n    readonly EQUAL: GLenum;\n    readonly FASTEST: GLenum;\n    readonly FLOAT: GLenum;\n    readonly FLOAT_MAT2: GLenum;\n    readonly FLOAT_MAT3: GLenum;\n    readonly FLOAT_MAT4: GLenum;\n    readonly FLOAT_VEC2: GLenum;\n    readonly FLOAT_VEC3: GLenum;\n    readonly FLOAT_VEC4: GLenum;\n    readonly FRAGMENT_SHADER: GLenum;\n    readonly FRAMEBUFFER: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\n    readonly FRAMEBUFFER_BINDING: GLenum;\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\n    readonly FRONT: GLenum;\n    readonly FRONT_AND_BACK: GLenum;\n    readonly FRONT_FACE: GLenum;\n    readonly FUNC_ADD: GLenum;\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\n    readonly FUNC_SUBTRACT: GLenum;\n    readonly GENERATE_MIPMAP_HINT: GLenum;\n    readonly GEQUAL: GLenum;\n    readonly GREATER: GLenum;\n    readonly GREEN_BITS: GLenum;\n    readonly HIGH_FLOAT: GLenum;\n    readonly HIGH_INT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\n    readonly INCR: GLenum;\n    readonly INCR_WRAP: GLenum;\n    readonly INT: GLenum;\n    readonly INT_VEC2: GLenum;\n    readonly INT_VEC3: GLenum;\n    readonly INT_VEC4: GLenum;\n    readonly INVALID_ENUM: GLenum;\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\n    readonly INVALID_OPERATION: GLenum;\n    readonly INVALID_VALUE: GLenum;\n    readonly INVERT: GLenum;\n    readonly KEEP: GLenum;\n    readonly LEQUAL: GLenum;\n    readonly LESS: GLenum;\n    readonly LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\n    readonly LINES: GLenum;\n    readonly LINE_LOOP: GLenum;\n    readonly LINE_STRIP: GLenum;\n    readonly LINE_WIDTH: GLenum;\n    readonly LINK_STATUS: GLenum;\n    readonly LOW_FLOAT: GLenum;\n    readonly LOW_INT: GLenum;\n    readonly LUMINANCE: GLenum;\n    readonly LUMINANCE_ALPHA: GLenum;\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_TEXTURE_SIZE: GLenum;\n    readonly MAX_VARYING_VECTORS: GLenum;\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\n    readonly MAX_VIEWPORT_DIMS: GLenum;\n    readonly MEDIUM_FLOAT: GLenum;\n    readonly MEDIUM_INT: GLenum;\n    readonly MIRRORED_REPEAT: GLenum;\n    readonly NEAREST: GLenum;\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\n    readonly NEVER: GLenum;\n    readonly NICEST: GLenum;\n    readonly NONE: GLenum;\n    readonly NOTEQUAL: GLenum;\n    readonly NO_ERROR: GLenum;\n    readonly ONE: GLenum;\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\n    readonly ONE_MINUS_DST_COLOR: GLenum;\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\n    readonly OUT_OF_MEMORY: GLenum;\n    readonly PACK_ALIGNMENT: GLenum;\n    readonly POINTS: GLenum;\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\n    readonly POLYGON_OFFSET_FILL: GLenum;\n    readonly POLYGON_OFFSET_UNITS: GLenum;\n    readonly RED_BITS: GLenum;\n    readonly RENDERBUFFER: GLenum;\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\n    readonly RENDERBUFFER_BINDING: GLenum;\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\n    readonly RENDERBUFFER_HEIGHT: GLenum;\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\n    readonly RENDERBUFFER_WIDTH: GLenum;\n    readonly RENDERER: GLenum;\n    readonly REPEAT: GLenum;\n    readonly REPLACE: GLenum;\n    readonly RGB: GLenum;\n    readonly RGB565: GLenum;\n    readonly RGB5_A1: GLenum;\n    readonly RGBA: GLenum;\n    readonly RGBA4: GLenum;\n    readonly SAMPLER_2D: GLenum;\n    readonly SAMPLER_CUBE: GLenum;\n    readonly SAMPLES: GLenum;\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\n    readonly SAMPLE_BUFFERS: GLenum;\n    readonly SAMPLE_COVERAGE: GLenum;\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\n    readonly SCISSOR_BOX: GLenum;\n    readonly SCISSOR_TEST: GLenum;\n    readonly SHADER_TYPE: GLenum;\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\n    readonly SHORT: GLenum;\n    readonly SRC_ALPHA: GLenum;\n    readonly SRC_ALPHA_SATURATE: GLenum;\n    readonly SRC_COLOR: GLenum;\n    readonly STATIC_DRAW: GLenum;\n    readonly STENCIL_ATTACHMENT: GLenum;\n    readonly STENCIL_BACK_FAIL: GLenum;\n    readonly STENCIL_BACK_FUNC: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_BACK_REF: GLenum;\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\n    readonly STENCIL_BITS: GLenum;\n    readonly STENCIL_BUFFER_BIT: GLenum;\n    readonly STENCIL_CLEAR_VALUE: GLenum;\n    readonly STENCIL_FAIL: GLenum;\n    readonly STENCIL_FUNC: GLenum;\n    readonly STENCIL_INDEX8: GLenum;\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\n    readonly STENCIL_REF: GLenum;\n    readonly STENCIL_TEST: GLenum;\n    readonly STENCIL_VALUE_MASK: GLenum;\n    readonly STENCIL_WRITEMASK: GLenum;\n    readonly STREAM_DRAW: GLenum;\n    readonly SUBPIXEL_BITS: GLenum;\n    readonly TEXTURE: GLenum;\n    readonly TEXTURE0: GLenum;\n    readonly TEXTURE1: GLenum;\n    readonly TEXTURE10: GLenum;\n    readonly TEXTURE11: GLenum;\n    readonly TEXTURE12: GLenum;\n    readonly TEXTURE13: GLenum;\n    readonly TEXTURE14: GLenum;\n    readonly TEXTURE15: GLenum;\n    readonly TEXTURE16: GLenum;\n    readonly TEXTURE17: GLenum;\n    readonly TEXTURE18: GLenum;\n    readonly TEXTURE19: GLenum;\n    readonly TEXTURE2: GLenum;\n    readonly TEXTURE20: GLenum;\n    readonly TEXTURE21: GLenum;\n    readonly TEXTURE22: GLenum;\n    readonly TEXTURE23: GLenum;\n    readonly TEXTURE24: GLenum;\n    readonly TEXTURE25: GLenum;\n    readonly TEXTURE26: GLenum;\n    readonly TEXTURE27: GLenum;\n    readonly TEXTURE28: GLenum;\n    readonly TEXTURE29: GLenum;\n    readonly TEXTURE3: GLenum;\n    readonly TEXTURE30: GLenum;\n    readonly TEXTURE31: GLenum;\n    readonly TEXTURE4: GLenum;\n    readonly TEXTURE5: GLenum;\n    readonly TEXTURE6: GLenum;\n    readonly TEXTURE7: GLenum;\n    readonly TEXTURE8: GLenum;\n    readonly TEXTURE9: GLenum;\n    readonly TEXTURE_2D: GLenum;\n    readonly TEXTURE_BINDING_2D: GLenum;\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\n    readonly TEXTURE_MAG_FILTER: GLenum;\n    readonly TEXTURE_MIN_FILTER: GLenum;\n    readonly TEXTURE_WRAP_S: GLenum;\n    readonly TEXTURE_WRAP_T: GLenum;\n    readonly TRIANGLES: GLenum;\n    readonly TRIANGLE_FAN: GLenum;\n    readonly TRIANGLE_STRIP: GLenum;\n    readonly UNPACK_ALIGNMENT: GLenum;\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\n    readonly UNSIGNED_BYTE: GLenum;\n    readonly UNSIGNED_INT: GLenum;\n    readonly UNSIGNED_SHORT: GLenum;\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\n    readonly VALIDATE_STATUS: GLenum;\n    readonly VENDOR: GLenum;\n    readonly VERSION: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\n    readonly VERTEX_SHADER: GLenum;\n    readonly VIEWPORT: GLenum;\n    readonly ZERO: GLenum;\n}\n\ninterface WebGLRenderingContextOverloads {\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\n    bufferData(target: GLenum, data: BufferSource | null, usage: GLenum): void;\n    bufferSubData(target: GLenum, offset: GLintptr, data: BufferSource): void;\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView): void;\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView): void;\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\n    uniform1fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform1iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniform2fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform2iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniform3fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform3iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniform4fv(location: WebGLUniformLocation | null, v: Float32List): void;\n    uniform4iv(location: WebGLUniformLocation | null, v: Int32List): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\n}\n\ninterface WebGLSampler {\n}\n\ndeclare var WebGLSampler: {\n    prototype: WebGLSampler;\n    new(): WebGLSampler;\n};\n\n/** The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders. */\ninterface WebGLShader {\n}\n\ndeclare var WebGLShader: {\n    prototype: WebGLShader;\n    new(): WebGLShader;\n};\n\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method. */\ninterface WebGLShaderPrecisionFormat {\n    readonly precision: GLint;\n    readonly rangeMax: GLint;\n    readonly rangeMin: GLint;\n}\n\ndeclare var WebGLShaderPrecisionFormat: {\n    prototype: WebGLShaderPrecisionFormat;\n    new(): WebGLShaderPrecisionFormat;\n};\n\ninterface WebGLSync {\n}\n\ndeclare var WebGLSync: {\n    prototype: WebGLSync;\n    new(): WebGLSync;\n};\n\n/** Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations. */\ninterface WebGLTexture {\n}\n\ndeclare var WebGLTexture: {\n    prototype: WebGLTexture;\n    new(): WebGLTexture;\n};\n\ninterface WebGLTransformFeedback {\n}\n\ndeclare var WebGLTransformFeedback: {\n    prototype: WebGLTransformFeedback;\n    new(): WebGLTransformFeedback;\n};\n\n/** Part of the WebGL API and represents the location of a uniform variable in a shader program. */\ninterface WebGLUniformLocation {\n}\n\ndeclare var WebGLUniformLocation: {\n    prototype: WebGLUniformLocation;\n    new(): WebGLUniformLocation;\n};\n\ninterface WebGLVertexArrayObject {\n}\n\ndeclare var WebGLVertexArrayObject: {\n    prototype: WebGLVertexArrayObject;\n    new(): WebGLVertexArrayObject;\n};\n\ninterface WebGLVertexArrayObjectOES {\n}\n\ninterface WebSocketEventMap {\n    \"close\": CloseEvent;\n    \"error\": Event;\n    \"message\": MessageEvent;\n    \"open\": Event;\n}\n\n/** Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection. */\ninterface WebSocket extends EventTarget {\n    /**\n     * Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n     *\n     * Can be set, to change how binary data is returned. The default is \"blob\".\n     */\n    binaryType: BinaryType;\n    /**\n     * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n     *\n     * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n     */\n    readonly bufferedAmount: number;\n    /** Returns the extensions selected by the server, if any. */\n    readonly extensions: string;\n    onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;\n    onerror: ((this: WebSocket, ev: Event) => any) | null;\n    onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;\n    onopen: ((this: WebSocket, ev: Event) => any) | null;\n    /** Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation. */\n    readonly protocol: string;\n    /** Returns the state of the WebSocket object's connection. It can have the values described below. */\n    readonly readyState: number;\n    /** Returns the URL that was used to establish the WebSocket connection. */\n    readonly url: string;\n    /** Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason. */\n    close(code?: number, reason?: string): void;\n    /** Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView. */\n    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;\n    readonly CLOSED: number;\n    readonly CLOSING: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var WebSocket: {\n    prototype: WebSocket;\n    new(url: string | URL, protocols?: string | string[]): WebSocket;\n    readonly CLOSED: number;\n    readonly CLOSING: number;\n    readonly CONNECTING: number;\n    readonly OPEN: number;\n};\n\n/** This ServiceWorker API interface represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources. */\ninterface WindowClient extends Client {\n    readonly focused: boolean;\n    readonly visibilityState: DocumentVisibilityState;\n    focus(): Promise<WindowClient>;\n    navigate(url: string | URL): Promise<WindowClient | null>;\n}\n\ndeclare var WindowClient: {\n    prototype: WindowClient;\n    new(): WindowClient;\n};\n\ninterface WindowOrWorkerGlobalScope {\n    /** Available only in secure contexts. */\n    readonly caches: CacheStorage;\n    readonly crossOriginIsolated: boolean;\n    readonly crypto: Crypto;\n    readonly indexedDB: IDBFactory;\n    readonly isSecureContext: boolean;\n    readonly origin: string;\n    readonly performance: Performance;\n    atob(data: string): string;\n    btoa(data: string): string;\n    clearInterval(id: number | undefined): void;\n    clearTimeout(id: number | undefined): void;\n    createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>;\n    createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;\n    fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;\n    queueMicrotask(callback: VoidFunction): void;\n    reportError(e: any): void;\n    setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\n    setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\n    structuredClone(value: any, options?: StructuredSerializeOptions): any;\n}\n\ninterface WorkerEventMap extends AbstractWorkerEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\n/** This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread. */\ninterface Worker extends EventTarget, AbstractWorker {\n    onmessage: ((this: Worker, ev: MessageEvent) => any) | null;\n    onmessageerror: ((this: Worker, ev: MessageEvent) => any) | null;\n    /** Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned. */\n    postMessage(message: any, transfer: Transferable[]): void;\n    postMessage(message: any, options?: StructuredSerializeOptions): void;\n    /** Aborts worker's associated global environment. */\n    terminate(): void;\n    addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var Worker: {\n    prototype: Worker;\n    new(scriptURL: string | URL, options?: WorkerOptions): Worker;\n};\n\ninterface WorkerGlobalScopeEventMap {\n    \"error\": ErrorEvent;\n    \"languagechange\": Event;\n    \"offline\": Event;\n    \"online\": Event;\n    \"rejectionhandled\": PromiseRejectionEvent;\n    \"unhandledrejection\": PromiseRejectionEvent;\n}\n\n/** This Web Workers API interface is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop. */\ninterface WorkerGlobalScope extends EventTarget, FontFaceSource, WindowOrWorkerGlobalScope {\n    /** Returns workerGlobal's WorkerLocation object. */\n    readonly location: WorkerLocation;\n    /** Returns workerGlobal's WorkerNavigator object. */\n    readonly navigator: WorkerNavigator;\n    onerror: ((this: WorkerGlobalScope, ev: ErrorEvent) => any) | null;\n    onlanguagechange: ((this: WorkerGlobalScope, ev: Event) => any) | null;\n    onoffline: ((this: WorkerGlobalScope, ev: Event) => any) | null;\n    ononline: ((this: WorkerGlobalScope, ev: Event) => any) | null;\n    onrejectionhandled: ((this: WorkerGlobalScope, ev: PromiseRejectionEvent) => any) | null;\n    onunhandledrejection: ((this: WorkerGlobalScope, ev: PromiseRejectionEvent) => any) | null;\n    /** Returns workerGlobal. */\n    readonly self: WorkerGlobalScope & typeof globalThis;\n    /** Fetches each URL in urls, executes them one-by-one in the order they are passed, and then returns (or throws if something went amiss). */\n    importScripts(...urls: (string | URL)[]): void;\n    addEventListener<K extends keyof WorkerGlobalScopeEventMap>(type: K, listener: (this: WorkerGlobalScope, ev: WorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof WorkerGlobalScopeEventMap>(type: K, listener: (this: WorkerGlobalScope, ev: WorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var WorkerGlobalScope: {\n    prototype: WorkerGlobalScope;\n    new(): WorkerGlobalScope;\n};\n\n/** The absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location. */\ninterface WorkerLocation {\n    readonly hash: string;\n    readonly host: string;\n    readonly hostname: string;\n    readonly href: string;\n    toString(): string;\n    readonly origin: string;\n    readonly pathname: string;\n    readonly port: string;\n    readonly protocol: string;\n    readonly search: string;\n}\n\ndeclare var WorkerLocation: {\n    prototype: WorkerLocation;\n    new(): WorkerLocation;\n};\n\n/** A subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator. */\ninterface WorkerNavigator extends NavigatorConcurrentHardware, NavigatorID, NavigatorLanguage, NavigatorLocks, NavigatorOnLine, NavigatorStorage {\n    readonly mediaCapabilities: MediaCapabilities;\n}\n\ndeclare var WorkerNavigator: {\n    prototype: WorkerNavigator;\n    new(): WorkerNavigator;\n};\n\n/** This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing. */\ninterface WritableStream<W = any> {\n    readonly locked: boolean;\n    abort(reason?: any): Promise<void>;\n    close(): Promise<void>;\n    getWriter(): WritableStreamDefaultWriter<W>;\n}\n\ndeclare var WritableStream: {\n    prototype: WritableStream;\n    new<W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;\n};\n\n/** This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate. */\ninterface WritableStreamDefaultController {\n    readonly signal: AbortSignal;\n    error(e?: any): void;\n}\n\ndeclare var WritableStreamDefaultController: {\n    prototype: WritableStreamDefaultController;\n    new(): WritableStreamDefaultController;\n};\n\n/** This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink. */\ninterface WritableStreamDefaultWriter<W = any> {\n    readonly closed: Promise<undefined>;\n    readonly desiredSize: number | null;\n    readonly ready: Promise<undefined>;\n    abort(reason?: any): Promise<void>;\n    close(): Promise<void>;\n    releaseLock(): void;\n    write(chunk?: W): Promise<void>;\n}\n\ndeclare var WritableStreamDefaultWriter: {\n    prototype: WritableStreamDefaultWriter;\n    new<W = any>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;\n};\n\ninterface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {\n    \"readystatechange\": Event;\n}\n\n/** Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. */\ninterface XMLHttpRequest extends XMLHttpRequestEventTarget {\n    onreadystatechange: ((this: XMLHttpRequest, ev: Event) => any) | null;\n    /** Returns client's state. */\n    readonly readyState: number;\n    /** Returns the response body. */\n    readonly response: any;\n    /**\n     * Returns response as text.\n     *\n     * Throws an \"InvalidStateError\" DOMException if responseType is not the empty string or \"text\".\n     */\n    readonly responseText: string;\n    /**\n     * Returns the response type.\n     *\n     * Can be set to change the response type. Values are: the empty string (default), \"arraybuffer\", \"blob\", \"document\", \"json\", and \"text\".\n     *\n     * When set: setting to \"document\" is ignored if current global object is not a Window object.\n     *\n     * When set: throws an \"InvalidStateError\" DOMException if state is loading or done.\n     *\n     * When set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.\n     */\n    responseType: XMLHttpRequestResponseType;\n    readonly responseURL: string;\n    readonly status: number;\n    readonly statusText: string;\n    /**\n     * Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a \"TimeoutError\" DOMException will be thrown otherwise (for the send() method).\n     *\n     * When set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.\n     */\n    timeout: number;\n    /** Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server. */\n    readonly upload: XMLHttpRequestUpload;\n    /**\n     * True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.\n     *\n     * When set: throws an \"InvalidStateError\" DOMException if state is not unsent or opened, or if the send() flag is set.\n     */\n    withCredentials: boolean;\n    /** Cancels any network activity. */\n    abort(): void;\n    getAllResponseHeaders(): string;\n    getResponseHeader(name: string): string | null;\n    /**\n     * Sets the request method, request URL, and synchronous flag.\n     *\n     * Throws a \"SyntaxError\" DOMException if either method is not a valid method or url cannot be parsed.\n     *\n     * Throws a \"SecurityError\" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.\n     *\n     * Throws an \"InvalidAccessError\" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.\n     */\n    open(method: string, url: string | URL): void;\n    open(method: string, url: string | URL, async: boolean, username?: string | null, password?: string | null): void;\n    /**\n     * Acts as if the `Content-Type` header value for a response is mime. (It does not change the header.)\n     *\n     * Throws an \"InvalidStateError\" DOMException if state is loading or done.\n     */\n    overrideMimeType(mime: string): void;\n    /**\n     * Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.\n     *\n     * Throws an \"InvalidStateError\" DOMException if either state is not opened or the send() flag is set.\n     */\n    send(body?: XMLHttpRequestBodyInit | null): void;\n    /**\n     * Combines a header in author request headers.\n     *\n     * Throws an \"InvalidStateError\" DOMException if either state is not opened or the send() flag is set.\n     *\n     * Throws a \"SyntaxError\" DOMException if name is not a header name or if value is not a header value.\n     */\n    setRequestHeader(name: string, value: string): void;\n    readonly DONE: number;\n    readonly HEADERS_RECEIVED: number;\n    readonly LOADING: number;\n    readonly OPENED: number;\n    readonly UNSENT: number;\n    addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var XMLHttpRequest: {\n    prototype: XMLHttpRequest;\n    new(): XMLHttpRequest;\n    readonly DONE: number;\n    readonly HEADERS_RECEIVED: number;\n    readonly LOADING: number;\n    readonly OPENED: number;\n    readonly UNSENT: number;\n};\n\ninterface XMLHttpRequestEventTargetEventMap {\n    \"abort\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"error\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"load\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"loadend\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"loadstart\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"progress\": ProgressEvent<XMLHttpRequestEventTarget>;\n    \"timeout\": ProgressEvent<XMLHttpRequestEventTarget>;\n}\n\ninterface XMLHttpRequestEventTarget extends EventTarget {\n    onabort: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onerror: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onload: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onloadend: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    onprogress: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var XMLHttpRequestEventTarget: {\n    prototype: XMLHttpRequestEventTarget;\n    new(): XMLHttpRequestEventTarget;\n};\n\ninterface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var XMLHttpRequestUpload: {\n    prototype: XMLHttpRequestUpload;\n    new(): XMLHttpRequestUpload;\n};\n\ninterface Console {\n    assert(condition?: boolean, ...data: any[]): void;\n    clear(): void;\n    count(label?: string): void;\n    countReset(label?: string): void;\n    debug(...data: any[]): void;\n    dir(item?: any, options?: any): void;\n    dirxml(...data: any[]): void;\n    error(...data: any[]): void;\n    group(...data: any[]): void;\n    groupCollapsed(...data: any[]): void;\n    groupEnd(): void;\n    info(...data: any[]): void;\n    log(...data: any[]): void;\n    table(tabularData?: any, properties?: string[]): void;\n    time(label?: string): void;\n    timeEnd(label?: string): void;\n    timeLog(label?: string, ...data: any[]): void;\n    timeStamp(label?: string): void;\n    trace(...data: any[]): void;\n    warn(...data: any[]): void;\n}\n\ndeclare var console: Console;\n\ndeclare namespace WebAssembly {\n    interface CompileError extends Error {\n    }\n\n    var CompileError: {\n        prototype: CompileError;\n        new(message?: string): CompileError;\n        (message?: string): CompileError;\n    };\n\n    interface Global {\n        value: any;\n        valueOf(): any;\n    }\n\n    var Global: {\n        prototype: Global;\n        new(descriptor: GlobalDescriptor, v?: any): Global;\n    };\n\n    interface Instance {\n        readonly exports: Exports;\n    }\n\n    var Instance: {\n        prototype: Instance;\n        new(module: Module, importObject?: Imports): Instance;\n    };\n\n    interface LinkError extends Error {\n    }\n\n    var LinkError: {\n        prototype: LinkError;\n        new(message?: string): LinkError;\n        (message?: string): LinkError;\n    };\n\n    interface Memory {\n        readonly buffer: ArrayBuffer;\n        grow(delta: number): number;\n    }\n\n    var Memory: {\n        prototype: Memory;\n        new(descriptor: MemoryDescriptor): Memory;\n    };\n\n    interface Module {\n    }\n\n    var Module: {\n        prototype: Module;\n        new(bytes: BufferSource): Module;\n        customSections(moduleObject: Module, sectionName: string): ArrayBuffer[];\n        exports(moduleObject: Module): ModuleExportDescriptor[];\n        imports(moduleObject: Module): ModuleImportDescriptor[];\n    };\n\n    interface RuntimeError extends Error {\n    }\n\n    var RuntimeError: {\n        prototype: RuntimeError;\n        new(message?: string): RuntimeError;\n        (message?: string): RuntimeError;\n    };\n\n    interface Table {\n        readonly length: number;\n        get(index: number): any;\n        grow(delta: number, value?: any): number;\n        set(index: number, value?: any): void;\n    }\n\n    var Table: {\n        prototype: Table;\n        new(descriptor: TableDescriptor, value?: any): Table;\n    };\n\n    interface GlobalDescriptor {\n        mutable?: boolean;\n        value: ValueType;\n    }\n\n    interface MemoryDescriptor {\n        initial: number;\n        maximum?: number;\n        shared?: boolean;\n    }\n\n    interface ModuleExportDescriptor {\n        kind: ImportExportKind;\n        name: string;\n    }\n\n    interface ModuleImportDescriptor {\n        kind: ImportExportKind;\n        module: string;\n        name: string;\n    }\n\n    interface TableDescriptor {\n        element: TableKind;\n        initial: number;\n        maximum?: number;\n    }\n\n    interface WebAssemblyInstantiatedSource {\n        instance: Instance;\n        module: Module;\n    }\n\n    type ImportExportKind = \"function\" | \"global\" | \"memory\" | \"table\";\n    type TableKind = \"anyfunc\" | \"externref\";\n    type ValueType = \"anyfunc\" | \"externref\" | \"f32\" | \"f64\" | \"i32\" | \"i64\" | \"v128\";\n    type ExportValue = Function | Global | Memory | Table;\n    type Exports = Record<string, ExportValue>;\n    type ImportValue = ExportValue | number;\n    type Imports = Record<string, ModuleImports>;\n    type ModuleImports = Record<string, ImportValue>;\n    function compile(bytes: BufferSource): Promise<Module>;\n    function compileStreaming(source: Response | PromiseLike<Response>): Promise<Module>;\n    function instantiate(bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;\n    function instantiate(moduleObject: Module, importObject?: Imports): Promise<Instance>;\n    function instantiateStreaming(source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;\n    function validate(bytes: BufferSource): boolean;\n}\n\ninterface FrameRequestCallback {\n    (time: DOMHighResTimeStamp): void;\n}\n\ninterface LockGrantedCallback {\n    (lock: Lock | null): any;\n}\n\ninterface OnErrorEventHandlerNonNull {\n    (event: Event | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n}\n\ninterface PerformanceObserverCallback {\n    (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void;\n}\n\ninterface QueuingStrategySize<T = any> {\n    (chunk: T): number;\n}\n\ninterface TransformerFlushCallback<O> {\n    (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\n}\n\ninterface TransformerStartCallback<O> {\n    (controller: TransformStreamDefaultController<O>): any;\n}\n\ninterface TransformerTransformCallback<I, O> {\n    (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSinkAbortCallback {\n    (reason?: any): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSinkCloseCallback {\n    (): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSinkStartCallback {\n    (controller: WritableStreamDefaultController): any;\n}\n\ninterface UnderlyingSinkWriteCallback<W> {\n    (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSourceCancelCallback {\n    (reason?: any): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSourcePullCallback<R> {\n    (controller: ReadableStreamController<R>): void | PromiseLike<void>;\n}\n\ninterface UnderlyingSourceStartCallback<R> {\n    (controller: ReadableStreamController<R>): any;\n}\n\ninterface VoidFunction {\n    (): void;\n}\n\n/** Returns dedicatedWorkerGlobal's name, i.e. the value given to the Worker constructor. Primarily useful for debugging. */\ndeclare var name: string;\ndeclare var onmessage: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\ndeclare var onmessageerror: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\n/** Aborts dedicatedWorkerGlobal. */\ndeclare function close(): void;\n/** Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned. */\ndeclare function postMessage(message: any, transfer: Transferable[]): void;\ndeclare function postMessage(message: any, options?: StructuredSerializeOptions): void;\n/** Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise. */\ndeclare function dispatchEvent(event: Event): boolean;\n/** Returns workerGlobal's WorkerLocation object. */\ndeclare var location: WorkerLocation;\n/** Returns workerGlobal's WorkerNavigator object. */\ndeclare var navigator: WorkerNavigator;\ndeclare var onerror: ((this: DedicatedWorkerGlobalScope, ev: ErrorEvent) => any) | null;\ndeclare var onlanguagechange: ((this: DedicatedWorkerGlobalScope, ev: Event) => any) | null;\ndeclare var onoffline: ((this: DedicatedWorkerGlobalScope, ev: Event) => any) | null;\ndeclare var ononline: ((this: DedicatedWorkerGlobalScope, ev: Event) => any) | null;\ndeclare var onrejectionhandled: ((this: DedicatedWorkerGlobalScope, ev: PromiseRejectionEvent) => any) | null;\ndeclare var onunhandledrejection: ((this: DedicatedWorkerGlobalScope, ev: PromiseRejectionEvent) => any) | null;\n/** Returns workerGlobal. */\ndeclare var self: WorkerGlobalScope & typeof globalThis;\n/** Fetches each URL in urls, executes them one-by-one in the order they are passed, and then returns (or throws if something went amiss). */\ndeclare function importScripts(...urls: (string | URL)[]): void;\n/** Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise. */\ndeclare function dispatchEvent(event: Event): boolean;\ndeclare var fonts: FontFaceSet;\n/** Available only in secure contexts. */\ndeclare var caches: CacheStorage;\ndeclare var crossOriginIsolated: boolean;\ndeclare var crypto: Crypto;\ndeclare var indexedDB: IDBFactory;\ndeclare var isSecureContext: boolean;\ndeclare var origin: string;\ndeclare var performance: Performance;\ndeclare function atob(data: string): string;\ndeclare function btoa(data: string): string;\ndeclare function clearInterval(id: number | undefined): void;\ndeclare function clearTimeout(id: number | undefined): void;\ndeclare function createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>;\ndeclare function createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;\ndeclare function fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;\ndeclare function queueMicrotask(callback: VoidFunction): void;\ndeclare function reportError(e: any): void;\ndeclare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\ndeclare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\ndeclare function structuredClone(value: any, options?: StructuredSerializeOptions): any;\ndeclare function cancelAnimationFrame(handle: number): void;\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\ndeclare function addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\ndeclare function removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\ndeclare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\ntype AlgorithmIdentifier = Algorithm | string;\ntype BigInteger = Uint8Array;\ntype BinaryData = ArrayBuffer | ArrayBufferView;\ntype BlobPart = BufferSource | Blob | string;\ntype BodyInit = ReadableStream | XMLHttpRequestBodyInit;\ntype BufferSource = ArrayBufferView | ArrayBuffer;\ntype CanvasImageSource = ImageBitmap | OffscreenCanvas;\ntype DOMHighResTimeStamp = number;\ntype EpochTimeStamp = number;\ntype EventListenerOrEventListenerObject = EventListener | EventListenerObject;\ntype Float32List = Float32Array | GLfloat[];\ntype FormDataEntryValue = File | string;\ntype GLbitfield = number;\ntype GLboolean = boolean;\ntype GLclampf = number;\ntype GLenum = number;\ntype GLfloat = number;\ntype GLint = number;\ntype GLint64 = number;\ntype GLintptr = number;\ntype GLsizei = number;\ntype GLsizeiptr = number;\ntype GLuint = number;\ntype GLuint64 = number;\ntype HashAlgorithmIdentifier = AlgorithmIdentifier;\ntype HeadersInit = [string, string][] | Record<string, string> | Headers;\ntype IDBValidKey = number | string | Date | BufferSource | IDBValidKey[];\ntype ImageBitmapSource = CanvasImageSource | Blob | ImageData;\ntype Int32List = Int32Array | GLint[];\ntype MessageEventSource = MessagePort | ServiceWorker;\ntype NamedCurve = string;\ntype OnErrorEventHandler = OnErrorEventHandlerNonNull | null;\ntype PerformanceEntryList = PerformanceEntry[];\ntype PushMessageDataInit = BufferSource | string;\ntype ReadableStreamController<T> = ReadableStreamDefaultController<T>;\ntype ReadableStreamReadResult<T> = ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult;\ntype ReadableStreamReader<T> = ReadableStreamDefaultReader<T>;\ntype RequestInfo = Request | string;\ntype TexImageSource = ImageBitmap | ImageData | OffscreenCanvas;\ntype TimerHandler = string | Function;\ntype Transferable = ArrayBuffer | MessagePort | ImageBitmap;\ntype Uint32List = Uint32Array | GLuint[];\ntype VibratePattern = number | number[];\ntype XMLHttpRequestBodyInit = Blob | BufferSource | FormData | URLSearchParams | string;\ntype BinaryType = \"arraybuffer\" | \"blob\";\ntype ClientTypes = \"all\" | \"sharedworker\" | \"window\" | \"worker\";\ntype ColorGamut = \"p3\" | \"rec2020\" | \"srgb\";\ntype ColorSpaceConversion = \"default\" | \"none\";\ntype DocumentVisibilityState = \"hidden\" | \"visible\";\ntype EndingType = \"native\" | \"transparent\";\ntype FileSystemHandleKind = \"directory\" | \"file\";\ntype FontFaceLoadStatus = \"error\" | \"loaded\" | \"loading\" | \"unloaded\";\ntype FontFaceSetLoadStatus = \"loaded\" | \"loading\";\ntype FrameType = \"auxiliary\" | \"nested\" | \"none\" | \"top-level\";\ntype HdrMetadataType = \"smpteSt2086\" | \"smpteSt2094-10\" | \"smpteSt2094-40\";\ntype IDBCursorDirection = \"next\" | \"nextunique\" | \"prev\" | \"prevunique\";\ntype IDBRequestReadyState = \"done\" | \"pending\";\ntype IDBTransactionDurability = \"default\" | \"relaxed\" | \"strict\";\ntype IDBTransactionMode = \"readonly\" | \"readwrite\" | \"versionchange\";\ntype ImageOrientation = \"flipY\" | \"none\";\ntype KeyFormat = \"jwk\" | \"pkcs8\" | \"raw\" | \"spki\";\ntype KeyType = \"private\" | \"public\" | \"secret\";\ntype KeyUsage = \"decrypt\" | \"deriveBits\" | \"deriveKey\" | \"encrypt\" | \"sign\" | \"unwrapKey\" | \"verify\" | \"wrapKey\";\ntype LockMode = \"exclusive\" | \"shared\";\ntype MediaDecodingType = \"file\" | \"media-source\" | \"webrtc\";\ntype MediaEncodingType = \"record\" | \"webrtc\";\ntype NotificationDirection = \"auto\" | \"ltr\" | \"rtl\";\ntype NotificationPermission = \"default\" | \"denied\" | \"granted\";\ntype PermissionName = \"geolocation\" | \"notifications\" | \"persistent-storage\" | \"push\" | \"screen-wake-lock\" | \"xr-spatial-tracking\";\ntype PermissionState = \"denied\" | \"granted\" | \"prompt\";\ntype PredefinedColorSpace = \"display-p3\" | \"srgb\";\ntype PremultiplyAlpha = \"default\" | \"none\" | \"premultiply\";\ntype PushEncryptionKeyName = \"auth\" | \"p256dh\";\ntype RTCEncodedVideoFrameType = \"delta\" | \"empty\" | \"key\";\ntype ReferrerPolicy = \"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\";\ntype RequestCache = \"default\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | \"reload\";\ntype RequestCredentials = \"include\" | \"omit\" | \"same-origin\";\ntype RequestDestination = \"\" | \"audio\" | \"audioworklet\" | \"document\" | \"embed\" | \"font\" | \"frame\" | \"iframe\" | \"image\" | \"manifest\" | \"object\" | \"paintworklet\" | \"report\" | \"script\" | \"sharedworker\" | \"style\" | \"track\" | \"video\" | \"worker\" | \"xslt\";\ntype RequestMode = \"cors\" | \"navigate\" | \"no-cors\" | \"same-origin\";\ntype RequestRedirect = \"error\" | \"follow\" | \"manual\";\ntype ResizeQuality = \"high\" | \"low\" | \"medium\" | \"pixelated\";\ntype ResponseType = \"basic\" | \"cors\" | \"default\" | \"error\" | \"opaque\" | \"opaqueredirect\";\ntype SecurityPolicyViolationEventDisposition = \"enforce\" | \"report\";\ntype ServiceWorkerState = \"activated\" | \"activating\" | \"installed\" | \"installing\" | \"parsed\" | \"redundant\";\ntype ServiceWorkerUpdateViaCache = \"all\" | \"imports\" | \"none\";\ntype TransferFunction = \"hlg\" | \"pq\" | \"srgb\";\ntype VideoColorPrimaries = \"bt470bg\" | \"bt709\" | \"smpte170m\";\ntype VideoMatrixCoefficients = \"bt470bg\" | \"bt709\" | \"rgb\" | \"smpte170m\";\ntype VideoTransferCharacteristics = \"bt709\" | \"iec61966-2-1\" | \"smpte170m\";\ntype WebGLPowerPreference = \"default\" | \"high-performance\" | \"low-power\";\ntype WorkerType = \"classic\" | \"module\";\ntype XMLHttpRequestResponseType = \"\" | \"arraybuffer\" | \"blob\" | \"document\" | \"json\" | \"text\";\n","lib.webworker.importscripts.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n\n/////////////////////////////\n/// WorkerGlobalScope APIs\n/////////////////////////////\n// These are only available in a Web Worker\ndeclare function importScripts(...urls: string[]): void;\n","lib.webworker.iterable.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\n\n\n/////////////////////////////\n/// Worker Iterable APIs\n/////////////////////////////\n\ninterface Cache {\n    addAll(requests: Iterable<RequestInfo>): Promise<void>;\n}\n\ninterface DOMStringList {\n    [Symbol.iterator](): IterableIterator<string>;\n}\n\ninterface FileList {\n    [Symbol.iterator](): IterableIterator<File>;\n}\n\ninterface FontFaceSet extends Set<FontFace> {\n}\n\ninterface FormData {\n    [Symbol.iterator](): IterableIterator<[string, FormDataEntryValue]>;\n    /** Returns an array of key, value pairs for every entry in the list. */\n    entries(): IterableIterator<[string, FormDataEntryValue]>;\n    /** Returns a list of keys in the list. */\n    keys(): IterableIterator<string>;\n    /** Returns a list of values in the list. */\n    values(): IterableIterator<FormDataEntryValue>;\n}\n\ninterface Headers {\n    [Symbol.iterator](): IterableIterator<[string, string]>;\n    /** Returns an iterator allowing to go through all key/value pairs contained in this object. */\n    entries(): IterableIterator<[string, string]>;\n    /** Returns an iterator allowing to go through all keys of the key/value pairs contained in this object. */\n    keys(): IterableIterator<string>;\n    /** Returns an iterator allowing to go through all values of the key/value pairs contained in this object. */\n    values(): IterableIterator<string>;\n}\n\ninterface IDBDatabase {\n    /** Returns a new transaction with the given mode (\"readonly\" or \"readwrite\") and scope which can be a single object store name or an array of names. */\n    transaction(storeNames: string | Iterable<string>, mode?: IDBTransactionMode, options?: IDBTransactionOptions): IDBTransaction;\n}\n\ninterface IDBObjectStore {\n    /**\n     * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \"ConstraintError\" DOMException.\n     *\n     * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n     */\n    createIndex(name: string, keyPath: string | Iterable<string>, options?: IDBIndexParameters): IDBIndex;\n}\n\ninterface MessageEvent<T = any> {\n    /** @deprecated */\n    initMessageEvent(type: string, bubbles?: boolean, cancelable?: boolean, data?: any, origin?: string, lastEventId?: string, source?: MessageEventSource | null, ports?: Iterable<MessagePort>): void;\n}\n\ninterface SubtleCrypto {\n    deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;\n    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;\n    generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKeyPair | CryptoKey>;\n    importKey(format: \"jwk\", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\n    importKey(format: Exclude<KeyFormat, \"jwk\">, keyData: BufferSource, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;\n    unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;\n}\n\ninterface URLSearchParams {\n    [Symbol.iterator](): IterableIterator<[string, string]>;\n    /** Returns an array of key, value pairs for every entry in the search params. */\n    entries(): IterableIterator<[string, string]>;\n    /** Returns a list of keys in the search params. */\n    keys(): IterableIterator<string>;\n    /** Returns a list of values in the search params. */\n    values(): IterableIterator<string>;\n}\n\ninterface WEBGL_draw_buffers {\n    drawBuffersWEBGL(buffers: Iterable<GLenum>): void;\n}\n\ninterface WEBGL_multi_draw {\n    multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Int32Array | Iterable<GLint>, firstsOffset: GLuint, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, instanceCountsList: Int32Array | Iterable<GLsizei>, instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawArraysWEBGL(mode: GLenum, firstsList: Int32Array | Iterable<GLint>, firstsOffset: GLuint, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Int32Array | Iterable<GLint>, countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | Iterable<GLsizei>, offsetsOffset: GLuint, instanceCountsList: Int32Array | Iterable<GLsizei>, instanceCountsOffset: GLuint, drawcount: GLsizei): void;\n    multiDrawElementsWEBGL(mode: GLenum, countsList: Int32Array | Iterable<GLint>, countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | Iterable<GLsizei>, offsetsOffset: GLuint, drawcount: GLsizei): void;\n}\n\ninterface WebGL2RenderingContextBase {\n    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLfloat>, srcOffset?: GLuint): void;\n    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLint>, srcOffset?: GLuint): void;\n    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLuint>, srcOffset?: GLuint): void;\n    drawBuffers(buffers: Iterable<GLenum>): void;\n    getActiveUniforms(program: WebGLProgram, uniformIndices: Iterable<GLuint>, pname: GLenum): any;\n    getUniformIndices(program: WebGLProgram, uniformNames: Iterable<string>): Iterable<GLuint> | null;\n    invalidateFramebuffer(target: GLenum, attachments: Iterable<GLenum>): void;\n    invalidateSubFramebuffer(target: GLenum, attachments: Iterable<GLenum>, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\n    transformFeedbackVaryings(program: WebGLProgram, varyings: Iterable<string>, bufferMode: GLenum): void;\n    uniform1uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    vertexAttribI4iv(index: GLuint, values: Iterable<GLint>): void;\n    vertexAttribI4uiv(index: GLuint, values: Iterable<GLuint>): void;\n}\n\ninterface WebGL2RenderingContextOverloads {\n    uniform1fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform1iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform2iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform3iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniform4iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;\n}\n\ninterface WebGLRenderingContextBase {\n    vertexAttrib1fv(index: GLuint, values: Iterable<GLfloat>): void;\n    vertexAttrib2fv(index: GLuint, values: Iterable<GLfloat>): void;\n    vertexAttrib3fv(index: GLuint, values: Iterable<GLfloat>): void;\n    vertexAttrib4fv(index: GLuint, values: Iterable<GLfloat>): void;\n}\n\ninterface WebGLRenderingContextOverloads {\n    uniform1fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform1iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniform2fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform2iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniform3fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform3iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniform4fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;\n    uniform4iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;\n}\n","typescript.d.ts":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\ndeclare namespace ts {\n    const versionMajorMinor = \"4.8\";\n    /** The version of the TypeScript compiler release */\n    const version: string;\n    /**\n     * Type of objects whose values are all of the same type.\n     * The `in` and `for-in` operators can *not* be safely used,\n     * since `Object.prototype` may be modified by outside code.\n     */\n    interface MapLike<T> {\n        [index: string]: T;\n    }\n    interface SortedReadonlyArray<T> extends ReadonlyArray<T> {\n        \" __sortedArrayBrand\": any;\n    }\n    interface SortedArray<T> extends Array<T> {\n        \" __sortedArrayBrand\": any;\n    }\n    /** Common read methods for ES6 Map/Set. */\n    interface ReadonlyCollection<K> {\n        readonly size: number;\n        has(key: K): boolean;\n        keys(): Iterator<K>;\n    }\n    /** Common write methods for ES6 Map/Set. */\n    interface Collection<K> extends ReadonlyCollection<K> {\n        delete(key: K): boolean;\n        clear(): void;\n    }\n    /** ES6 Map interface, only read methods included. */\n    interface ReadonlyESMap<K, V> extends ReadonlyCollection<K> {\n        get(key: K): V | undefined;\n        values(): Iterator<V>;\n        entries(): Iterator<[K, V]>;\n        forEach(action: (value: V, key: K) => void): void;\n    }\n    /**\n     * ES6 Map interface, only read methods included.\n     */\n    interface ReadonlyMap<T> extends ReadonlyESMap<string, T> {\n    }\n    /** ES6 Map interface. */\n    interface ESMap<K, V> extends ReadonlyESMap<K, V>, Collection<K> {\n        set(key: K, value: V): this;\n    }\n    /**\n     * ES6 Map interface.\n     */\n    interface Map<T> extends ESMap<string, T> {\n    }\n    /** ES6 Set interface, only read methods included. */\n    interface ReadonlySet<T> extends ReadonlyCollection<T> {\n        has(value: T): boolean;\n        values(): Iterator<T>;\n        entries(): Iterator<[T, T]>;\n        forEach(action: (value: T, key: T) => void): void;\n    }\n    /** ES6 Set interface. */\n    interface Set<T> extends ReadonlySet<T>, Collection<T> {\n        add(value: T): this;\n        delete(value: T): boolean;\n    }\n    /** ES6 Iterator type. */\n    interface Iterator<T> {\n        next(): {\n            value: T;\n            done?: false;\n        } | {\n            value: void;\n            done: true;\n        };\n    }\n    /** Array that is only intended to be pushed to, never read. */\n    interface Push<T> {\n        push(...values: T[]): void;\n    }\n}\ndeclare namespace ts {\n    export type Path = string & {\n        __pathBrand: any;\n    };\n    export interface TextRange {\n        pos: number;\n        end: number;\n    }\n    export interface ReadonlyTextRange {\n        readonly pos: number;\n        readonly end: number;\n    }\n    export enum SyntaxKind {\n        Unknown = 0,\n        EndOfFileToken = 1,\n        SingleLineCommentTrivia = 2,\n        MultiLineCommentTrivia = 3,\n        NewLineTrivia = 4,\n        WhitespaceTrivia = 5,\n        ShebangTrivia = 6,\n        ConflictMarkerTrivia = 7,\n        NumericLiteral = 8,\n        BigIntLiteral = 9,\n        StringLiteral = 10,\n        JsxText = 11,\n        JsxTextAllWhiteSpaces = 12,\n        RegularExpressionLiteral = 13,\n        NoSubstitutionTemplateLiteral = 14,\n        TemplateHead = 15,\n        TemplateMiddle = 16,\n        TemplateTail = 17,\n        OpenBraceToken = 18,\n        CloseBraceToken = 19,\n        OpenParenToken = 20,\n        CloseParenToken = 21,\n        OpenBracketToken = 22,\n        CloseBracketToken = 23,\n        DotToken = 24,\n        DotDotDotToken = 25,\n        SemicolonToken = 26,\n        CommaToken = 27,\n        QuestionDotToken = 28,\n        LessThanToken = 29,\n        LessThanSlashToken = 30,\n        GreaterThanToken = 31,\n        LessThanEqualsToken = 32,\n        GreaterThanEqualsToken = 33,\n        EqualsEqualsToken = 34,\n        ExclamationEqualsToken = 35,\n        EqualsEqualsEqualsToken = 36,\n        ExclamationEqualsEqualsToken = 37,\n        EqualsGreaterThanToken = 38,\n        PlusToken = 39,\n        MinusToken = 40,\n        AsteriskToken = 41,\n        AsteriskAsteriskToken = 42,\n        SlashToken = 43,\n        PercentToken = 44,\n        PlusPlusToken = 45,\n        MinusMinusToken = 46,\n        LessThanLessThanToken = 47,\n        GreaterThanGreaterThanToken = 48,\n        GreaterThanGreaterThanGreaterThanToken = 49,\n        AmpersandToken = 50,\n        BarToken = 51,\n        CaretToken = 52,\n        ExclamationToken = 53,\n        TildeToken = 54,\n        AmpersandAmpersandToken = 55,\n        BarBarToken = 56,\n        QuestionToken = 57,\n        ColonToken = 58,\n        AtToken = 59,\n        QuestionQuestionToken = 60,\n        /** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */\n        BacktickToken = 61,\n        /** Only the JSDoc scanner produces HashToken. The normal scanner produces PrivateIdentifier. */\n        HashToken = 62,\n        EqualsToken = 63,\n        PlusEqualsToken = 64,\n        MinusEqualsToken = 65,\n        AsteriskEqualsToken = 66,\n        AsteriskAsteriskEqualsToken = 67,\n        SlashEqualsToken = 68,\n        PercentEqualsToken = 69,\n        LessThanLessThanEqualsToken = 70,\n        GreaterThanGreaterThanEqualsToken = 71,\n        GreaterThanGreaterThanGreaterThanEqualsToken = 72,\n        AmpersandEqualsToken = 73,\n        BarEqualsToken = 74,\n        BarBarEqualsToken = 75,\n        AmpersandAmpersandEqualsToken = 76,\n        QuestionQuestionEqualsToken = 77,\n        CaretEqualsToken = 78,\n        Identifier = 79,\n        PrivateIdentifier = 80,\n        BreakKeyword = 81,\n        CaseKeyword = 82,\n        CatchKeyword = 83,\n        ClassKeyword = 84,\n        ConstKeyword = 85,\n        ContinueKeyword = 86,\n        DebuggerKeyword = 87,\n        DefaultKeyword = 88,\n        DeleteKeyword = 89,\n        DoKeyword = 90,\n        ElseKeyword = 91,\n        EnumKeyword = 92,\n        ExportKeyword = 93,\n        ExtendsKeyword = 94,\n        FalseKeyword = 95,\n        FinallyKeyword = 96,\n        ForKeyword = 97,\n        FunctionKeyword = 98,\n        IfKeyword = 99,\n        ImportKeyword = 100,\n        InKeyword = 101,\n        InstanceOfKeyword = 102,\n        NewKeyword = 103,\n        NullKeyword = 104,\n        ReturnKeyword = 105,\n        SuperKeyword = 106,\n        SwitchKeyword = 107,\n        ThisKeyword = 108,\n        ThrowKeyword = 109,\n        TrueKeyword = 110,\n        TryKeyword = 111,\n        TypeOfKeyword = 112,\n        VarKeyword = 113,\n        VoidKeyword = 114,\n        WhileKeyword = 115,\n        WithKeyword = 116,\n        ImplementsKeyword = 117,\n        InterfaceKeyword = 118,\n        LetKeyword = 119,\n        PackageKeyword = 120,\n        PrivateKeyword = 121,\n        ProtectedKeyword = 122,\n        PublicKeyword = 123,\n        StaticKeyword = 124,\n        YieldKeyword = 125,\n        AbstractKeyword = 126,\n        AsKeyword = 127,\n        AssertsKeyword = 128,\n        AssertKeyword = 129,\n        AnyKeyword = 130,\n        AsyncKeyword = 131,\n        AwaitKeyword = 132,\n        BooleanKeyword = 133,\n        ConstructorKeyword = 134,\n        DeclareKeyword = 135,\n        GetKeyword = 136,\n        InferKeyword = 137,\n        IntrinsicKeyword = 138,\n        IsKeyword = 139,\n        KeyOfKeyword = 140,\n        ModuleKeyword = 141,\n        NamespaceKeyword = 142,\n        NeverKeyword = 143,\n        OutKeyword = 144,\n        ReadonlyKeyword = 145,\n        RequireKeyword = 146,\n        NumberKeyword = 147,\n        ObjectKeyword = 148,\n        SetKeyword = 149,\n        StringKeyword = 150,\n        SymbolKeyword = 151,\n        TypeKeyword = 152,\n        UndefinedKeyword = 153,\n        UniqueKeyword = 154,\n        UnknownKeyword = 155,\n        FromKeyword = 156,\n        GlobalKeyword = 157,\n        BigIntKeyword = 158,\n        OverrideKeyword = 159,\n        OfKeyword = 160,\n        QualifiedName = 161,\n        ComputedPropertyName = 162,\n        TypeParameter = 163,\n        Parameter = 164,\n        Decorator = 165,\n        PropertySignature = 166,\n        PropertyDeclaration = 167,\n        MethodSignature = 168,\n        MethodDeclaration = 169,\n        ClassStaticBlockDeclaration = 170,\n        Constructor = 171,\n        GetAccessor = 172,\n        SetAccessor = 173,\n        CallSignature = 174,\n        ConstructSignature = 175,\n        IndexSignature = 176,\n        TypePredicate = 177,\n        TypeReference = 178,\n        FunctionType = 179,\n        ConstructorType = 180,\n        TypeQuery = 181,\n        TypeLiteral = 182,\n        ArrayType = 183,\n        TupleType = 184,\n        OptionalType = 185,\n        RestType = 186,\n        UnionType = 187,\n        IntersectionType = 188,\n        ConditionalType = 189,\n        InferType = 190,\n        ParenthesizedType = 191,\n        ThisType = 192,\n        TypeOperator = 193,\n        IndexedAccessType = 194,\n        MappedType = 195,\n        LiteralType = 196,\n        NamedTupleMember = 197,\n        TemplateLiteralType = 198,\n        TemplateLiteralTypeSpan = 199,\n        ImportType = 200,\n        ObjectBindingPattern = 201,\n        ArrayBindingPattern = 202,\n        BindingElement = 203,\n        ArrayLiteralExpression = 204,\n        ObjectLiteralExpression = 205,\n        PropertyAccessExpression = 206,\n        ElementAccessExpression = 207,\n        CallExpression = 208,\n        NewExpression = 209,\n        TaggedTemplateExpression = 210,\n        TypeAssertionExpression = 211,\n        ParenthesizedExpression = 212,\n        FunctionExpression = 213,\n        ArrowFunction = 214,\n        DeleteExpression = 215,\n        TypeOfExpression = 216,\n        VoidExpression = 217,\n        AwaitExpression = 218,\n        PrefixUnaryExpression = 219,\n        PostfixUnaryExpression = 220,\n        BinaryExpression = 221,\n        ConditionalExpression = 222,\n        TemplateExpression = 223,\n        YieldExpression = 224,\n        SpreadElement = 225,\n        ClassExpression = 226,\n        OmittedExpression = 227,\n        ExpressionWithTypeArguments = 228,\n        AsExpression = 229,\n        NonNullExpression = 230,\n        MetaProperty = 231,\n        SyntheticExpression = 232,\n        TemplateSpan = 233,\n        SemicolonClassElement = 234,\n        Block = 235,\n        EmptyStatement = 236,\n        VariableStatement = 237,\n        ExpressionStatement = 238,\n        IfStatement = 239,\n        DoStatement = 240,\n        WhileStatement = 241,\n        ForStatement = 242,\n        ForInStatement = 243,\n        ForOfStatement = 244,\n        ContinueStatement = 245,\n        BreakStatement = 246,\n        ReturnStatement = 247,\n        WithStatement = 248,\n        SwitchStatement = 249,\n        LabeledStatement = 250,\n        ThrowStatement = 251,\n        TryStatement = 252,\n        DebuggerStatement = 253,\n        VariableDeclaration = 254,\n        VariableDeclarationList = 255,\n        FunctionDeclaration = 256,\n        ClassDeclaration = 257,\n        InterfaceDeclaration = 258,\n        TypeAliasDeclaration = 259,\n        EnumDeclaration = 260,\n        ModuleDeclaration = 261,\n        ModuleBlock = 262,\n        CaseBlock = 263,\n        NamespaceExportDeclaration = 264,\n        ImportEqualsDeclaration = 265,\n        ImportDeclaration = 266,\n        ImportClause = 267,\n        NamespaceImport = 268,\n        NamedImports = 269,\n        ImportSpecifier = 270,\n        ExportAssignment = 271,\n        ExportDeclaration = 272,\n        NamedExports = 273,\n        NamespaceExport = 274,\n        ExportSpecifier = 275,\n        MissingDeclaration = 276,\n        ExternalModuleReference = 277,\n        JsxElement = 278,\n        JsxSelfClosingElement = 279,\n        JsxOpeningElement = 280,\n        JsxClosingElement = 281,\n        JsxFragment = 282,\n        JsxOpeningFragment = 283,\n        JsxClosingFragment = 284,\n        JsxAttribute = 285,\n        JsxAttributes = 286,\n        JsxSpreadAttribute = 287,\n        JsxExpression = 288,\n        CaseClause = 289,\n        DefaultClause = 290,\n        HeritageClause = 291,\n        CatchClause = 292,\n        AssertClause = 293,\n        AssertEntry = 294,\n        ImportTypeAssertionContainer = 295,\n        PropertyAssignment = 296,\n        ShorthandPropertyAssignment = 297,\n        SpreadAssignment = 298,\n        EnumMember = 299,\n        UnparsedPrologue = 300,\n        UnparsedPrepend = 301,\n        UnparsedText = 302,\n        UnparsedInternalText = 303,\n        UnparsedSyntheticReference = 304,\n        SourceFile = 305,\n        Bundle = 306,\n        UnparsedSource = 307,\n        InputFiles = 308,\n        JSDocTypeExpression = 309,\n        JSDocNameReference = 310,\n        JSDocMemberName = 311,\n        JSDocAllType = 312,\n        JSDocUnknownType = 313,\n        JSDocNullableType = 314,\n        JSDocNonNullableType = 315,\n        JSDocOptionalType = 316,\n        JSDocFunctionType = 317,\n        JSDocVariadicType = 318,\n        JSDocNamepathType = 319,\n        JSDoc = 320,\n        /** @deprecated Use SyntaxKind.JSDoc */\n        JSDocComment = 320,\n        JSDocText = 321,\n        JSDocTypeLiteral = 322,\n        JSDocSignature = 323,\n        JSDocLink = 324,\n        JSDocLinkCode = 325,\n        JSDocLinkPlain = 326,\n        JSDocTag = 327,\n        JSDocAugmentsTag = 328,\n        JSDocImplementsTag = 329,\n        JSDocAuthorTag = 330,\n        JSDocDeprecatedTag = 331,\n        JSDocClassTag = 332,\n        JSDocPublicTag = 333,\n        JSDocPrivateTag = 334,\n        JSDocProtectedTag = 335,\n        JSDocReadonlyTag = 336,\n        JSDocOverrideTag = 337,\n        JSDocCallbackTag = 338,\n        JSDocEnumTag = 339,\n        JSDocParameterTag = 340,\n        JSDocReturnTag = 341,\n        JSDocThisTag = 342,\n        JSDocTypeTag = 343,\n        JSDocTemplateTag = 344,\n        JSDocTypedefTag = 345,\n        JSDocSeeTag = 346,\n        JSDocPropertyTag = 347,\n        SyntaxList = 348,\n        NotEmittedStatement = 349,\n        PartiallyEmittedExpression = 350,\n        CommaListExpression = 351,\n        MergeDeclarationMarker = 352,\n        EndOfDeclarationMarker = 353,\n        SyntheticReferenceExpression = 354,\n        Count = 355,\n        FirstAssignment = 63,\n        LastAssignment = 78,\n        FirstCompoundAssignment = 64,\n        LastCompoundAssignment = 78,\n        FirstReservedWord = 81,\n        LastReservedWord = 116,\n        FirstKeyword = 81,\n        LastKeyword = 160,\n        FirstFutureReservedWord = 117,\n        LastFutureReservedWord = 125,\n        FirstTypeNode = 177,\n        LastTypeNode = 200,\n        FirstPunctuation = 18,\n        LastPunctuation = 78,\n        FirstToken = 0,\n        LastToken = 160,\n        FirstTriviaToken = 2,\n        LastTriviaToken = 7,\n        FirstLiteralToken = 8,\n        LastLiteralToken = 14,\n        FirstTemplateToken = 14,\n        LastTemplateToken = 17,\n        FirstBinaryOperator = 29,\n        LastBinaryOperator = 78,\n        FirstStatement = 237,\n        LastStatement = 253,\n        FirstNode = 161,\n        FirstJSDocNode = 309,\n        LastJSDocNode = 347,\n        FirstJSDocTagNode = 327,\n        LastJSDocTagNode = 347,\n    }\n    export type TriviaSyntaxKind = SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia | SyntaxKind.NewLineTrivia | SyntaxKind.WhitespaceTrivia | SyntaxKind.ShebangTrivia | SyntaxKind.ConflictMarkerTrivia;\n    export type LiteralSyntaxKind = SyntaxKind.NumericLiteral | SyntaxKind.BigIntLiteral | SyntaxKind.StringLiteral | SyntaxKind.JsxText | SyntaxKind.JsxTextAllWhiteSpaces | SyntaxKind.RegularExpressionLiteral | SyntaxKind.NoSubstitutionTemplateLiteral;\n    export type PseudoLiteralSyntaxKind = SyntaxKind.TemplateHead | SyntaxKind.TemplateMiddle | SyntaxKind.TemplateTail;\n    export type PunctuationSyntaxKind = SyntaxKind.OpenBraceToken | SyntaxKind.CloseBraceToken | SyntaxKind.OpenParenToken | SyntaxKind.CloseParenToken | SyntaxKind.OpenBracketToken | SyntaxKind.CloseBracketToken | SyntaxKind.DotToken | SyntaxKind.DotDotDotToken | SyntaxKind.SemicolonToken | SyntaxKind.CommaToken | SyntaxKind.QuestionDotToken | SyntaxKind.LessThanToken | SyntaxKind.LessThanSlashToken | SyntaxKind.GreaterThanToken | SyntaxKind.LessThanEqualsToken | SyntaxKind.GreaterThanEqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.EqualsEqualsEqualsToken | SyntaxKind.ExclamationEqualsEqualsToken | SyntaxKind.EqualsGreaterThanToken | SyntaxKind.PlusToken | SyntaxKind.MinusToken | SyntaxKind.AsteriskToken | SyntaxKind.AsteriskAsteriskToken | SyntaxKind.SlashToken | SyntaxKind.PercentToken | SyntaxKind.PlusPlusToken | SyntaxKind.MinusMinusToken | SyntaxKind.LessThanLessThanToken | SyntaxKind.GreaterThanGreaterThanToken | SyntaxKind.GreaterThanGreaterThanGreaterThanToken | SyntaxKind.AmpersandToken | SyntaxKind.BarToken | SyntaxKind.CaretToken | SyntaxKind.ExclamationToken | SyntaxKind.TildeToken | SyntaxKind.AmpersandAmpersandToken | SyntaxKind.BarBarToken | SyntaxKind.QuestionQuestionToken | SyntaxKind.QuestionToken | SyntaxKind.ColonToken | SyntaxKind.AtToken | SyntaxKind.BacktickToken | SyntaxKind.HashToken | SyntaxKind.EqualsToken | SyntaxKind.PlusEqualsToken | SyntaxKind.MinusEqualsToken | SyntaxKind.AsteriskEqualsToken | SyntaxKind.AsteriskAsteriskEqualsToken | SyntaxKind.SlashEqualsToken | SyntaxKind.PercentEqualsToken | SyntaxKind.LessThanLessThanEqualsToken | SyntaxKind.GreaterThanGreaterThanEqualsToken | SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken | SyntaxKind.AmpersandEqualsToken | SyntaxKind.BarEqualsToken | SyntaxKind.CaretEqualsToken;\n    export type KeywordSyntaxKind = SyntaxKind.AbstractKeyword | SyntaxKind.AnyKeyword | SyntaxKind.AsKeyword | SyntaxKind.AssertsKeyword | SyntaxKind.AssertKeyword | SyntaxKind.AsyncKeyword | SyntaxKind.AwaitKeyword | SyntaxKind.BigIntKeyword | SyntaxKind.BooleanKeyword | SyntaxKind.BreakKeyword | SyntaxKind.CaseKeyword | SyntaxKind.CatchKeyword | SyntaxKind.ClassKeyword | SyntaxKind.ConstKeyword | SyntaxKind.ConstructorKeyword | SyntaxKind.ContinueKeyword | SyntaxKind.DebuggerKeyword | SyntaxKind.DeclareKeyword | SyntaxKind.DefaultKeyword | SyntaxKind.DeleteKeyword | SyntaxKind.DoKeyword | SyntaxKind.ElseKeyword | SyntaxKind.EnumKeyword | SyntaxKind.ExportKeyword | SyntaxKind.ExtendsKeyword | SyntaxKind.FalseKeyword | SyntaxKind.FinallyKeyword | SyntaxKind.ForKeyword | SyntaxKind.FromKeyword | SyntaxKind.FunctionKeyword | SyntaxKind.GetKeyword | SyntaxKind.GlobalKeyword | SyntaxKind.IfKeyword | SyntaxKind.ImplementsKeyword | SyntaxKind.ImportKeyword | SyntaxKind.InferKeyword | SyntaxKind.InKeyword | SyntaxKind.InstanceOfKeyword | SyntaxKind.InterfaceKeyword | SyntaxKind.IntrinsicKeyword | SyntaxKind.IsKeyword | SyntaxKind.KeyOfKeyword | SyntaxKind.LetKeyword | SyntaxKind.ModuleKeyword | SyntaxKind.NamespaceKeyword | SyntaxKind.NeverKeyword | SyntaxKind.NewKeyword | SyntaxKind.NullKeyword | SyntaxKind.NumberKeyword | SyntaxKind.ObjectKeyword | SyntaxKind.OfKeyword | SyntaxKind.PackageKeyword | SyntaxKind.PrivateKeyword | SyntaxKind.ProtectedKeyword | SyntaxKind.PublicKeyword | SyntaxKind.ReadonlyKeyword | SyntaxKind.OutKeyword | SyntaxKind.OverrideKeyword | SyntaxKind.RequireKeyword | SyntaxKind.ReturnKeyword | SyntaxKind.SetKeyword | SyntaxKind.StaticKeyword | SyntaxKind.StringKeyword | SyntaxKind.SuperKeyword | SyntaxKind.SwitchKeyword | SyntaxKind.SymbolKeyword | SyntaxKind.ThisKeyword | SyntaxKind.ThrowKeyword | SyntaxKind.TrueKeyword | SyntaxKind.TryKeyword | SyntaxKind.TypeKeyword | SyntaxKind.TypeOfKeyword | SyntaxKind.UndefinedKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.UnknownKeyword | SyntaxKind.VarKeyword | SyntaxKind.VoidKeyword | SyntaxKind.WhileKeyword | SyntaxKind.WithKeyword | SyntaxKind.YieldKeyword;\n    export type ModifierSyntaxKind = SyntaxKind.AbstractKeyword | SyntaxKind.AsyncKeyword | SyntaxKind.ConstKeyword | SyntaxKind.DeclareKeyword | SyntaxKind.DefaultKeyword | SyntaxKind.ExportKeyword | SyntaxKind.InKeyword | SyntaxKind.PrivateKeyword | SyntaxKind.ProtectedKeyword | SyntaxKind.PublicKeyword | SyntaxKind.ReadonlyKeyword | SyntaxKind.OutKeyword | SyntaxKind.OverrideKeyword | SyntaxKind.StaticKeyword;\n    export type KeywordTypeSyntaxKind = SyntaxKind.AnyKeyword | SyntaxKind.BigIntKeyword | SyntaxKind.BooleanKeyword | SyntaxKind.IntrinsicKeyword | SyntaxKind.NeverKeyword | SyntaxKind.NumberKeyword | SyntaxKind.ObjectKeyword | SyntaxKind.StringKeyword | SyntaxKind.SymbolKeyword | SyntaxKind.UndefinedKeyword | SyntaxKind.UnknownKeyword | SyntaxKind.VoidKeyword;\n    export type TokenSyntaxKind = SyntaxKind.Unknown | SyntaxKind.EndOfFileToken | TriviaSyntaxKind | LiteralSyntaxKind | PseudoLiteralSyntaxKind | PunctuationSyntaxKind | SyntaxKind.Identifier | KeywordSyntaxKind;\n    export type JsxTokenSyntaxKind = SyntaxKind.LessThanSlashToken | SyntaxKind.EndOfFileToken | SyntaxKind.ConflictMarkerTrivia | SyntaxKind.JsxText | SyntaxKind.JsxTextAllWhiteSpaces | SyntaxKind.OpenBraceToken | SyntaxKind.LessThanToken;\n    export type JSDocSyntaxKind = SyntaxKind.EndOfFileToken | SyntaxKind.WhitespaceTrivia | SyntaxKind.AtToken | SyntaxKind.NewLineTrivia | SyntaxKind.AsteriskToken | SyntaxKind.OpenBraceToken | SyntaxKind.CloseBraceToken | SyntaxKind.LessThanToken | SyntaxKind.GreaterThanToken | SyntaxKind.OpenBracketToken | SyntaxKind.CloseBracketToken | SyntaxKind.EqualsToken | SyntaxKind.CommaToken | SyntaxKind.DotToken | SyntaxKind.Identifier | SyntaxKind.BacktickToken | SyntaxKind.HashToken | SyntaxKind.Unknown | KeywordSyntaxKind;\n    export enum NodeFlags {\n        None = 0,\n        Let = 1,\n        Const = 2,\n        NestedNamespace = 4,\n        Synthesized = 8,\n        Namespace = 16,\n        OptionalChain = 32,\n        ExportContext = 64,\n        ContainsThis = 128,\n        HasImplicitReturn = 256,\n        HasExplicitReturn = 512,\n        GlobalAugmentation = 1024,\n        HasAsyncFunctions = 2048,\n        DisallowInContext = 4096,\n        YieldContext = 8192,\n        DecoratorContext = 16384,\n        AwaitContext = 32768,\n        DisallowConditionalTypesContext = 65536,\n        ThisNodeHasError = 131072,\n        JavaScriptFile = 262144,\n        ThisNodeOrAnySubNodesHasError = 524288,\n        HasAggregatedChildData = 1048576,\n        JSDoc = 8388608,\n        JsonFile = 67108864,\n        BlockScoped = 3,\n        ReachabilityCheckFlags = 768,\n        ReachabilityAndEmitFlags = 2816,\n        ContextFlags = 50720768,\n        TypeExcludesFlags = 40960,\n    }\n    export enum ModifierFlags {\n        None = 0,\n        Export = 1,\n        Ambient = 2,\n        Public = 4,\n        Private = 8,\n        Protected = 16,\n        Static = 32,\n        Readonly = 64,\n        Abstract = 128,\n        Async = 256,\n        Default = 512,\n        Const = 2048,\n        HasComputedJSDocModifiers = 4096,\n        Deprecated = 8192,\n        Override = 16384,\n        In = 32768,\n        Out = 65536,\n        Decorator = 131072,\n        HasComputedFlags = 536870912,\n        AccessibilityModifier = 28,\n        ParameterPropertyModifier = 16476,\n        NonPublicAccessibilityModifier = 24,\n        TypeScriptModifier = 116958,\n        ExportDefault = 513,\n        All = 257023,\n        Modifier = 125951\n    }\n    export enum JsxFlags {\n        None = 0,\n        /** An element from a named property of the JSX.IntrinsicElements interface */\n        IntrinsicNamedElement = 1,\n        /** An element inferred from the string index signature of the JSX.IntrinsicElements interface */\n        IntrinsicIndexedElement = 2,\n        IntrinsicElement = 3\n    }\n    export interface Node extends ReadonlyTextRange {\n        readonly kind: SyntaxKind;\n        readonly flags: NodeFlags;\n        readonly parent: Node;\n    }\n    export interface JSDocContainer {\n    }\n    export type HasJSDoc = ParameterDeclaration | CallSignatureDeclaration | ClassStaticBlockDeclaration | ConstructSignatureDeclaration | MethodSignature | PropertySignature | ArrowFunction | ParenthesizedExpression | SpreadAssignment | ShorthandPropertyAssignment | PropertyAssignment | FunctionExpression | EmptyStatement | DebuggerStatement | Block | VariableStatement | ExpressionStatement | IfStatement | DoStatement | WhileStatement | ForStatement | ForInStatement | ForOfStatement | BreakStatement | ContinueStatement | ReturnStatement | WithStatement | SwitchStatement | LabeledStatement | ThrowStatement | TryStatement | FunctionDeclaration | ConstructorDeclaration | MethodDeclaration | VariableDeclaration | PropertyDeclaration | AccessorDeclaration | ClassLikeDeclaration | InterfaceDeclaration | TypeAliasDeclaration | EnumMember | EnumDeclaration | ModuleDeclaration | ImportEqualsDeclaration | ImportDeclaration | NamespaceExportDeclaration | ExportAssignment | IndexSignatureDeclaration | FunctionTypeNode | ConstructorTypeNode | JSDocFunctionType | ExportDeclaration | NamedTupleMember | ExportSpecifier | CaseClause | EndOfFileToken;\n    export type HasType = SignatureDeclaration | VariableDeclaration | ParameterDeclaration | PropertySignature | PropertyDeclaration | TypePredicateNode | ParenthesizedTypeNode | TypeOperatorNode | MappedTypeNode | AssertionExpression | TypeAliasDeclaration | JSDocTypeExpression | JSDocNonNullableType | JSDocNullableType | JSDocOptionalType | JSDocVariadicType;\n    export type HasTypeArguments = CallExpression | NewExpression | TaggedTemplateExpression | JsxOpeningElement | JsxSelfClosingElement;\n    export type HasInitializer = HasExpressionInitializer | ForStatement | ForInStatement | ForOfStatement | JsxAttribute;\n    export type HasExpressionInitializer = VariableDeclaration | ParameterDeclaration | BindingElement | PropertyDeclaration | PropertyAssignment | EnumMember;\n    export type HasDecorators = ParameterDeclaration | PropertyDeclaration | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | ClassExpression | ClassDeclaration;\n    export type HasModifiers = TypeParameterDeclaration | ParameterDeclaration | ConstructorTypeNode | PropertySignature | PropertyDeclaration | MethodSignature | MethodDeclaration | ConstructorDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | IndexSignatureDeclaration | FunctionExpression | ArrowFunction | ClassExpression | VariableStatement | FunctionDeclaration | ClassDeclaration | InterfaceDeclaration | TypeAliasDeclaration | EnumDeclaration | ModuleDeclaration | ImportEqualsDeclaration | ImportDeclaration | ExportAssignment | ExportDeclaration;\n    export interface NodeArray<T extends Node> extends ReadonlyArray<T>, ReadonlyTextRange {\n        readonly hasTrailingComma: boolean;\n    }\n    export interface Token<TKind extends SyntaxKind> extends Node {\n        readonly kind: TKind;\n    }\n    export type EndOfFileToken = Token<SyntaxKind.EndOfFileToken> & JSDocContainer;\n    export interface PunctuationToken<TKind extends PunctuationSyntaxKind> extends Token<TKind> {\n    }\n    export type DotToken = PunctuationToken<SyntaxKind.DotToken>;\n    export type DotDotDotToken = PunctuationToken<SyntaxKind.DotDotDotToken>;\n    export type QuestionToken = PunctuationToken<SyntaxKind.QuestionToken>;\n    export type ExclamationToken = PunctuationToken<SyntaxKind.ExclamationToken>;\n    export type ColonToken = PunctuationToken<SyntaxKind.ColonToken>;\n    export type EqualsToken = PunctuationToken<SyntaxKind.EqualsToken>;\n    export type AsteriskToken = PunctuationToken<SyntaxKind.AsteriskToken>;\n    export type EqualsGreaterThanToken = PunctuationToken<SyntaxKind.EqualsGreaterThanToken>;\n    export type PlusToken = PunctuationToken<SyntaxKind.PlusToken>;\n    export type MinusToken = PunctuationToken<SyntaxKind.MinusToken>;\n    export type QuestionDotToken = PunctuationToken<SyntaxKind.QuestionDotToken>;\n    export interface KeywordToken<TKind extends KeywordSyntaxKind> extends Token<TKind> {\n    }\n    export type AssertsKeyword = KeywordToken<SyntaxKind.AssertsKeyword>;\n    export type AssertKeyword = KeywordToken<SyntaxKind.AssertKeyword>;\n    export type AwaitKeyword = KeywordToken<SyntaxKind.AwaitKeyword>;\n    /** @deprecated Use `AwaitKeyword` instead. */\n    export type AwaitKeywordToken = AwaitKeyword;\n    /** @deprecated Use `AssertsKeyword` instead. */\n    export type AssertsToken = AssertsKeyword;\n    export interface ModifierToken<TKind extends ModifierSyntaxKind> extends KeywordToken<TKind> {\n    }\n    export type AbstractKeyword = ModifierToken<SyntaxKind.AbstractKeyword>;\n    export type AsyncKeyword = ModifierToken<SyntaxKind.AsyncKeyword>;\n    export type ConstKeyword = ModifierToken<SyntaxKind.ConstKeyword>;\n    export type DeclareKeyword = ModifierToken<SyntaxKind.DeclareKeyword>;\n    export type DefaultKeyword = ModifierToken<SyntaxKind.DefaultKeyword>;\n    export type ExportKeyword = ModifierToken<SyntaxKind.ExportKeyword>;\n    export type InKeyword = ModifierToken<SyntaxKind.InKeyword>;\n    export type PrivateKeyword = ModifierToken<SyntaxKind.PrivateKeyword>;\n    export type ProtectedKeyword = ModifierToken<SyntaxKind.ProtectedKeyword>;\n    export type PublicKeyword = ModifierToken<SyntaxKind.PublicKeyword>;\n    export type ReadonlyKeyword = ModifierToken<SyntaxKind.ReadonlyKeyword>;\n    export type OutKeyword = ModifierToken<SyntaxKind.OutKeyword>;\n    export type OverrideKeyword = ModifierToken<SyntaxKind.OverrideKeyword>;\n    export type StaticKeyword = ModifierToken<SyntaxKind.StaticKeyword>;\n    /** @deprecated Use `ReadonlyKeyword` instead. */\n    export type ReadonlyToken = ReadonlyKeyword;\n    export type Modifier = AbstractKeyword | AsyncKeyword | ConstKeyword | DeclareKeyword | DefaultKeyword | ExportKeyword | InKeyword | PrivateKeyword | ProtectedKeyword | PublicKeyword | OutKeyword | OverrideKeyword | ReadonlyKeyword | StaticKeyword;\n    export type ModifierLike = Modifier | Decorator;\n    export type AccessibilityModifier = PublicKeyword | PrivateKeyword | ProtectedKeyword;\n    export type ParameterPropertyModifier = AccessibilityModifier | ReadonlyKeyword;\n    export type ClassMemberModifier = AccessibilityModifier | ReadonlyKeyword | StaticKeyword;\n    export type ModifiersArray = NodeArray<Modifier>;\n    export enum GeneratedIdentifierFlags {\n        None = 0,\n        ReservedInNestedScopes = 8,\n        Optimistic = 16,\n        FileLevel = 32,\n        AllowNameSubstitution = 64\n    }\n    export interface Identifier extends PrimaryExpression, Declaration {\n        readonly kind: SyntaxKind.Identifier;\n        /**\n         * Prefer to use `id.unescapedText`. (Note: This is available only in services, not internally to the TypeScript compiler.)\n         * Text of identifier, but if the identifier begins with two underscores, this will begin with three.\n         */\n        readonly escapedText: __String;\n        readonly originalKeywordKind?: SyntaxKind;\n        isInJSDocNamespace?: boolean;\n    }\n    export interface TransientIdentifier extends Identifier {\n        resolvedSymbol: Symbol;\n    }\n    export interface QualifiedName extends Node {\n        readonly kind: SyntaxKind.QualifiedName;\n        readonly left: EntityName;\n        readonly right: Identifier;\n    }\n    export type EntityName = Identifier | QualifiedName;\n    export type PropertyName = Identifier | StringLiteral | NumericLiteral | ComputedPropertyName | PrivateIdentifier;\n    export type MemberName = Identifier | PrivateIdentifier;\n    export type DeclarationName = Identifier | PrivateIdentifier | StringLiteralLike | NumericLiteral | ComputedPropertyName | ElementAccessExpression | BindingPattern | EntityNameExpression;\n    export interface Declaration extends Node {\n        _declarationBrand: any;\n    }\n    export interface NamedDeclaration extends Declaration {\n        readonly name?: DeclarationName;\n    }\n    export interface DeclarationStatement extends NamedDeclaration, Statement {\n        readonly name?: Identifier | StringLiteral | NumericLiteral;\n    }\n    export interface ComputedPropertyName extends Node {\n        readonly kind: SyntaxKind.ComputedPropertyName;\n        readonly parent: Declaration;\n        readonly expression: Expression;\n    }\n    export interface PrivateIdentifier extends PrimaryExpression {\n        readonly kind: SyntaxKind.PrivateIdentifier;\n        readonly escapedText: __String;\n    }\n    export interface Decorator extends Node {\n        readonly kind: SyntaxKind.Decorator;\n        readonly parent: NamedDeclaration;\n        readonly expression: LeftHandSideExpression;\n    }\n    export interface TypeParameterDeclaration extends NamedDeclaration {\n        readonly kind: SyntaxKind.TypeParameter;\n        readonly parent: DeclarationWithTypeParameterChildren | InferTypeNode;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: Identifier;\n        /** Note: Consider calling `getEffectiveConstraintOfTypeParameter` */\n        readonly constraint?: TypeNode;\n        readonly default?: TypeNode;\n        expression?: Expression;\n    }\n    export interface SignatureDeclarationBase extends NamedDeclaration, JSDocContainer {\n        readonly kind: SignatureDeclaration[\"kind\"];\n        readonly name?: PropertyName;\n        readonly typeParameters?: NodeArray<TypeParameterDeclaration> | undefined;\n        readonly parameters: NodeArray<ParameterDeclaration>;\n        readonly type?: TypeNode | undefined;\n    }\n    export type SignatureDeclaration = CallSignatureDeclaration | ConstructSignatureDeclaration | MethodSignature | IndexSignatureDeclaration | FunctionTypeNode | ConstructorTypeNode | JSDocFunctionType | FunctionDeclaration | MethodDeclaration | ConstructorDeclaration | AccessorDeclaration | FunctionExpression | ArrowFunction;\n    export interface CallSignatureDeclaration extends SignatureDeclarationBase, TypeElement {\n        readonly kind: SyntaxKind.CallSignature;\n    }\n    export interface ConstructSignatureDeclaration extends SignatureDeclarationBase, TypeElement {\n        readonly kind: SyntaxKind.ConstructSignature;\n    }\n    export type BindingName = Identifier | BindingPattern;\n    export interface VariableDeclaration extends NamedDeclaration, JSDocContainer {\n        readonly kind: SyntaxKind.VariableDeclaration;\n        readonly parent: VariableDeclarationList | CatchClause;\n        readonly name: BindingName;\n        readonly exclamationToken?: ExclamationToken;\n        readonly type?: TypeNode;\n        readonly initializer?: Expression;\n    }\n    export interface VariableDeclarationList extends Node {\n        readonly kind: SyntaxKind.VariableDeclarationList;\n        readonly parent: VariableStatement | ForStatement | ForOfStatement | ForInStatement;\n        readonly declarations: NodeArray<VariableDeclaration>;\n    }\n    export interface ParameterDeclaration extends NamedDeclaration, JSDocContainer {\n        readonly kind: SyntaxKind.Parameter;\n        readonly parent: SignatureDeclaration;\n        readonly modifiers?: NodeArray<ModifierLike>;\n        readonly dotDotDotToken?: DotDotDotToken;\n        readonly name: BindingName;\n        readonly questionToken?: QuestionToken;\n        readonly type?: TypeNode;\n        readonly initializer?: Expression;\n    }\n    export interface BindingElement extends NamedDeclaration {\n        readonly kind: SyntaxKind.BindingElement;\n        readonly parent: BindingPattern;\n        readonly propertyName?: PropertyName;\n        readonly dotDotDotToken?: DotDotDotToken;\n        readonly name: BindingName;\n        readonly initializer?: Expression;\n    }\n    export interface PropertySignature extends TypeElement, JSDocContainer {\n        readonly kind: SyntaxKind.PropertySignature;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: PropertyName;\n        readonly questionToken?: QuestionToken;\n        readonly type?: TypeNode;\n    }\n    export interface PropertyDeclaration extends ClassElement, JSDocContainer {\n        readonly kind: SyntaxKind.PropertyDeclaration;\n        readonly parent: ClassLikeDeclaration;\n        readonly modifiers?: NodeArray<ModifierLike>;\n        readonly name: PropertyName;\n        readonly questionToken?: QuestionToken;\n        readonly exclamationToken?: ExclamationToken;\n        readonly type?: TypeNode;\n        readonly initializer?: Expression;\n    }\n    export interface ObjectLiteralElement extends NamedDeclaration {\n        _objectLiteralBrand: any;\n        readonly name?: PropertyName;\n    }\n    /** Unlike ObjectLiteralElement, excludes JSXAttribute and JSXSpreadAttribute. */\n    export type ObjectLiteralElementLike = PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment | MethodDeclaration | AccessorDeclaration;\n    export interface PropertyAssignment extends ObjectLiteralElement, JSDocContainer {\n        readonly kind: SyntaxKind.PropertyAssignment;\n        readonly parent: ObjectLiteralExpression;\n        readonly name: PropertyName;\n        readonly initializer: Expression;\n    }\n    export interface ShorthandPropertyAssignment extends ObjectLiteralElement, JSDocContainer {\n        readonly kind: SyntaxKind.ShorthandPropertyAssignment;\n        readonly parent: ObjectLiteralExpression;\n        readonly name: Identifier;\n        readonly equalsToken?: EqualsToken;\n        readonly objectAssignmentInitializer?: Expression;\n    }\n    export interface SpreadAssignment extends ObjectLiteralElement, JSDocContainer {\n        readonly kind: SyntaxKind.SpreadAssignment;\n        readonly parent: ObjectLiteralExpression;\n        readonly expression: Expression;\n    }\n    export type VariableLikeDeclaration = VariableDeclaration | ParameterDeclaration | BindingElement | PropertyDeclaration | PropertyAssignment | PropertySignature | JsxAttribute | ShorthandPropertyAssignment | EnumMember | JSDocPropertyTag | JSDocParameterTag;\n    export interface PropertyLikeDeclaration extends NamedDeclaration {\n        readonly name: PropertyName;\n    }\n    export interface ObjectBindingPattern extends Node {\n        readonly kind: SyntaxKind.ObjectBindingPattern;\n        readonly parent: VariableDeclaration | ParameterDeclaration | BindingElement;\n        readonly elements: NodeArray<BindingElement>;\n    }\n    export interface ArrayBindingPattern extends Node {\n        readonly kind: SyntaxKind.ArrayBindingPattern;\n        readonly parent: VariableDeclaration | ParameterDeclaration | BindingElement;\n        readonly elements: NodeArray<ArrayBindingElement>;\n    }\n    export type BindingPattern = ObjectBindingPattern | ArrayBindingPattern;\n    export type ArrayBindingElement = BindingElement | OmittedExpression;\n    /**\n     * Several node kinds share function-like features such as a signature,\n     * a name, and a body. These nodes should extend FunctionLikeDeclarationBase.\n     * Examples:\n     * - FunctionDeclaration\n     * - MethodDeclaration\n     * - AccessorDeclaration\n     */\n    export interface FunctionLikeDeclarationBase extends SignatureDeclarationBase {\n        _functionLikeDeclarationBrand: any;\n        readonly asteriskToken?: AsteriskToken | undefined;\n        readonly questionToken?: QuestionToken | undefined;\n        readonly exclamationToken?: ExclamationToken | undefined;\n        readonly body?: Block | Expression | undefined;\n    }\n    export type FunctionLikeDeclaration = FunctionDeclaration | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | ConstructorDeclaration | FunctionExpression | ArrowFunction;\n    /** @deprecated Use SignatureDeclaration */\n    export type FunctionLike = SignatureDeclaration;\n    export interface FunctionDeclaration extends FunctionLikeDeclarationBase, DeclarationStatement {\n        readonly kind: SyntaxKind.FunctionDeclaration;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name?: Identifier;\n        readonly body?: FunctionBody;\n    }\n    export interface MethodSignature extends SignatureDeclarationBase, TypeElement {\n        readonly kind: SyntaxKind.MethodSignature;\n        readonly parent: ObjectTypeDeclaration;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: PropertyName;\n    }\n    export interface MethodDeclaration extends FunctionLikeDeclarationBase, ClassElement, ObjectLiteralElement, JSDocContainer {\n        readonly kind: SyntaxKind.MethodDeclaration;\n        readonly parent: ClassLikeDeclaration | ObjectLiteralExpression;\n        readonly modifiers?: NodeArray<ModifierLike> | undefined;\n        readonly name: PropertyName;\n        readonly body?: FunctionBody | undefined;\n    }\n    export interface ConstructorDeclaration extends FunctionLikeDeclarationBase, ClassElement, JSDocContainer {\n        readonly kind: SyntaxKind.Constructor;\n        readonly parent: ClassLikeDeclaration;\n        readonly modifiers?: NodeArray<Modifier> | undefined;\n        readonly body?: FunctionBody | undefined;\n    }\n    /** For when we encounter a semicolon in a class declaration. ES6 allows these as class elements. */\n    export interface SemicolonClassElement extends ClassElement {\n        readonly kind: SyntaxKind.SemicolonClassElement;\n        readonly parent: ClassLikeDeclaration;\n    }\n    export interface GetAccessorDeclaration extends FunctionLikeDeclarationBase, ClassElement, TypeElement, ObjectLiteralElement, JSDocContainer {\n        readonly kind: SyntaxKind.GetAccessor;\n        readonly parent: ClassLikeDeclaration | ObjectLiteralExpression | TypeLiteralNode | InterfaceDeclaration;\n        readonly modifiers?: NodeArray<ModifierLike>;\n        readonly name: PropertyName;\n        readonly body?: FunctionBody;\n    }\n    export interface SetAccessorDeclaration extends FunctionLikeDeclarationBase, ClassElement, TypeElement, ObjectLiteralElement, JSDocContainer {\n        readonly kind: SyntaxKind.SetAccessor;\n        readonly parent: ClassLikeDeclaration | ObjectLiteralExpression | TypeLiteralNode | InterfaceDeclaration;\n        readonly modifiers?: NodeArray<ModifierLike>;\n        readonly name: PropertyName;\n        readonly body?: FunctionBody;\n    }\n    export type AccessorDeclaration = GetAccessorDeclaration | SetAccessorDeclaration;\n    export interface IndexSignatureDeclaration extends SignatureDeclarationBase, ClassElement, TypeElement {\n        readonly kind: SyntaxKind.IndexSignature;\n        readonly parent: ObjectTypeDeclaration;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly type: TypeNode;\n    }\n    export interface ClassStaticBlockDeclaration extends ClassElement, JSDocContainer {\n        readonly kind: SyntaxKind.ClassStaticBlockDeclaration;\n        readonly parent: ClassDeclaration | ClassExpression;\n        readonly body: Block;\n    }\n    export interface TypeNode extends Node {\n        _typeNodeBrand: any;\n    }\n    export interface KeywordTypeNode<TKind extends KeywordTypeSyntaxKind = KeywordTypeSyntaxKind> extends KeywordToken<TKind>, TypeNode {\n        readonly kind: TKind;\n    }\n    export interface ImportTypeAssertionContainer extends Node {\n        readonly kind: SyntaxKind.ImportTypeAssertionContainer;\n        readonly parent: ImportTypeNode;\n        readonly assertClause: AssertClause;\n        readonly multiLine?: boolean;\n    }\n    export interface ImportTypeNode extends NodeWithTypeArguments {\n        readonly kind: SyntaxKind.ImportType;\n        readonly isTypeOf: boolean;\n        readonly argument: TypeNode;\n        readonly assertions?: ImportTypeAssertionContainer;\n        readonly qualifier?: EntityName;\n    }\n    export interface ThisTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.ThisType;\n    }\n    export type FunctionOrConstructorTypeNode = FunctionTypeNode | ConstructorTypeNode;\n    export interface FunctionOrConstructorTypeNodeBase extends TypeNode, SignatureDeclarationBase {\n        readonly kind: SyntaxKind.FunctionType | SyntaxKind.ConstructorType;\n        readonly type: TypeNode;\n    }\n    export interface FunctionTypeNode extends FunctionOrConstructorTypeNodeBase {\n        readonly kind: SyntaxKind.FunctionType;\n    }\n    export interface ConstructorTypeNode extends FunctionOrConstructorTypeNodeBase {\n        readonly kind: SyntaxKind.ConstructorType;\n        readonly modifiers?: NodeArray<Modifier>;\n    }\n    export interface NodeWithTypeArguments extends TypeNode {\n        readonly typeArguments?: NodeArray<TypeNode>;\n    }\n    export type TypeReferenceType = TypeReferenceNode | ExpressionWithTypeArguments;\n    export interface TypeReferenceNode extends NodeWithTypeArguments {\n        readonly kind: SyntaxKind.TypeReference;\n        readonly typeName: EntityName;\n    }\n    export interface TypePredicateNode extends TypeNode {\n        readonly kind: SyntaxKind.TypePredicate;\n        readonly parent: SignatureDeclaration | JSDocTypeExpression;\n        readonly assertsModifier?: AssertsKeyword;\n        readonly parameterName: Identifier | ThisTypeNode;\n        readonly type?: TypeNode;\n    }\n    export interface TypeQueryNode extends NodeWithTypeArguments {\n        readonly kind: SyntaxKind.TypeQuery;\n        readonly exprName: EntityName;\n    }\n    export interface TypeLiteralNode extends TypeNode, Declaration {\n        readonly kind: SyntaxKind.TypeLiteral;\n        readonly members: NodeArray<TypeElement>;\n    }\n    export interface ArrayTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.ArrayType;\n        readonly elementType: TypeNode;\n    }\n    export interface TupleTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.TupleType;\n        readonly elements: NodeArray<TypeNode | NamedTupleMember>;\n    }\n    export interface NamedTupleMember extends TypeNode, JSDocContainer, Declaration {\n        readonly kind: SyntaxKind.NamedTupleMember;\n        readonly dotDotDotToken?: Token<SyntaxKind.DotDotDotToken>;\n        readonly name: Identifier;\n        readonly questionToken?: Token<SyntaxKind.QuestionToken>;\n        readonly type: TypeNode;\n    }\n    export interface OptionalTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.OptionalType;\n        readonly type: TypeNode;\n    }\n    export interface RestTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.RestType;\n        readonly type: TypeNode;\n    }\n    export type UnionOrIntersectionTypeNode = UnionTypeNode | IntersectionTypeNode;\n    export interface UnionTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.UnionType;\n        readonly types: NodeArray<TypeNode>;\n    }\n    export interface IntersectionTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.IntersectionType;\n        readonly types: NodeArray<TypeNode>;\n    }\n    export interface ConditionalTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.ConditionalType;\n        readonly checkType: TypeNode;\n        readonly extendsType: TypeNode;\n        readonly trueType: TypeNode;\n        readonly falseType: TypeNode;\n    }\n    export interface InferTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.InferType;\n        readonly typeParameter: TypeParameterDeclaration;\n    }\n    export interface ParenthesizedTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.ParenthesizedType;\n        readonly type: TypeNode;\n    }\n    export interface TypeOperatorNode extends TypeNode {\n        readonly kind: SyntaxKind.TypeOperator;\n        readonly operator: SyntaxKind.KeyOfKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.ReadonlyKeyword;\n        readonly type: TypeNode;\n    }\n    export interface IndexedAccessTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.IndexedAccessType;\n        readonly objectType: TypeNode;\n        readonly indexType: TypeNode;\n    }\n    export interface MappedTypeNode extends TypeNode, Declaration {\n        readonly kind: SyntaxKind.MappedType;\n        readonly readonlyToken?: ReadonlyKeyword | PlusToken | MinusToken;\n        readonly typeParameter: TypeParameterDeclaration;\n        readonly nameType?: TypeNode;\n        readonly questionToken?: QuestionToken | PlusToken | MinusToken;\n        readonly type?: TypeNode;\n        /** Used only to produce grammar errors */\n        readonly members?: NodeArray<TypeElement>;\n    }\n    export interface LiteralTypeNode extends TypeNode {\n        readonly kind: SyntaxKind.LiteralType;\n        readonly literal: NullLiteral | BooleanLiteral | LiteralExpression | PrefixUnaryExpression;\n    }\n    export interface StringLiteral extends LiteralExpression, Declaration {\n        readonly kind: SyntaxKind.StringLiteral;\n    }\n    export type StringLiteralLike = StringLiteral | NoSubstitutionTemplateLiteral;\n    export type PropertyNameLiteral = Identifier | StringLiteralLike | NumericLiteral;\n    export interface TemplateLiteralTypeNode extends TypeNode {\n        kind: SyntaxKind.TemplateLiteralType;\n        readonly head: TemplateHead;\n        readonly templateSpans: NodeArray<TemplateLiteralTypeSpan>;\n    }\n    export interface TemplateLiteralTypeSpan extends TypeNode {\n        readonly kind: SyntaxKind.TemplateLiteralTypeSpan;\n        readonly parent: TemplateLiteralTypeNode;\n        readonly type: TypeNode;\n        readonly literal: TemplateMiddle | TemplateTail;\n    }\n    export interface Expression extends Node {\n        _expressionBrand: any;\n    }\n    export interface OmittedExpression extends Expression {\n        readonly kind: SyntaxKind.OmittedExpression;\n    }\n    export interface PartiallyEmittedExpression extends LeftHandSideExpression {\n        readonly kind: SyntaxKind.PartiallyEmittedExpression;\n        readonly expression: Expression;\n    }\n    export interface UnaryExpression extends Expression {\n        _unaryExpressionBrand: any;\n    }\n    /** Deprecated, please use UpdateExpression */\n    export type IncrementExpression = UpdateExpression;\n    export interface UpdateExpression extends UnaryExpression {\n        _updateExpressionBrand: any;\n    }\n    export type PrefixUnaryOperator = SyntaxKind.PlusPlusToken | SyntaxKind.MinusMinusToken | SyntaxKind.PlusToken | SyntaxKind.MinusToken | SyntaxKind.TildeToken | SyntaxKind.ExclamationToken;\n    export interface PrefixUnaryExpression extends UpdateExpression {\n        readonly kind: SyntaxKind.PrefixUnaryExpression;\n        readonly operator: PrefixUnaryOperator;\n        readonly operand: UnaryExpression;\n    }\n    export type PostfixUnaryOperator = SyntaxKind.PlusPlusToken | SyntaxKind.MinusMinusToken;\n    export interface PostfixUnaryExpression extends UpdateExpression {\n        readonly kind: SyntaxKind.PostfixUnaryExpression;\n        readonly operand: LeftHandSideExpression;\n        readonly operator: PostfixUnaryOperator;\n    }\n    export interface LeftHandSideExpression extends UpdateExpression {\n        _leftHandSideExpressionBrand: any;\n    }\n    export interface MemberExpression extends LeftHandSideExpression {\n        _memberExpressionBrand: any;\n    }\n    export interface PrimaryExpression extends MemberExpression {\n        _primaryExpressionBrand: any;\n    }\n    export interface NullLiteral extends PrimaryExpression {\n        readonly kind: SyntaxKind.NullKeyword;\n    }\n    export interface TrueLiteral extends PrimaryExpression {\n        readonly kind: SyntaxKind.TrueKeyword;\n    }\n    export interface FalseLiteral extends PrimaryExpression {\n        readonly kind: SyntaxKind.FalseKeyword;\n    }\n    export type BooleanLiteral = TrueLiteral | FalseLiteral;\n    export interface ThisExpression extends PrimaryExpression {\n        readonly kind: SyntaxKind.ThisKeyword;\n    }\n    export interface SuperExpression extends PrimaryExpression {\n        readonly kind: SyntaxKind.SuperKeyword;\n    }\n    export interface ImportExpression extends PrimaryExpression {\n        readonly kind: SyntaxKind.ImportKeyword;\n    }\n    export interface DeleteExpression extends UnaryExpression {\n        readonly kind: SyntaxKind.DeleteExpression;\n        readonly expression: UnaryExpression;\n    }\n    export interface TypeOfExpression extends UnaryExpression {\n        readonly kind: SyntaxKind.TypeOfExpression;\n        readonly expression: UnaryExpression;\n    }\n    export interface VoidExpression extends UnaryExpression {\n        readonly kind: SyntaxKind.VoidExpression;\n        readonly expression: UnaryExpression;\n    }\n    export interface AwaitExpression extends UnaryExpression {\n        readonly kind: SyntaxKind.AwaitExpression;\n        readonly expression: UnaryExpression;\n    }\n    export interface YieldExpression extends Expression {\n        readonly kind: SyntaxKind.YieldExpression;\n        readonly asteriskToken?: AsteriskToken;\n        readonly expression?: Expression;\n    }\n    export interface SyntheticExpression extends Expression {\n        readonly kind: SyntaxKind.SyntheticExpression;\n        readonly isSpread: boolean;\n        readonly type: Type;\n        readonly tupleNameSource?: ParameterDeclaration | NamedTupleMember;\n    }\n    export type ExponentiationOperator = SyntaxKind.AsteriskAsteriskToken;\n    export type MultiplicativeOperator = SyntaxKind.AsteriskToken | SyntaxKind.SlashToken | SyntaxKind.PercentToken;\n    export type MultiplicativeOperatorOrHigher = ExponentiationOperator | MultiplicativeOperator;\n    export type AdditiveOperator = SyntaxKind.PlusToken | SyntaxKind.MinusToken;\n    export type AdditiveOperatorOrHigher = MultiplicativeOperatorOrHigher | AdditiveOperator;\n    export type ShiftOperator = SyntaxKind.LessThanLessThanToken | SyntaxKind.GreaterThanGreaterThanToken | SyntaxKind.GreaterThanGreaterThanGreaterThanToken;\n    export type ShiftOperatorOrHigher = AdditiveOperatorOrHigher | ShiftOperator;\n    export type RelationalOperator = SyntaxKind.LessThanToken | SyntaxKind.LessThanEqualsToken | SyntaxKind.GreaterThanToken | SyntaxKind.GreaterThanEqualsToken | SyntaxKind.InstanceOfKeyword | SyntaxKind.InKeyword;\n    export type RelationalOperatorOrHigher = ShiftOperatorOrHigher | RelationalOperator;\n    export type EqualityOperator = SyntaxKind.EqualsEqualsToken | SyntaxKind.EqualsEqualsEqualsToken | SyntaxKind.ExclamationEqualsEqualsToken | SyntaxKind.ExclamationEqualsToken;\n    export type EqualityOperatorOrHigher = RelationalOperatorOrHigher | EqualityOperator;\n    export type BitwiseOperator = SyntaxKind.AmpersandToken | SyntaxKind.BarToken | SyntaxKind.CaretToken;\n    export type BitwiseOperatorOrHigher = EqualityOperatorOrHigher | BitwiseOperator;\n    export type LogicalOperator = SyntaxKind.AmpersandAmpersandToken | SyntaxKind.BarBarToken;\n    export type LogicalOperatorOrHigher = BitwiseOperatorOrHigher | LogicalOperator;\n    export type CompoundAssignmentOperator = SyntaxKind.PlusEqualsToken | SyntaxKind.MinusEqualsToken | SyntaxKind.AsteriskAsteriskEqualsToken | SyntaxKind.AsteriskEqualsToken | SyntaxKind.SlashEqualsToken | SyntaxKind.PercentEqualsToken | SyntaxKind.AmpersandEqualsToken | SyntaxKind.BarEqualsToken | SyntaxKind.CaretEqualsToken | SyntaxKind.LessThanLessThanEqualsToken | SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken | SyntaxKind.GreaterThanGreaterThanEqualsToken | SyntaxKind.BarBarEqualsToken | SyntaxKind.AmpersandAmpersandEqualsToken | SyntaxKind.QuestionQuestionEqualsToken;\n    export type AssignmentOperator = SyntaxKind.EqualsToken | CompoundAssignmentOperator;\n    export type AssignmentOperatorOrHigher = SyntaxKind.QuestionQuestionToken | LogicalOperatorOrHigher | AssignmentOperator;\n    export type BinaryOperator = AssignmentOperatorOrHigher | SyntaxKind.CommaToken;\n    export type LogicalOrCoalescingAssignmentOperator = SyntaxKind.AmpersandAmpersandEqualsToken | SyntaxKind.BarBarEqualsToken | SyntaxKind.QuestionQuestionEqualsToken;\n    export type BinaryOperatorToken = Token<BinaryOperator>;\n    export interface BinaryExpression extends Expression, Declaration {\n        readonly kind: SyntaxKind.BinaryExpression;\n        readonly left: Expression;\n        readonly operatorToken: BinaryOperatorToken;\n        readonly right: Expression;\n    }\n    export type AssignmentOperatorToken = Token<AssignmentOperator>;\n    export interface AssignmentExpression<TOperator extends AssignmentOperatorToken> extends BinaryExpression {\n        readonly left: LeftHandSideExpression;\n        readonly operatorToken: TOperator;\n    }\n    export interface ObjectDestructuringAssignment extends AssignmentExpression<EqualsToken> {\n        readonly left: ObjectLiteralExpression;\n    }\n    export interface ArrayDestructuringAssignment extends AssignmentExpression<EqualsToken> {\n        readonly left: ArrayLiteralExpression;\n    }\n    export type DestructuringAssignment = ObjectDestructuringAssignment | ArrayDestructuringAssignment;\n    export type BindingOrAssignmentElement = VariableDeclaration | ParameterDeclaration | ObjectBindingOrAssignmentElement | ArrayBindingOrAssignmentElement;\n    export type ObjectBindingOrAssignmentElement = BindingElement | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment;\n    export type ArrayBindingOrAssignmentElement = BindingElement | OmittedExpression | SpreadElement | ArrayLiteralExpression | ObjectLiteralExpression | AssignmentExpression<EqualsToken> | Identifier | PropertyAccessExpression | ElementAccessExpression;\n    export type BindingOrAssignmentElementRestIndicator = DotDotDotToken | SpreadElement | SpreadAssignment;\n    export type BindingOrAssignmentElementTarget = BindingOrAssignmentPattern | Identifier | PropertyAccessExpression | ElementAccessExpression | OmittedExpression;\n    export type ObjectBindingOrAssignmentPattern = ObjectBindingPattern | ObjectLiteralExpression;\n    export type ArrayBindingOrAssignmentPattern = ArrayBindingPattern | ArrayLiteralExpression;\n    export type AssignmentPattern = ObjectLiteralExpression | ArrayLiteralExpression;\n    export type BindingOrAssignmentPattern = ObjectBindingOrAssignmentPattern | ArrayBindingOrAssignmentPattern;\n    export interface ConditionalExpression extends Expression {\n        readonly kind: SyntaxKind.ConditionalExpression;\n        readonly condition: Expression;\n        readonly questionToken: QuestionToken;\n        readonly whenTrue: Expression;\n        readonly colonToken: ColonToken;\n        readonly whenFalse: Expression;\n    }\n    export type FunctionBody = Block;\n    export type ConciseBody = FunctionBody | Expression;\n    export interface FunctionExpression extends PrimaryExpression, FunctionLikeDeclarationBase, JSDocContainer {\n        readonly kind: SyntaxKind.FunctionExpression;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name?: Identifier;\n        readonly body: FunctionBody;\n    }\n    export interface ArrowFunction extends Expression, FunctionLikeDeclarationBase, JSDocContainer {\n        readonly kind: SyntaxKind.ArrowFunction;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly equalsGreaterThanToken: EqualsGreaterThanToken;\n        readonly body: ConciseBody;\n        readonly name: never;\n    }\n    export interface LiteralLikeNode extends Node {\n        text: string;\n        isUnterminated?: boolean;\n        hasExtendedUnicodeEscape?: boolean;\n    }\n    export interface TemplateLiteralLikeNode extends LiteralLikeNode {\n        rawText?: string;\n    }\n    export interface LiteralExpression extends LiteralLikeNode, PrimaryExpression {\n        _literalExpressionBrand: any;\n    }\n    export interface RegularExpressionLiteral extends LiteralExpression {\n        readonly kind: SyntaxKind.RegularExpressionLiteral;\n    }\n    export interface NoSubstitutionTemplateLiteral extends LiteralExpression, TemplateLiteralLikeNode, Declaration {\n        readonly kind: SyntaxKind.NoSubstitutionTemplateLiteral;\n    }\n    export enum TokenFlags {\n        None = 0,\n        Scientific = 16,\n        Octal = 32,\n        HexSpecifier = 64,\n        BinarySpecifier = 128,\n        OctalSpecifier = 256,\n    }\n    export interface NumericLiteral extends LiteralExpression, Declaration {\n        readonly kind: SyntaxKind.NumericLiteral;\n    }\n    export interface BigIntLiteral extends LiteralExpression {\n        readonly kind: SyntaxKind.BigIntLiteral;\n    }\n    export type LiteralToken = NumericLiteral | BigIntLiteral | StringLiteral | JsxText | RegularExpressionLiteral | NoSubstitutionTemplateLiteral;\n    export interface TemplateHead extends TemplateLiteralLikeNode {\n        readonly kind: SyntaxKind.TemplateHead;\n        readonly parent: TemplateExpression | TemplateLiteralTypeNode;\n    }\n    export interface TemplateMiddle extends TemplateLiteralLikeNode {\n        readonly kind: SyntaxKind.TemplateMiddle;\n        readonly parent: TemplateSpan | TemplateLiteralTypeSpan;\n    }\n    export interface TemplateTail extends TemplateLiteralLikeNode {\n        readonly kind: SyntaxKind.TemplateTail;\n        readonly parent: TemplateSpan | TemplateLiteralTypeSpan;\n    }\n    export type PseudoLiteralToken = TemplateHead | TemplateMiddle | TemplateTail;\n    export type TemplateLiteralToken = NoSubstitutionTemplateLiteral | PseudoLiteralToken;\n    export interface TemplateExpression extends PrimaryExpression {\n        readonly kind: SyntaxKind.TemplateExpression;\n        readonly head: TemplateHead;\n        readonly templateSpans: NodeArray<TemplateSpan>;\n    }\n    export type TemplateLiteral = TemplateExpression | NoSubstitutionTemplateLiteral;\n    export interface TemplateSpan extends Node {\n        readonly kind: SyntaxKind.TemplateSpan;\n        readonly parent: TemplateExpression;\n        readonly expression: Expression;\n        readonly literal: TemplateMiddle | TemplateTail;\n    }\n    export interface ParenthesizedExpression extends PrimaryExpression, JSDocContainer {\n        readonly kind: SyntaxKind.ParenthesizedExpression;\n        readonly expression: Expression;\n    }\n    export interface ArrayLiteralExpression extends PrimaryExpression {\n        readonly kind: SyntaxKind.ArrayLiteralExpression;\n        readonly elements: NodeArray<Expression>;\n    }\n    export interface SpreadElement extends Expression {\n        readonly kind: SyntaxKind.SpreadElement;\n        readonly parent: ArrayLiteralExpression | CallExpression | NewExpression;\n        readonly expression: Expression;\n    }\n    /**\n     * This interface is a base interface for ObjectLiteralExpression and JSXAttributes to extend from. JSXAttributes is similar to\n     * ObjectLiteralExpression in that it contains array of properties; however, JSXAttributes' properties can only be\n     * JSXAttribute or JSXSpreadAttribute. ObjectLiteralExpression, on the other hand, can only have properties of type\n     * ObjectLiteralElement (e.g. PropertyAssignment, ShorthandPropertyAssignment etc.)\n     */\n    export interface ObjectLiteralExpressionBase<T extends ObjectLiteralElement> extends PrimaryExpression, Declaration {\n        readonly properties: NodeArray<T>;\n    }\n    export interface ObjectLiteralExpression extends ObjectLiteralExpressionBase<ObjectLiteralElementLike> {\n        readonly kind: SyntaxKind.ObjectLiteralExpression;\n    }\n    export type EntityNameExpression = Identifier | PropertyAccessEntityNameExpression;\n    export type EntityNameOrEntityNameExpression = EntityName | EntityNameExpression;\n    export type AccessExpression = PropertyAccessExpression | ElementAccessExpression;\n    export interface PropertyAccessExpression extends MemberExpression, NamedDeclaration {\n        readonly kind: SyntaxKind.PropertyAccessExpression;\n        readonly expression: LeftHandSideExpression;\n        readonly questionDotToken?: QuestionDotToken;\n        readonly name: MemberName;\n    }\n    export interface PropertyAccessChain extends PropertyAccessExpression {\n        _optionalChainBrand: any;\n        readonly name: MemberName;\n    }\n    export interface SuperPropertyAccessExpression extends PropertyAccessExpression {\n        readonly expression: SuperExpression;\n    }\n    /** Brand for a PropertyAccessExpression which, like a QualifiedName, consists of a sequence of identifiers separated by dots. */\n    export interface PropertyAccessEntityNameExpression extends PropertyAccessExpression {\n        _propertyAccessExpressionLikeQualifiedNameBrand?: any;\n        readonly expression: EntityNameExpression;\n        readonly name: Identifier;\n    }\n    export interface ElementAccessExpression extends MemberExpression {\n        readonly kind: SyntaxKind.ElementAccessExpression;\n        readonly expression: LeftHandSideExpression;\n        readonly questionDotToken?: QuestionDotToken;\n        readonly argumentExpression: Expression;\n    }\n    export interface ElementAccessChain extends ElementAccessExpression {\n        _optionalChainBrand: any;\n    }\n    export interface SuperElementAccessExpression extends ElementAccessExpression {\n        readonly expression: SuperExpression;\n    }\n    export type SuperProperty = SuperPropertyAccessExpression | SuperElementAccessExpression;\n    export interface CallExpression extends LeftHandSideExpression, Declaration {\n        readonly kind: SyntaxKind.CallExpression;\n        readonly expression: LeftHandSideExpression;\n        readonly questionDotToken?: QuestionDotToken;\n        readonly typeArguments?: NodeArray<TypeNode>;\n        readonly arguments: NodeArray<Expression>;\n    }\n    export interface CallChain extends CallExpression {\n        _optionalChainBrand: any;\n    }\n    export type OptionalChain = PropertyAccessChain | ElementAccessChain | CallChain | NonNullChain;\n    export interface SuperCall extends CallExpression {\n        readonly expression: SuperExpression;\n    }\n    export interface ImportCall extends CallExpression {\n        readonly expression: ImportExpression;\n    }\n    export interface ExpressionWithTypeArguments extends MemberExpression, NodeWithTypeArguments {\n        readonly kind: SyntaxKind.ExpressionWithTypeArguments;\n        readonly expression: LeftHandSideExpression;\n    }\n    export interface NewExpression extends PrimaryExpression, Declaration {\n        readonly kind: SyntaxKind.NewExpression;\n        readonly expression: LeftHandSideExpression;\n        readonly typeArguments?: NodeArray<TypeNode>;\n        readonly arguments?: NodeArray<Expression>;\n    }\n    export interface TaggedTemplateExpression extends MemberExpression {\n        readonly kind: SyntaxKind.TaggedTemplateExpression;\n        readonly tag: LeftHandSideExpression;\n        readonly typeArguments?: NodeArray<TypeNode>;\n        readonly template: TemplateLiteral;\n    }\n    export type CallLikeExpression = CallExpression | NewExpression | TaggedTemplateExpression | Decorator | JsxOpeningLikeElement;\n    export interface AsExpression extends Expression {\n        readonly kind: SyntaxKind.AsExpression;\n        readonly expression: Expression;\n        readonly type: TypeNode;\n    }\n    export interface TypeAssertion extends UnaryExpression {\n        readonly kind: SyntaxKind.TypeAssertionExpression;\n        readonly type: TypeNode;\n        readonly expression: UnaryExpression;\n    }\n    export type AssertionExpression = TypeAssertion | AsExpression;\n    export interface NonNullExpression extends LeftHandSideExpression {\n        readonly kind: SyntaxKind.NonNullExpression;\n        readonly expression: Expression;\n    }\n    export interface NonNullChain extends NonNullExpression {\n        _optionalChainBrand: any;\n    }\n    export interface MetaProperty extends PrimaryExpression {\n        readonly kind: SyntaxKind.MetaProperty;\n        readonly keywordToken: SyntaxKind.NewKeyword | SyntaxKind.ImportKeyword;\n        readonly name: Identifier;\n    }\n    export interface JsxElement extends PrimaryExpression {\n        readonly kind: SyntaxKind.JsxElement;\n        readonly openingElement: JsxOpeningElement;\n        readonly children: NodeArray<JsxChild>;\n        readonly closingElement: JsxClosingElement;\n    }\n    export type JsxOpeningLikeElement = JsxSelfClosingElement | JsxOpeningElement;\n    export type JsxAttributeLike = JsxAttribute | JsxSpreadAttribute;\n    export type JsxTagNameExpression = Identifier | ThisExpression | JsxTagNamePropertyAccess;\n    export interface JsxTagNamePropertyAccess extends PropertyAccessExpression {\n        readonly expression: JsxTagNameExpression;\n    }\n    export interface JsxAttributes extends ObjectLiteralExpressionBase<JsxAttributeLike> {\n        readonly kind: SyntaxKind.JsxAttributes;\n        readonly parent: JsxOpeningLikeElement;\n    }\n    export interface JsxOpeningElement extends Expression {\n        readonly kind: SyntaxKind.JsxOpeningElement;\n        readonly parent: JsxElement;\n        readonly tagName: JsxTagNameExpression;\n        readonly typeArguments?: NodeArray<TypeNode>;\n        readonly attributes: JsxAttributes;\n    }\n    export interface JsxSelfClosingElement extends PrimaryExpression {\n        readonly kind: SyntaxKind.JsxSelfClosingElement;\n        readonly tagName: JsxTagNameExpression;\n        readonly typeArguments?: NodeArray<TypeNode>;\n        readonly attributes: JsxAttributes;\n    }\n    export interface JsxFragment extends PrimaryExpression {\n        readonly kind: SyntaxKind.JsxFragment;\n        readonly openingFragment: JsxOpeningFragment;\n        readonly children: NodeArray<JsxChild>;\n        readonly closingFragment: JsxClosingFragment;\n    }\n    export interface JsxOpeningFragment extends Expression {\n        readonly kind: SyntaxKind.JsxOpeningFragment;\n        readonly parent: JsxFragment;\n    }\n    export interface JsxClosingFragment extends Expression {\n        readonly kind: SyntaxKind.JsxClosingFragment;\n        readonly parent: JsxFragment;\n    }\n    export interface JsxAttribute extends ObjectLiteralElement {\n        readonly kind: SyntaxKind.JsxAttribute;\n        readonly parent: JsxAttributes;\n        readonly name: Identifier;\n        readonly initializer?: JsxAttributeValue;\n    }\n    export type JsxAttributeValue = StringLiteral | JsxExpression | JsxElement | JsxSelfClosingElement | JsxFragment;\n    export interface JsxSpreadAttribute extends ObjectLiteralElement {\n        readonly kind: SyntaxKind.JsxSpreadAttribute;\n        readonly parent: JsxAttributes;\n        readonly expression: Expression;\n    }\n    export interface JsxClosingElement extends Node {\n        readonly kind: SyntaxKind.JsxClosingElement;\n        readonly parent: JsxElement;\n        readonly tagName: JsxTagNameExpression;\n    }\n    export interface JsxExpression extends Expression {\n        readonly kind: SyntaxKind.JsxExpression;\n        readonly parent: JsxElement | JsxFragment | JsxAttributeLike;\n        readonly dotDotDotToken?: Token<SyntaxKind.DotDotDotToken>;\n        readonly expression?: Expression;\n    }\n    export interface JsxText extends LiteralLikeNode {\n        readonly kind: SyntaxKind.JsxText;\n        readonly parent: JsxElement | JsxFragment;\n        readonly containsOnlyTriviaWhiteSpaces: boolean;\n    }\n    export type JsxChild = JsxText | JsxExpression | JsxElement | JsxSelfClosingElement | JsxFragment;\n    export interface Statement extends Node, JSDocContainer {\n        _statementBrand: any;\n    }\n    export interface NotEmittedStatement extends Statement {\n        readonly kind: SyntaxKind.NotEmittedStatement;\n    }\n    /**\n     * A list of comma-separated expressions. This node is only created by transformations.\n     */\n    export interface CommaListExpression extends Expression {\n        readonly kind: SyntaxKind.CommaListExpression;\n        readonly elements: NodeArray<Expression>;\n    }\n    export interface EmptyStatement extends Statement {\n        readonly kind: SyntaxKind.EmptyStatement;\n    }\n    export interface DebuggerStatement extends Statement {\n        readonly kind: SyntaxKind.DebuggerStatement;\n    }\n    export interface MissingDeclaration extends DeclarationStatement {\n        readonly kind: SyntaxKind.MissingDeclaration;\n        readonly name?: Identifier;\n    }\n    export type BlockLike = SourceFile | Block | ModuleBlock | CaseOrDefaultClause;\n    export interface Block extends Statement {\n        readonly kind: SyntaxKind.Block;\n        readonly statements: NodeArray<Statement>;\n    }\n    export interface VariableStatement extends Statement {\n        readonly kind: SyntaxKind.VariableStatement;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly declarationList: VariableDeclarationList;\n    }\n    export interface ExpressionStatement extends Statement {\n        readonly kind: SyntaxKind.ExpressionStatement;\n        readonly expression: Expression;\n    }\n    export interface IfStatement extends Statement {\n        readonly kind: SyntaxKind.IfStatement;\n        readonly expression: Expression;\n        readonly thenStatement: Statement;\n        readonly elseStatement?: Statement;\n    }\n    export interface IterationStatement extends Statement {\n        readonly statement: Statement;\n    }\n    export interface DoStatement extends IterationStatement {\n        readonly kind: SyntaxKind.DoStatement;\n        readonly expression: Expression;\n    }\n    export interface WhileStatement extends IterationStatement {\n        readonly kind: SyntaxKind.WhileStatement;\n        readonly expression: Expression;\n    }\n    export type ForInitializer = VariableDeclarationList | Expression;\n    export interface ForStatement extends IterationStatement {\n        readonly kind: SyntaxKind.ForStatement;\n        readonly initializer?: ForInitializer;\n        readonly condition?: Expression;\n        readonly incrementor?: Expression;\n    }\n    export type ForInOrOfStatement = ForInStatement | ForOfStatement;\n    export interface ForInStatement extends IterationStatement {\n        readonly kind: SyntaxKind.ForInStatement;\n        readonly initializer: ForInitializer;\n        readonly expression: Expression;\n    }\n    export interface ForOfStatement extends IterationStatement {\n        readonly kind: SyntaxKind.ForOfStatement;\n        readonly awaitModifier?: AwaitKeyword;\n        readonly initializer: ForInitializer;\n        readonly expression: Expression;\n    }\n    export interface BreakStatement extends Statement {\n        readonly kind: SyntaxKind.BreakStatement;\n        readonly label?: Identifier;\n    }\n    export interface ContinueStatement extends Statement {\n        readonly kind: SyntaxKind.ContinueStatement;\n        readonly label?: Identifier;\n    }\n    export type BreakOrContinueStatement = BreakStatement | ContinueStatement;\n    export interface ReturnStatement extends Statement {\n        readonly kind: SyntaxKind.ReturnStatement;\n        readonly expression?: Expression;\n    }\n    export interface WithStatement extends Statement {\n        readonly kind: SyntaxKind.WithStatement;\n        readonly expression: Expression;\n        readonly statement: Statement;\n    }\n    export interface SwitchStatement extends Statement {\n        readonly kind: SyntaxKind.SwitchStatement;\n        readonly expression: Expression;\n        readonly caseBlock: CaseBlock;\n        possiblyExhaustive?: boolean;\n    }\n    export interface CaseBlock extends Node {\n        readonly kind: SyntaxKind.CaseBlock;\n        readonly parent: SwitchStatement;\n        readonly clauses: NodeArray<CaseOrDefaultClause>;\n    }\n    export interface CaseClause extends Node, JSDocContainer {\n        readonly kind: SyntaxKind.CaseClause;\n        readonly parent: CaseBlock;\n        readonly expression: Expression;\n        readonly statements: NodeArray<Statement>;\n    }\n    export interface DefaultClause extends Node {\n        readonly kind: SyntaxKind.DefaultClause;\n        readonly parent: CaseBlock;\n        readonly statements: NodeArray<Statement>;\n    }\n    export type CaseOrDefaultClause = CaseClause | DefaultClause;\n    export interface LabeledStatement extends Statement {\n        readonly kind: SyntaxKind.LabeledStatement;\n        readonly label: Identifier;\n        readonly statement: Statement;\n    }\n    export interface ThrowStatement extends Statement {\n        readonly kind: SyntaxKind.ThrowStatement;\n        readonly expression: Expression;\n    }\n    export interface TryStatement extends Statement {\n        readonly kind: SyntaxKind.TryStatement;\n        readonly tryBlock: Block;\n        readonly catchClause?: CatchClause;\n        readonly finallyBlock?: Block;\n    }\n    export interface CatchClause extends Node {\n        readonly kind: SyntaxKind.CatchClause;\n        readonly parent: TryStatement;\n        readonly variableDeclaration?: VariableDeclaration;\n        readonly block: Block;\n    }\n    export type ObjectTypeDeclaration = ClassLikeDeclaration | InterfaceDeclaration | TypeLiteralNode;\n    export type DeclarationWithTypeParameters = DeclarationWithTypeParameterChildren | JSDocTypedefTag | JSDocCallbackTag | JSDocSignature;\n    export type DeclarationWithTypeParameterChildren = SignatureDeclaration | ClassLikeDeclaration | InterfaceDeclaration | TypeAliasDeclaration | JSDocTemplateTag;\n    export interface ClassLikeDeclarationBase extends NamedDeclaration, JSDocContainer {\n        readonly kind: SyntaxKind.ClassDeclaration | SyntaxKind.ClassExpression;\n        readonly name?: Identifier;\n        readonly typeParameters?: NodeArray<TypeParameterDeclaration>;\n        readonly heritageClauses?: NodeArray<HeritageClause>;\n        readonly members: NodeArray<ClassElement>;\n    }\n    export interface ClassDeclaration extends ClassLikeDeclarationBase, DeclarationStatement {\n        readonly kind: SyntaxKind.ClassDeclaration;\n        readonly modifiers?: NodeArray<ModifierLike>;\n        /** May be undefined in `export default class { ... }`. */\n        readonly name?: Identifier;\n    }\n    export interface ClassExpression extends ClassLikeDeclarationBase, PrimaryExpression {\n        readonly kind: SyntaxKind.ClassExpression;\n        readonly modifiers?: NodeArray<ModifierLike>;\n    }\n    export type ClassLikeDeclaration = ClassDeclaration | ClassExpression;\n    export interface ClassElement extends NamedDeclaration {\n        _classElementBrand: any;\n        readonly name?: PropertyName;\n    }\n    export interface TypeElement extends NamedDeclaration {\n        _typeElementBrand: any;\n        readonly name?: PropertyName;\n        readonly questionToken?: QuestionToken | undefined;\n    }\n    export interface InterfaceDeclaration extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.InterfaceDeclaration;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: Identifier;\n        readonly typeParameters?: NodeArray<TypeParameterDeclaration>;\n        readonly heritageClauses?: NodeArray<HeritageClause>;\n        readonly members: NodeArray<TypeElement>;\n    }\n    export interface HeritageClause extends Node {\n        readonly kind: SyntaxKind.HeritageClause;\n        readonly parent: InterfaceDeclaration | ClassLikeDeclaration;\n        readonly token: SyntaxKind.ExtendsKeyword | SyntaxKind.ImplementsKeyword;\n        readonly types: NodeArray<ExpressionWithTypeArguments>;\n    }\n    export interface TypeAliasDeclaration extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.TypeAliasDeclaration;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: Identifier;\n        readonly typeParameters?: NodeArray<TypeParameterDeclaration>;\n        readonly type: TypeNode;\n    }\n    export interface EnumMember extends NamedDeclaration, JSDocContainer {\n        readonly kind: SyntaxKind.EnumMember;\n        readonly parent: EnumDeclaration;\n        readonly name: PropertyName;\n        readonly initializer?: Expression;\n    }\n    export interface EnumDeclaration extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.EnumDeclaration;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: Identifier;\n        readonly members: NodeArray<EnumMember>;\n    }\n    export type ModuleName = Identifier | StringLiteral;\n    export type ModuleBody = NamespaceBody | JSDocNamespaceBody;\n    export interface ModuleDeclaration extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.ModuleDeclaration;\n        readonly parent: ModuleBody | SourceFile;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: ModuleName;\n        readonly body?: ModuleBody | JSDocNamespaceDeclaration;\n    }\n    export type NamespaceBody = ModuleBlock | NamespaceDeclaration;\n    export interface NamespaceDeclaration extends ModuleDeclaration {\n        readonly name: Identifier;\n        readonly body: NamespaceBody;\n    }\n    export type JSDocNamespaceBody = Identifier | JSDocNamespaceDeclaration;\n    export interface JSDocNamespaceDeclaration extends ModuleDeclaration {\n        readonly name: Identifier;\n        readonly body?: JSDocNamespaceBody;\n    }\n    export interface ModuleBlock extends Node, Statement {\n        readonly kind: SyntaxKind.ModuleBlock;\n        readonly parent: ModuleDeclaration;\n        readonly statements: NodeArray<Statement>;\n    }\n    export type ModuleReference = EntityName | ExternalModuleReference;\n    /**\n     * One of:\n     * - import x = require(\"mod\");\n     * - import x = M.x;\n     */\n    export interface ImportEqualsDeclaration extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.ImportEqualsDeclaration;\n        readonly parent: SourceFile | ModuleBlock;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly name: Identifier;\n        readonly isTypeOnly: boolean;\n        readonly moduleReference: ModuleReference;\n    }\n    export interface ExternalModuleReference extends Node {\n        readonly kind: SyntaxKind.ExternalModuleReference;\n        readonly parent: ImportEqualsDeclaration;\n        readonly expression: Expression;\n    }\n    export interface ImportDeclaration extends Statement {\n        readonly kind: SyntaxKind.ImportDeclaration;\n        readonly parent: SourceFile | ModuleBlock;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly importClause?: ImportClause;\n        /** If this is not a StringLiteral it will be a grammar error. */\n        readonly moduleSpecifier: Expression;\n        readonly assertClause?: AssertClause;\n    }\n    export type NamedImportBindings = NamespaceImport | NamedImports;\n    export type NamedExportBindings = NamespaceExport | NamedExports;\n    export interface ImportClause extends NamedDeclaration {\n        readonly kind: SyntaxKind.ImportClause;\n        readonly parent: ImportDeclaration;\n        readonly isTypeOnly: boolean;\n        readonly name?: Identifier;\n        readonly namedBindings?: NamedImportBindings;\n    }\n    export type AssertionKey = Identifier | StringLiteral;\n    export interface AssertEntry extends Node {\n        readonly kind: SyntaxKind.AssertEntry;\n        readonly parent: AssertClause;\n        readonly name: AssertionKey;\n        readonly value: Expression;\n    }\n    export interface AssertClause extends Node {\n        readonly kind: SyntaxKind.AssertClause;\n        readonly parent: ImportDeclaration | ExportDeclaration;\n        readonly elements: NodeArray<AssertEntry>;\n        readonly multiLine?: boolean;\n    }\n    export interface NamespaceImport extends NamedDeclaration {\n        readonly kind: SyntaxKind.NamespaceImport;\n        readonly parent: ImportClause;\n        readonly name: Identifier;\n    }\n    export interface NamespaceExport extends NamedDeclaration {\n        readonly kind: SyntaxKind.NamespaceExport;\n        readonly parent: ExportDeclaration;\n        readonly name: Identifier;\n    }\n    export interface NamespaceExportDeclaration extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.NamespaceExportDeclaration;\n        readonly name: Identifier;\n    }\n    export interface ExportDeclaration extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.ExportDeclaration;\n        readonly parent: SourceFile | ModuleBlock;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly isTypeOnly: boolean;\n        /** Will not be assigned in the case of `export * from \"foo\";` */\n        readonly exportClause?: NamedExportBindings;\n        /** If this is not a StringLiteral it will be a grammar error. */\n        readonly moduleSpecifier?: Expression;\n        readonly assertClause?: AssertClause;\n    }\n    export interface NamedImports extends Node {\n        readonly kind: SyntaxKind.NamedImports;\n        readonly parent: ImportClause;\n        readonly elements: NodeArray<ImportSpecifier>;\n    }\n    export interface NamedExports extends Node {\n        readonly kind: SyntaxKind.NamedExports;\n        readonly parent: ExportDeclaration;\n        readonly elements: NodeArray<ExportSpecifier>;\n    }\n    export type NamedImportsOrExports = NamedImports | NamedExports;\n    export interface ImportSpecifier extends NamedDeclaration {\n        readonly kind: SyntaxKind.ImportSpecifier;\n        readonly parent: NamedImports;\n        readonly propertyName?: Identifier;\n        readonly name: Identifier;\n        readonly isTypeOnly: boolean;\n    }\n    export interface ExportSpecifier extends NamedDeclaration, JSDocContainer {\n        readonly kind: SyntaxKind.ExportSpecifier;\n        readonly parent: NamedExports;\n        readonly isTypeOnly: boolean;\n        readonly propertyName?: Identifier;\n        readonly name: Identifier;\n    }\n    export type ImportOrExportSpecifier = ImportSpecifier | ExportSpecifier;\n    export type TypeOnlyCompatibleAliasDeclaration = ImportClause | ImportEqualsDeclaration | NamespaceImport | ImportOrExportSpecifier;\n    export type TypeOnlyAliasDeclaration = ImportClause & {\n        readonly isTypeOnly: true;\n        readonly name: Identifier;\n    } | ImportEqualsDeclaration & {\n        readonly isTypeOnly: true;\n    } | NamespaceImport & {\n        readonly parent: ImportClause & {\n            readonly isTypeOnly: true;\n        };\n    } | ImportSpecifier & ({\n        readonly isTypeOnly: true;\n    } | {\n        readonly parent: NamedImports & {\n            readonly parent: ImportClause & {\n                readonly isTypeOnly: true;\n            };\n        };\n    }) | ExportSpecifier & ({\n        readonly isTypeOnly: true;\n    } | {\n        readonly parent: NamedExports & {\n            readonly parent: ExportDeclaration & {\n                readonly isTypeOnly: true;\n            };\n        };\n    });\n    /**\n     * This is either an `export =` or an `export default` declaration.\n     * Unless `isExportEquals` is set, this node was parsed as an `export default`.\n     */\n    export interface ExportAssignment extends DeclarationStatement, JSDocContainer {\n        readonly kind: SyntaxKind.ExportAssignment;\n        readonly parent: SourceFile;\n        readonly modifiers?: NodeArray<Modifier>;\n        readonly isExportEquals?: boolean;\n        readonly expression: Expression;\n    }\n    export interface FileReference extends TextRange {\n        fileName: string;\n        resolutionMode?: SourceFile[\"impliedNodeFormat\"];\n    }\n    export interface CheckJsDirective extends TextRange {\n        enabled: boolean;\n    }\n    export type CommentKind = SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia;\n    export interface CommentRange extends TextRange {\n        hasTrailingNewLine?: boolean;\n        kind: CommentKind;\n    }\n    export interface SynthesizedComment extends CommentRange {\n        text: string;\n        pos: -1;\n        end: -1;\n        hasLeadingNewline?: boolean;\n    }\n    export interface JSDocTypeExpression extends TypeNode {\n        readonly kind: SyntaxKind.JSDocTypeExpression;\n        readonly type: TypeNode;\n    }\n    export interface JSDocNameReference extends Node {\n        readonly kind: SyntaxKind.JSDocNameReference;\n        readonly name: EntityName | JSDocMemberName;\n    }\n    /** Class#method reference in JSDoc */\n    export interface JSDocMemberName extends Node {\n        readonly kind: SyntaxKind.JSDocMemberName;\n        readonly left: EntityName | JSDocMemberName;\n        readonly right: Identifier;\n    }\n    export interface JSDocType extends TypeNode {\n        _jsDocTypeBrand: any;\n    }\n    export interface JSDocAllType extends JSDocType {\n        readonly kind: SyntaxKind.JSDocAllType;\n    }\n    export interface JSDocUnknownType extends JSDocType {\n        readonly kind: SyntaxKind.JSDocUnknownType;\n    }\n    export interface JSDocNonNullableType extends JSDocType {\n        readonly kind: SyntaxKind.JSDocNonNullableType;\n        readonly type: TypeNode;\n        readonly postfix: boolean;\n    }\n    export interface JSDocNullableType extends JSDocType {\n        readonly kind: SyntaxKind.JSDocNullableType;\n        readonly type: TypeNode;\n        readonly postfix: boolean;\n    }\n    export interface JSDocOptionalType extends JSDocType {\n        readonly kind: SyntaxKind.JSDocOptionalType;\n        readonly type: TypeNode;\n    }\n    export interface JSDocFunctionType extends JSDocType, SignatureDeclarationBase {\n        readonly kind: SyntaxKind.JSDocFunctionType;\n    }\n    export interface JSDocVariadicType extends JSDocType {\n        readonly kind: SyntaxKind.JSDocVariadicType;\n        readonly type: TypeNode;\n    }\n    export interface JSDocNamepathType extends JSDocType {\n        readonly kind: SyntaxKind.JSDocNamepathType;\n        readonly type: TypeNode;\n    }\n    export type JSDocTypeReferencingNode = JSDocVariadicType | JSDocOptionalType | JSDocNullableType | JSDocNonNullableType;\n    export interface JSDoc extends Node {\n        readonly kind: SyntaxKind.JSDoc;\n        readonly parent: HasJSDoc;\n        readonly tags?: NodeArray<JSDocTag>;\n        readonly comment?: string | NodeArray<JSDocComment>;\n    }\n    export interface JSDocTag extends Node {\n        readonly parent: JSDoc | JSDocTypeLiteral;\n        readonly tagName: Identifier;\n        readonly comment?: string | NodeArray<JSDocComment>;\n    }\n    export interface JSDocLink extends Node {\n        readonly kind: SyntaxKind.JSDocLink;\n        readonly name?: EntityName | JSDocMemberName;\n        text: string;\n    }\n    export interface JSDocLinkCode extends Node {\n        readonly kind: SyntaxKind.JSDocLinkCode;\n        readonly name?: EntityName | JSDocMemberName;\n        text: string;\n    }\n    export interface JSDocLinkPlain extends Node {\n        readonly kind: SyntaxKind.JSDocLinkPlain;\n        readonly name?: EntityName | JSDocMemberName;\n        text: string;\n    }\n    export type JSDocComment = JSDocText | JSDocLink | JSDocLinkCode | JSDocLinkPlain;\n    export interface JSDocText extends Node {\n        readonly kind: SyntaxKind.JSDocText;\n        text: string;\n    }\n    export interface JSDocUnknownTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocTag;\n    }\n    /**\n     * Note that `@extends` is a synonym of `@augments`.\n     * Both tags are represented by this interface.\n     */\n    export interface JSDocAugmentsTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocAugmentsTag;\n        readonly class: ExpressionWithTypeArguments & {\n            readonly expression: Identifier | PropertyAccessEntityNameExpression;\n        };\n    }\n    export interface JSDocImplementsTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocImplementsTag;\n        readonly class: ExpressionWithTypeArguments & {\n            readonly expression: Identifier | PropertyAccessEntityNameExpression;\n        };\n    }\n    export interface JSDocAuthorTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocAuthorTag;\n    }\n    export interface JSDocDeprecatedTag extends JSDocTag {\n        kind: SyntaxKind.JSDocDeprecatedTag;\n    }\n    export interface JSDocClassTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocClassTag;\n    }\n    export interface JSDocPublicTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocPublicTag;\n    }\n    export interface JSDocPrivateTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocPrivateTag;\n    }\n    export interface JSDocProtectedTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocProtectedTag;\n    }\n    export interface JSDocReadonlyTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocReadonlyTag;\n    }\n    export interface JSDocOverrideTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocOverrideTag;\n    }\n    export interface JSDocEnumTag extends JSDocTag, Declaration {\n        readonly kind: SyntaxKind.JSDocEnumTag;\n        readonly parent: JSDoc;\n        readonly typeExpression: JSDocTypeExpression;\n    }\n    export interface JSDocThisTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocThisTag;\n        readonly typeExpression: JSDocTypeExpression;\n    }\n    export interface JSDocTemplateTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocTemplateTag;\n        readonly constraint: JSDocTypeExpression | undefined;\n        readonly typeParameters: NodeArray<TypeParameterDeclaration>;\n    }\n    export interface JSDocSeeTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocSeeTag;\n        readonly name?: JSDocNameReference;\n    }\n    export interface JSDocReturnTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocReturnTag;\n        readonly typeExpression?: JSDocTypeExpression;\n    }\n    export interface JSDocTypeTag extends JSDocTag {\n        readonly kind: SyntaxKind.JSDocTypeTag;\n        readonly typeExpression: JSDocTypeExpression;\n    }\n    export interface JSDocTypedefTag extends JSDocTag, NamedDeclaration {\n        readonly kind: SyntaxKind.JSDocTypedefTag;\n        readonly parent: JSDoc;\n        readonly fullName?: JSDocNamespaceDeclaration | Identifier;\n        readonly name?: Identifier;\n        readonly typeExpression?: JSDocTypeExpression | JSDocTypeLiteral;\n    }\n    export interface JSDocCallbackTag extends JSDocTag, NamedDeclaration {\n        readonly kind: SyntaxKind.JSDocCallbackTag;\n        readonly parent: JSDoc;\n        readonly fullName?: JSDocNamespaceDeclaration | Identifier;\n        readonly name?: Identifier;\n        readonly typeExpression: JSDocSignature;\n    }\n    export interface JSDocSignature extends JSDocType, Declaration {\n        readonly kind: SyntaxKind.JSDocSignature;\n        readonly typeParameters?: readonly JSDocTemplateTag[];\n        readonly parameters: readonly JSDocParameterTag[];\n        readonly type: JSDocReturnTag | undefined;\n    }\n    export interface JSDocPropertyLikeTag extends JSDocTag, Declaration {\n        readonly parent: JSDoc;\n        readonly name: EntityName;\n        readonly typeExpression?: JSDocTypeExpression;\n        /** Whether the property name came before the type -- non-standard for JSDoc, but Typescript-like */\n        readonly isNameFirst: boolean;\n        readonly isBracketed: boolean;\n    }\n    export interface JSDocPropertyTag extends JSDocPropertyLikeTag {\n        readonly kind: SyntaxKind.JSDocPropertyTag;\n    }\n    export interface JSDocParameterTag extends JSDocPropertyLikeTag {\n        readonly kind: SyntaxKind.JSDocParameterTag;\n    }\n    export interface JSDocTypeLiteral extends JSDocType {\n        readonly kind: SyntaxKind.JSDocTypeLiteral;\n        readonly jsDocPropertyTags?: readonly JSDocPropertyLikeTag[];\n        /** If true, then this type literal represents an *array* of its type. */\n        readonly isArrayType: boolean;\n    }\n    export enum FlowFlags {\n        Unreachable = 1,\n        Start = 2,\n        BranchLabel = 4,\n        LoopLabel = 8,\n        Assignment = 16,\n        TrueCondition = 32,\n        FalseCondition = 64,\n        SwitchClause = 128,\n        ArrayMutation = 256,\n        Call = 512,\n        ReduceLabel = 1024,\n        Referenced = 2048,\n        Shared = 4096,\n        Label = 12,\n        Condition = 96\n    }\n    export type FlowNode = FlowStart | FlowLabel | FlowAssignment | FlowCondition | FlowSwitchClause | FlowArrayMutation | FlowCall | FlowReduceLabel;\n    export interface FlowNodeBase {\n        flags: FlowFlags;\n        id?: number;\n    }\n    export interface FlowStart extends FlowNodeBase {\n        node?: FunctionExpression | ArrowFunction | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration;\n    }\n    export interface FlowLabel extends FlowNodeBase {\n        antecedents: FlowNode[] | undefined;\n    }\n    export interface FlowAssignment extends FlowNodeBase {\n        node: Expression | VariableDeclaration | BindingElement;\n        antecedent: FlowNode;\n    }\n    export interface FlowCall extends FlowNodeBase {\n        node: CallExpression;\n        antecedent: FlowNode;\n    }\n    export interface FlowCondition extends FlowNodeBase {\n        node: Expression;\n        antecedent: FlowNode;\n    }\n    export interface FlowSwitchClause extends FlowNodeBase {\n        switchStatement: SwitchStatement;\n        clauseStart: number;\n        clauseEnd: number;\n        antecedent: FlowNode;\n    }\n    export interface FlowArrayMutation extends FlowNodeBase {\n        node: CallExpression | BinaryExpression;\n        antecedent: FlowNode;\n    }\n    export interface FlowReduceLabel extends FlowNodeBase {\n        target: FlowLabel;\n        antecedents: FlowNode[];\n        antecedent: FlowNode;\n    }\n    export type FlowType = Type | IncompleteType;\n    export interface IncompleteType {\n        flags: TypeFlags;\n        type: Type;\n    }\n    export interface AmdDependency {\n        path: string;\n        name?: string;\n    }\n    /**\n     * Subset of properties from SourceFile that are used in multiple utility functions\n     */\n    export interface SourceFileLike {\n        readonly text: string;\n    }\n    export interface SourceFile extends Declaration {\n        readonly kind: SyntaxKind.SourceFile;\n        readonly statements: NodeArray<Statement>;\n        readonly endOfFileToken: Token<SyntaxKind.EndOfFileToken>;\n        fileName: string;\n        text: string;\n        amdDependencies: readonly AmdDependency[];\n        moduleName?: string;\n        referencedFiles: readonly FileReference[];\n        typeReferenceDirectives: readonly FileReference[];\n        libReferenceDirectives: readonly FileReference[];\n        languageVariant: LanguageVariant;\n        isDeclarationFile: boolean;\n        /**\n         * lib.d.ts should have a reference comment like\n         *\n         *  /// <reference no-default-lib=\"true\"/>\n         *\n         * If any other file has this comment, it signals not to include lib.d.ts\n         * because this containing file is intended to act as a default library.\n         */\n        hasNoDefaultLib: boolean;\n        languageVersion: ScriptTarget;\n        /**\n         * When `module` is `Node16` or `NodeNext`, this field controls whether the\n         * source file in question is an ESNext-output-format file, or a CommonJS-output-format\n         * module. This is derived by the module resolver as it looks up the file, since\n         * it is derived from either the file extension of the module, or the containing\n         * `package.json` context, and affects both checking and emit.\n         *\n         * It is _public_ so that (pre)transformers can set this field,\n         * since it switches the builtin `node` module transform. Generally speaking, if unset,\n         * the field is treated as though it is `ModuleKind.CommonJS`.\n         *\n         * Note that this field is only set by the module resolution process when\n         * `moduleResolution` is `Node16` or `NodeNext`, which is implied by the `module` setting\n         * of `Node16` or `NodeNext`, respectively, but may be overriden (eg, by a `moduleResolution`\n         * of `node`). If so, this field will be unset and source files will be considered to be\n         * CommonJS-output-format by the node module transformer and type checker, regardless of extension or context.\n         */\n        impliedNodeFormat?: ModuleKind.ESNext | ModuleKind.CommonJS;\n    }\n    export interface Bundle extends Node {\n        readonly kind: SyntaxKind.Bundle;\n        readonly prepends: readonly (InputFiles | UnparsedSource)[];\n        readonly sourceFiles: readonly SourceFile[];\n    }\n    export interface InputFiles extends Node {\n        readonly kind: SyntaxKind.InputFiles;\n        javascriptPath?: string;\n        javascriptText: string;\n        javascriptMapPath?: string;\n        javascriptMapText?: string;\n        declarationPath?: string;\n        declarationText: string;\n        declarationMapPath?: string;\n        declarationMapText?: string;\n    }\n    export interface UnparsedSource extends Node {\n        readonly kind: SyntaxKind.UnparsedSource;\n        fileName: string;\n        text: string;\n        readonly prologues: readonly UnparsedPrologue[];\n        helpers: readonly UnscopedEmitHelper[] | undefined;\n        referencedFiles: readonly FileReference[];\n        typeReferenceDirectives: readonly FileReference[] | undefined;\n        libReferenceDirectives: readonly FileReference[];\n        hasNoDefaultLib?: boolean;\n        sourceMapPath?: string;\n        sourceMapText?: string;\n        readonly syntheticReferences?: readonly UnparsedSyntheticReference[];\n        readonly texts: readonly UnparsedSourceText[];\n    }\n    export type UnparsedSourceText = UnparsedPrepend | UnparsedTextLike;\n    export type UnparsedNode = UnparsedPrologue | UnparsedSourceText | UnparsedSyntheticReference;\n    export interface UnparsedSection extends Node {\n        readonly kind: SyntaxKind;\n        readonly parent: UnparsedSource;\n        readonly data?: string;\n    }\n    export interface UnparsedPrologue extends UnparsedSection {\n        readonly kind: SyntaxKind.UnparsedPrologue;\n        readonly parent: UnparsedSource;\n        readonly data: string;\n    }\n    export interface UnparsedPrepend extends UnparsedSection {\n        readonly kind: SyntaxKind.UnparsedPrepend;\n        readonly parent: UnparsedSource;\n        readonly data: string;\n        readonly texts: readonly UnparsedTextLike[];\n    }\n    export interface UnparsedTextLike extends UnparsedSection {\n        readonly kind: SyntaxKind.UnparsedText | SyntaxKind.UnparsedInternalText;\n        readonly parent: UnparsedSource;\n    }\n    export interface UnparsedSyntheticReference extends UnparsedSection {\n        readonly kind: SyntaxKind.UnparsedSyntheticReference;\n        readonly parent: UnparsedSource;\n    }\n    export interface JsonSourceFile extends SourceFile {\n        readonly statements: NodeArray<JsonObjectExpressionStatement>;\n    }\n    export interface TsConfigSourceFile extends JsonSourceFile {\n        extendedSourceFiles?: string[];\n    }\n    export interface JsonMinusNumericLiteral extends PrefixUnaryExpression {\n        readonly kind: SyntaxKind.PrefixUnaryExpression;\n        readonly operator: SyntaxKind.MinusToken;\n        readonly operand: NumericLiteral;\n    }\n    export type JsonObjectExpression = ObjectLiteralExpression | ArrayLiteralExpression | JsonMinusNumericLiteral | NumericLiteral | StringLiteral | BooleanLiteral | NullLiteral;\n    export interface JsonObjectExpressionStatement extends ExpressionStatement {\n        readonly expression: JsonObjectExpression;\n    }\n    export interface ScriptReferenceHost {\n        getCompilerOptions(): CompilerOptions;\n        getSourceFile(fileName: string): SourceFile | undefined;\n        getSourceFileByPath(path: Path): SourceFile | undefined;\n        getCurrentDirectory(): string;\n    }\n    export interface ParseConfigHost {\n        useCaseSensitiveFileNames: boolean;\n        readDirectory(rootDir: string, extensions: readonly string[], excludes: readonly string[] | undefined, includes: readonly string[], depth?: number): readonly string[];\n        /**\n         * Gets a value indicating whether the specified path exists and is a file.\n         * @param path The path to test.\n         */\n        fileExists(path: string): boolean;\n        readFile(path: string): string | undefined;\n        trace?(s: string): void;\n    }\n    /**\n     * Branded string for keeping track of when we've turned an ambiguous path\n     * specified like \"./blah\" to an absolute path to an actual\n     * tsconfig file, e.g. \"/root/blah/tsconfig.json\"\n     */\n    export type ResolvedConfigFileName = string & {\n        _isResolvedConfigFileName: never;\n    };\n    export interface WriteFileCallbackData {\n    }\n    export type WriteFileCallback = (fileName: string, text: string, writeByteOrderMark: boolean, onError?: (message: string) => void, sourceFiles?: readonly SourceFile[], data?: WriteFileCallbackData) => void;\n    export class OperationCanceledException {\n    }\n    export interface CancellationToken {\n        isCancellationRequested(): boolean;\n        /** @throws OperationCanceledException if isCancellationRequested is true */\n        throwIfCancellationRequested(): void;\n    }\n    export interface Program extends ScriptReferenceHost {\n        getCurrentDirectory(): string;\n        /**\n         * Get a list of root file names that were passed to a 'createProgram'\n         */\n        getRootFileNames(): readonly string[];\n        /**\n         * Get a list of files in the program\n         */\n        getSourceFiles(): readonly SourceFile[];\n        /**\n         * Emits the JavaScript and declaration files.  If targetSourceFile is not specified, then\n         * the JavaScript and declaration files will be produced for all the files in this program.\n         * If targetSourceFile is specified, then only the JavaScript and declaration for that\n         * specific file will be generated.\n         *\n         * If writeFile is not specified then the writeFile callback from the compiler host will be\n         * used for writing the JavaScript and declaration files.  Otherwise, the writeFile parameter\n         * will be invoked when writing the JavaScript and declaration files.\n         */\n        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): EmitResult;\n        getOptionsDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n        getGlobalDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n        getSyntacticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly DiagnosticWithLocation[];\n        /** The first time this is called, it will return global diagnostics (no location). */\n        getSemanticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n        getDeclarationDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly DiagnosticWithLocation[];\n        getConfigFileParsingDiagnostics(): readonly Diagnostic[];\n        /**\n         * Gets a type checker that can be used to semantically analyze source files in the program.\n         */\n        getTypeChecker(): TypeChecker;\n        getNodeCount(): number;\n        getIdentifierCount(): number;\n        getSymbolCount(): number;\n        getTypeCount(): number;\n        getInstantiationCount(): number;\n        getRelationCacheSizes(): {\n            assignable: number;\n            identity: number;\n            subtype: number;\n            strictSubtype: number;\n        };\n        isSourceFileFromExternalLibrary(file: SourceFile): boolean;\n        isSourceFileDefaultLibrary(file: SourceFile): boolean;\n        getProjectReferences(): readonly ProjectReference[] | undefined;\n        getResolvedProjectReferences(): readonly (ResolvedProjectReference | undefined)[] | undefined;\n    }\n    export interface ResolvedProjectReference {\n        commandLine: ParsedCommandLine;\n        sourceFile: SourceFile;\n        references?: readonly (ResolvedProjectReference | undefined)[];\n    }\n    export type CustomTransformerFactory = (context: TransformationContext) => CustomTransformer;\n    export interface CustomTransformer {\n        transformSourceFile(node: SourceFile): SourceFile;\n        transformBundle(node: Bundle): Bundle;\n    }\n    export interface CustomTransformers {\n        /** Custom transformers to evaluate before built-in .js transformations. */\n        before?: (TransformerFactory<SourceFile> | CustomTransformerFactory)[];\n        /** Custom transformers to evaluate after built-in .js transformations. */\n        after?: (TransformerFactory<SourceFile> | CustomTransformerFactory)[];\n        /** Custom transformers to evaluate after built-in .d.ts transformations. */\n        afterDeclarations?: (TransformerFactory<Bundle | SourceFile> | CustomTransformerFactory)[];\n    }\n    export interface SourceMapSpan {\n        /** Line number in the .js file. */\n        emittedLine: number;\n        /** Column number in the .js file. */\n        emittedColumn: number;\n        /** Line number in the .ts file. */\n        sourceLine: number;\n        /** Column number in the .ts file. */\n        sourceColumn: number;\n        /** Optional name (index into names array) associated with this span. */\n        nameIndex?: number;\n        /** .ts file (index into sources array) associated with this span */\n        sourceIndex: number;\n    }\n    /** Return code used by getEmitOutput function to indicate status of the function */\n    export enum ExitStatus {\n        Success = 0,\n        DiagnosticsPresent_OutputsSkipped = 1,\n        DiagnosticsPresent_OutputsGenerated = 2,\n        InvalidProject_OutputsSkipped = 3,\n        ProjectReferenceCycle_OutputsSkipped = 4,\n        /** @deprecated Use ProjectReferenceCycle_OutputsSkipped instead. */\n        ProjectReferenceCycle_OutputsSkupped = 4\n    }\n    export interface EmitResult {\n        emitSkipped: boolean;\n        /** Contains declaration emit diagnostics */\n        diagnostics: readonly Diagnostic[];\n        emittedFiles?: string[];\n    }\n    export interface TypeChecker {\n        getTypeOfSymbolAtLocation(symbol: Symbol, node: Node): Type;\n        getDeclaredTypeOfSymbol(symbol: Symbol): Type;\n        getPropertiesOfType(type: Type): Symbol[];\n        getPropertyOfType(type: Type, propertyName: string): Symbol | undefined;\n        getPrivateIdentifierPropertyOfType(leftType: Type, name: string, location: Node): Symbol | undefined;\n        getIndexInfoOfType(type: Type, kind: IndexKind): IndexInfo | undefined;\n        getIndexInfosOfType(type: Type): readonly IndexInfo[];\n        getSignaturesOfType(type: Type, kind: SignatureKind): readonly Signature[];\n        getIndexTypeOfType(type: Type, kind: IndexKind): Type | undefined;\n        getBaseTypes(type: InterfaceType): BaseType[];\n        getBaseTypeOfLiteralType(type: Type): Type;\n        getWidenedType(type: Type): Type;\n        getReturnTypeOfSignature(signature: Signature): Type;\n        getNullableType(type: Type, flags: TypeFlags): Type;\n        getNonNullableType(type: Type): Type;\n        getTypeArguments(type: TypeReference): readonly Type[];\n        /** Note that the resulting nodes cannot be checked. */\n        typeToTypeNode(type: Type, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): TypeNode | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        signatureToSignatureDeclaration(signature: Signature, kind: SyntaxKind, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): SignatureDeclaration & {\n            typeArguments?: NodeArray<TypeNode>;\n        } | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        indexInfoToIndexSignatureDeclaration(indexInfo: IndexInfo, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): IndexSignatureDeclaration | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        symbolToEntityName(symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): EntityName | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        symbolToExpression(symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): Expression | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        symbolToTypeParameterDeclarations(symbol: Symbol, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): NodeArray<TypeParameterDeclaration> | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        symbolToParameterDeclaration(symbol: Symbol, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): ParameterDeclaration | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        typeParameterToDeclaration(parameter: TypeParameter, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): TypeParameterDeclaration | undefined;\n        getSymbolsInScope(location: Node, meaning: SymbolFlags): Symbol[];\n        getSymbolAtLocation(node: Node): Symbol | undefined;\n        getSymbolsOfParameterPropertyDeclaration(parameter: ParameterDeclaration, parameterName: string): Symbol[];\n        /**\n         * The function returns the value (local variable) symbol of an identifier in the short-hand property assignment.\n         * This is necessary as an identifier in short-hand property assignment can contains two meaning: property name and property value.\n         */\n        getShorthandAssignmentValueSymbol(location: Node | undefined): Symbol | undefined;\n        getExportSpecifierLocalTargetSymbol(location: ExportSpecifier | Identifier): Symbol | undefined;\n        /**\n         * If a symbol is a local symbol with an associated exported symbol, returns the exported symbol.\n         * Otherwise returns its input.\n         * For example, at `export type T = number;`:\n         *     - `getSymbolAtLocation` at the location `T` will return the exported symbol for `T`.\n         *     - But the result of `getSymbolsInScope` will contain the *local* symbol for `T`, not the exported symbol.\n         *     - Calling `getExportSymbolOfSymbol` on that local symbol will return the exported symbol.\n         */\n        getExportSymbolOfSymbol(symbol: Symbol): Symbol;\n        getPropertySymbolOfDestructuringAssignment(location: Identifier): Symbol | undefined;\n        getTypeOfAssignmentPattern(pattern: AssignmentPattern): Type;\n        getTypeAtLocation(node: Node): Type;\n        getTypeFromTypeNode(node: TypeNode): Type;\n        signatureToString(signature: Signature, enclosingDeclaration?: Node, flags?: TypeFormatFlags, kind?: SignatureKind): string;\n        typeToString(type: Type, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string;\n        symbolToString(symbol: Symbol, enclosingDeclaration?: Node, meaning?: SymbolFlags, flags?: SymbolFormatFlags): string;\n        typePredicateToString(predicate: TypePredicate, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string;\n        getFullyQualifiedName(symbol: Symbol): string;\n        getAugmentedPropertiesOfType(type: Type): Symbol[];\n        getRootSymbols(symbol: Symbol): readonly Symbol[];\n        getSymbolOfExpando(node: Node, allowDeclaration: boolean): Symbol | undefined;\n        getContextualType(node: Expression): Type | undefined;\n        /**\n         * returns unknownSignature in the case of an error.\n         * returns undefined if the node is not valid.\n         * @param argumentCount Apparent number of arguments, passed in case of a possibly incomplete call. This should come from an ArgumentListInfo. See `signatureHelp.ts`.\n         */\n        getResolvedSignature(node: CallLikeExpression, candidatesOutArray?: Signature[], argumentCount?: number): Signature | undefined;\n        getSignatureFromDeclaration(declaration: SignatureDeclaration): Signature | undefined;\n        isImplementationOfOverload(node: SignatureDeclaration): boolean | undefined;\n        isUndefinedSymbol(symbol: Symbol): boolean;\n        isArgumentsSymbol(symbol: Symbol): boolean;\n        isUnknownSymbol(symbol: Symbol): boolean;\n        getConstantValue(node: EnumMember | PropertyAccessExpression | ElementAccessExpression): string | number | undefined;\n        isValidPropertyAccess(node: PropertyAccessExpression | QualifiedName | ImportTypeNode, propertyName: string): boolean;\n        /** Follow all aliases to get the original symbol. */\n        getAliasedSymbol(symbol: Symbol): Symbol;\n        /** Follow a *single* alias to get the immediately aliased symbol. */\n        getImmediateAliasedSymbol(symbol: Symbol): Symbol | undefined;\n        getExportsOfModule(moduleSymbol: Symbol): Symbol[];\n        getJsxIntrinsicTagNamesAt(location: Node): Symbol[];\n        isOptionalParameter(node: ParameterDeclaration): boolean;\n        getAmbientModules(): Symbol[];\n        tryGetMemberInModuleExports(memberName: string, moduleSymbol: Symbol): Symbol | undefined;\n        getApparentType(type: Type): Type;\n        getBaseConstraintOfType(type: Type): Type | undefined;\n        getDefaultFromTypeParameter(type: Type): Type | undefined;\n        getTypePredicateOfSignature(signature: Signature): TypePredicate | undefined;\n        /**\n         * Depending on the operation performed, it may be appropriate to throw away the checker\n         * if the cancellation token is triggered. Typically, if it is used for error checking\n         * and the operation is cancelled, then it should be discarded, otherwise it is safe to keep.\n         */\n        runWithCancellationToken<T>(token: CancellationToken, cb: (checker: TypeChecker) => T): T;\n    }\n    export enum NodeBuilderFlags {\n        None = 0,\n        NoTruncation = 1,\n        WriteArrayAsGenericType = 2,\n        GenerateNamesForShadowedTypeParams = 4,\n        UseStructuralFallback = 8,\n        ForbidIndexedAccessSymbolReferences = 16,\n        WriteTypeArgumentsOfSignature = 32,\n        UseFullyQualifiedType = 64,\n        UseOnlyExternalAliasing = 128,\n        SuppressAnyReturnType = 256,\n        WriteTypeParametersInQualifiedName = 512,\n        MultilineObjectLiterals = 1024,\n        WriteClassExpressionAsTypeLiteral = 2048,\n        UseTypeOfFunction = 4096,\n        OmitParameterModifiers = 8192,\n        UseAliasDefinedOutsideCurrentScope = 16384,\n        UseSingleQuotesForStringLiteralType = 268435456,\n        NoTypeReduction = 536870912,\n        OmitThisParameter = 33554432,\n        AllowThisInObjectLiteral = 32768,\n        AllowQualifiedNameInPlaceOfIdentifier = 65536,\n        /** @deprecated AllowQualifedNameInPlaceOfIdentifier. Use AllowQualifiedNameInPlaceOfIdentifier instead. */\n        AllowQualifedNameInPlaceOfIdentifier = 65536,\n        AllowAnonymousIdentifier = 131072,\n        AllowEmptyUnionOrIntersection = 262144,\n        AllowEmptyTuple = 524288,\n        AllowUniqueESSymbolType = 1048576,\n        AllowEmptyIndexInfoType = 2097152,\n        AllowNodeModulesRelativePaths = 67108864,\n        IgnoreErrors = 70221824,\n        InObjectTypeLiteral = 4194304,\n        InTypeAlias = 8388608,\n        InInitialEntityName = 16777216\n    }\n    export enum TypeFormatFlags {\n        None = 0,\n        NoTruncation = 1,\n        WriteArrayAsGenericType = 2,\n        UseStructuralFallback = 8,\n        WriteTypeArgumentsOfSignature = 32,\n        UseFullyQualifiedType = 64,\n        SuppressAnyReturnType = 256,\n        MultilineObjectLiterals = 1024,\n        WriteClassExpressionAsTypeLiteral = 2048,\n        UseTypeOfFunction = 4096,\n        OmitParameterModifiers = 8192,\n        UseAliasDefinedOutsideCurrentScope = 16384,\n        UseSingleQuotesForStringLiteralType = 268435456,\n        NoTypeReduction = 536870912,\n        OmitThisParameter = 33554432,\n        AllowUniqueESSymbolType = 1048576,\n        AddUndefined = 131072,\n        WriteArrowStyleSignature = 262144,\n        InArrayType = 524288,\n        InElementType = 2097152,\n        InFirstTypeArgument = 4194304,\n        InTypeAlias = 8388608,\n        /** @deprecated */ WriteOwnNameForAnyLike = 0,\n        NodeBuilderFlagsMask = 848330091\n    }\n    export enum SymbolFormatFlags {\n        None = 0,\n        WriteTypeParametersOrArguments = 1,\n        UseOnlyExternalAliasing = 2,\n        AllowAnyNodeKind = 4,\n        UseAliasDefinedOutsideCurrentScope = 8,\n    }\n    export enum TypePredicateKind {\n        This = 0,\n        Identifier = 1,\n        AssertsThis = 2,\n        AssertsIdentifier = 3\n    }\n    export interface TypePredicateBase {\n        kind: TypePredicateKind;\n        type: Type | undefined;\n    }\n    export interface ThisTypePredicate extends TypePredicateBase {\n        kind: TypePredicateKind.This;\n        parameterName: undefined;\n        parameterIndex: undefined;\n        type: Type;\n    }\n    export interface IdentifierTypePredicate extends TypePredicateBase {\n        kind: TypePredicateKind.Identifier;\n        parameterName: string;\n        parameterIndex: number;\n        type: Type;\n    }\n    export interface AssertsThisTypePredicate extends TypePredicateBase {\n        kind: TypePredicateKind.AssertsThis;\n        parameterName: undefined;\n        parameterIndex: undefined;\n        type: Type | undefined;\n    }\n    export interface AssertsIdentifierTypePredicate extends TypePredicateBase {\n        kind: TypePredicateKind.AssertsIdentifier;\n        parameterName: string;\n        parameterIndex: number;\n        type: Type | undefined;\n    }\n    export type TypePredicate = ThisTypePredicate | IdentifierTypePredicate | AssertsThisTypePredicate | AssertsIdentifierTypePredicate;\n    export enum SymbolFlags {\n        None = 0,\n        FunctionScopedVariable = 1,\n        BlockScopedVariable = 2,\n        Property = 4,\n        EnumMember = 8,\n        Function = 16,\n        Class = 32,\n        Interface = 64,\n        ConstEnum = 128,\n        RegularEnum = 256,\n        ValueModule = 512,\n        NamespaceModule = 1024,\n        TypeLiteral = 2048,\n        ObjectLiteral = 4096,\n        Method = 8192,\n        Constructor = 16384,\n        GetAccessor = 32768,\n        SetAccessor = 65536,\n        Signature = 131072,\n        TypeParameter = 262144,\n        TypeAlias = 524288,\n        ExportValue = 1048576,\n        Alias = 2097152,\n        Prototype = 4194304,\n        ExportStar = 8388608,\n        Optional = 16777216,\n        Transient = 33554432,\n        Assignment = 67108864,\n        ModuleExports = 134217728,\n        Enum = 384,\n        Variable = 3,\n        Value = 111551,\n        Type = 788968,\n        Namespace = 1920,\n        Module = 1536,\n        Accessor = 98304,\n        FunctionScopedVariableExcludes = 111550,\n        BlockScopedVariableExcludes = 111551,\n        ParameterExcludes = 111551,\n        PropertyExcludes = 0,\n        EnumMemberExcludes = 900095,\n        FunctionExcludes = 110991,\n        ClassExcludes = 899503,\n        InterfaceExcludes = 788872,\n        RegularEnumExcludes = 899327,\n        ConstEnumExcludes = 899967,\n        ValueModuleExcludes = 110735,\n        NamespaceModuleExcludes = 0,\n        MethodExcludes = 103359,\n        GetAccessorExcludes = 46015,\n        SetAccessorExcludes = 78783,\n        TypeParameterExcludes = 526824,\n        TypeAliasExcludes = 788968,\n        AliasExcludes = 2097152,\n        ModuleMember = 2623475,\n        ExportHasLocal = 944,\n        BlockScoped = 418,\n        PropertyOrAccessor = 98308,\n        ClassMember = 106500,\n    }\n    export interface Symbol {\n        flags: SymbolFlags;\n        escapedName: __String;\n        declarations?: Declaration[];\n        valueDeclaration?: Declaration;\n        members?: SymbolTable;\n        exports?: SymbolTable;\n        globalExports?: SymbolTable;\n    }\n    export enum InternalSymbolName {\n        Call = \"__call\",\n        Constructor = \"__constructor\",\n        New = \"__new\",\n        Index = \"__index\",\n        ExportStar = \"__export\",\n        Global = \"__global\",\n        Missing = \"__missing\",\n        Type = \"__type\",\n        Object = \"__object\",\n        JSXAttributes = \"__jsxAttributes\",\n        Class = \"__class\",\n        Function = \"__function\",\n        Computed = \"__computed\",\n        Resolving = \"__resolving__\",\n        ExportEquals = \"export=\",\n        Default = \"default\",\n        This = \"this\"\n    }\n    /**\n     * This represents a string whose leading underscore have been escaped by adding extra leading underscores.\n     * The shape of this brand is rather unique compared to others we've used.\n     * Instead of just an intersection of a string and an object, it is that union-ed\n     * with an intersection of void and an object. This makes it wholly incompatible\n     * with a normal string (which is good, it cannot be misused on assignment or on usage),\n     * while still being comparable with a normal string via === (also good) and castable from a string.\n     */\n    export type __String = (string & {\n        __escapedIdentifier: void;\n    }) | (void & {\n        __escapedIdentifier: void;\n    }) | InternalSymbolName;\n    /** ReadonlyMap where keys are `__String`s. */\n    export interface ReadonlyUnderscoreEscapedMap<T> extends ReadonlyESMap<__String, T> {\n    }\n    /** Map where keys are `__String`s. */\n    export interface UnderscoreEscapedMap<T> extends ESMap<__String, T>, ReadonlyUnderscoreEscapedMap<T> {\n    }\n    /** SymbolTable based on ES6 Map interface. */\n    export type SymbolTable = UnderscoreEscapedMap<Symbol>;\n    export enum TypeFlags {\n        Any = 1,\n        Unknown = 2,\n        String = 4,\n        Number = 8,\n        Boolean = 16,\n        Enum = 32,\n        BigInt = 64,\n        StringLiteral = 128,\n        NumberLiteral = 256,\n        BooleanLiteral = 512,\n        EnumLiteral = 1024,\n        BigIntLiteral = 2048,\n        ESSymbol = 4096,\n        UniqueESSymbol = 8192,\n        Void = 16384,\n        Undefined = 32768,\n        Null = 65536,\n        Never = 131072,\n        TypeParameter = 262144,\n        Object = 524288,\n        Union = 1048576,\n        Intersection = 2097152,\n        Index = 4194304,\n        IndexedAccess = 8388608,\n        Conditional = 16777216,\n        Substitution = 33554432,\n        NonPrimitive = 67108864,\n        TemplateLiteral = 134217728,\n        StringMapping = 268435456,\n        Literal = 2944,\n        Unit = 109440,\n        StringOrNumberLiteral = 384,\n        PossiblyFalsy = 117724,\n        StringLike = 402653316,\n        NumberLike = 296,\n        BigIntLike = 2112,\n        BooleanLike = 528,\n        EnumLike = 1056,\n        ESSymbolLike = 12288,\n        VoidLike = 49152,\n        UnionOrIntersection = 3145728,\n        StructuredType = 3670016,\n        TypeVariable = 8650752,\n        InstantiableNonPrimitive = 58982400,\n        InstantiablePrimitive = 406847488,\n        Instantiable = 465829888,\n        StructuredOrInstantiable = 469499904,\n        Narrowable = 536624127,\n    }\n    export type DestructuringPattern = BindingPattern | ObjectLiteralExpression | ArrayLiteralExpression;\n    export interface Type {\n        flags: TypeFlags;\n        symbol: Symbol;\n        pattern?: DestructuringPattern;\n        aliasSymbol?: Symbol;\n        aliasTypeArguments?: readonly Type[];\n    }\n    export interface LiteralType extends Type {\n        value: string | number | PseudoBigInt;\n        freshType: LiteralType;\n        regularType: LiteralType;\n    }\n    export interface UniqueESSymbolType extends Type {\n        symbol: Symbol;\n        escapedName: __String;\n    }\n    export interface StringLiteralType extends LiteralType {\n        value: string;\n    }\n    export interface NumberLiteralType extends LiteralType {\n        value: number;\n    }\n    export interface BigIntLiteralType extends LiteralType {\n        value: PseudoBigInt;\n    }\n    export interface EnumType extends Type {\n    }\n    export enum ObjectFlags {\n        Class = 1,\n        Interface = 2,\n        Reference = 4,\n        Tuple = 8,\n        Anonymous = 16,\n        Mapped = 32,\n        Instantiated = 64,\n        ObjectLiteral = 128,\n        EvolvingArray = 256,\n        ObjectLiteralPatternWithComputedProperties = 512,\n        ReverseMapped = 1024,\n        JsxAttributes = 2048,\n        JSLiteral = 4096,\n        FreshLiteral = 8192,\n        ArrayLiteral = 16384,\n        ClassOrInterface = 3,\n        ContainsSpread = 2097152,\n        ObjectRestType = 4194304,\n        InstantiationExpressionType = 8388608,\n    }\n    export interface ObjectType extends Type {\n        objectFlags: ObjectFlags;\n    }\n    /** Class and interface types (ObjectFlags.Class and ObjectFlags.Interface). */\n    export interface InterfaceType extends ObjectType {\n        typeParameters: TypeParameter[] | undefined;\n        outerTypeParameters: TypeParameter[] | undefined;\n        localTypeParameters: TypeParameter[] | undefined;\n        thisType: TypeParameter | undefined;\n    }\n    export type BaseType = ObjectType | IntersectionType | TypeVariable;\n    export interface InterfaceTypeWithDeclaredMembers extends InterfaceType {\n        declaredProperties: Symbol[];\n        declaredCallSignatures: Signature[];\n        declaredConstructSignatures: Signature[];\n        declaredIndexInfos: IndexInfo[];\n    }\n    /**\n     * Type references (ObjectFlags.Reference). When a class or interface has type parameters or\n     * a \"this\" type, references to the class or interface are made using type references. The\n     * typeArguments property specifies the types to substitute for the type parameters of the\n     * class or interface and optionally includes an extra element that specifies the type to\n     * substitute for \"this\" in the resulting instantiation. When no extra argument is present,\n     * the type reference itself is substituted for \"this\". The typeArguments property is undefined\n     * if the class or interface has no type parameters and the reference isn't specifying an\n     * explicit \"this\" argument.\n     */\n    export interface TypeReference extends ObjectType {\n        target: GenericType;\n        node?: TypeReferenceNode | ArrayTypeNode | TupleTypeNode;\n    }\n    export interface DeferredTypeReference extends TypeReference {\n    }\n    export interface GenericType extends InterfaceType, TypeReference {\n    }\n    export enum ElementFlags {\n        Required = 1,\n        Optional = 2,\n        Rest = 4,\n        Variadic = 8,\n        Fixed = 3,\n        Variable = 12,\n        NonRequired = 14,\n        NonRest = 11\n    }\n    export interface TupleType extends GenericType {\n        elementFlags: readonly ElementFlags[];\n        minLength: number;\n        fixedLength: number;\n        hasRestElement: boolean;\n        combinedFlags: ElementFlags;\n        readonly: boolean;\n        labeledElementDeclarations?: readonly (NamedTupleMember | ParameterDeclaration)[];\n    }\n    export interface TupleTypeReference extends TypeReference {\n        target: TupleType;\n    }\n    export interface UnionOrIntersectionType extends Type {\n        types: Type[];\n    }\n    export interface UnionType extends UnionOrIntersectionType {\n    }\n    export interface IntersectionType extends UnionOrIntersectionType {\n    }\n    export type StructuredType = ObjectType | UnionType | IntersectionType;\n    export interface EvolvingArrayType extends ObjectType {\n        elementType: Type;\n        finalArrayType?: Type;\n    }\n    export interface InstantiableType extends Type {\n    }\n    export interface TypeParameter extends InstantiableType {\n    }\n    export interface IndexedAccessType extends InstantiableType {\n        objectType: Type;\n        indexType: Type;\n        constraint?: Type;\n        simplifiedForReading?: Type;\n        simplifiedForWriting?: Type;\n    }\n    export type TypeVariable = TypeParameter | IndexedAccessType;\n    export interface IndexType extends InstantiableType {\n        type: InstantiableType | UnionOrIntersectionType;\n    }\n    export interface ConditionalRoot {\n        node: ConditionalTypeNode;\n        checkType: Type;\n        extendsType: Type;\n        isDistributive: boolean;\n        inferTypeParameters?: TypeParameter[];\n        outerTypeParameters?: TypeParameter[];\n        instantiations?: Map<Type>;\n        aliasSymbol?: Symbol;\n        aliasTypeArguments?: Type[];\n    }\n    export interface ConditionalType extends InstantiableType {\n        root: ConditionalRoot;\n        checkType: Type;\n        extendsType: Type;\n        resolvedTrueType?: Type;\n        resolvedFalseType?: Type;\n    }\n    export interface TemplateLiteralType extends InstantiableType {\n        texts: readonly string[];\n        types: readonly Type[];\n    }\n    export interface StringMappingType extends InstantiableType {\n        symbol: Symbol;\n        type: Type;\n    }\n    export interface SubstitutionType extends InstantiableType {\n        objectFlags: ObjectFlags;\n        baseType: Type;\n        substitute: Type;\n    }\n    export enum SignatureKind {\n        Call = 0,\n        Construct = 1\n    }\n    export interface Signature {\n        declaration?: SignatureDeclaration | JSDocSignature;\n        typeParameters?: readonly TypeParameter[];\n        parameters: readonly Symbol[];\n    }\n    export enum IndexKind {\n        String = 0,\n        Number = 1\n    }\n    export interface IndexInfo {\n        keyType: Type;\n        type: Type;\n        isReadonly: boolean;\n        declaration?: IndexSignatureDeclaration;\n    }\n    export enum InferencePriority {\n        NakedTypeVariable = 1,\n        SpeculativeTuple = 2,\n        SubstituteSource = 4,\n        HomomorphicMappedType = 8,\n        PartialHomomorphicMappedType = 16,\n        MappedTypeConstraint = 32,\n        ContravariantConditional = 64,\n        ReturnType = 128,\n        LiteralKeyof = 256,\n        NoConstraints = 512,\n        AlwaysStrict = 1024,\n        MaxValue = 2048,\n        PriorityImpliesCombination = 416,\n        Circularity = -1\n    }\n    /** @deprecated Use FileExtensionInfo instead. */\n    export type JsFileExtensionInfo = FileExtensionInfo;\n    export interface FileExtensionInfo {\n        extension: string;\n        isMixedContent: boolean;\n        scriptKind?: ScriptKind;\n    }\n    export interface DiagnosticMessage {\n        key: string;\n        category: DiagnosticCategory;\n        code: number;\n        message: string;\n        reportsUnnecessary?: {};\n        reportsDeprecated?: {};\n    }\n    /**\n     * A linked list of formatted diagnostic messages to be used as part of a multiline message.\n     * It is built from the bottom up, leaving the head to be the \"main\" diagnostic.\n     * While it seems that DiagnosticMessageChain is structurally similar to DiagnosticMessage,\n     * the difference is that messages are all preformatted in DMC.\n     */\n    export interface DiagnosticMessageChain {\n        messageText: string;\n        category: DiagnosticCategory;\n        code: number;\n        next?: DiagnosticMessageChain[];\n    }\n    export interface Diagnostic extends DiagnosticRelatedInformation {\n        /** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. */\n        reportsUnnecessary?: {};\n        reportsDeprecated?: {};\n        source?: string;\n        relatedInformation?: DiagnosticRelatedInformation[];\n    }\n    export interface DiagnosticRelatedInformation {\n        category: DiagnosticCategory;\n        code: number;\n        file: SourceFile | undefined;\n        start: number | undefined;\n        length: number | undefined;\n        messageText: string | DiagnosticMessageChain;\n    }\n    export interface DiagnosticWithLocation extends Diagnostic {\n        file: SourceFile;\n        start: number;\n        length: number;\n    }\n    export enum DiagnosticCategory {\n        Warning = 0,\n        Error = 1,\n        Suggestion = 2,\n        Message = 3\n    }\n    export enum ModuleResolutionKind {\n        Classic = 1,\n        NodeJs = 2,\n        Node16 = 3,\n        NodeNext = 99\n    }\n    export enum ModuleDetectionKind {\n        /**\n         * Files with imports, exports and/or import.meta are considered modules\n         */\n        Legacy = 1,\n        /**\n         * Legacy, but also files with jsx under react-jsx or react-jsxdev and esm mode files under moduleResolution: node16+\n         */\n        Auto = 2,\n        /**\n         * Consider all non-declaration files modules, regardless of present syntax\n         */\n        Force = 3\n    }\n    export interface PluginImport {\n        name: string;\n    }\n    export interface ProjectReference {\n        /** A normalized path on disk */\n        path: string;\n        /** The path as the user originally wrote it */\n        originalPath?: string;\n        /** True if the output of this reference should be prepended to the output of this project. Only valid for --outFile compilations */\n        prepend?: boolean;\n        /** True if it is intended that this reference form a circularity */\n        circular?: boolean;\n    }\n    export enum WatchFileKind {\n        FixedPollingInterval = 0,\n        PriorityPollingInterval = 1,\n        DynamicPriorityPolling = 2,\n        FixedChunkSizePolling = 3,\n        UseFsEvents = 4,\n        UseFsEventsOnParentDirectory = 5\n    }\n    export enum WatchDirectoryKind {\n        UseFsEvents = 0,\n        FixedPollingInterval = 1,\n        DynamicPriorityPolling = 2,\n        FixedChunkSizePolling = 3\n    }\n    export enum PollingWatchKind {\n        FixedInterval = 0,\n        PriorityInterval = 1,\n        DynamicPriority = 2,\n        FixedChunkSize = 3\n    }\n    export type CompilerOptionsValue = string | number | boolean | (string | number)[] | string[] | MapLike<string[]> | PluginImport[] | ProjectReference[] | null | undefined;\n    export interface CompilerOptions {\n        allowJs?: boolean;\n        allowSyntheticDefaultImports?: boolean;\n        allowUmdGlobalAccess?: boolean;\n        allowUnreachableCode?: boolean;\n        allowUnusedLabels?: boolean;\n        alwaysStrict?: boolean;\n        baseUrl?: string;\n        charset?: string;\n        checkJs?: boolean;\n        declaration?: boolean;\n        declarationMap?: boolean;\n        emitDeclarationOnly?: boolean;\n        declarationDir?: string;\n        disableSizeLimit?: boolean;\n        disableSourceOfProjectReferenceRedirect?: boolean;\n        disableSolutionSearching?: boolean;\n        disableReferencedProjectLoad?: boolean;\n        downlevelIteration?: boolean;\n        emitBOM?: boolean;\n        emitDecoratorMetadata?: boolean;\n        exactOptionalPropertyTypes?: boolean;\n        experimentalDecorators?: boolean;\n        forceConsistentCasingInFileNames?: boolean;\n        importHelpers?: boolean;\n        importsNotUsedAsValues?: ImportsNotUsedAsValues;\n        inlineSourceMap?: boolean;\n        inlineSources?: boolean;\n        isolatedModules?: boolean;\n        jsx?: JsxEmit;\n        keyofStringsOnly?: boolean;\n        lib?: string[];\n        locale?: string;\n        mapRoot?: string;\n        maxNodeModuleJsDepth?: number;\n        module?: ModuleKind;\n        moduleResolution?: ModuleResolutionKind;\n        moduleSuffixes?: string[];\n        moduleDetection?: ModuleDetectionKind;\n        newLine?: NewLineKind;\n        noEmit?: boolean;\n        noEmitHelpers?: boolean;\n        noEmitOnError?: boolean;\n        noErrorTruncation?: boolean;\n        noFallthroughCasesInSwitch?: boolean;\n        noImplicitAny?: boolean;\n        noImplicitReturns?: boolean;\n        noImplicitThis?: boolean;\n        noStrictGenericChecks?: boolean;\n        noUnusedLocals?: boolean;\n        noUnusedParameters?: boolean;\n        noImplicitUseStrict?: boolean;\n        noPropertyAccessFromIndexSignature?: boolean;\n        assumeChangesOnlyAffectDirectDependencies?: boolean;\n        noLib?: boolean;\n        noResolve?: boolean;\n        noUncheckedIndexedAccess?: boolean;\n        out?: string;\n        outDir?: string;\n        outFile?: string;\n        paths?: MapLike<string[]>;\n        preserveConstEnums?: boolean;\n        noImplicitOverride?: boolean;\n        preserveSymlinks?: boolean;\n        preserveValueImports?: boolean;\n        project?: string;\n        reactNamespace?: string;\n        jsxFactory?: string;\n        jsxFragmentFactory?: string;\n        jsxImportSource?: string;\n        composite?: boolean;\n        incremental?: boolean;\n        tsBuildInfoFile?: string;\n        removeComments?: boolean;\n        rootDir?: string;\n        rootDirs?: string[];\n        skipLibCheck?: boolean;\n        skipDefaultLibCheck?: boolean;\n        sourceMap?: boolean;\n        sourceRoot?: string;\n        strict?: boolean;\n        strictFunctionTypes?: boolean;\n        strictBindCallApply?: boolean;\n        strictNullChecks?: boolean;\n        strictPropertyInitialization?: boolean;\n        stripInternal?: boolean;\n        suppressExcessPropertyErrors?: boolean;\n        suppressImplicitAnyIndexErrors?: boolean;\n        target?: ScriptTarget;\n        traceResolution?: boolean;\n        useUnknownInCatchVariables?: boolean;\n        resolveJsonModule?: boolean;\n        types?: string[];\n        /** Paths used to compute primary types search locations */\n        typeRoots?: string[];\n        esModuleInterop?: boolean;\n        useDefineForClassFields?: boolean;\n        [option: string]: CompilerOptionsValue | TsConfigSourceFile | undefined;\n    }\n    export interface WatchOptions {\n        watchFile?: WatchFileKind;\n        watchDirectory?: WatchDirectoryKind;\n        fallbackPolling?: PollingWatchKind;\n        synchronousWatchDirectory?: boolean;\n        excludeDirectories?: string[];\n        excludeFiles?: string[];\n        [option: string]: CompilerOptionsValue | undefined;\n    }\n    export interface TypeAcquisition {\n        /**\n         * @deprecated typingOptions.enableAutoDiscovery\n         * Use typeAcquisition.enable instead.\n         */\n        enableAutoDiscovery?: boolean;\n        enable?: boolean;\n        include?: string[];\n        exclude?: string[];\n        disableFilenameBasedTypeAcquisition?: boolean;\n        [option: string]: CompilerOptionsValue | undefined;\n    }\n    export enum ModuleKind {\n        None = 0,\n        CommonJS = 1,\n        AMD = 2,\n        UMD = 3,\n        System = 4,\n        ES2015 = 5,\n        ES2020 = 6,\n        ES2022 = 7,\n        ESNext = 99,\n        Node16 = 100,\n        NodeNext = 199\n    }\n    export enum JsxEmit {\n        None = 0,\n        Preserve = 1,\n        React = 2,\n        ReactNative = 3,\n        ReactJSX = 4,\n        ReactJSXDev = 5\n    }\n    export enum ImportsNotUsedAsValues {\n        Remove = 0,\n        Preserve = 1,\n        Error = 2\n    }\n    export enum NewLineKind {\n        CarriageReturnLineFeed = 0,\n        LineFeed = 1\n    }\n    export interface LineAndCharacter {\n        /** 0-based. */\n        line: number;\n        character: number;\n    }\n    export enum ScriptKind {\n        Unknown = 0,\n        JS = 1,\n        JSX = 2,\n        TS = 3,\n        TSX = 4,\n        External = 5,\n        JSON = 6,\n        /**\n         * Used on extensions that doesn't define the ScriptKind but the content defines it.\n         * Deferred extensions are going to be included in all project contexts.\n         */\n        Deferred = 7\n    }\n    export enum ScriptTarget {\n        ES3 = 0,\n        ES5 = 1,\n        ES2015 = 2,\n        ES2016 = 3,\n        ES2017 = 4,\n        ES2018 = 5,\n        ES2019 = 6,\n        ES2020 = 7,\n        ES2021 = 8,\n        ES2022 = 9,\n        ESNext = 99,\n        JSON = 100,\n        Latest = 99\n    }\n    export enum LanguageVariant {\n        Standard = 0,\n        JSX = 1\n    }\n    /** Either a parsed command line or a parsed tsconfig.json */\n    export interface ParsedCommandLine {\n        options: CompilerOptions;\n        typeAcquisition?: TypeAcquisition;\n        fileNames: string[];\n        projectReferences?: readonly ProjectReference[];\n        watchOptions?: WatchOptions;\n        raw?: any;\n        errors: Diagnostic[];\n        wildcardDirectories?: MapLike<WatchDirectoryFlags>;\n        compileOnSave?: boolean;\n    }\n    export enum WatchDirectoryFlags {\n        None = 0,\n        Recursive = 1\n    }\n    export interface CreateProgramOptions {\n        rootNames: readonly string[];\n        options: CompilerOptions;\n        projectReferences?: readonly ProjectReference[];\n        host?: CompilerHost;\n        oldProgram?: Program;\n        configFileParsingDiagnostics?: readonly Diagnostic[];\n    }\n    export interface ModuleResolutionHost {\n        fileExists(fileName: string): boolean;\n        readFile(fileName: string): string | undefined;\n        trace?(s: string): void;\n        directoryExists?(directoryName: string): boolean;\n        /**\n         * Resolve a symbolic link.\n         * @see https://nodejs.org/api/fs.html#fs_fs_realpathsync_path_options\n         */\n        realpath?(path: string): string;\n        getCurrentDirectory?(): string;\n        getDirectories?(path: string): string[];\n        useCaseSensitiveFileNames?: boolean | (() => boolean) | undefined;\n    }\n    /**\n     * Used by services to specify the minimum host area required to set up source files under any compilation settings\n     */\n    export interface MinimalResolutionCacheHost extends ModuleResolutionHost {\n        getCompilationSettings(): CompilerOptions;\n        getCompilerHost?(): CompilerHost | undefined;\n    }\n    /**\n     * Represents the result of module resolution.\n     * Module resolution will pick up tsx/jsx/js files even if '--jsx' and '--allowJs' are turned off.\n     * The Program will then filter results based on these flags.\n     *\n     * Prefer to return a `ResolvedModuleFull` so that the file type does not have to be inferred.\n     */\n    export interface ResolvedModule {\n        /** Path of the file the module was resolved to. */\n        resolvedFileName: string;\n        /** True if `resolvedFileName` comes from `node_modules`. */\n        isExternalLibraryImport?: boolean;\n    }\n    /**\n     * ResolvedModule with an explicitly provided `extension` property.\n     * Prefer this over `ResolvedModule`.\n     * If changing this, remember to change `moduleResolutionIsEqualTo`.\n     */\n    export interface ResolvedModuleFull extends ResolvedModule {\n        /**\n         * Extension of resolvedFileName. This must match what's at the end of resolvedFileName.\n         * This is optional for backwards-compatibility, but will be added if not provided.\n         */\n        extension: Extension;\n        packageId?: PackageId;\n    }\n    /**\n     * Unique identifier with a package name and version.\n     * If changing this, remember to change `packageIdIsEqual`.\n     */\n    export interface PackageId {\n        /**\n         * Name of the package.\n         * Should not include `@types`.\n         * If accessing a non-index file, this should include its name e.g. \"foo/bar\".\n         */\n        name: string;\n        /**\n         * Name of a submodule within this package.\n         * May be \"\".\n         */\n        subModuleName: string;\n        /** Version of the package, e.g. \"1.2.3\" */\n        version: string;\n    }\n    export enum Extension {\n        Ts = \".ts\",\n        Tsx = \".tsx\",\n        Dts = \".d.ts\",\n        Js = \".js\",\n        Jsx = \".jsx\",\n        Json = \".json\",\n        TsBuildInfo = \".tsbuildinfo\",\n        Mjs = \".mjs\",\n        Mts = \".mts\",\n        Dmts = \".d.mts\",\n        Cjs = \".cjs\",\n        Cts = \".cts\",\n        Dcts = \".d.cts\"\n    }\n    export interface ResolvedModuleWithFailedLookupLocations {\n        readonly resolvedModule: ResolvedModuleFull | undefined;\n    }\n    export interface ResolvedTypeReferenceDirective {\n        primary: boolean;\n        resolvedFileName: string | undefined;\n        packageId?: PackageId;\n        /** True if `resolvedFileName` comes from `node_modules`. */\n        isExternalLibraryImport?: boolean;\n    }\n    export interface ResolvedTypeReferenceDirectiveWithFailedLookupLocations {\n        readonly resolvedTypeReferenceDirective: ResolvedTypeReferenceDirective | undefined;\n        readonly failedLookupLocations: string[];\n    }\n    export interface CompilerHost extends ModuleResolutionHost {\n        getSourceFile(fileName: string, languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions, onError?: (message: string) => void, shouldCreateNewSourceFile?: boolean): SourceFile | undefined;\n        getSourceFileByPath?(fileName: string, path: Path, languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions, onError?: (message: string) => void, shouldCreateNewSourceFile?: boolean): SourceFile | undefined;\n        getCancellationToken?(): CancellationToken;\n        getDefaultLibFileName(options: CompilerOptions): string;\n        getDefaultLibLocation?(): string;\n        writeFile: WriteFileCallback;\n        getCurrentDirectory(): string;\n        getCanonicalFileName(fileName: string): string;\n        useCaseSensitiveFileNames(): boolean;\n        getNewLine(): string;\n        readDirectory?(rootDir: string, extensions: readonly string[], excludes: readonly string[] | undefined, includes: readonly string[], depth?: number): string[];\n        resolveModuleNames?(moduleNames: string[], containingFile: string, reusedNames: string[] | undefined, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingSourceFile?: SourceFile): (ResolvedModule | undefined)[];\n        /**\n         * Returns the module resolution cache used by a provided `resolveModuleNames` implementation so that any non-name module resolution operations (eg, package.json lookup) can reuse it\n         */\n        getModuleResolutionCache?(): ModuleResolutionCache | undefined;\n        /**\n         * This method is a companion for 'resolveModuleNames' and is used to resolve 'types' references to actual type declaration files\n         */\n        resolveTypeReferenceDirectives?(typeReferenceDirectiveNames: string[] | readonly FileReference[], containingFile: string, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingFileMode?: SourceFile[\"impliedNodeFormat\"] | undefined): (ResolvedTypeReferenceDirective | undefined)[];\n        getEnvironmentVariable?(name: string): string | undefined;\n        createHash?(data: string): string;\n        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n    }\n    export interface SourceMapRange extends TextRange {\n        source?: SourceMapSource;\n    }\n    export interface SourceMapSource {\n        fileName: string;\n        text: string;\n        skipTrivia?: (pos: number) => number;\n    }\n    export enum EmitFlags {\n        None = 0,\n        SingleLine = 1,\n        AdviseOnEmitNode = 2,\n        NoSubstitution = 4,\n        CapturesThis = 8,\n        NoLeadingSourceMap = 16,\n        NoTrailingSourceMap = 32,\n        NoSourceMap = 48,\n        NoNestedSourceMaps = 64,\n        NoTokenLeadingSourceMaps = 128,\n        NoTokenTrailingSourceMaps = 256,\n        NoTokenSourceMaps = 384,\n        NoLeadingComments = 512,\n        NoTrailingComments = 1024,\n        NoComments = 1536,\n        NoNestedComments = 2048,\n        HelperName = 4096,\n        ExportName = 8192,\n        LocalName = 16384,\n        InternalName = 32768,\n        Indented = 65536,\n        NoIndentation = 131072,\n        AsyncFunctionBody = 262144,\n        ReuseTempVariableScope = 524288,\n        CustomPrologue = 1048576,\n        NoHoisting = 2097152,\n        HasEndOfDeclarationMarker = 4194304,\n        Iterator = 8388608,\n        NoAsciiEscaping = 16777216,\n    }\n    export interface EmitHelperBase {\n        readonly name: string;\n        readonly scoped: boolean;\n        readonly text: string | ((node: EmitHelperUniqueNameCallback) => string);\n        readonly priority?: number;\n        readonly dependencies?: EmitHelper[];\n    }\n    export interface ScopedEmitHelper extends EmitHelperBase {\n        readonly scoped: true;\n    }\n    export interface UnscopedEmitHelper extends EmitHelperBase {\n        readonly scoped: false;\n        readonly text: string;\n    }\n    export type EmitHelper = ScopedEmitHelper | UnscopedEmitHelper;\n    export type EmitHelperUniqueNameCallback = (name: string) => string;\n    export enum EmitHint {\n        SourceFile = 0,\n        Expression = 1,\n        IdentifierName = 2,\n        MappedTypeParameter = 3,\n        Unspecified = 4,\n        EmbeddedStatement = 5,\n        JsxAttributeValue = 6\n    }\n    export enum OuterExpressionKinds {\n        Parentheses = 1,\n        TypeAssertions = 2,\n        NonNullAssertions = 4,\n        PartiallyEmittedExpressions = 8,\n        Assertions = 6,\n        All = 15,\n        ExcludeJSDocTypeAssertion = 16\n    }\n    export type TypeOfTag = \"undefined\" | \"number\" | \"bigint\" | \"boolean\" | \"string\" | \"symbol\" | \"object\" | \"function\";\n    export interface NodeFactory {\n        createNodeArray<T extends Node>(elements?: readonly T[], hasTrailingComma?: boolean): NodeArray<T>;\n        createNumericLiteral(value: string | number, numericLiteralFlags?: TokenFlags): NumericLiteral;\n        createBigIntLiteral(value: string | PseudoBigInt): BigIntLiteral;\n        createStringLiteral(text: string, isSingleQuote?: boolean): StringLiteral;\n        createStringLiteralFromNode(sourceNode: PropertyNameLiteral, isSingleQuote?: boolean): StringLiteral;\n        createRegularExpressionLiteral(text: string): RegularExpressionLiteral;\n        createIdentifier(text: string): Identifier;\n        /**\n         * Create a unique temporary variable.\n         * @param recordTempVariable An optional callback used to record the temporary variable name. This\n         * should usually be a reference to `hoistVariableDeclaration` from a `TransformationContext`, but\n         * can be `undefined` if you plan to record the temporary variable manually.\n         * @param reservedInNestedScopes When `true`, reserves the temporary variable name in all nested scopes\n         * during emit so that the variable can be referenced in a nested function body. This is an alternative to\n         * setting `EmitFlags.ReuseTempVariableScope` on the nested function itself.\n         */\n        createTempVariable(recordTempVariable: ((node: Identifier) => void) | undefined, reservedInNestedScopes?: boolean): Identifier;\n        /**\n         * Create a unique temporary variable for use in a loop.\n         * @param reservedInNestedScopes When `true`, reserves the temporary variable name in all nested scopes\n         * during emit so that the variable can be referenced in a nested function body. This is an alternative to\n         * setting `EmitFlags.ReuseTempVariableScope` on the nested function itself.\n         */\n        createLoopVariable(reservedInNestedScopes?: boolean): Identifier;\n        /** Create a unique name based on the supplied text. */\n        createUniqueName(text: string, flags?: GeneratedIdentifierFlags): Identifier;\n        /** Create a unique name generated for a node. */\n        getGeneratedNameForNode(node: Node | undefined, flags?: GeneratedIdentifierFlags): Identifier;\n        createPrivateIdentifier(text: string): PrivateIdentifier;\n        createToken(token: SyntaxKind.SuperKeyword): SuperExpression;\n        createToken(token: SyntaxKind.ThisKeyword): ThisExpression;\n        createToken(token: SyntaxKind.NullKeyword): NullLiteral;\n        createToken(token: SyntaxKind.TrueKeyword): TrueLiteral;\n        createToken(token: SyntaxKind.FalseKeyword): FalseLiteral;\n        createToken<TKind extends PunctuationSyntaxKind>(token: TKind): PunctuationToken<TKind>;\n        createToken<TKind extends KeywordTypeSyntaxKind>(token: TKind): KeywordTypeNode<TKind>;\n        createToken<TKind extends ModifierSyntaxKind>(token: TKind): ModifierToken<TKind>;\n        createToken<TKind extends KeywordSyntaxKind>(token: TKind): KeywordToken<TKind>;\n        createToken<TKind extends SyntaxKind.Unknown | SyntaxKind.EndOfFileToken>(token: TKind): Token<TKind>;\n        createSuper(): SuperExpression;\n        createThis(): ThisExpression;\n        createNull(): NullLiteral;\n        createTrue(): TrueLiteral;\n        createFalse(): FalseLiteral;\n        createModifier<T extends ModifierSyntaxKind>(kind: T): ModifierToken<T>;\n        createModifiersFromModifierFlags(flags: ModifierFlags): Modifier[] | undefined;\n        createQualifiedName(left: EntityName, right: string | Identifier): QualifiedName;\n        updateQualifiedName(node: QualifiedName, left: EntityName, right: Identifier): QualifiedName;\n        createComputedPropertyName(expression: Expression): ComputedPropertyName;\n        updateComputedPropertyName(node: ComputedPropertyName, expression: Expression): ComputedPropertyName;\n        createTypeParameterDeclaration(modifiers: readonly Modifier[] | undefined, name: string | Identifier, constraint?: TypeNode, defaultType?: TypeNode): TypeParameterDeclaration;\n        updateTypeParameterDeclaration(node: TypeParameterDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n        createParameterDeclaration(modifiers: readonly ModifierLike[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken?: QuestionToken, type?: TypeNode, initializer?: Expression): ParameterDeclaration;\n        updateParameterDeclaration(node: ParameterDeclaration, modifiers: readonly ModifierLike[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): ParameterDeclaration;\n        createDecorator(expression: Expression): Decorator;\n        updateDecorator(node: Decorator, expression: Expression): Decorator;\n        createPropertySignature(modifiers: readonly Modifier[] | undefined, name: PropertyName | string, questionToken: QuestionToken | undefined, type: TypeNode | undefined): PropertySignature;\n        updatePropertySignature(node: PropertySignature, modifiers: readonly Modifier[] | undefined, name: PropertyName, questionToken: QuestionToken | undefined, type: TypeNode | undefined): PropertySignature;\n        createPropertyDeclaration(modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n        updatePropertyDeclaration(node: PropertyDeclaration, modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n        createMethodSignature(modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): MethodSignature;\n        updateMethodSignature(node: MethodSignature, modifiers: readonly Modifier[] | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined): MethodSignature;\n        createMethodDeclaration(modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n        updateMethodDeclaration(node: MethodDeclaration, modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n        createConstructorDeclaration(modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n        updateConstructorDeclaration(node: ConstructorDeclaration, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n        createGetAccessorDeclaration(modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n        updateGetAccessorDeclaration(node: GetAccessorDeclaration, modifiers: readonly ModifierLike[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n        createSetAccessorDeclaration(modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n        updateSetAccessorDeclaration(node: SetAccessorDeclaration, modifiers: readonly ModifierLike[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n        createCallSignature(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): CallSignatureDeclaration;\n        updateCallSignature(node: CallSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined): CallSignatureDeclaration;\n        createConstructSignature(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): ConstructSignatureDeclaration;\n        updateConstructSignature(node: ConstructSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined): ConstructSignatureDeclaration;\n        createIndexSignature(modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n        updateIndexSignature(node: IndexSignatureDeclaration, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n        createTemplateLiteralTypeSpan(type: TypeNode, literal: TemplateMiddle | TemplateTail): TemplateLiteralTypeSpan;\n        updateTemplateLiteralTypeSpan(node: TemplateLiteralTypeSpan, type: TypeNode, literal: TemplateMiddle | TemplateTail): TemplateLiteralTypeSpan;\n        createClassStaticBlockDeclaration(body: Block): ClassStaticBlockDeclaration;\n        updateClassStaticBlockDeclaration(node: ClassStaticBlockDeclaration, body: Block): ClassStaticBlockDeclaration;\n        createKeywordTypeNode<TKind extends KeywordTypeSyntaxKind>(kind: TKind): KeywordTypeNode<TKind>;\n        createTypePredicateNode(assertsModifier: AssertsKeyword | undefined, parameterName: Identifier | ThisTypeNode | string, type: TypeNode | undefined): TypePredicateNode;\n        updateTypePredicateNode(node: TypePredicateNode, assertsModifier: AssertsKeyword | undefined, parameterName: Identifier | ThisTypeNode, type: TypeNode | undefined): TypePredicateNode;\n        createTypeReferenceNode(typeName: string | EntityName, typeArguments?: readonly TypeNode[]): TypeReferenceNode;\n        updateTypeReferenceNode(node: TypeReferenceNode, typeName: EntityName, typeArguments: NodeArray<TypeNode> | undefined): TypeReferenceNode;\n        createFunctionTypeNode(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): FunctionTypeNode;\n        updateFunctionTypeNode(node: FunctionTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode): FunctionTypeNode;\n        createConstructorTypeNode(modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): ConstructorTypeNode;\n        updateConstructorTypeNode(node: ConstructorTypeNode, modifiers: readonly Modifier[] | undefined, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode): ConstructorTypeNode;\n        createTypeQueryNode(exprName: EntityName, typeArguments?: readonly TypeNode[]): TypeQueryNode;\n        updateTypeQueryNode(node: TypeQueryNode, exprName: EntityName, typeArguments?: readonly TypeNode[]): TypeQueryNode;\n        createTypeLiteralNode(members: readonly TypeElement[] | undefined): TypeLiteralNode;\n        updateTypeLiteralNode(node: TypeLiteralNode, members: NodeArray<TypeElement>): TypeLiteralNode;\n        createArrayTypeNode(elementType: TypeNode): ArrayTypeNode;\n        updateArrayTypeNode(node: ArrayTypeNode, elementType: TypeNode): ArrayTypeNode;\n        createTupleTypeNode(elements: readonly (TypeNode | NamedTupleMember)[]): TupleTypeNode;\n        updateTupleTypeNode(node: TupleTypeNode, elements: readonly (TypeNode | NamedTupleMember)[]): TupleTypeNode;\n        createNamedTupleMember(dotDotDotToken: DotDotDotToken | undefined, name: Identifier, questionToken: QuestionToken | undefined, type: TypeNode): NamedTupleMember;\n        updateNamedTupleMember(node: NamedTupleMember, dotDotDotToken: DotDotDotToken | undefined, name: Identifier, questionToken: QuestionToken | undefined, type: TypeNode): NamedTupleMember;\n        createOptionalTypeNode(type: TypeNode): OptionalTypeNode;\n        updateOptionalTypeNode(node: OptionalTypeNode, type: TypeNode): OptionalTypeNode;\n        createRestTypeNode(type: TypeNode): RestTypeNode;\n        updateRestTypeNode(node: RestTypeNode, type: TypeNode): RestTypeNode;\n        createUnionTypeNode(types: readonly TypeNode[]): UnionTypeNode;\n        updateUnionTypeNode(node: UnionTypeNode, types: NodeArray<TypeNode>): UnionTypeNode;\n        createIntersectionTypeNode(types: readonly TypeNode[]): IntersectionTypeNode;\n        updateIntersectionTypeNode(node: IntersectionTypeNode, types: NodeArray<TypeNode>): IntersectionTypeNode;\n        createConditionalTypeNode(checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode): ConditionalTypeNode;\n        updateConditionalTypeNode(node: ConditionalTypeNode, checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode): ConditionalTypeNode;\n        createInferTypeNode(typeParameter: TypeParameterDeclaration): InferTypeNode;\n        updateInferTypeNode(node: InferTypeNode, typeParameter: TypeParameterDeclaration): InferTypeNode;\n        createImportTypeNode(argument: TypeNode, assertions?: ImportTypeAssertionContainer, qualifier?: EntityName, typeArguments?: readonly TypeNode[], isTypeOf?: boolean): ImportTypeNode;\n        updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, assertions: ImportTypeAssertionContainer | undefined, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean): ImportTypeNode;\n        createParenthesizedType(type: TypeNode): ParenthesizedTypeNode;\n        updateParenthesizedType(node: ParenthesizedTypeNode, type: TypeNode): ParenthesizedTypeNode;\n        createThisTypeNode(): ThisTypeNode;\n        createTypeOperatorNode(operator: SyntaxKind.KeyOfKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.ReadonlyKeyword, type: TypeNode): TypeOperatorNode;\n        updateTypeOperatorNode(node: TypeOperatorNode, type: TypeNode): TypeOperatorNode;\n        createIndexedAccessTypeNode(objectType: TypeNode, indexType: TypeNode): IndexedAccessTypeNode;\n        updateIndexedAccessTypeNode(node: IndexedAccessTypeNode, objectType: TypeNode, indexType: TypeNode): IndexedAccessTypeNode;\n        createMappedTypeNode(readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined): MappedTypeNode;\n        updateMappedTypeNode(node: MappedTypeNode, readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined): MappedTypeNode;\n        createLiteralTypeNode(literal: LiteralTypeNode[\"literal\"]): LiteralTypeNode;\n        updateLiteralTypeNode(node: LiteralTypeNode, literal: LiteralTypeNode[\"literal\"]): LiteralTypeNode;\n        createTemplateLiteralType(head: TemplateHead, templateSpans: readonly TemplateLiteralTypeSpan[]): TemplateLiteralTypeNode;\n        updateTemplateLiteralType(node: TemplateLiteralTypeNode, head: TemplateHead, templateSpans: readonly TemplateLiteralTypeSpan[]): TemplateLiteralTypeNode;\n        createObjectBindingPattern(elements: readonly BindingElement[]): ObjectBindingPattern;\n        updateObjectBindingPattern(node: ObjectBindingPattern, elements: readonly BindingElement[]): ObjectBindingPattern;\n        createArrayBindingPattern(elements: readonly ArrayBindingElement[]): ArrayBindingPattern;\n        updateArrayBindingPattern(node: ArrayBindingPattern, elements: readonly ArrayBindingElement[]): ArrayBindingPattern;\n        createBindingElement(dotDotDotToken: DotDotDotToken | undefined, propertyName: string | PropertyName | undefined, name: string | BindingName, initializer?: Expression): BindingElement;\n        updateBindingElement(node: BindingElement, dotDotDotToken: DotDotDotToken | undefined, propertyName: PropertyName | undefined, name: BindingName, initializer: Expression | undefined): BindingElement;\n        createArrayLiteralExpression(elements?: readonly Expression[], multiLine?: boolean): ArrayLiteralExpression;\n        updateArrayLiteralExpression(node: ArrayLiteralExpression, elements: readonly Expression[]): ArrayLiteralExpression;\n        createObjectLiteralExpression(properties?: readonly ObjectLiteralElementLike[], multiLine?: boolean): ObjectLiteralExpression;\n        updateObjectLiteralExpression(node: ObjectLiteralExpression, properties: readonly ObjectLiteralElementLike[]): ObjectLiteralExpression;\n        createPropertyAccessExpression(expression: Expression, name: string | MemberName): PropertyAccessExpression;\n        updatePropertyAccessExpression(node: PropertyAccessExpression, expression: Expression, name: MemberName): PropertyAccessExpression;\n        createPropertyAccessChain(expression: Expression, questionDotToken: QuestionDotToken | undefined, name: string | MemberName): PropertyAccessChain;\n        updatePropertyAccessChain(node: PropertyAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, name: MemberName): PropertyAccessChain;\n        createElementAccessExpression(expression: Expression, index: number | Expression): ElementAccessExpression;\n        updateElementAccessExpression(node: ElementAccessExpression, expression: Expression, argumentExpression: Expression): ElementAccessExpression;\n        createElementAccessChain(expression: Expression, questionDotToken: QuestionDotToken | undefined, index: number | Expression): ElementAccessChain;\n        updateElementAccessChain(node: ElementAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, argumentExpression: Expression): ElementAccessChain;\n        createCallExpression(expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): CallExpression;\n        updateCallExpression(node: CallExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]): CallExpression;\n        createCallChain(expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): CallChain;\n        updateCallChain(node: CallChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]): CallChain;\n        createNewExpression(expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): NewExpression;\n        updateNewExpression(node: NewExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): NewExpression;\n        createTaggedTemplateExpression(tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n        updateTaggedTemplateExpression(node: TaggedTemplateExpression, tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n        createTypeAssertion(type: TypeNode, expression: Expression): TypeAssertion;\n        updateTypeAssertion(node: TypeAssertion, type: TypeNode, expression: Expression): TypeAssertion;\n        createParenthesizedExpression(expression: Expression): ParenthesizedExpression;\n        updateParenthesizedExpression(node: ParenthesizedExpression, expression: Expression): ParenthesizedExpression;\n        createFunctionExpression(modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[] | undefined, type: TypeNode | undefined, body: Block): FunctionExpression;\n        updateFunctionExpression(node: FunctionExpression, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block): FunctionExpression;\n        createArrowFunction(modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken | undefined, body: ConciseBody): ArrowFunction;\n        updateArrowFunction(node: ArrowFunction, modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken, body: ConciseBody): ArrowFunction;\n        createDeleteExpression(expression: Expression): DeleteExpression;\n        updateDeleteExpression(node: DeleteExpression, expression: Expression): DeleteExpression;\n        createTypeOfExpression(expression: Expression): TypeOfExpression;\n        updateTypeOfExpression(node: TypeOfExpression, expression: Expression): TypeOfExpression;\n        createVoidExpression(expression: Expression): VoidExpression;\n        updateVoidExpression(node: VoidExpression, expression: Expression): VoidExpression;\n        createAwaitExpression(expression: Expression): AwaitExpression;\n        updateAwaitExpression(node: AwaitExpression, expression: Expression): AwaitExpression;\n        createPrefixUnaryExpression(operator: PrefixUnaryOperator, operand: Expression): PrefixUnaryExpression;\n        updatePrefixUnaryExpression(node: PrefixUnaryExpression, operand: Expression): PrefixUnaryExpression;\n        createPostfixUnaryExpression(operand: Expression, operator: PostfixUnaryOperator): PostfixUnaryExpression;\n        updatePostfixUnaryExpression(node: PostfixUnaryExpression, operand: Expression): PostfixUnaryExpression;\n        createBinaryExpression(left: Expression, operator: BinaryOperator | BinaryOperatorToken, right: Expression): BinaryExpression;\n        updateBinaryExpression(node: BinaryExpression, left: Expression, operator: BinaryOperator | BinaryOperatorToken, right: Expression): BinaryExpression;\n        createConditionalExpression(condition: Expression, questionToken: QuestionToken | undefined, whenTrue: Expression, colonToken: ColonToken | undefined, whenFalse: Expression): ConditionalExpression;\n        updateConditionalExpression(node: ConditionalExpression, condition: Expression, questionToken: QuestionToken, whenTrue: Expression, colonToken: ColonToken, whenFalse: Expression): ConditionalExpression;\n        createTemplateExpression(head: TemplateHead, templateSpans: readonly TemplateSpan[]): TemplateExpression;\n        updateTemplateExpression(node: TemplateExpression, head: TemplateHead, templateSpans: readonly TemplateSpan[]): TemplateExpression;\n        createTemplateHead(text: string, rawText?: string, templateFlags?: TokenFlags): TemplateHead;\n        createTemplateHead(text: string | undefined, rawText: string, templateFlags?: TokenFlags): TemplateHead;\n        createTemplateMiddle(text: string, rawText?: string, templateFlags?: TokenFlags): TemplateMiddle;\n        createTemplateMiddle(text: string | undefined, rawText: string, templateFlags?: TokenFlags): TemplateMiddle;\n        createTemplateTail(text: string, rawText?: string, templateFlags?: TokenFlags): TemplateTail;\n        createTemplateTail(text: string | undefined, rawText: string, templateFlags?: TokenFlags): TemplateTail;\n        createNoSubstitutionTemplateLiteral(text: string, rawText?: string): NoSubstitutionTemplateLiteral;\n        createNoSubstitutionTemplateLiteral(text: string | undefined, rawText: string): NoSubstitutionTemplateLiteral;\n        createYieldExpression(asteriskToken: AsteriskToken, expression: Expression): YieldExpression;\n        createYieldExpression(asteriskToken: undefined, expression: Expression | undefined): YieldExpression;\n        updateYieldExpression(node: YieldExpression, asteriskToken: AsteriskToken | undefined, expression: Expression | undefined): YieldExpression;\n        createSpreadElement(expression: Expression): SpreadElement;\n        updateSpreadElement(node: SpreadElement, expression: Expression): SpreadElement;\n        createClassExpression(modifiers: readonly ModifierLike[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassExpression;\n        updateClassExpression(node: ClassExpression, modifiers: readonly ModifierLike[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassExpression;\n        createOmittedExpression(): OmittedExpression;\n        createExpressionWithTypeArguments(expression: Expression, typeArguments: readonly TypeNode[] | undefined): ExpressionWithTypeArguments;\n        updateExpressionWithTypeArguments(node: ExpressionWithTypeArguments, expression: Expression, typeArguments: readonly TypeNode[] | undefined): ExpressionWithTypeArguments;\n        createAsExpression(expression: Expression, type: TypeNode): AsExpression;\n        updateAsExpression(node: AsExpression, expression: Expression, type: TypeNode): AsExpression;\n        createNonNullExpression(expression: Expression): NonNullExpression;\n        updateNonNullExpression(node: NonNullExpression, expression: Expression): NonNullExpression;\n        createNonNullChain(expression: Expression): NonNullChain;\n        updateNonNullChain(node: NonNullChain, expression: Expression): NonNullChain;\n        createMetaProperty(keywordToken: MetaProperty[\"keywordToken\"], name: Identifier): MetaProperty;\n        updateMetaProperty(node: MetaProperty, name: Identifier): MetaProperty;\n        createTemplateSpan(expression: Expression, literal: TemplateMiddle | TemplateTail): TemplateSpan;\n        updateTemplateSpan(node: TemplateSpan, expression: Expression, literal: TemplateMiddle | TemplateTail): TemplateSpan;\n        createSemicolonClassElement(): SemicolonClassElement;\n        createBlock(statements: readonly Statement[], multiLine?: boolean): Block;\n        updateBlock(node: Block, statements: readonly Statement[]): Block;\n        createVariableStatement(modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList | readonly VariableDeclaration[]): VariableStatement;\n        updateVariableStatement(node: VariableStatement, modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList): VariableStatement;\n        createEmptyStatement(): EmptyStatement;\n        createExpressionStatement(expression: Expression): ExpressionStatement;\n        updateExpressionStatement(node: ExpressionStatement, expression: Expression): ExpressionStatement;\n        createIfStatement(expression: Expression, thenStatement: Statement, elseStatement?: Statement): IfStatement;\n        updateIfStatement(node: IfStatement, expression: Expression, thenStatement: Statement, elseStatement: Statement | undefined): IfStatement;\n        createDoStatement(statement: Statement, expression: Expression): DoStatement;\n        updateDoStatement(node: DoStatement, statement: Statement, expression: Expression): DoStatement;\n        createWhileStatement(expression: Expression, statement: Statement): WhileStatement;\n        updateWhileStatement(node: WhileStatement, expression: Expression, statement: Statement): WhileStatement;\n        createForStatement(initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement): ForStatement;\n        updateForStatement(node: ForStatement, initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement): ForStatement;\n        createForInStatement(initializer: ForInitializer, expression: Expression, statement: Statement): ForInStatement;\n        updateForInStatement(node: ForInStatement, initializer: ForInitializer, expression: Expression, statement: Statement): ForInStatement;\n        createForOfStatement(awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement): ForOfStatement;\n        updateForOfStatement(node: ForOfStatement, awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement): ForOfStatement;\n        createContinueStatement(label?: string | Identifier): ContinueStatement;\n        updateContinueStatement(node: ContinueStatement, label: Identifier | undefined): ContinueStatement;\n        createBreakStatement(label?: string | Identifier): BreakStatement;\n        updateBreakStatement(node: BreakStatement, label: Identifier | undefined): BreakStatement;\n        createReturnStatement(expression?: Expression): ReturnStatement;\n        updateReturnStatement(node: ReturnStatement, expression: Expression | undefined): ReturnStatement;\n        createWithStatement(expression: Expression, statement: Statement): WithStatement;\n        updateWithStatement(node: WithStatement, expression: Expression, statement: Statement): WithStatement;\n        createSwitchStatement(expression: Expression, caseBlock: CaseBlock): SwitchStatement;\n        updateSwitchStatement(node: SwitchStatement, expression: Expression, caseBlock: CaseBlock): SwitchStatement;\n        createLabeledStatement(label: string | Identifier, statement: Statement): LabeledStatement;\n        updateLabeledStatement(node: LabeledStatement, label: Identifier, statement: Statement): LabeledStatement;\n        createThrowStatement(expression: Expression): ThrowStatement;\n        updateThrowStatement(node: ThrowStatement, expression: Expression): ThrowStatement;\n        createTryStatement(tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined): TryStatement;\n        updateTryStatement(node: TryStatement, tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined): TryStatement;\n        createDebuggerStatement(): DebuggerStatement;\n        createVariableDeclaration(name: string | BindingName, exclamationToken?: ExclamationToken, type?: TypeNode, initializer?: Expression): VariableDeclaration;\n        updateVariableDeclaration(node: VariableDeclaration, name: BindingName, exclamationToken: ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n        createVariableDeclarationList(declarations: readonly VariableDeclaration[], flags?: NodeFlags): VariableDeclarationList;\n        updateVariableDeclarationList(node: VariableDeclarationList, declarations: readonly VariableDeclaration[]): VariableDeclarationList;\n        createFunctionDeclaration(modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n        updateFunctionDeclaration(node: FunctionDeclaration, modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n        createClassDeclaration(modifiers: readonly ModifierLike[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n        updateClassDeclaration(node: ClassDeclaration, modifiers: readonly ModifierLike[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n        createInterfaceDeclaration(modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n        updateInterfaceDeclaration(node: InterfaceDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n        createTypeAliasDeclaration(modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n        updateTypeAliasDeclaration(node: TypeAliasDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n        createEnumDeclaration(modifiers: readonly Modifier[] | undefined, name: string | Identifier, members: readonly EnumMember[]): EnumDeclaration;\n        updateEnumDeclaration(node: EnumDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, members: readonly EnumMember[]): EnumDeclaration;\n        createModuleDeclaration(modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined, flags?: NodeFlags): ModuleDeclaration;\n        updateModuleDeclaration(node: ModuleDeclaration, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined): ModuleDeclaration;\n        createModuleBlock(statements: readonly Statement[]): ModuleBlock;\n        updateModuleBlock(node: ModuleBlock, statements: readonly Statement[]): ModuleBlock;\n        createCaseBlock(clauses: readonly CaseOrDefaultClause[]): CaseBlock;\n        updateCaseBlock(node: CaseBlock, clauses: readonly CaseOrDefaultClause[]): CaseBlock;\n        createNamespaceExportDeclaration(name: string | Identifier): NamespaceExportDeclaration;\n        updateNamespaceExportDeclaration(node: NamespaceExportDeclaration, name: Identifier): NamespaceExportDeclaration;\n        createImportEqualsDeclaration(modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: string | Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n        updateImportEqualsDeclaration(node: ImportEqualsDeclaration, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n        createImportDeclaration(modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause?: AssertClause): ImportDeclaration;\n        updateImportDeclaration(node: ImportDeclaration, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause: AssertClause | undefined): ImportDeclaration;\n        createImportClause(isTypeOnly: boolean, name: Identifier | undefined, namedBindings: NamedImportBindings | undefined): ImportClause;\n        updateImportClause(node: ImportClause, isTypeOnly: boolean, name: Identifier | undefined, namedBindings: NamedImportBindings | undefined): ImportClause;\n        createAssertClause(elements: NodeArray<AssertEntry>, multiLine?: boolean): AssertClause;\n        updateAssertClause(node: AssertClause, elements: NodeArray<AssertEntry>, multiLine?: boolean): AssertClause;\n        createAssertEntry(name: AssertionKey, value: Expression): AssertEntry;\n        updateAssertEntry(node: AssertEntry, name: AssertionKey, value: Expression): AssertEntry;\n        createImportTypeAssertionContainer(clause: AssertClause, multiLine?: boolean): ImportTypeAssertionContainer;\n        updateImportTypeAssertionContainer(node: ImportTypeAssertionContainer, clause: AssertClause, multiLine?: boolean): ImportTypeAssertionContainer;\n        createNamespaceImport(name: Identifier): NamespaceImport;\n        updateNamespaceImport(node: NamespaceImport, name: Identifier): NamespaceImport;\n        createNamespaceExport(name: Identifier): NamespaceExport;\n        updateNamespaceExport(node: NamespaceExport, name: Identifier): NamespaceExport;\n        createNamedImports(elements: readonly ImportSpecifier[]): NamedImports;\n        updateNamedImports(node: NamedImports, elements: readonly ImportSpecifier[]): NamedImports;\n        createImportSpecifier(isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier): ImportSpecifier;\n        updateImportSpecifier(node: ImportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier): ImportSpecifier;\n        createExportAssignment(modifiers: readonly Modifier[] | undefined, isExportEquals: boolean | undefined, expression: Expression): ExportAssignment;\n        updateExportAssignment(node: ExportAssignment, modifiers: readonly Modifier[] | undefined, expression: Expression): ExportAssignment;\n        createExportDeclaration(modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, exportClause: NamedExportBindings | undefined, moduleSpecifier?: Expression, assertClause?: AssertClause): ExportDeclaration;\n        updateExportDeclaration(node: ExportDeclaration, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, exportClause: NamedExportBindings | undefined, moduleSpecifier: Expression | undefined, assertClause: AssertClause | undefined): ExportDeclaration;\n        createNamedExports(elements: readonly ExportSpecifier[]): NamedExports;\n        updateNamedExports(node: NamedExports, elements: readonly ExportSpecifier[]): NamedExports;\n        createExportSpecifier(isTypeOnly: boolean, propertyName: string | Identifier | undefined, name: string | Identifier): ExportSpecifier;\n        updateExportSpecifier(node: ExportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier): ExportSpecifier;\n        createExternalModuleReference(expression: Expression): ExternalModuleReference;\n        updateExternalModuleReference(node: ExternalModuleReference, expression: Expression): ExternalModuleReference;\n        createJSDocAllType(): JSDocAllType;\n        createJSDocUnknownType(): JSDocUnknownType;\n        createJSDocNonNullableType(type: TypeNode, postfix?: boolean): JSDocNonNullableType;\n        updateJSDocNonNullableType(node: JSDocNonNullableType, type: TypeNode): JSDocNonNullableType;\n        createJSDocNullableType(type: TypeNode, postfix?: boolean): JSDocNullableType;\n        updateJSDocNullableType(node: JSDocNullableType, type: TypeNode): JSDocNullableType;\n        createJSDocOptionalType(type: TypeNode): JSDocOptionalType;\n        updateJSDocOptionalType(node: JSDocOptionalType, type: TypeNode): JSDocOptionalType;\n        createJSDocFunctionType(parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): JSDocFunctionType;\n        updateJSDocFunctionType(node: JSDocFunctionType, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): JSDocFunctionType;\n        createJSDocVariadicType(type: TypeNode): JSDocVariadicType;\n        updateJSDocVariadicType(node: JSDocVariadicType, type: TypeNode): JSDocVariadicType;\n        createJSDocNamepathType(type: TypeNode): JSDocNamepathType;\n        updateJSDocNamepathType(node: JSDocNamepathType, type: TypeNode): JSDocNamepathType;\n        createJSDocTypeExpression(type: TypeNode): JSDocTypeExpression;\n        updateJSDocTypeExpression(node: JSDocTypeExpression, type: TypeNode): JSDocTypeExpression;\n        createJSDocNameReference(name: EntityName | JSDocMemberName): JSDocNameReference;\n        updateJSDocNameReference(node: JSDocNameReference, name: EntityName | JSDocMemberName): JSDocNameReference;\n        createJSDocMemberName(left: EntityName | JSDocMemberName, right: Identifier): JSDocMemberName;\n        updateJSDocMemberName(node: JSDocMemberName, left: EntityName | JSDocMemberName, right: Identifier): JSDocMemberName;\n        createJSDocLink(name: EntityName | JSDocMemberName | undefined, text: string): JSDocLink;\n        updateJSDocLink(node: JSDocLink, name: EntityName | JSDocMemberName | undefined, text: string): JSDocLink;\n        createJSDocLinkCode(name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkCode;\n        updateJSDocLinkCode(node: JSDocLinkCode, name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkCode;\n        createJSDocLinkPlain(name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkPlain;\n        updateJSDocLinkPlain(node: JSDocLinkPlain, name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkPlain;\n        createJSDocTypeLiteral(jsDocPropertyTags?: readonly JSDocPropertyLikeTag[], isArrayType?: boolean): JSDocTypeLiteral;\n        updateJSDocTypeLiteral(node: JSDocTypeLiteral, jsDocPropertyTags: readonly JSDocPropertyLikeTag[] | undefined, isArrayType: boolean | undefined): JSDocTypeLiteral;\n        createJSDocSignature(typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type?: JSDocReturnTag): JSDocSignature;\n        updateJSDocSignature(node: JSDocSignature, typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type: JSDocReturnTag | undefined): JSDocSignature;\n        createJSDocTemplateTag(tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment?: string | NodeArray<JSDocComment>): JSDocTemplateTag;\n        updateJSDocTemplateTag(node: JSDocTemplateTag, tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment: string | NodeArray<JSDocComment> | undefined): JSDocTemplateTag;\n        createJSDocTypedefTag(tagName: Identifier | undefined, typeExpression?: JSDocTypeExpression | JSDocTypeLiteral, fullName?: Identifier | JSDocNamespaceDeclaration, comment?: string | NodeArray<JSDocComment>): JSDocTypedefTag;\n        updateJSDocTypedefTag(node: JSDocTypedefTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression | JSDocTypeLiteral | undefined, fullName: Identifier | JSDocNamespaceDeclaration | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocTypedefTag;\n        createJSDocParameterTag(tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression, isNameFirst?: boolean, comment?: string | NodeArray<JSDocComment>): JSDocParameterTag;\n        updateJSDocParameterTag(node: JSDocParameterTag, tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression: JSDocTypeExpression | undefined, isNameFirst: boolean, comment: string | NodeArray<JSDocComment> | undefined): JSDocParameterTag;\n        createJSDocPropertyTag(tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression, isNameFirst?: boolean, comment?: string | NodeArray<JSDocComment>): JSDocPropertyTag;\n        updateJSDocPropertyTag(node: JSDocPropertyTag, tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression: JSDocTypeExpression | undefined, isNameFirst: boolean, comment: string | NodeArray<JSDocComment> | undefined): JSDocPropertyTag;\n        createJSDocTypeTag(tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocTypeTag;\n        updateJSDocTypeTag(node: JSDocTypeTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment: string | NodeArray<JSDocComment> | undefined): JSDocTypeTag;\n        createJSDocSeeTag(tagName: Identifier | undefined, nameExpression: JSDocNameReference | undefined, comment?: string | NodeArray<JSDocComment>): JSDocSeeTag;\n        updateJSDocSeeTag(node: JSDocSeeTag, tagName: Identifier | undefined, nameExpression: JSDocNameReference | undefined, comment?: string | NodeArray<JSDocComment>): JSDocSeeTag;\n        createJSDocReturnTag(tagName: Identifier | undefined, typeExpression?: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocReturnTag;\n        updateJSDocReturnTag(node: JSDocReturnTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocReturnTag;\n        createJSDocThisTag(tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocThisTag;\n        updateJSDocThisTag(node: JSDocThisTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocThisTag;\n        createJSDocEnumTag(tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocEnumTag;\n        updateJSDocEnumTag(node: JSDocEnumTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment: string | NodeArray<JSDocComment> | undefined): JSDocEnumTag;\n        createJSDocCallbackTag(tagName: Identifier | undefined, typeExpression: JSDocSignature, fullName?: Identifier | JSDocNamespaceDeclaration, comment?: string | NodeArray<JSDocComment>): JSDocCallbackTag;\n        updateJSDocCallbackTag(node: JSDocCallbackTag, tagName: Identifier | undefined, typeExpression: JSDocSignature, fullName: Identifier | JSDocNamespaceDeclaration | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocCallbackTag;\n        createJSDocAugmentsTag(tagName: Identifier | undefined, className: JSDocAugmentsTag[\"class\"], comment?: string | NodeArray<JSDocComment>): JSDocAugmentsTag;\n        updateJSDocAugmentsTag(node: JSDocAugmentsTag, tagName: Identifier | undefined, className: JSDocAugmentsTag[\"class\"], comment: string | NodeArray<JSDocComment> | undefined): JSDocAugmentsTag;\n        createJSDocImplementsTag(tagName: Identifier | undefined, className: JSDocImplementsTag[\"class\"], comment?: string | NodeArray<JSDocComment>): JSDocImplementsTag;\n        updateJSDocImplementsTag(node: JSDocImplementsTag, tagName: Identifier | undefined, className: JSDocImplementsTag[\"class\"], comment: string | NodeArray<JSDocComment> | undefined): JSDocImplementsTag;\n        createJSDocAuthorTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocAuthorTag;\n        updateJSDocAuthorTag(node: JSDocAuthorTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocAuthorTag;\n        createJSDocClassTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocClassTag;\n        updateJSDocClassTag(node: JSDocClassTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocClassTag;\n        createJSDocPublicTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocPublicTag;\n        updateJSDocPublicTag(node: JSDocPublicTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocPublicTag;\n        createJSDocPrivateTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocPrivateTag;\n        updateJSDocPrivateTag(node: JSDocPrivateTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocPrivateTag;\n        createJSDocProtectedTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocProtectedTag;\n        updateJSDocProtectedTag(node: JSDocProtectedTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocProtectedTag;\n        createJSDocReadonlyTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocReadonlyTag;\n        updateJSDocReadonlyTag(node: JSDocReadonlyTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocReadonlyTag;\n        createJSDocUnknownTag(tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocUnknownTag;\n        updateJSDocUnknownTag(node: JSDocUnknownTag, tagName: Identifier, comment: string | NodeArray<JSDocComment> | undefined): JSDocUnknownTag;\n        createJSDocDeprecatedTag(tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocDeprecatedTag;\n        updateJSDocDeprecatedTag(node: JSDocDeprecatedTag, tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocDeprecatedTag;\n        createJSDocOverrideTag(tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocOverrideTag;\n        updateJSDocOverrideTag(node: JSDocOverrideTag, tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocOverrideTag;\n        createJSDocText(text: string): JSDocText;\n        updateJSDocText(node: JSDocText, text: string): JSDocText;\n        createJSDocComment(comment?: string | NodeArray<JSDocComment> | undefined, tags?: readonly JSDocTag[] | undefined): JSDoc;\n        updateJSDocComment(node: JSDoc, comment: string | NodeArray<JSDocComment> | undefined, tags: readonly JSDocTag[] | undefined): JSDoc;\n        createJsxElement(openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement): JsxElement;\n        updateJsxElement(node: JsxElement, openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement): JsxElement;\n        createJsxSelfClosingElement(tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxSelfClosingElement;\n        updateJsxSelfClosingElement(node: JsxSelfClosingElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxSelfClosingElement;\n        createJsxOpeningElement(tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxOpeningElement;\n        updateJsxOpeningElement(node: JsxOpeningElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxOpeningElement;\n        createJsxClosingElement(tagName: JsxTagNameExpression): JsxClosingElement;\n        updateJsxClosingElement(node: JsxClosingElement, tagName: JsxTagNameExpression): JsxClosingElement;\n        createJsxFragment(openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment): JsxFragment;\n        createJsxText(text: string, containsOnlyTriviaWhiteSpaces?: boolean): JsxText;\n        updateJsxText(node: JsxText, text: string, containsOnlyTriviaWhiteSpaces?: boolean): JsxText;\n        createJsxOpeningFragment(): JsxOpeningFragment;\n        createJsxJsxClosingFragment(): JsxClosingFragment;\n        updateJsxFragment(node: JsxFragment, openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment): JsxFragment;\n        createJsxAttribute(name: Identifier, initializer: JsxAttributeValue | undefined): JsxAttribute;\n        updateJsxAttribute(node: JsxAttribute, name: Identifier, initializer: JsxAttributeValue | undefined): JsxAttribute;\n        createJsxAttributes(properties: readonly JsxAttributeLike[]): JsxAttributes;\n        updateJsxAttributes(node: JsxAttributes, properties: readonly JsxAttributeLike[]): JsxAttributes;\n        createJsxSpreadAttribute(expression: Expression): JsxSpreadAttribute;\n        updateJsxSpreadAttribute(node: JsxSpreadAttribute, expression: Expression): JsxSpreadAttribute;\n        createJsxExpression(dotDotDotToken: DotDotDotToken | undefined, expression: Expression | undefined): JsxExpression;\n        updateJsxExpression(node: JsxExpression, expression: Expression | undefined): JsxExpression;\n        createCaseClause(expression: Expression, statements: readonly Statement[]): CaseClause;\n        updateCaseClause(node: CaseClause, expression: Expression, statements: readonly Statement[]): CaseClause;\n        createDefaultClause(statements: readonly Statement[]): DefaultClause;\n        updateDefaultClause(node: DefaultClause, statements: readonly Statement[]): DefaultClause;\n        createHeritageClause(token: HeritageClause[\"token\"], types: readonly ExpressionWithTypeArguments[]): HeritageClause;\n        updateHeritageClause(node: HeritageClause, types: readonly ExpressionWithTypeArguments[]): HeritageClause;\n        createCatchClause(variableDeclaration: string | BindingName | VariableDeclaration | undefined, block: Block): CatchClause;\n        updateCatchClause(node: CatchClause, variableDeclaration: VariableDeclaration | undefined, block: Block): CatchClause;\n        createPropertyAssignment(name: string | PropertyName, initializer: Expression): PropertyAssignment;\n        updatePropertyAssignment(node: PropertyAssignment, name: PropertyName, initializer: Expression): PropertyAssignment;\n        createShorthandPropertyAssignment(name: string | Identifier, objectAssignmentInitializer?: Expression): ShorthandPropertyAssignment;\n        updateShorthandPropertyAssignment(node: ShorthandPropertyAssignment, name: Identifier, objectAssignmentInitializer: Expression | undefined): ShorthandPropertyAssignment;\n        createSpreadAssignment(expression: Expression): SpreadAssignment;\n        updateSpreadAssignment(node: SpreadAssignment, expression: Expression): SpreadAssignment;\n        createEnumMember(name: string | PropertyName, initializer?: Expression): EnumMember;\n        updateEnumMember(node: EnumMember, name: PropertyName, initializer: Expression | undefined): EnumMember;\n        createSourceFile(statements: readonly Statement[], endOfFileToken: EndOfFileToken, flags: NodeFlags): SourceFile;\n        updateSourceFile(node: SourceFile, statements: readonly Statement[], isDeclarationFile?: boolean, referencedFiles?: readonly FileReference[], typeReferences?: readonly FileReference[], hasNoDefaultLib?: boolean, libReferences?: readonly FileReference[]): SourceFile;\n        createNotEmittedStatement(original: Node): NotEmittedStatement;\n        createPartiallyEmittedExpression(expression: Expression, original?: Node): PartiallyEmittedExpression;\n        updatePartiallyEmittedExpression(node: PartiallyEmittedExpression, expression: Expression): PartiallyEmittedExpression;\n        createCommaListExpression(elements: readonly Expression[]): CommaListExpression;\n        updateCommaListExpression(node: CommaListExpression, elements: readonly Expression[]): CommaListExpression;\n        createBundle(sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[]): Bundle;\n        updateBundle(node: Bundle, sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[]): Bundle;\n        createComma(left: Expression, right: Expression): BinaryExpression;\n        createAssignment(left: ObjectLiteralExpression | ArrayLiteralExpression, right: Expression): DestructuringAssignment;\n        createAssignment(left: Expression, right: Expression): AssignmentExpression<EqualsToken>;\n        createLogicalOr(left: Expression, right: Expression): BinaryExpression;\n        createLogicalAnd(left: Expression, right: Expression): BinaryExpression;\n        createBitwiseOr(left: Expression, right: Expression): BinaryExpression;\n        createBitwiseXor(left: Expression, right: Expression): BinaryExpression;\n        createBitwiseAnd(left: Expression, right: Expression): BinaryExpression;\n        createStrictEquality(left: Expression, right: Expression): BinaryExpression;\n        createStrictInequality(left: Expression, right: Expression): BinaryExpression;\n        createEquality(left: Expression, right: Expression): BinaryExpression;\n        createInequality(left: Expression, right: Expression): BinaryExpression;\n        createLessThan(left: Expression, right: Expression): BinaryExpression;\n        createLessThanEquals(left: Expression, right: Expression): BinaryExpression;\n        createGreaterThan(left: Expression, right: Expression): BinaryExpression;\n        createGreaterThanEquals(left: Expression, right: Expression): BinaryExpression;\n        createLeftShift(left: Expression, right: Expression): BinaryExpression;\n        createRightShift(left: Expression, right: Expression): BinaryExpression;\n        createUnsignedRightShift(left: Expression, right: Expression): BinaryExpression;\n        createAdd(left: Expression, right: Expression): BinaryExpression;\n        createSubtract(left: Expression, right: Expression): BinaryExpression;\n        createMultiply(left: Expression, right: Expression): BinaryExpression;\n        createDivide(left: Expression, right: Expression): BinaryExpression;\n        createModulo(left: Expression, right: Expression): BinaryExpression;\n        createExponent(left: Expression, right: Expression): BinaryExpression;\n        createPrefixPlus(operand: Expression): PrefixUnaryExpression;\n        createPrefixMinus(operand: Expression): PrefixUnaryExpression;\n        createPrefixIncrement(operand: Expression): PrefixUnaryExpression;\n        createPrefixDecrement(operand: Expression): PrefixUnaryExpression;\n        createBitwiseNot(operand: Expression): PrefixUnaryExpression;\n        createLogicalNot(operand: Expression): PrefixUnaryExpression;\n        createPostfixIncrement(operand: Expression): PostfixUnaryExpression;\n        createPostfixDecrement(operand: Expression): PostfixUnaryExpression;\n        createImmediatelyInvokedFunctionExpression(statements: readonly Statement[]): CallExpression;\n        createImmediatelyInvokedFunctionExpression(statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n        createImmediatelyInvokedArrowFunction(statements: readonly Statement[]): CallExpression;\n        createImmediatelyInvokedArrowFunction(statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n        createVoidZero(): VoidExpression;\n        createExportDefault(expression: Expression): ExportAssignment;\n        createExternalModuleExport(exportName: Identifier): ExportDeclaration;\n        restoreOuterExpressions(outerExpression: Expression | undefined, innerExpression: Expression, kinds?: OuterExpressionKinds): Expression;\n    }\n    export interface CoreTransformationContext {\n        readonly factory: NodeFactory;\n        /** Gets the compiler options supplied to the transformer. */\n        getCompilerOptions(): CompilerOptions;\n        /** Starts a new lexical environment. */\n        startLexicalEnvironment(): void;\n        /** Suspends the current lexical environment, usually after visiting a parameter list. */\n        suspendLexicalEnvironment(): void;\n        /** Resumes a suspended lexical environment, usually before visiting a function body. */\n        resumeLexicalEnvironment(): void;\n        /** Ends a lexical environment, returning any declarations. */\n        endLexicalEnvironment(): Statement[] | undefined;\n        /** Hoists a function declaration to the containing scope. */\n        hoistFunctionDeclaration(node: FunctionDeclaration): void;\n        /** Hoists a variable declaration to the containing scope. */\n        hoistVariableDeclaration(node: Identifier): void;\n    }\n    export interface TransformationContext extends CoreTransformationContext {\n        /** Records a request for a non-scoped emit helper in the current context. */\n        requestEmitHelper(helper: EmitHelper): void;\n        /** Gets and resets the requested non-scoped emit helpers. */\n        readEmitHelpers(): EmitHelper[] | undefined;\n        /** Enables expression substitutions in the pretty printer for the provided SyntaxKind. */\n        enableSubstitution(kind: SyntaxKind): void;\n        /** Determines whether expression substitutions are enabled for the provided node. */\n        isSubstitutionEnabled(node: Node): boolean;\n        /**\n         * Hook used by transformers to substitute expressions just before they\n         * are emitted by the pretty printer.\n         *\n         * NOTE: Transformation hooks should only be modified during `Transformer` initialization,\n         * before returning the `NodeTransformer` callback.\n         */\n        onSubstituteNode: (hint: EmitHint, node: Node) => Node;\n        /**\n         * Enables before/after emit notifications in the pretty printer for the provided\n         * SyntaxKind.\n         */\n        enableEmitNotification(kind: SyntaxKind): void;\n        /**\n         * Determines whether before/after emit notifications should be raised in the pretty\n         * printer when it emits a node.\n         */\n        isEmitNotificationEnabled(node: Node): boolean;\n        /**\n         * Hook used to allow transformers to capture state before or after\n         * the printer emits a node.\n         *\n         * NOTE: Transformation hooks should only be modified during `Transformer` initialization,\n         * before returning the `NodeTransformer` callback.\n         */\n        onEmitNode: (hint: EmitHint, node: Node, emitCallback: (hint: EmitHint, node: Node) => void) => void;\n    }\n    export interface TransformationResult<T extends Node> {\n        /** Gets the transformed source files. */\n        transformed: T[];\n        /** Gets diagnostics for the transformation. */\n        diagnostics?: DiagnosticWithLocation[];\n        /**\n         * Gets a substitute for a node, if one is available; otherwise, returns the original node.\n         *\n         * @param hint A hint as to the intended usage of the node.\n         * @param node The node to substitute.\n         */\n        substituteNode(hint: EmitHint, node: Node): Node;\n        /**\n         * Emits a node with possible notification.\n         *\n         * @param hint A hint as to the intended usage of the node.\n         * @param node The node to emit.\n         * @param emitCallback A callback used to emit the node.\n         */\n        emitNodeWithNotification(hint: EmitHint, node: Node, emitCallback: (hint: EmitHint, node: Node) => void): void;\n        /**\n         * Indicates if a given node needs an emit notification\n         *\n         * @param node The node to emit.\n         */\n        isEmitNotificationEnabled?(node: Node): boolean;\n        /**\n         * Clean up EmitNode entries on any parse-tree nodes.\n         */\n        dispose(): void;\n    }\n    /**\n     * A function that is used to initialize and return a `Transformer` callback, which in turn\n     * will be used to transform one or more nodes.\n     */\n    export type TransformerFactory<T extends Node> = (context: TransformationContext) => Transformer<T>;\n    /**\n     * A function that transforms a node.\n     */\n    export type Transformer<T extends Node> = (node: T) => T;\n    /**\n     * A function that accepts and possibly transforms a node.\n     */\n    export type Visitor = (node: Node) => VisitResult<Node>;\n    export interface NodeVisitor {\n        <T extends Node>(nodes: T, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T;\n        <T extends Node>(nodes: T | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T | undefined;\n    }\n    export interface NodesVisitor {\n        <T extends Node>(nodes: NodeArray<T>, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T>;\n        <T extends Node>(nodes: NodeArray<T> | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T> | undefined;\n    }\n    export type VisitResult<T extends Node> = T | T[] | undefined;\n    export interface Printer {\n        /**\n         * Print a node and its subtree as-is, without any emit transformations.\n         * @param hint A value indicating the purpose of a node. This is primarily used to\n         * distinguish between an `Identifier` used in an expression position, versus an\n         * `Identifier` used as an `IdentifierName` as part of a declaration. For most nodes you\n         * should just pass `Unspecified`.\n         * @param node The node to print. The node and its subtree are printed as-is, without any\n         * emit transformations.\n         * @param sourceFile A source file that provides context for the node. The source text of\n         * the file is used to emit the original source content for literals and identifiers, while\n         * the identifiers of the source file are used when generating unique names to avoid\n         * collisions.\n         */\n        printNode(hint: EmitHint, node: Node, sourceFile: SourceFile): string;\n        /**\n         * Prints a list of nodes using the given format flags\n         */\n        printList<T extends Node>(format: ListFormat, list: NodeArray<T>, sourceFile: SourceFile): string;\n        /**\n         * Prints a source file as-is, without any emit transformations.\n         */\n        printFile(sourceFile: SourceFile): string;\n        /**\n         * Prints a bundle of source files as-is, without any emit transformations.\n         */\n        printBundle(bundle: Bundle): string;\n    }\n    export interface PrintHandlers {\n        /**\n         * A hook used by the Printer when generating unique names to avoid collisions with\n         * globally defined names that exist outside of the current source file.\n         */\n        hasGlobalName?(name: string): boolean;\n        /**\n         * A hook used by the Printer to provide notifications prior to emitting a node. A\n         * compatible implementation **must** invoke `emitCallback` with the provided `hint` and\n         * `node` values.\n         * @param hint A hint indicating the intended purpose of the node.\n         * @param node The node to emit.\n         * @param emitCallback A callback that, when invoked, will emit the node.\n         * @example\n         * ```ts\n         * var printer = createPrinter(printerOptions, {\n         *   onEmitNode(hint, node, emitCallback) {\n         *     // set up or track state prior to emitting the node...\n         *     emitCallback(hint, node);\n         *     // restore state after emitting the node...\n         *   }\n         * });\n         * ```\n         */\n        onEmitNode?(hint: EmitHint, node: Node, emitCallback: (hint: EmitHint, node: Node) => void): void;\n        /**\n         * A hook used to check if an emit notification is required for a node.\n         * @param node The node to emit.\n         */\n        isEmitNotificationEnabled?(node: Node): boolean;\n        /**\n         * A hook used by the Printer to perform just-in-time substitution of a node. This is\n         * primarily used by node transformations that need to substitute one node for another,\n         * such as replacing `myExportedVar` with `exports.myExportedVar`.\n         * @param hint A hint indicating the intended purpose of the node.\n         * @param node The node to emit.\n         * @example\n         * ```ts\n         * var printer = createPrinter(printerOptions, {\n         *   substituteNode(hint, node) {\n         *     // perform substitution if necessary...\n         *     return node;\n         *   }\n         * });\n         * ```\n         */\n        substituteNode?(hint: EmitHint, node: Node): Node;\n    }\n    export interface PrinterOptions {\n        removeComments?: boolean;\n        newLine?: NewLineKind;\n        omitTrailingSemicolon?: boolean;\n        noEmitHelpers?: boolean;\n    }\n    export interface GetEffectiveTypeRootsHost {\n        directoryExists?(directoryName: string): boolean;\n        getCurrentDirectory?(): string;\n    }\n    export interface TextSpan {\n        start: number;\n        length: number;\n    }\n    export interface TextChangeRange {\n        span: TextSpan;\n        newLength: number;\n    }\n    export interface SyntaxList extends Node {\n        kind: SyntaxKind.SyntaxList;\n        _children: Node[];\n    }\n    export enum ListFormat {\n        None = 0,\n        SingleLine = 0,\n        MultiLine = 1,\n        PreserveLines = 2,\n        LinesMask = 3,\n        NotDelimited = 0,\n        BarDelimited = 4,\n        AmpersandDelimited = 8,\n        CommaDelimited = 16,\n        AsteriskDelimited = 32,\n        DelimitersMask = 60,\n        AllowTrailingComma = 64,\n        Indented = 128,\n        SpaceBetweenBraces = 256,\n        SpaceBetweenSiblings = 512,\n        Braces = 1024,\n        Parenthesis = 2048,\n        AngleBrackets = 4096,\n        SquareBrackets = 8192,\n        BracketsMask = 15360,\n        OptionalIfUndefined = 16384,\n        OptionalIfEmpty = 32768,\n        Optional = 49152,\n        PreferNewLine = 65536,\n        NoTrailingNewLine = 131072,\n        NoInterveningComments = 262144,\n        NoSpaceIfEmpty = 524288,\n        SingleElement = 1048576,\n        SpaceAfterList = 2097152,\n        Modifiers = 2359808,\n        HeritageClauses = 512,\n        SingleLineTypeLiteralMembers = 768,\n        MultiLineTypeLiteralMembers = 32897,\n        SingleLineTupleTypeElements = 528,\n        MultiLineTupleTypeElements = 657,\n        UnionTypeConstituents = 516,\n        IntersectionTypeConstituents = 520,\n        ObjectBindingPatternElements = 525136,\n        ArrayBindingPatternElements = 524880,\n        ObjectLiteralExpressionProperties = 526226,\n        ImportClauseEntries = 526226,\n        ArrayLiteralExpressionElements = 8914,\n        CommaListElements = 528,\n        CallExpressionArguments = 2576,\n        NewExpressionArguments = 18960,\n        TemplateExpressionSpans = 262144,\n        SingleLineBlockStatements = 768,\n        MultiLineBlockStatements = 129,\n        VariableDeclarationList = 528,\n        SingleLineFunctionBodyStatements = 768,\n        MultiLineFunctionBodyStatements = 1,\n        ClassHeritageClauses = 0,\n        ClassMembers = 129,\n        InterfaceMembers = 129,\n        EnumMembers = 145,\n        CaseBlockClauses = 129,\n        NamedImportsOrExportsElements = 525136,\n        JsxElementOrFragmentChildren = 262144,\n        JsxElementAttributes = 262656,\n        CaseOrDefaultClauseStatements = 163969,\n        HeritageClauseTypes = 528,\n        SourceFileStatements = 131073,\n        Decorators = 2146305,\n        TypeArguments = 53776,\n        TypeParameters = 53776,\n        Parameters = 2576,\n        IndexSignatureParameters = 8848,\n        JSDocComment = 33\n    }\n    export interface UserPreferences {\n        readonly disableSuggestions?: boolean;\n        readonly quotePreference?: \"auto\" | \"double\" | \"single\";\n        readonly includeCompletionsForModuleExports?: boolean;\n        readonly includeCompletionsForImportStatements?: boolean;\n        readonly includeCompletionsWithSnippetText?: boolean;\n        readonly includeAutomaticOptionalChainCompletions?: boolean;\n        readonly includeCompletionsWithInsertText?: boolean;\n        readonly includeCompletionsWithClassMemberSnippets?: boolean;\n        readonly includeCompletionsWithObjectLiteralMethodSnippets?: boolean;\n        readonly useLabelDetailsInCompletionEntries?: boolean;\n        readonly allowIncompleteCompletions?: boolean;\n        readonly importModuleSpecifierPreference?: \"shortest\" | \"project-relative\" | \"relative\" | \"non-relative\";\n        /** Determines whether we import `foo/index.ts` as \"foo\", \"foo/index\", or \"foo/index.js\" */\n        readonly importModuleSpecifierEnding?: \"auto\" | \"minimal\" | \"index\" | \"js\";\n        readonly allowTextChangesInNewFiles?: boolean;\n        readonly providePrefixAndSuffixTextForRename?: boolean;\n        readonly includePackageJsonAutoImports?: \"auto\" | \"on\" | \"off\";\n        readonly provideRefactorNotApplicableReason?: boolean;\n        readonly jsxAttributeCompletionStyle?: \"auto\" | \"braces\" | \"none\";\n        readonly includeInlayParameterNameHints?: \"none\" | \"literals\" | \"all\";\n        readonly includeInlayParameterNameHintsWhenArgumentMatchesName?: boolean;\n        readonly includeInlayFunctionParameterTypeHints?: boolean;\n        readonly includeInlayVariableTypeHints?: boolean;\n        readonly includeInlayVariableTypeHintsWhenTypeMatchesName?: boolean;\n        readonly includeInlayPropertyDeclarationTypeHints?: boolean;\n        readonly includeInlayFunctionLikeReturnTypeHints?: boolean;\n        readonly includeInlayEnumMemberValueHints?: boolean;\n        readonly allowRenameOfImportPath?: boolean;\n        readonly autoImportFileExcludePatterns?: string[];\n    }\n    /** Represents a bigint literal value without requiring bigint support */\n    export interface PseudoBigInt {\n        negative: boolean;\n        base10Value: string;\n    }\n    export {};\n}\ndeclare function setTimeout(handler: (...args: any[]) => void, timeout: number): any;\ndeclare function clearTimeout(handle: any): void;\ndeclare namespace ts {\n    export enum FileWatcherEventKind {\n        Created = 0,\n        Changed = 1,\n        Deleted = 2\n    }\n    export type FileWatcherCallback = (fileName: string, eventKind: FileWatcherEventKind, modifiedTime?: Date) => void;\n    export type DirectoryWatcherCallback = (fileName: string) => void;\n    export interface System {\n        args: string[];\n        newLine: string;\n        useCaseSensitiveFileNames: boolean;\n        write(s: string): void;\n        writeOutputIsTTY?(): boolean;\n        getWidthOfTerminal?(): number;\n        readFile(path: string, encoding?: string): string | undefined;\n        getFileSize?(path: string): number;\n        writeFile(path: string, data: string, writeByteOrderMark?: boolean): void;\n        /**\n         * @pollingInterval - this parameter is used in polling-based watchers and ignored in watchers that\n         * use native OS file watching\n         */\n        watchFile?(path: string, callback: FileWatcherCallback, pollingInterval?: number, options?: WatchOptions): FileWatcher;\n        watchDirectory?(path: string, callback: DirectoryWatcherCallback, recursive?: boolean, options?: WatchOptions): FileWatcher;\n        resolvePath(path: string): string;\n        fileExists(path: string): boolean;\n        directoryExists(path: string): boolean;\n        createDirectory(path: string): void;\n        getExecutingFilePath(): string;\n        getCurrentDirectory(): string;\n        getDirectories(path: string): string[];\n        readDirectory(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n        getModifiedTime?(path: string): Date | undefined;\n        setModifiedTime?(path: string, time: Date): void;\n        deleteFile?(path: string): void;\n        /**\n         * A good implementation is node.js' `crypto.createHash`. (https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm)\n         */\n        createHash?(data: string): string;\n        /** This must be cryptographically secure. Only implement this method using `crypto.createHash(\"sha256\")`. */\n        createSHA256Hash?(data: string): string;\n        getMemoryUsage?(): number;\n        exit(exitCode?: number): void;\n        realpath?(path: string): string;\n        setTimeout?(callback: (...args: any[]) => void, ms: number, ...args: any[]): any;\n        clearTimeout?(timeoutId: any): void;\n        clearScreen?(): void;\n        base64decode?(input: string): string;\n        base64encode?(input: string): string;\n    }\n    export interface FileWatcher {\n        close(): void;\n    }\n    export function getNodeMajorVersion(): number | undefined;\n    export let sys: System;\n    export {};\n}\ndeclare namespace ts {\n    type ErrorCallback = (message: DiagnosticMessage, length: number) => void;\n    interface Scanner {\n        getStartPos(): number;\n        getToken(): SyntaxKind;\n        getTextPos(): number;\n        getTokenPos(): number;\n        getTokenText(): string;\n        getTokenValue(): string;\n        hasUnicodeEscape(): boolean;\n        hasExtendedUnicodeEscape(): boolean;\n        hasPrecedingLineBreak(): boolean;\n        isIdentifier(): boolean;\n        isReservedWord(): boolean;\n        isUnterminated(): boolean;\n        reScanGreaterToken(): SyntaxKind;\n        reScanSlashToken(): SyntaxKind;\n        reScanAsteriskEqualsToken(): SyntaxKind;\n        reScanTemplateToken(isTaggedTemplate: boolean): SyntaxKind;\n        reScanTemplateHeadOrNoSubstitutionTemplate(): SyntaxKind;\n        scanJsxIdentifier(): SyntaxKind;\n        scanJsxAttributeValue(): SyntaxKind;\n        reScanJsxAttributeValue(): SyntaxKind;\n        reScanJsxToken(allowMultilineJsxText?: boolean): JsxTokenSyntaxKind;\n        reScanLessThanToken(): SyntaxKind;\n        reScanHashToken(): SyntaxKind;\n        reScanQuestionToken(): SyntaxKind;\n        reScanInvalidIdentifier(): SyntaxKind;\n        scanJsxToken(): JsxTokenSyntaxKind;\n        scanJsDocToken(): JSDocSyntaxKind;\n        scan(): SyntaxKind;\n        getText(): string;\n        setText(text: string | undefined, start?: number, length?: number): void;\n        setOnError(onError: ErrorCallback | undefined): void;\n        setScriptTarget(scriptTarget: ScriptTarget): void;\n        setLanguageVariant(variant: LanguageVariant): void;\n        setTextPos(textPos: number): void;\n        lookAhead<T>(callback: () => T): T;\n        scanRange<T>(start: number, length: number, callback: () => T): T;\n        tryScan<T>(callback: () => T): T;\n    }\n    function tokenToString(t: SyntaxKind): string | undefined;\n    function getPositionOfLineAndCharacter(sourceFile: SourceFileLike, line: number, character: number): number;\n    function getLineAndCharacterOfPosition(sourceFile: SourceFileLike, position: number): LineAndCharacter;\n    function isWhiteSpaceLike(ch: number): boolean;\n    /** Does not include line breaks. For that, see isWhiteSpaceLike. */\n    function isWhiteSpaceSingleLine(ch: number): boolean;\n    function isLineBreak(ch: number): boolean;\n    function couldStartTrivia(text: string, pos: number): boolean;\n    function forEachLeadingCommentRange<U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean) => U): U | undefined;\n    function forEachLeadingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T): U | undefined;\n    function forEachTrailingCommentRange<U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean) => U): U | undefined;\n    function forEachTrailingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T): U | undefined;\n    function reduceEachLeadingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T, memo: U) => U, state: T, initial: U): U | undefined;\n    function reduceEachTrailingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T, memo: U) => U, state: T, initial: U): U | undefined;\n    function getLeadingCommentRanges(text: string, pos: number): CommentRange[] | undefined;\n    function getTrailingCommentRanges(text: string, pos: number): CommentRange[] | undefined;\n    /** Optionally, get the shebang */\n    function getShebang(text: string): string | undefined;\n    function isIdentifierStart(ch: number, languageVersion: ScriptTarget | undefined): boolean;\n    function isIdentifierPart(ch: number, languageVersion: ScriptTarget | undefined, identifierVariant?: LanguageVariant): boolean;\n    function createScanner(languageVersion: ScriptTarget, skipTrivia: boolean, languageVariant?: LanguageVariant, textInitial?: string, onError?: ErrorCallback, start?: number, length?: number): Scanner;\n}\ndeclare namespace ts {\n    function isExternalModuleNameRelative(moduleName: string): boolean;\n    function sortAndDeduplicateDiagnostics<T extends Diagnostic>(diagnostics: readonly T[]): SortedReadonlyArray<T>;\n    function getDefaultLibFileName(options: CompilerOptions): string;\n    function textSpanEnd(span: TextSpan): number;\n    function textSpanIsEmpty(span: TextSpan): boolean;\n    function textSpanContainsPosition(span: TextSpan, position: number): boolean;\n    function textSpanContainsTextSpan(span: TextSpan, other: TextSpan): boolean;\n    function textSpanOverlapsWith(span: TextSpan, other: TextSpan): boolean;\n    function textSpanOverlap(span1: TextSpan, span2: TextSpan): TextSpan | undefined;\n    function textSpanIntersectsWithTextSpan(span: TextSpan, other: TextSpan): boolean;\n    function textSpanIntersectsWith(span: TextSpan, start: number, length: number): boolean;\n    function decodedTextSpanIntersectsWith(start1: number, length1: number, start2: number, length2: number): boolean;\n    function textSpanIntersectsWithPosition(span: TextSpan, position: number): boolean;\n    function textSpanIntersection(span1: TextSpan, span2: TextSpan): TextSpan | undefined;\n    function createTextSpan(start: number, length: number): TextSpan;\n    function createTextSpanFromBounds(start: number, end: number): TextSpan;\n    function textChangeRangeNewSpan(range: TextChangeRange): TextSpan;\n    function textChangeRangeIsUnchanged(range: TextChangeRange): boolean;\n    function createTextChangeRange(span: TextSpan, newLength: number): TextChangeRange;\n    let unchangedTextChangeRange: TextChangeRange;\n    /**\n     * Called to merge all the changes that occurred across several versions of a script snapshot\n     * into a single change.  i.e. if a user keeps making successive edits to a script we will\n     * have a text change from V1 to V2, V2 to V3, ..., Vn.\n     *\n     * This function will then merge those changes into a single change range valid between V1 and\n     * Vn.\n     */\n    function collapseTextChangeRangesAcrossMultipleVersions(changes: readonly TextChangeRange[]): TextChangeRange;\n    function getTypeParameterOwner(d: Declaration): Declaration | undefined;\n    type ParameterPropertyDeclaration = ParameterDeclaration & {\n        parent: ConstructorDeclaration;\n        name: Identifier;\n    };\n    function isParameterPropertyDeclaration(node: Node, parent: Node): node is ParameterPropertyDeclaration;\n    function isEmptyBindingPattern(node: BindingName): node is BindingPattern;\n    function isEmptyBindingElement(node: BindingElement): boolean;\n    function walkUpBindingElementsAndPatterns(binding: BindingElement): VariableDeclaration | ParameterDeclaration;\n    function getCombinedModifierFlags(node: Declaration): ModifierFlags;\n    function getCombinedNodeFlags(node: Node): NodeFlags;\n    /**\n     * Checks to see if the locale is in the appropriate format,\n     * and if it is, attempts to set the appropriate language.\n     */\n    function validateLocaleAndSetLanguage(locale: string, sys: {\n        getExecutingFilePath(): string;\n        resolvePath(path: string): string;\n        fileExists(fileName: string): boolean;\n        readFile(fileName: string): string | undefined;\n    }, errors?: Push<Diagnostic>): void;\n    function getOriginalNode(node: Node): Node;\n    function getOriginalNode<T extends Node>(node: Node, nodeTest: (node: Node) => node is T): T;\n    function getOriginalNode(node: Node | undefined): Node | undefined;\n    function getOriginalNode<T extends Node>(node: Node | undefined, nodeTest: (node: Node | undefined) => node is T): T | undefined;\n    /**\n     * Iterates through the parent chain of a node and performs the callback on each parent until the callback\n     * returns a truthy value, then returns that value.\n     * If no such value is found, it applies the callback until the parent pointer is undefined or the callback returns \"quit\"\n     * At that point findAncestor returns undefined.\n     */\n    function findAncestor<T extends Node>(node: Node | undefined, callback: (element: Node) => element is T): T | undefined;\n    function findAncestor(node: Node | undefined, callback: (element: Node) => boolean | \"quit\"): Node | undefined;\n    /**\n     * Gets a value indicating whether a node originated in the parse tree.\n     *\n     * @param node The node to test.\n     */\n    function isParseTreeNode(node: Node): boolean;\n    /**\n     * Gets the original parse tree node for a node.\n     *\n     * @param node The original node.\n     * @returns The original parse tree node if found; otherwise, undefined.\n     */\n    function getParseTreeNode(node: Node | undefined): Node | undefined;\n    /**\n     * Gets the original parse tree node for a node.\n     *\n     * @param node The original node.\n     * @param nodeTest A callback used to ensure the correct type of parse tree node is returned.\n     * @returns The original parse tree node if found; otherwise, undefined.\n     */\n    function getParseTreeNode<T extends Node>(node: T | undefined, nodeTest?: (node: Node) => node is T): T | undefined;\n    /** Add an extra underscore to identifiers that start with two underscores to avoid issues with magic names like '__proto__' */\n    function escapeLeadingUnderscores(identifier: string): __String;\n    /**\n     * Remove extra underscore from escaped identifier text content.\n     *\n     * @param identifier The escaped identifier text.\n     * @returns The unescaped identifier text.\n     */\n    function unescapeLeadingUnderscores(identifier: __String): string;\n    function idText(identifierOrPrivateName: Identifier | PrivateIdentifier): string;\n    function symbolName(symbol: Symbol): string;\n    function getNameOfJSDocTypedef(declaration: JSDocTypedefTag): Identifier | PrivateIdentifier | undefined;\n    function getNameOfDeclaration(declaration: Declaration | Expression | undefined): DeclarationName | undefined;\n    function getDecorators(node: HasDecorators): readonly Decorator[] | undefined;\n    function getModifiers(node: HasModifiers): readonly Modifier[] | undefined;\n    /**\n     * Gets the JSDoc parameter tags for the node if present.\n     *\n     * @remarks Returns any JSDoc param tag whose name matches the provided\n     * parameter, whether a param tag on a containing function\n     * expression, or a param tag on a variable declaration whose\n     * initializer is the containing function. The tags closest to the\n     * node are returned first, so in the previous example, the param\n     * tag on the containing function expression would be first.\n     *\n     * For binding patterns, parameter tags are matched by position.\n     */\n    function getJSDocParameterTags(param: ParameterDeclaration): readonly JSDocParameterTag[];\n    /**\n     * Gets the JSDoc type parameter tags for the node if present.\n     *\n     * @remarks Returns any JSDoc template tag whose names match the provided\n     * parameter, whether a template tag on a containing function\n     * expression, or a template tag on a variable declaration whose\n     * initializer is the containing function. The tags closest to the\n     * node are returned first, so in the previous example, the template\n     * tag on the containing function expression would be first.\n     */\n    function getJSDocTypeParameterTags(param: TypeParameterDeclaration): readonly JSDocTemplateTag[];\n    /**\n     * Return true if the node has JSDoc parameter tags.\n     *\n     * @remarks Includes parameter tags that are not directly on the node,\n     * for example on a variable declaration whose initializer is a function expression.\n     */\n    function hasJSDocParameterTags(node: FunctionLikeDeclaration | SignatureDeclaration): boolean;\n    /** Gets the JSDoc augments tag for the node if present */\n    function getJSDocAugmentsTag(node: Node): JSDocAugmentsTag | undefined;\n    /** Gets the JSDoc implements tags for the node if present */\n    function getJSDocImplementsTags(node: Node): readonly JSDocImplementsTag[];\n    /** Gets the JSDoc class tag for the node if present */\n    function getJSDocClassTag(node: Node): JSDocClassTag | undefined;\n    /** Gets the JSDoc public tag for the node if present */\n    function getJSDocPublicTag(node: Node): JSDocPublicTag | undefined;\n    /** Gets the JSDoc private tag for the node if present */\n    function getJSDocPrivateTag(node: Node): JSDocPrivateTag | undefined;\n    /** Gets the JSDoc protected tag for the node if present */\n    function getJSDocProtectedTag(node: Node): JSDocProtectedTag | undefined;\n    /** Gets the JSDoc protected tag for the node if present */\n    function getJSDocReadonlyTag(node: Node): JSDocReadonlyTag | undefined;\n    function getJSDocOverrideTagNoCache(node: Node): JSDocOverrideTag | undefined;\n    /** Gets the JSDoc deprecated tag for the node if present */\n    function getJSDocDeprecatedTag(node: Node): JSDocDeprecatedTag | undefined;\n    /** Gets the JSDoc enum tag for the node if present */\n    function getJSDocEnumTag(node: Node): JSDocEnumTag | undefined;\n    /** Gets the JSDoc this tag for the node if present */\n    function getJSDocThisTag(node: Node): JSDocThisTag | undefined;\n    /** Gets the JSDoc return tag for the node if present */\n    function getJSDocReturnTag(node: Node): JSDocReturnTag | undefined;\n    /** Gets the JSDoc template tag for the node if present */\n    function getJSDocTemplateTag(node: Node): JSDocTemplateTag | undefined;\n    /** Gets the JSDoc type tag for the node if present and valid */\n    function getJSDocTypeTag(node: Node): JSDocTypeTag | undefined;\n    /**\n     * Gets the type node for the node if provided via JSDoc.\n     *\n     * @remarks The search includes any JSDoc param tag that relates\n     * to the provided parameter, for example a type tag on the\n     * parameter itself, or a param tag on a containing function\n     * expression, or a param tag on a variable declaration whose\n     * initializer is the containing function. The tags closest to the\n     * node are examined first, so in the previous example, the type\n     * tag directly on the node would be returned.\n     */\n    function getJSDocType(node: Node): TypeNode | undefined;\n    /**\n     * Gets the return type node for the node if provided via JSDoc return tag or type tag.\n     *\n     * @remarks `getJSDocReturnTag` just gets the whole JSDoc tag. This function\n     * gets the type from inside the braces, after the fat arrow, etc.\n     */\n    function getJSDocReturnType(node: Node): TypeNode | undefined;\n    /** Get all JSDoc tags related to a node, including those on parent nodes. */\n    function getJSDocTags(node: Node): readonly JSDocTag[];\n    /** Gets all JSDoc tags that match a specified predicate */\n    function getAllJSDocTags<T extends JSDocTag>(node: Node, predicate: (tag: JSDocTag) => tag is T): readonly T[];\n    /** Gets all JSDoc tags of a specified kind */\n    function getAllJSDocTagsOfKind(node: Node, kind: SyntaxKind): readonly JSDocTag[];\n    /** Gets the text of a jsdoc comment, flattening links to their text. */\n    function getTextOfJSDocComment(comment?: string | NodeArray<JSDocComment>): string | undefined;\n    /**\n     * Gets the effective type parameters. If the node was parsed in a\n     * JavaScript file, gets the type parameters from the `@template` tag from JSDoc.\n     *\n     * This does *not* return type parameters from a jsdoc reference to a generic type, eg\n     *\n     * type Id = <T>(x: T) => T\n     * /** @type {Id} /\n     * function id(x) { return x }\n     */\n    function getEffectiveTypeParameterDeclarations(node: DeclarationWithTypeParameters): readonly TypeParameterDeclaration[];\n    function getEffectiveConstraintOfTypeParameter(node: TypeParameterDeclaration): TypeNode | undefined;\n    function isMemberName(node: Node): node is MemberName;\n    function isPropertyAccessChain(node: Node): node is PropertyAccessChain;\n    function isElementAccessChain(node: Node): node is ElementAccessChain;\n    function isCallChain(node: Node): node is CallChain;\n    function isOptionalChain(node: Node): node is PropertyAccessChain | ElementAccessChain | CallChain | NonNullChain;\n    function isNullishCoalesce(node: Node): boolean;\n    function isConstTypeReference(node: Node): boolean;\n    function skipPartiallyEmittedExpressions(node: Expression): Expression;\n    function skipPartiallyEmittedExpressions(node: Node): Node;\n    function isNonNullChain(node: Node): node is NonNullChain;\n    function isBreakOrContinueStatement(node: Node): node is BreakOrContinueStatement;\n    function isNamedExportBindings(node: Node): node is NamedExportBindings;\n    function isUnparsedTextLike(node: Node): node is UnparsedTextLike;\n    function isUnparsedNode(node: Node): node is UnparsedNode;\n    function isJSDocPropertyLikeTag(node: Node): node is JSDocPropertyLikeTag;\n    /**\n     * True if kind is of some token syntax kind.\n     * For example, this is true for an IfKeyword but not for an IfStatement.\n     * Literals are considered tokens, except TemplateLiteral, but does include TemplateHead/Middle/Tail.\n     */\n    function isTokenKind(kind: SyntaxKind): boolean;\n    /**\n     * True if node is of some token syntax kind.\n     * For example, this is true for an IfKeyword but not for an IfStatement.\n     * Literals are considered tokens, except TemplateLiteral, but does include TemplateHead/Middle/Tail.\n     */\n    function isToken(n: Node): boolean;\n    function isLiteralExpression(node: Node): node is LiteralExpression;\n    function isTemplateLiteralToken(node: Node): node is TemplateLiteralToken;\n    function isTemplateMiddleOrTemplateTail(node: Node): node is TemplateMiddle | TemplateTail;\n    function isImportOrExportSpecifier(node: Node): node is ImportSpecifier | ExportSpecifier;\n    function isTypeOnlyImportOrExportDeclaration(node: Node): node is TypeOnlyAliasDeclaration;\n    function isAssertionKey(node: Node): node is AssertionKey;\n    function isStringTextContainingNode(node: Node): node is StringLiteral | TemplateLiteralToken;\n    function isModifier(node: Node): node is Modifier;\n    function isEntityName(node: Node): node is EntityName;\n    function isPropertyName(node: Node): node is PropertyName;\n    function isBindingName(node: Node): node is BindingName;\n    function isFunctionLike(node: Node | undefined): node is SignatureDeclaration;\n    function isClassElement(node: Node): node is ClassElement;\n    function isClassLike(node: Node): node is ClassLikeDeclaration;\n    function isAccessor(node: Node): node is AccessorDeclaration;\n    function isModifierLike(node: Node): node is ModifierLike;\n    function isTypeElement(node: Node): node is TypeElement;\n    function isClassOrTypeElement(node: Node): node is ClassElement | TypeElement;\n    function isObjectLiteralElementLike(node: Node): node is ObjectLiteralElementLike;\n    /**\n     * Node test that determines whether a node is a valid type node.\n     * This differs from the `isPartOfTypeNode` function which determines whether a node is *part*\n     * of a TypeNode.\n     */\n    function isTypeNode(node: Node): node is TypeNode;\n    function isFunctionOrConstructorTypeNode(node: Node): node is FunctionTypeNode | ConstructorTypeNode;\n    function isPropertyAccessOrQualifiedName(node: Node): node is PropertyAccessExpression | QualifiedName;\n    function isCallLikeExpression(node: Node): node is CallLikeExpression;\n    function isCallOrNewExpression(node: Node): node is CallExpression | NewExpression;\n    function isTemplateLiteral(node: Node): node is TemplateLiteral;\n    function isAssertionExpression(node: Node): node is AssertionExpression;\n    function isIterationStatement(node: Node, lookInLabeledStatements: false): node is IterationStatement;\n    function isIterationStatement(node: Node, lookInLabeledStatements: boolean): node is IterationStatement | LabeledStatement;\n    function isJsxOpeningLikeElement(node: Node): node is JsxOpeningLikeElement;\n    function isCaseOrDefaultClause(node: Node): node is CaseOrDefaultClause;\n    /** True if node is of a kind that may contain comment text. */\n    function isJSDocCommentContainingNode(node: Node): boolean;\n    function isSetAccessor(node: Node): node is SetAccessorDeclaration;\n    function isGetAccessor(node: Node): node is GetAccessorDeclaration;\n    /** True if has initializer node attached to it. */\n    function hasOnlyExpressionInitializer(node: Node): node is HasExpressionInitializer;\n    function isObjectLiteralElement(node: Node): node is ObjectLiteralElement;\n    function isStringLiteralLike(node: Node): node is StringLiteralLike;\n    function isJSDocLinkLike(node: Node): node is JSDocLink | JSDocLinkCode | JSDocLinkPlain;\n    function hasRestParameter(s: SignatureDeclaration | JSDocSignature): boolean;\n    function isRestParameter(node: ParameterDeclaration | JSDocParameterTag): boolean;\n}\ndeclare namespace ts {\n    const factory: NodeFactory;\n    function createUnparsedSourceFile(text: string): UnparsedSource;\n    function createUnparsedSourceFile(inputFile: InputFiles, type: \"js\" | \"dts\", stripInternal?: boolean): UnparsedSource;\n    function createUnparsedSourceFile(text: string, mapPath: string | undefined, map: string | undefined): UnparsedSource;\n    function createInputFiles(javascriptText: string, declarationText: string): InputFiles;\n    function createInputFiles(readFileText: (path: string) => string | undefined, javascriptPath: string, javascriptMapPath: string | undefined, declarationPath: string, declarationMapPath: string | undefined, buildInfoPath: string | undefined): InputFiles;\n    function createInputFiles(javascriptText: string, declarationText: string, javascriptMapPath: string | undefined, javascriptMapText: string | undefined, declarationMapPath: string | undefined, declarationMapText: string | undefined): InputFiles;\n    /**\n     * Create an external source map source file reference\n     */\n    function createSourceMapSource(fileName: string, text: string, skipTrivia?: (pos: number) => number): SourceMapSource;\n    function setOriginalNode<T extends Node>(node: T, original: Node | undefined): T;\n}\ndeclare namespace ts {\n    /**\n     * Clears any `EmitNode` entries from parse-tree nodes.\n     * @param sourceFile A source file.\n     */\n    function disposeEmitNodes(sourceFile: SourceFile | undefined): void;\n    /**\n     * Sets flags that control emit behavior of a node.\n     */\n    function setEmitFlags<T extends Node>(node: T, emitFlags: EmitFlags): T;\n    /**\n     * Gets a custom text range to use when emitting source maps.\n     */\n    function getSourceMapRange(node: Node): SourceMapRange;\n    /**\n     * Sets a custom text range to use when emitting source maps.\n     */\n    function setSourceMapRange<T extends Node>(node: T, range: SourceMapRange | undefined): T;\n    /**\n     * Gets the TextRange to use for source maps for a token of a node.\n     */\n    function getTokenSourceMapRange(node: Node, token: SyntaxKind): SourceMapRange | undefined;\n    /**\n     * Sets the TextRange to use for source maps for a token of a node.\n     */\n    function setTokenSourceMapRange<T extends Node>(node: T, token: SyntaxKind, range: SourceMapRange | undefined): T;\n    /**\n     * Gets a custom text range to use when emitting comments.\n     */\n    function getCommentRange(node: Node): TextRange;\n    /**\n     * Sets a custom text range to use when emitting comments.\n     */\n    function setCommentRange<T extends Node>(node: T, range: TextRange): T;\n    function getSyntheticLeadingComments(node: Node): SynthesizedComment[] | undefined;\n    function setSyntheticLeadingComments<T extends Node>(node: T, comments: SynthesizedComment[] | undefined): T;\n    function addSyntheticLeadingComment<T extends Node>(node: T, kind: SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia, text: string, hasTrailingNewLine?: boolean): T;\n    function getSyntheticTrailingComments(node: Node): SynthesizedComment[] | undefined;\n    function setSyntheticTrailingComments<T extends Node>(node: T, comments: SynthesizedComment[] | undefined): T;\n    function addSyntheticTrailingComment<T extends Node>(node: T, kind: SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia, text: string, hasTrailingNewLine?: boolean): T;\n    function moveSyntheticComments<T extends Node>(node: T, original: Node): T;\n    /**\n     * Gets the constant value to emit for an expression representing an enum.\n     */\n    function getConstantValue(node: AccessExpression): string | number | undefined;\n    /**\n     * Sets the constant value to emit for an expression.\n     */\n    function setConstantValue(node: AccessExpression, value: string | number): AccessExpression;\n    /**\n     * Adds an EmitHelper to a node.\n     */\n    function addEmitHelper<T extends Node>(node: T, helper: EmitHelper): T;\n    /**\n     * Add EmitHelpers to a node.\n     */\n    function addEmitHelpers<T extends Node>(node: T, helpers: EmitHelper[] | undefined): T;\n    /**\n     * Removes an EmitHelper from a node.\n     */\n    function removeEmitHelper(node: Node, helper: EmitHelper): boolean;\n    /**\n     * Gets the EmitHelpers of a node.\n     */\n    function getEmitHelpers(node: Node): EmitHelper[] | undefined;\n    /**\n     * Moves matching emit helpers from a source node to a target node.\n     */\n    function moveEmitHelpers(source: Node, target: Node, predicate: (helper: EmitHelper) => boolean): void;\n}\ndeclare namespace ts {\n    function isNumericLiteral(node: Node): node is NumericLiteral;\n    function isBigIntLiteral(node: Node): node is BigIntLiteral;\n    function isStringLiteral(node: Node): node is StringLiteral;\n    function isJsxText(node: Node): node is JsxText;\n    function isRegularExpressionLiteral(node: Node): node is RegularExpressionLiteral;\n    function isNoSubstitutionTemplateLiteral(node: Node): node is NoSubstitutionTemplateLiteral;\n    function isTemplateHead(node: Node): node is TemplateHead;\n    function isTemplateMiddle(node: Node): node is TemplateMiddle;\n    function isTemplateTail(node: Node): node is TemplateTail;\n    function isDotDotDotToken(node: Node): node is DotDotDotToken;\n    function isPlusToken(node: Node): node is PlusToken;\n    function isMinusToken(node: Node): node is MinusToken;\n    function isAsteriskToken(node: Node): node is AsteriskToken;\n    function isIdentifier(node: Node): node is Identifier;\n    function isPrivateIdentifier(node: Node): node is PrivateIdentifier;\n    function isQualifiedName(node: Node): node is QualifiedName;\n    function isComputedPropertyName(node: Node): node is ComputedPropertyName;\n    function isTypeParameterDeclaration(node: Node): node is TypeParameterDeclaration;\n    function isParameter(node: Node): node is ParameterDeclaration;\n    function isDecorator(node: Node): node is Decorator;\n    function isPropertySignature(node: Node): node is PropertySignature;\n    function isPropertyDeclaration(node: Node): node is PropertyDeclaration;\n    function isMethodSignature(node: Node): node is MethodSignature;\n    function isMethodDeclaration(node: Node): node is MethodDeclaration;\n    function isClassStaticBlockDeclaration(node: Node): node is ClassStaticBlockDeclaration;\n    function isConstructorDeclaration(node: Node): node is ConstructorDeclaration;\n    function isGetAccessorDeclaration(node: Node): node is GetAccessorDeclaration;\n    function isSetAccessorDeclaration(node: Node): node is SetAccessorDeclaration;\n    function isCallSignatureDeclaration(node: Node): node is CallSignatureDeclaration;\n    function isConstructSignatureDeclaration(node: Node): node is ConstructSignatureDeclaration;\n    function isIndexSignatureDeclaration(node: Node): node is IndexSignatureDeclaration;\n    function isTypePredicateNode(node: Node): node is TypePredicateNode;\n    function isTypeReferenceNode(node: Node): node is TypeReferenceNode;\n    function isFunctionTypeNode(node: Node): node is FunctionTypeNode;\n    function isConstructorTypeNode(node: Node): node is ConstructorTypeNode;\n    function isTypeQueryNode(node: Node): node is TypeQueryNode;\n    function isTypeLiteralNode(node: Node): node is TypeLiteralNode;\n    function isArrayTypeNode(node: Node): node is ArrayTypeNode;\n    function isTupleTypeNode(node: Node): node is TupleTypeNode;\n    function isNamedTupleMember(node: Node): node is NamedTupleMember;\n    function isOptionalTypeNode(node: Node): node is OptionalTypeNode;\n    function isRestTypeNode(node: Node): node is RestTypeNode;\n    function isUnionTypeNode(node: Node): node is UnionTypeNode;\n    function isIntersectionTypeNode(node: Node): node is IntersectionTypeNode;\n    function isConditionalTypeNode(node: Node): node is ConditionalTypeNode;\n    function isInferTypeNode(node: Node): node is InferTypeNode;\n    function isParenthesizedTypeNode(node: Node): node is ParenthesizedTypeNode;\n    function isThisTypeNode(node: Node): node is ThisTypeNode;\n    function isTypeOperatorNode(node: Node): node is TypeOperatorNode;\n    function isIndexedAccessTypeNode(node: Node): node is IndexedAccessTypeNode;\n    function isMappedTypeNode(node: Node): node is MappedTypeNode;\n    function isLiteralTypeNode(node: Node): node is LiteralTypeNode;\n    function isImportTypeNode(node: Node): node is ImportTypeNode;\n    function isTemplateLiteralTypeSpan(node: Node): node is TemplateLiteralTypeSpan;\n    function isTemplateLiteralTypeNode(node: Node): node is TemplateLiteralTypeNode;\n    function isObjectBindingPattern(node: Node): node is ObjectBindingPattern;\n    function isArrayBindingPattern(node: Node): node is ArrayBindingPattern;\n    function isBindingElement(node: Node): node is BindingElement;\n    function isArrayLiteralExpression(node: Node): node is ArrayLiteralExpression;\n    function isObjectLiteralExpression(node: Node): node is ObjectLiteralExpression;\n    function isPropertyAccessExpression(node: Node): node is PropertyAccessExpression;\n    function isElementAccessExpression(node: Node): node is ElementAccessExpression;\n    function isCallExpression(node: Node): node is CallExpression;\n    function isNewExpression(node: Node): node is NewExpression;\n    function isTaggedTemplateExpression(node: Node): node is TaggedTemplateExpression;\n    function isTypeAssertionExpression(node: Node): node is TypeAssertion;\n    function isParenthesizedExpression(node: Node): node is ParenthesizedExpression;\n    function isFunctionExpression(node: Node): node is FunctionExpression;\n    function isArrowFunction(node: Node): node is ArrowFunction;\n    function isDeleteExpression(node: Node): node is DeleteExpression;\n    function isTypeOfExpression(node: Node): node is TypeOfExpression;\n    function isVoidExpression(node: Node): node is VoidExpression;\n    function isAwaitExpression(node: Node): node is AwaitExpression;\n    function isPrefixUnaryExpression(node: Node): node is PrefixUnaryExpression;\n    function isPostfixUnaryExpression(node: Node): node is PostfixUnaryExpression;\n    function isBinaryExpression(node: Node): node is BinaryExpression;\n    function isConditionalExpression(node: Node): node is ConditionalExpression;\n    function isTemplateExpression(node: Node): node is TemplateExpression;\n    function isYieldExpression(node: Node): node is YieldExpression;\n    function isSpreadElement(node: Node): node is SpreadElement;\n    function isClassExpression(node: Node): node is ClassExpression;\n    function isOmittedExpression(node: Node): node is OmittedExpression;\n    function isExpressionWithTypeArguments(node: Node): node is ExpressionWithTypeArguments;\n    function isAsExpression(node: Node): node is AsExpression;\n    function isNonNullExpression(node: Node): node is NonNullExpression;\n    function isMetaProperty(node: Node): node is MetaProperty;\n    function isSyntheticExpression(node: Node): node is SyntheticExpression;\n    function isPartiallyEmittedExpression(node: Node): node is PartiallyEmittedExpression;\n    function isCommaListExpression(node: Node): node is CommaListExpression;\n    function isTemplateSpan(node: Node): node is TemplateSpan;\n    function isSemicolonClassElement(node: Node): node is SemicolonClassElement;\n    function isBlock(node: Node): node is Block;\n    function isVariableStatement(node: Node): node is VariableStatement;\n    function isEmptyStatement(node: Node): node is EmptyStatement;\n    function isExpressionStatement(node: Node): node is ExpressionStatement;\n    function isIfStatement(node: Node): node is IfStatement;\n    function isDoStatement(node: Node): node is DoStatement;\n    function isWhileStatement(node: Node): node is WhileStatement;\n    function isForStatement(node: Node): node is ForStatement;\n    function isForInStatement(node: Node): node is ForInStatement;\n    function isForOfStatement(node: Node): node is ForOfStatement;\n    function isContinueStatement(node: Node): node is ContinueStatement;\n    function isBreakStatement(node: Node): node is BreakStatement;\n    function isReturnStatement(node: Node): node is ReturnStatement;\n    function isWithStatement(node: Node): node is WithStatement;\n    function isSwitchStatement(node: Node): node is SwitchStatement;\n    function isLabeledStatement(node: Node): node is LabeledStatement;\n    function isThrowStatement(node: Node): node is ThrowStatement;\n    function isTryStatement(node: Node): node is TryStatement;\n    function isDebuggerStatement(node: Node): node is DebuggerStatement;\n    function isVariableDeclaration(node: Node): node is VariableDeclaration;\n    function isVariableDeclarationList(node: Node): node is VariableDeclarationList;\n    function isFunctionDeclaration(node: Node): node is FunctionDeclaration;\n    function isClassDeclaration(node: Node): node is ClassDeclaration;\n    function isInterfaceDeclaration(node: Node): node is InterfaceDeclaration;\n    function isTypeAliasDeclaration(node: Node): node is TypeAliasDeclaration;\n    function isEnumDeclaration(node: Node): node is EnumDeclaration;\n    function isModuleDeclaration(node: Node): node is ModuleDeclaration;\n    function isModuleBlock(node: Node): node is ModuleBlock;\n    function isCaseBlock(node: Node): node is CaseBlock;\n    function isNamespaceExportDeclaration(node: Node): node is NamespaceExportDeclaration;\n    function isImportEqualsDeclaration(node: Node): node is ImportEqualsDeclaration;\n    function isImportDeclaration(node: Node): node is ImportDeclaration;\n    function isImportClause(node: Node): node is ImportClause;\n    function isImportTypeAssertionContainer(node: Node): node is ImportTypeAssertionContainer;\n    function isAssertClause(node: Node): node is AssertClause;\n    function isAssertEntry(node: Node): node is AssertEntry;\n    function isNamespaceImport(node: Node): node is NamespaceImport;\n    function isNamespaceExport(node: Node): node is NamespaceExport;\n    function isNamedImports(node: Node): node is NamedImports;\n    function isImportSpecifier(node: Node): node is ImportSpecifier;\n    function isExportAssignment(node: Node): node is ExportAssignment;\n    function isExportDeclaration(node: Node): node is ExportDeclaration;\n    function isNamedExports(node: Node): node is NamedExports;\n    function isExportSpecifier(node: Node): node is ExportSpecifier;\n    function isMissingDeclaration(node: Node): node is MissingDeclaration;\n    function isNotEmittedStatement(node: Node): node is NotEmittedStatement;\n    function isExternalModuleReference(node: Node): node is ExternalModuleReference;\n    function isJsxElement(node: Node): node is JsxElement;\n    function isJsxSelfClosingElement(node: Node): node is JsxSelfClosingElement;\n    function isJsxOpeningElement(node: Node): node is JsxOpeningElement;\n    function isJsxClosingElement(node: Node): node is JsxClosingElement;\n    function isJsxFragment(node: Node): node is JsxFragment;\n    function isJsxOpeningFragment(node: Node): node is JsxOpeningFragment;\n    function isJsxClosingFragment(node: Node): node is JsxClosingFragment;\n    function isJsxAttribute(node: Node): node is JsxAttribute;\n    function isJsxAttributes(node: Node): node is JsxAttributes;\n    function isJsxSpreadAttribute(node: Node): node is JsxSpreadAttribute;\n    function isJsxExpression(node: Node): node is JsxExpression;\n    function isCaseClause(node: Node): node is CaseClause;\n    function isDefaultClause(node: Node): node is DefaultClause;\n    function isHeritageClause(node: Node): node is HeritageClause;\n    function isCatchClause(node: Node): node is CatchClause;\n    function isPropertyAssignment(node: Node): node is PropertyAssignment;\n    function isShorthandPropertyAssignment(node: Node): node is ShorthandPropertyAssignment;\n    function isSpreadAssignment(node: Node): node is SpreadAssignment;\n    function isEnumMember(node: Node): node is EnumMember;\n    function isUnparsedPrepend(node: Node): node is UnparsedPrepend;\n    function isSourceFile(node: Node): node is SourceFile;\n    function isBundle(node: Node): node is Bundle;\n    function isUnparsedSource(node: Node): node is UnparsedSource;\n    function isJSDocTypeExpression(node: Node): node is JSDocTypeExpression;\n    function isJSDocNameReference(node: Node): node is JSDocNameReference;\n    function isJSDocMemberName(node: Node): node is JSDocMemberName;\n    function isJSDocLink(node: Node): node is JSDocLink;\n    function isJSDocLinkCode(node: Node): node is JSDocLinkCode;\n    function isJSDocLinkPlain(node: Node): node is JSDocLinkPlain;\n    function isJSDocAllType(node: Node): node is JSDocAllType;\n    function isJSDocUnknownType(node: Node): node is JSDocUnknownType;\n    function isJSDocNullableType(node: Node): node is JSDocNullableType;\n    function isJSDocNonNullableType(node: Node): node is JSDocNonNullableType;\n    function isJSDocOptionalType(node: Node): node is JSDocOptionalType;\n    function isJSDocFunctionType(node: Node): node is JSDocFunctionType;\n    function isJSDocVariadicType(node: Node): node is JSDocVariadicType;\n    function isJSDocNamepathType(node: Node): node is JSDocNamepathType;\n    function isJSDoc(node: Node): node is JSDoc;\n    function isJSDocTypeLiteral(node: Node): node is JSDocTypeLiteral;\n    function isJSDocSignature(node: Node): node is JSDocSignature;\n    function isJSDocAugmentsTag(node: Node): node is JSDocAugmentsTag;\n    function isJSDocAuthorTag(node: Node): node is JSDocAuthorTag;\n    function isJSDocClassTag(node: Node): node is JSDocClassTag;\n    function isJSDocCallbackTag(node: Node): node is JSDocCallbackTag;\n    function isJSDocPublicTag(node: Node): node is JSDocPublicTag;\n    function isJSDocPrivateTag(node: Node): node is JSDocPrivateTag;\n    function isJSDocProtectedTag(node: Node): node is JSDocProtectedTag;\n    function isJSDocReadonlyTag(node: Node): node is JSDocReadonlyTag;\n    function isJSDocOverrideTag(node: Node): node is JSDocOverrideTag;\n    function isJSDocDeprecatedTag(node: Node): node is JSDocDeprecatedTag;\n    function isJSDocSeeTag(node: Node): node is JSDocSeeTag;\n    function isJSDocEnumTag(node: Node): node is JSDocEnumTag;\n    function isJSDocParameterTag(node: Node): node is JSDocParameterTag;\n    function isJSDocReturnTag(node: Node): node is JSDocReturnTag;\n    function isJSDocThisTag(node: Node): node is JSDocThisTag;\n    function isJSDocTypeTag(node: Node): node is JSDocTypeTag;\n    function isJSDocTemplateTag(node: Node): node is JSDocTemplateTag;\n    function isJSDocTypedefTag(node: Node): node is JSDocTypedefTag;\n    function isJSDocUnknownTag(node: Node): node is JSDocUnknownTag;\n    function isJSDocPropertyTag(node: Node): node is JSDocPropertyTag;\n    function isJSDocImplementsTag(node: Node): node is JSDocImplementsTag;\n}\ndeclare namespace ts {\n    function setTextRange<T extends TextRange>(range: T, location: TextRange | undefined): T;\n    function canHaveModifiers(node: Node): node is HasModifiers;\n    function canHaveDecorators(node: Node): node is HasDecorators;\n}\ndeclare namespace ts {\n    /**\n     * Invokes a callback for each child of the given node. The 'cbNode' callback is invoked for all child nodes\n     * stored in properties. If a 'cbNodes' callback is specified, it is invoked for embedded arrays; otherwise,\n     * embedded arrays are flattened and the 'cbNode' callback is invoked for each element. If a callback returns\n     * a truthy value, iteration stops and that value is returned. Otherwise, undefined is returned.\n     *\n     * @param node a given node to visit its children\n     * @param cbNode a callback to be invoked for all child nodes\n     * @param cbNodes a callback to be invoked for embedded array\n     *\n     * @remarks `forEachChild` must visit the children of a node in the order\n     * that they appear in the source code. The language service depends on this property to locate nodes by position.\n     */\n    export function forEachChild<T>(node: Node, cbNode: (node: Node) => T | undefined, cbNodes?: (nodes: NodeArray<Node>) => T | undefined): T | undefined;\n    export interface CreateSourceFileOptions {\n        languageVersion: ScriptTarget;\n        /**\n         * Controls the format the file is detected as - this can be derived from only the path\n         * and files on disk, but needs to be done with a module resolution cache in scope to be performant.\n         * This is usually `undefined` for compilations that do not have `moduleResolution` values of `node16` or `nodenext`.\n         */\n        impliedNodeFormat?: ModuleKind.ESNext | ModuleKind.CommonJS;\n        /**\n         * Controls how module-y-ness is set for the given file. Usually the result of calling\n         * `getSetExternalModuleIndicator` on a valid `CompilerOptions` object. If not present, the default\n         * check specified by `isFileProbablyExternalModule` will be used to set the field.\n         */\n        setExternalModuleIndicator?: (file: SourceFile) => void;\n    }\n    export function createSourceFile(fileName: string, sourceText: string, languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions, setParentNodes?: boolean, scriptKind?: ScriptKind): SourceFile;\n    export function parseIsolatedEntityName(text: string, languageVersion: ScriptTarget): EntityName | undefined;\n    /**\n     * Parse json text into SyntaxTree and return node and parse errors if any\n     * @param fileName\n     * @param sourceText\n     */\n    export function parseJsonText(fileName: string, sourceText: string): JsonSourceFile;\n    export function isExternalModule(file: SourceFile): boolean;\n    export function updateSourceFile(sourceFile: SourceFile, newText: string, textChangeRange: TextChangeRange, aggressiveChecks?: boolean): SourceFile;\n    export {};\n}\ndeclare namespace ts {\n    export function parseCommandLine(commandLine: readonly string[], readFile?: (path: string) => string | undefined): ParsedCommandLine;\n    export type DiagnosticReporter = (diagnostic: Diagnostic) => void;\n    /**\n     * Reports config file diagnostics\n     */\n    export interface ConfigFileDiagnosticsReporter {\n        /**\n         * Reports unrecoverable error when parsing config file\n         */\n        onUnRecoverableConfigFileDiagnostic: DiagnosticReporter;\n    }\n    /**\n     * Interface extending ParseConfigHost to support ParseConfigFile that reads config file and reports errors\n     */\n    export interface ParseConfigFileHost extends ParseConfigHost, ConfigFileDiagnosticsReporter {\n        getCurrentDirectory(): string;\n    }\n    /**\n     * Reads the config file, reports errors if any and exits if the config file cannot be found\n     */\n    export function getParsedCommandLineOfConfigFile(configFileName: string, optionsToExtend: CompilerOptions | undefined, host: ParseConfigFileHost, extendedConfigCache?: Map<ExtendedConfigCacheEntry>, watchOptionsToExtend?: WatchOptions, extraFileExtensions?: readonly FileExtensionInfo[]): ParsedCommandLine | undefined;\n    /**\n     * Read tsconfig.json file\n     * @param fileName The path to the config file\n     */\n    export function readConfigFile(fileName: string, readFile: (path: string) => string | undefined): {\n        config?: any;\n        error?: Diagnostic;\n    };\n    /**\n     * Parse the text of the tsconfig.json file\n     * @param fileName The path to the config file\n     * @param jsonText The text of the config file\n     */\n    export function parseConfigFileTextToJson(fileName: string, jsonText: string): {\n        config?: any;\n        error?: Diagnostic;\n    };\n    /**\n     * Read tsconfig.json file\n     * @param fileName The path to the config file\n     */\n    export function readJsonConfigFile(fileName: string, readFile: (path: string) => string | undefined): TsConfigSourceFile;\n    /**\n     * Convert the json syntax tree into the json value\n     */\n    export function convertToObject(sourceFile: JsonSourceFile, errors: Push<Diagnostic>): any;\n    /**\n     * Parse the contents of a config file (tsconfig.json).\n     * @param json The contents of the config file to parse\n     * @param host Instance of ParseConfigHost used to enumerate files in folder.\n     * @param basePath A root directory to resolve relative path entries in the config\n     *    file to. e.g. outDir\n     */\n    export function parseJsonConfigFileContent(json: any, host: ParseConfigHost, basePath: string, existingOptions?: CompilerOptions, configFileName?: string, resolutionStack?: Path[], extraFileExtensions?: readonly FileExtensionInfo[], extendedConfigCache?: Map<ExtendedConfigCacheEntry>, existingWatchOptions?: WatchOptions): ParsedCommandLine;\n    /**\n     * Parse the contents of a config file (tsconfig.json).\n     * @param jsonNode The contents of the config file to parse\n     * @param host Instance of ParseConfigHost used to enumerate files in folder.\n     * @param basePath A root directory to resolve relative path entries in the config\n     *    file to. e.g. outDir\n     */\n    export function parseJsonSourceFileConfigFileContent(sourceFile: TsConfigSourceFile, host: ParseConfigHost, basePath: string, existingOptions?: CompilerOptions, configFileName?: string, resolutionStack?: Path[], extraFileExtensions?: readonly FileExtensionInfo[], extendedConfigCache?: Map<ExtendedConfigCacheEntry>, existingWatchOptions?: WatchOptions): ParsedCommandLine;\n    export interface ParsedTsconfig {\n        raw: any;\n        options?: CompilerOptions;\n        watchOptions?: WatchOptions;\n        typeAcquisition?: TypeAcquisition;\n        /**\n         * Note that the case of the config path has not yet been normalized, as no files have been imported into the project yet\n         */\n        extendedConfigPath?: string;\n    }\n    export interface ExtendedConfigCacheEntry {\n        extendedResult: TsConfigSourceFile;\n        extendedConfig: ParsedTsconfig | undefined;\n    }\n    export function convertCompilerOptionsFromJson(jsonOptions: any, basePath: string, configFileName?: string): {\n        options: CompilerOptions;\n        errors: Diagnostic[];\n    };\n    export function convertTypeAcquisitionFromJson(jsonOptions: any, basePath: string, configFileName?: string): {\n        options: TypeAcquisition;\n        errors: Diagnostic[];\n    };\n    export {};\n}\ndeclare namespace ts {\n    export function getEffectiveTypeRoots(options: CompilerOptions, host: GetEffectiveTypeRootsHost): string[] | undefined;\n    /**\n     * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.\n     * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups\n     * is assumed to be the same as root directory of the project.\n     */\n    export function resolveTypeReferenceDirective(typeReferenceDirectiveName: string, containingFile: string | undefined, options: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, cache?: TypeReferenceDirectiveResolutionCache, resolutionMode?: SourceFile[\"impliedNodeFormat\"]): ResolvedTypeReferenceDirectiveWithFailedLookupLocations;\n    /**\n     * Given a set of options, returns the set of type directive names\n     *   that should be included for this program automatically.\n     * This list could either come from the config file,\n     *   or from enumerating the types root + initial secondary types lookup location.\n     * More type directives might appear in the program later as a result of loading actual source files;\n     *   this list is only the set of defaults that are implicitly included.\n     */\n    export function getAutomaticTypeDirectiveNames(options: CompilerOptions, host: ModuleResolutionHost): string[];\n    export interface TypeReferenceDirectiveResolutionCache extends PerDirectoryResolutionCache<ResolvedTypeReferenceDirectiveWithFailedLookupLocations>, PackageJsonInfoCache {\n    }\n    export interface ModeAwareCache<T> {\n        get(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): T | undefined;\n        set(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined, value: T): this;\n        delete(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): this;\n        has(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): boolean;\n        forEach(cb: (elem: T, key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined) => void): void;\n        size(): number;\n    }\n    /**\n     * Cached resolutions per containing directory.\n     * This assumes that any module id will have the same resolution for sibling files located in the same folder.\n     */\n    export interface PerDirectoryResolutionCache<T> {\n        getOrCreateCacheForDirectory(directoryName: string, redirectedReference?: ResolvedProjectReference): ModeAwareCache<T>;\n        clear(): void;\n        /**\n         *  Updates with the current compilerOptions the cache will operate with.\n         *  This updates the redirects map as well if needed so module resolutions are cached if they can across the projects\n         */\n        update(options: CompilerOptions): void;\n    }\n    export interface ModuleResolutionCache extends PerDirectoryResolutionCache<ResolvedModuleWithFailedLookupLocations>, NonRelativeModuleNameResolutionCache, PackageJsonInfoCache {\n        getPackageJsonInfoCache(): PackageJsonInfoCache;\n    }\n    /**\n     * Stored map from non-relative module name to a table: directory -> result of module lookup in this directory\n     * We support only non-relative module names because resolution of relative module names is usually more deterministic and thus less expensive.\n     */\n    export interface NonRelativeModuleNameResolutionCache extends PackageJsonInfoCache {\n        getOrCreateCacheForModuleName(nonRelativeModuleName: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined, redirectedReference?: ResolvedProjectReference): PerModuleNameCache;\n    }\n    export interface PackageJsonInfoCache {\n        clear(): void;\n    }\n    export interface PerModuleNameCache {\n        get(directory: string): ResolvedModuleWithFailedLookupLocations | undefined;\n        set(directory: string, result: ResolvedModuleWithFailedLookupLocations): void;\n    }\n    export function createModuleResolutionCache(currentDirectory: string, getCanonicalFileName: (s: string) => string, options?: CompilerOptions): ModuleResolutionCache;\n    export function createTypeReferenceDirectiveResolutionCache(currentDirectory: string, getCanonicalFileName: (s: string) => string, options?: CompilerOptions, packageJsonInfoCache?: PackageJsonInfoCache): TypeReferenceDirectiveResolutionCache;\n    export function resolveModuleNameFromCache(moduleName: string, containingFile: string, cache: ModuleResolutionCache, mode?: ModuleKind.CommonJS | ModuleKind.ESNext): ResolvedModuleWithFailedLookupLocations | undefined;\n    export function resolveModuleName(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, cache?: ModuleResolutionCache, redirectedReference?: ResolvedProjectReference, resolutionMode?: ModuleKind.CommonJS | ModuleKind.ESNext): ResolvedModuleWithFailedLookupLocations;\n    export function nodeModuleNameResolver(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, cache?: ModuleResolutionCache, redirectedReference?: ResolvedProjectReference): ResolvedModuleWithFailedLookupLocations;\n    export function classicNameResolver(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, cache?: NonRelativeModuleNameResolutionCache, redirectedReference?: ResolvedProjectReference): ResolvedModuleWithFailedLookupLocations;\n    export {};\n}\ndeclare namespace ts {\n    /**\n     * Visits a Node using the supplied visitor, possibly returning a new Node in its place.\n     *\n     * @param node The Node to visit.\n     * @param visitor The callback used to visit the Node.\n     * @param test A callback to execute to verify the Node is valid.\n     * @param lift An optional callback to execute to lift a NodeArray into a valid Node.\n     */\n    function visitNode<T extends Node>(node: T, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T;\n    /**\n     * Visits a Node using the supplied visitor, possibly returning a new Node in its place.\n     *\n     * @param node The Node to visit.\n     * @param visitor The callback used to visit the Node.\n     * @param test A callback to execute to verify the Node is valid.\n     * @param lift An optional callback to execute to lift a NodeArray into a valid Node.\n     */\n    function visitNode<T extends Node>(node: T | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T | undefined;\n    /**\n     * Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.\n     *\n     * @param nodes The NodeArray to visit.\n     * @param visitor The callback used to visit a Node.\n     * @param test A node test to execute for each node.\n     * @param start An optional value indicating the starting offset at which to start visiting.\n     * @param count An optional value indicating the maximum number of nodes to visit.\n     */\n    function visitNodes<T extends Node>(nodes: NodeArray<T>, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T>;\n    /**\n     * Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.\n     *\n     * @param nodes The NodeArray to visit.\n     * @param visitor The callback used to visit a Node.\n     * @param test A node test to execute for each node.\n     * @param start An optional value indicating the starting offset at which to start visiting.\n     * @param count An optional value indicating the maximum number of nodes to visit.\n     */\n    function visitNodes<T extends Node>(nodes: NodeArray<T> | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T> | undefined;\n    /**\n     * Starts a new lexical environment and visits a statement list, ending the lexical environment\n     * and merging hoisted declarations upon completion.\n     */\n    function visitLexicalEnvironment(statements: NodeArray<Statement>, visitor: Visitor, context: TransformationContext, start?: number, ensureUseStrict?: boolean, nodesVisitor?: NodesVisitor): NodeArray<Statement>;\n    /**\n     * Starts a new lexical environment and visits a parameter list, suspending the lexical\n     * environment upon completion.\n     */\n    function visitParameterList(nodes: NodeArray<ParameterDeclaration>, visitor: Visitor, context: TransformationContext, nodesVisitor?: NodesVisitor): NodeArray<ParameterDeclaration>;\n    function visitParameterList(nodes: NodeArray<ParameterDeclaration> | undefined, visitor: Visitor, context: TransformationContext, nodesVisitor?: NodesVisitor): NodeArray<ParameterDeclaration> | undefined;\n    /**\n     * Resumes a suspended lexical environment and visits a function body, ending the lexical\n     * environment and merging hoisted declarations upon completion.\n     */\n    function visitFunctionBody(node: FunctionBody, visitor: Visitor, context: TransformationContext): FunctionBody;\n    /**\n     * Resumes a suspended lexical environment and visits a function body, ending the lexical\n     * environment and merging hoisted declarations upon completion.\n     */\n    function visitFunctionBody(node: FunctionBody | undefined, visitor: Visitor, context: TransformationContext): FunctionBody | undefined;\n    /**\n     * Resumes a suspended lexical environment and visits a concise body, ending the lexical\n     * environment and merging hoisted declarations upon completion.\n     */\n    function visitFunctionBody(node: ConciseBody, visitor: Visitor, context: TransformationContext): ConciseBody;\n    /**\n     * Visits an iteration body, adding any block-scoped variables required by the transformation.\n     */\n    function visitIterationBody(body: Statement, visitor: Visitor, context: TransformationContext): Statement;\n    /**\n     * Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.\n     *\n     * @param node The Node whose children will be visited.\n     * @param visitor The callback used to visit each child.\n     * @param context A lexical environment context for the visitor.\n     */\n    function visitEachChild<T extends Node>(node: T, visitor: Visitor, context: TransformationContext): T;\n    /**\n     * Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.\n     *\n     * @param node The Node whose children will be visited.\n     * @param visitor The callback used to visit each child.\n     * @param context A lexical environment context for the visitor.\n     */\n    function visitEachChild<T extends Node>(node: T | undefined, visitor: Visitor, context: TransformationContext, nodesVisitor?: typeof visitNodes, tokenVisitor?: Visitor): T | undefined;\n}\ndeclare namespace ts {\n    function getTsBuildInfoEmitOutputFilePath(options: CompilerOptions): string | undefined;\n    function getOutputFileNames(commandLine: ParsedCommandLine, inputFileName: string, ignoreCase: boolean): readonly string[];\n    function createPrinter(printerOptions?: PrinterOptions, handlers?: PrintHandlers): Printer;\n}\ndeclare namespace ts {\n    export function findConfigFile(searchPath: string, fileExists: (fileName: string) => boolean, configName?: string): string | undefined;\n    export function resolveTripleslashReference(moduleName: string, containingFile: string): string;\n    export function createCompilerHost(options: CompilerOptions, setParentNodes?: boolean): CompilerHost;\n    export function getPreEmitDiagnostics(program: Program, sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n    export interface FormatDiagnosticsHost {\n        getCurrentDirectory(): string;\n        getCanonicalFileName(fileName: string): string;\n        getNewLine(): string;\n    }\n    export function formatDiagnostics(diagnostics: readonly Diagnostic[], host: FormatDiagnosticsHost): string;\n    export function formatDiagnostic(diagnostic: Diagnostic, host: FormatDiagnosticsHost): string;\n    export function formatDiagnosticsWithColorAndContext(diagnostics: readonly Diagnostic[], host: FormatDiagnosticsHost): string;\n    export function flattenDiagnosticMessageText(diag: string | DiagnosticMessageChain | undefined, newLine: string, indent?: number): string;\n    /**\n     * Calculates the resulting resolution mode for some reference in some file - this is generally the explicitly\n     * provided resolution mode in the reference, unless one is not present, in which case it is the mode of the containing file.\n     */\n    export function getModeForFileReference(ref: FileReference | string, containingFileMode: SourceFile[\"impliedNodeFormat\"]): ModuleKind.CommonJS | ModuleKind.ESNext | undefined;\n    /**\n     * Calculates the final resolution mode for an import at some index within a file's imports list. This is generally the explicitly\n     * defined mode of the import if provided, or, if not, the mode of the containing file (with some exceptions: import=require is always commonjs, dynamic import is always esm).\n     * If you have an actual import node, prefer using getModeForUsageLocation on the reference string node.\n     * @param file File to fetch the resolution mode within\n     * @param index Index into the file's complete resolution list to get the resolution of - this is a concatenation of the file's imports and module augmentations\n     */\n    export function getModeForResolutionAtIndex(file: SourceFile, index: number): ModuleKind.CommonJS | ModuleKind.ESNext | undefined;\n    /**\n     * Calculates the final resolution mode for a given module reference node. This is generally the explicitly provided resolution mode, if\n     * one exists, or the mode of the containing source file. (Excepting import=require, which is always commonjs, and dynamic import, which is always esm).\n     * Notably, this function always returns `undefined` if the containing file has an `undefined` `impliedNodeFormat` - this field is only set when\n     * `moduleResolution` is `node16`+.\n     * @param file The file the import or import-like reference is contained within\n     * @param usage The module reference string\n     * @returns The final resolution mode of the import\n     */\n    export function getModeForUsageLocation(file: {\n        impliedNodeFormat?: SourceFile[\"impliedNodeFormat\"];\n    }, usage: StringLiteralLike): ModuleKind.CommonJS | ModuleKind.ESNext | undefined;\n    export function getConfigFileParsingDiagnostics(configFileParseResult: ParsedCommandLine): readonly Diagnostic[];\n    /**\n     * A function for determining if a given file is esm or cjs format, assuming modern node module resolution rules, as configured by the\n     * `options` parameter.\n     *\n     * @param fileName The normalized absolute path to check the format of (it need not exist on disk)\n     * @param [packageJsonInfoCache] A cache for package file lookups - it's best to have a cache when this function is called often\n     * @param host The ModuleResolutionHost which can perform the filesystem lookups for package json data\n     * @param options The compiler options to perform the analysis under - relevant options are `moduleResolution` and `traceResolution`\n     * @returns `undefined` if the path has no relevant implied format, `ModuleKind.ESNext` for esm format, and `ModuleKind.CommonJS` for cjs format\n     */\n    export function getImpliedNodeFormatForFile(fileName: Path, packageJsonInfoCache: PackageJsonInfoCache | undefined, host: ModuleResolutionHost, options: CompilerOptions): ModuleKind.ESNext | ModuleKind.CommonJS | undefined;\n    /**\n     * Create a new 'Program' instance. A Program is an immutable collection of 'SourceFile's and a 'CompilerOptions'\n     * that represent a compilation unit.\n     *\n     * Creating a program proceeds from a set of root files, expanding the set of inputs by following imports and\n     * triple-slash-reference-path directives transitively. '@types' and triple-slash-reference-types are also pulled in.\n     *\n     * @param createProgramOptions - The options for creating a program.\n     * @returns A 'Program' object.\n     */\n    export function createProgram(createProgramOptions: CreateProgramOptions): Program;\n    /**\n     * Create a new 'Program' instance. A Program is an immutable collection of 'SourceFile's and a 'CompilerOptions'\n     * that represent a compilation unit.\n     *\n     * Creating a program proceeds from a set of root files, expanding the set of inputs by following imports and\n     * triple-slash-reference-path directives transitively. '@types' and triple-slash-reference-types are also pulled in.\n     *\n     * @param rootNames - A set of root files.\n     * @param options - The compiler options which should be used.\n     * @param host - The host interacts with the underlying file system.\n     * @param oldProgram - Reuses an old program structure.\n     * @param configFileParsingDiagnostics - error during config file parsing\n     * @returns A 'Program' object.\n     */\n    export function createProgram(rootNames: readonly string[], options: CompilerOptions, host?: CompilerHost, oldProgram?: Program, configFileParsingDiagnostics?: readonly Diagnostic[]): Program;\n    /** @deprecated */ export interface ResolveProjectReferencePathHost {\n        fileExists(fileName: string): boolean;\n    }\n    /**\n     * Returns the target config filename of a project reference.\n     * Note: The file might not exist.\n     */\n    export function resolveProjectReferencePath(ref: ProjectReference): ResolvedConfigFileName;\n    /** @deprecated */ export function resolveProjectReferencePath(host: ResolveProjectReferencePathHost, ref: ProjectReference): ResolvedConfigFileName;\n    export {};\n}\ndeclare namespace ts {\n    interface EmitOutput {\n        outputFiles: OutputFile[];\n        emitSkipped: boolean;\n    }\n    interface OutputFile {\n        name: string;\n        writeByteOrderMark: boolean;\n        text: string;\n    }\n}\ndeclare namespace ts {\n    type AffectedFileResult<T> = {\n        result: T;\n        affected: SourceFile | Program;\n    } | undefined;\n    interface BuilderProgramHost {\n        /**\n         * return true if file names are treated with case sensitivity\n         */\n        useCaseSensitiveFileNames(): boolean;\n        /**\n         * If provided this would be used this hash instead of actual file shape text for detecting changes\n         */\n        createHash?: (data: string) => string;\n        /**\n         * When emit or emitNextAffectedFile are called without writeFile,\n         * this callback if present would be used to write files\n         */\n        writeFile?: WriteFileCallback;\n    }\n    /**\n     * Builder to manage the program state changes\n     */\n    interface BuilderProgram {\n        /**\n         * Returns current program\n         */\n        getProgram(): Program;\n        /**\n         * Get compiler options of the program\n         */\n        getCompilerOptions(): CompilerOptions;\n        /**\n         * Get the source file in the program with file name\n         */\n        getSourceFile(fileName: string): SourceFile | undefined;\n        /**\n         * Get a list of files in the program\n         */\n        getSourceFiles(): readonly SourceFile[];\n        /**\n         * Get the diagnostics for compiler options\n         */\n        getOptionsDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n        /**\n         * Get the diagnostics that dont belong to any file\n         */\n        getGlobalDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n        /**\n         * Get the diagnostics from config file parsing\n         */\n        getConfigFileParsingDiagnostics(): readonly Diagnostic[];\n        /**\n         * Get the syntax diagnostics, for all source files if source file is not supplied\n         */\n        getSyntacticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n        /**\n         * Get the declaration diagnostics, for all source files if source file is not supplied\n         */\n        getDeclarationDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly DiagnosticWithLocation[];\n        /**\n         * Get all the dependencies of the file\n         */\n        getAllDependencies(sourceFile: SourceFile): readonly string[];\n        /**\n         * Gets the semantic diagnostics from the program corresponding to this state of file (if provided) or whole program\n         * The semantic diagnostics are cached and managed here\n         * Note that it is assumed that when asked about semantic diagnostics through this API,\n         * the file has been taken out of affected files so it is safe to use cache or get from program and cache the diagnostics\n         * In case of SemanticDiagnosticsBuilderProgram if the source file is not provided,\n         * it will iterate through all the affected files, to ensure that cache stays valid and yet provide a way to get all semantic diagnostics\n         */\n        getSemanticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n        /**\n         * Emits the JavaScript and declaration files.\n         * When targetSource file is specified, emits the files corresponding to that source file,\n         * otherwise for the whole program.\n         * In case of EmitAndSemanticDiagnosticsBuilderProgram, when targetSourceFile is specified,\n         * it is assumed that that file is handled from affected file list. If targetSourceFile is not specified,\n         * it will only emit all the affected files instead of whole program\n         *\n         * The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host\n         * in that order would be used to write the files\n         */\n        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): EmitResult;\n        /**\n         * Get the current directory of the program\n         */\n        getCurrentDirectory(): string;\n    }\n    /**\n     * The builder that caches the semantic diagnostics for the program and handles the changed files and affected files\n     */\n    interface SemanticDiagnosticsBuilderProgram extends BuilderProgram {\n        /**\n         * Gets the semantic diagnostics from the program for the next affected file and caches it\n         * Returns undefined if the iteration is complete\n         */\n        getSemanticDiagnosticsOfNextAffectedFile(cancellationToken?: CancellationToken, ignoreSourceFile?: (sourceFile: SourceFile) => boolean): AffectedFileResult<readonly Diagnostic[]>;\n    }\n    /**\n     * The builder that can handle the changes in program and iterate through changed file to emit the files\n     * The semantic diagnostics are cached per file and managed by clearing for the changed/affected files\n     */\n    interface EmitAndSemanticDiagnosticsBuilderProgram extends SemanticDiagnosticsBuilderProgram {\n        /**\n         * Emits the next affected file's emit result (EmitResult and sourceFiles emitted) or returns undefined if iteration is complete\n         * The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host\n         * in that order would be used to write the files\n         */\n        emitNextAffectedFile(writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): AffectedFileResult<EmitResult>;\n    }\n    /**\n     * Create the builder to manage semantic diagnostics and cache them\n     */\n    function createSemanticDiagnosticsBuilderProgram(newProgram: Program, host: BuilderProgramHost, oldProgram?: SemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[]): SemanticDiagnosticsBuilderProgram;\n    function createSemanticDiagnosticsBuilderProgram(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: SemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[]): SemanticDiagnosticsBuilderProgram;\n    /**\n     * Create the builder that can handle the changes in program and iterate through changed files\n     * to emit the those files and manage semantic diagnostics cache as well\n     */\n    function createEmitAndSemanticDiagnosticsBuilderProgram(newProgram: Program, host: BuilderProgramHost, oldProgram?: EmitAndSemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[]): EmitAndSemanticDiagnosticsBuilderProgram;\n    function createEmitAndSemanticDiagnosticsBuilderProgram(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: EmitAndSemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[]): EmitAndSemanticDiagnosticsBuilderProgram;\n    /**\n     * Creates a builder thats just abstraction over program and can be used with watch\n     */\n    function createAbstractBuilder(newProgram: Program, host: BuilderProgramHost, oldProgram?: BuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[]): BuilderProgram;\n    function createAbstractBuilder(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: BuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[]): BuilderProgram;\n}\ndeclare namespace ts {\n    interface ReadBuildProgramHost {\n        useCaseSensitiveFileNames(): boolean;\n        getCurrentDirectory(): string;\n        readFile(fileName: string): string | undefined;\n    }\n    function readBuilderProgram(compilerOptions: CompilerOptions, host: ReadBuildProgramHost): EmitAndSemanticDiagnosticsBuilderProgram | undefined;\n    function createIncrementalCompilerHost(options: CompilerOptions, system?: System): CompilerHost;\n    interface IncrementalProgramOptions<T extends BuilderProgram> {\n        rootNames: readonly string[];\n        options: CompilerOptions;\n        configFileParsingDiagnostics?: readonly Diagnostic[];\n        projectReferences?: readonly ProjectReference[];\n        host?: CompilerHost;\n        createProgram?: CreateProgram<T>;\n    }\n    function createIncrementalProgram<T extends BuilderProgram = EmitAndSemanticDiagnosticsBuilderProgram>({ rootNames, options, configFileParsingDiagnostics, projectReferences, host, createProgram }: IncrementalProgramOptions<T>): T;\n    type WatchStatusReporter = (diagnostic: Diagnostic, newLine: string, options: CompilerOptions, errorCount?: number) => void;\n    /** Create the program with rootNames and options, if they are undefined, oldProgram and new configFile diagnostics create new program */\n    type CreateProgram<T extends BuilderProgram> = (rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: T, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[] | undefined) => T;\n    /** Host that has watch functionality used in --watch mode */\n    interface WatchHost {\n        /** If provided, called with Diagnostic message that informs about change in watch status */\n        onWatchStatusChange?(diagnostic: Diagnostic, newLine: string, options: CompilerOptions, errorCount?: number): void;\n        /** Used to watch changes in source files, missing files needed to update the program or config file */\n        watchFile(path: string, callback: FileWatcherCallback, pollingInterval?: number, options?: CompilerOptions): FileWatcher;\n        /** Used to watch resolved module's failed lookup locations, config file specs, type roots where auto type reference directives are added */\n        watchDirectory(path: string, callback: DirectoryWatcherCallback, recursive?: boolean, options?: CompilerOptions): FileWatcher;\n        /** If provided, will be used to set delayed compilation, so that multiple changes in short span are compiled together */\n        setTimeout?(callback: (...args: any[]) => void, ms: number, ...args: any[]): any;\n        /** If provided, will be used to reset existing delayed compilation */\n        clearTimeout?(timeoutId: any): void;\n    }\n    interface ProgramHost<T extends BuilderProgram> {\n        /**\n         * Used to create the program when need for program creation or recreation detected\n         */\n        createProgram: CreateProgram<T>;\n        useCaseSensitiveFileNames(): boolean;\n        getNewLine(): string;\n        getCurrentDirectory(): string;\n        getDefaultLibFileName(options: CompilerOptions): string;\n        getDefaultLibLocation?(): string;\n        createHash?(data: string): string;\n        /**\n         * Use to check file presence for source files and\n         * if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well\n         */\n        fileExists(path: string): boolean;\n        /**\n         * Use to read file text for source files and\n         * if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well\n         */\n        readFile(path: string, encoding?: string): string | undefined;\n        /** If provided, used for module resolution as well as to handle directory structure */\n        directoryExists?(path: string): boolean;\n        /** If provided, used in resolutions as well as handling directory structure */\n        getDirectories?(path: string): string[];\n        /** If provided, used to cache and handle directory structure modifications */\n        readDirectory?(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n        /** Symbol links resolution */\n        realpath?(path: string): string;\n        /** If provided would be used to write log about compilation */\n        trace?(s: string): void;\n        /** If provided is used to get the environment variable */\n        getEnvironmentVariable?(name: string): string | undefined;\n        /** If provided, used to resolve the module names, otherwise typescript's default module resolution */\n        resolveModuleNames?(moduleNames: string[], containingFile: string, reusedNames: string[] | undefined, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingSourceFile?: SourceFile): (ResolvedModule | undefined)[];\n        /** If provided, used to resolve type reference directives, otherwise typescript's default resolution */\n        resolveTypeReferenceDirectives?(typeReferenceDirectiveNames: string[] | readonly FileReference[], containingFile: string, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingFileMode?: SourceFile[\"impliedNodeFormat\"] | undefined): (ResolvedTypeReferenceDirective | undefined)[];\n        /**\n         * Returns the module resolution cache used by a provided `resolveModuleNames` implementation so that any non-name module resolution operations (eg, package.json lookup) can reuse it\n         */\n        getModuleResolutionCache?(): ModuleResolutionCache | undefined;\n    }\n    interface WatchCompilerHost<T extends BuilderProgram> extends ProgramHost<T>, WatchHost {\n        /** Instead of using output d.ts file from project reference, use its source file */\n        useSourceOfProjectReferenceRedirect?(): boolean;\n        /** If provided, use this method to get parsed command lines for referenced projects */\n        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n        /** If provided, callback to invoke after every new program creation */\n        afterProgramCreate?(program: T): void;\n    }\n    /**\n     * Host to create watch with root files and options\n     */\n    interface WatchCompilerHostOfFilesAndCompilerOptions<T extends BuilderProgram> extends WatchCompilerHost<T> {\n        /** root files to use to generate program */\n        rootFiles: string[];\n        /** Compiler options */\n        options: CompilerOptions;\n        watchOptions?: WatchOptions;\n        /** Project References */\n        projectReferences?: readonly ProjectReference[];\n    }\n    /**\n     * Host to create watch with config file\n     */\n    interface WatchCompilerHostOfConfigFile<T extends BuilderProgram> extends WatchCompilerHost<T>, ConfigFileDiagnosticsReporter {\n        /** Name of the config file to compile */\n        configFileName: string;\n        /** Options to extend */\n        optionsToExtend?: CompilerOptions;\n        watchOptionsToExtend?: WatchOptions;\n        extraFileExtensions?: readonly FileExtensionInfo[];\n        /**\n         * Used to generate source file names from the config file and its include, exclude, files rules\n         * and also to cache the directory stucture\n         */\n        readDirectory(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n    }\n    interface Watch<T> {\n        /** Synchronize with host and get updated program */\n        getProgram(): T;\n        /** Closes the watch */\n        close(): void;\n    }\n    /**\n     * Creates the watch what generates program using the config file\n     */\n    interface WatchOfConfigFile<T> extends Watch<T> {\n    }\n    /**\n     * Creates the watch that generates program using the root files and compiler options\n     */\n    interface WatchOfFilesAndCompilerOptions<T> extends Watch<T> {\n        /** Updates the root files in the program, only if this is not config file compilation */\n        updateRootFileNames(fileNames: string[]): void;\n    }\n    /**\n     * Create the watch compiler host for either configFile or fileNames and its options\n     */\n    function createWatchCompilerHost<T extends BuilderProgram>(configFileName: string, optionsToExtend: CompilerOptions | undefined, system: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter, watchOptionsToExtend?: WatchOptions, extraFileExtensions?: readonly FileExtensionInfo[]): WatchCompilerHostOfConfigFile<T>;\n    function createWatchCompilerHost<T extends BuilderProgram>(rootFiles: string[], options: CompilerOptions, system: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter, projectReferences?: readonly ProjectReference[], watchOptions?: WatchOptions): WatchCompilerHostOfFilesAndCompilerOptions<T>;\n    /**\n     * Creates the watch from the host for root files and compiler options\n     */\n    function createWatchProgram<T extends BuilderProgram>(host: WatchCompilerHostOfFilesAndCompilerOptions<T>): WatchOfFilesAndCompilerOptions<T>;\n    /**\n     * Creates the watch from the host for config file\n     */\n    function createWatchProgram<T extends BuilderProgram>(host: WatchCompilerHostOfConfigFile<T>): WatchOfConfigFile<T>;\n}\ndeclare namespace ts {\n    interface BuildOptions {\n        dry?: boolean;\n        force?: boolean;\n        verbose?: boolean;\n        incremental?: boolean;\n        assumeChangesOnlyAffectDirectDependencies?: boolean;\n        traceResolution?: boolean;\n        [option: string]: CompilerOptionsValue | undefined;\n    }\n    type ReportEmitErrorSummary = (errorCount: number, filesInError: (ReportFileInError | undefined)[]) => void;\n    interface ReportFileInError {\n        fileName: string;\n        line: number;\n    }\n    interface SolutionBuilderHostBase<T extends BuilderProgram> extends ProgramHost<T> {\n        createDirectory?(path: string): void;\n        /**\n         * Should provide create directory and writeFile if done of invalidatedProjects is not invoked with\n         * writeFileCallback\n         */\n        writeFile?(path: string, data: string, writeByteOrderMark?: boolean): void;\n        getCustomTransformers?: (project: string) => CustomTransformers | undefined;\n        getModifiedTime(fileName: string): Date | undefined;\n        setModifiedTime(fileName: string, date: Date): void;\n        deleteFile(fileName: string): void;\n        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n        reportDiagnostic: DiagnosticReporter;\n        reportSolutionBuilderStatus: DiagnosticReporter;\n        afterProgramEmitAndDiagnostics?(program: T): void;\n    }\n    interface SolutionBuilderHost<T extends BuilderProgram> extends SolutionBuilderHostBase<T> {\n        reportErrorSummary?: ReportEmitErrorSummary;\n    }\n    interface SolutionBuilderWithWatchHost<T extends BuilderProgram> extends SolutionBuilderHostBase<T>, WatchHost {\n    }\n    interface SolutionBuilder<T extends BuilderProgram> {\n        build(project?: string, cancellationToken?: CancellationToken, writeFile?: WriteFileCallback, getCustomTransformers?: (project: string) => CustomTransformers): ExitStatus;\n        clean(project?: string): ExitStatus;\n        buildReferences(project: string, cancellationToken?: CancellationToken, writeFile?: WriteFileCallback, getCustomTransformers?: (project: string) => CustomTransformers): ExitStatus;\n        cleanReferences(project?: string): ExitStatus;\n        getNextInvalidatedProject(cancellationToken?: CancellationToken): InvalidatedProject<T> | undefined;\n    }\n    /**\n     * Create a function that reports watch status by writing to the system and handles the formating of the diagnostic\n     */\n    function createBuilderStatusReporter(system: System, pretty?: boolean): DiagnosticReporter;\n    function createSolutionBuilderHost<T extends BuilderProgram = EmitAndSemanticDiagnosticsBuilderProgram>(system?: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportSolutionBuilderStatus?: DiagnosticReporter, reportErrorSummary?: ReportEmitErrorSummary): SolutionBuilderHost<T>;\n    function createSolutionBuilderWithWatchHost<T extends BuilderProgram = EmitAndSemanticDiagnosticsBuilderProgram>(system?: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportSolutionBuilderStatus?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter): SolutionBuilderWithWatchHost<T>;\n    function createSolutionBuilder<T extends BuilderProgram>(host: SolutionBuilderHost<T>, rootNames: readonly string[], defaultOptions: BuildOptions): SolutionBuilder<T>;\n    function createSolutionBuilderWithWatch<T extends BuilderProgram>(host: SolutionBuilderWithWatchHost<T>, rootNames: readonly string[], defaultOptions: BuildOptions, baseWatchOptions?: WatchOptions): SolutionBuilder<T>;\n    enum InvalidatedProjectKind {\n        Build = 0,\n        UpdateBundle = 1,\n        UpdateOutputFileStamps = 2\n    }\n    interface InvalidatedProjectBase {\n        readonly kind: InvalidatedProjectKind;\n        readonly project: ResolvedConfigFileName;\n        /**\n         *  To dispose this project and ensure that all the necessary actions are taken and state is updated accordingly\n         */\n        done(cancellationToken?: CancellationToken, writeFile?: WriteFileCallback, customTransformers?: CustomTransformers): ExitStatus;\n        getCompilerOptions(): CompilerOptions;\n        getCurrentDirectory(): string;\n    }\n    interface UpdateOutputFileStampsProject extends InvalidatedProjectBase {\n        readonly kind: InvalidatedProjectKind.UpdateOutputFileStamps;\n        updateOutputFileStatmps(): void;\n    }\n    interface BuildInvalidedProject<T extends BuilderProgram> extends InvalidatedProjectBase {\n        readonly kind: InvalidatedProjectKind.Build;\n        getBuilderProgram(): T | undefined;\n        getProgram(): Program | undefined;\n        getSourceFile(fileName: string): SourceFile | undefined;\n        getSourceFiles(): readonly SourceFile[];\n        getOptionsDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n        getGlobalDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n        getConfigFileParsingDiagnostics(): readonly Diagnostic[];\n        getSyntacticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n        getAllDependencies(sourceFile: SourceFile): readonly string[];\n        getSemanticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n        getSemanticDiagnosticsOfNextAffectedFile(cancellationToken?: CancellationToken, ignoreSourceFile?: (sourceFile: SourceFile) => boolean): AffectedFileResult<readonly Diagnostic[]>;\n        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): EmitResult | undefined;\n    }\n    interface UpdateBundleProject<T extends BuilderProgram> extends InvalidatedProjectBase {\n        readonly kind: InvalidatedProjectKind.UpdateBundle;\n        emit(writeFile?: WriteFileCallback, customTransformers?: CustomTransformers): EmitResult | BuildInvalidedProject<T> | undefined;\n    }\n    type InvalidatedProject<T extends BuilderProgram> = UpdateOutputFileStampsProject | BuildInvalidedProject<T> | UpdateBundleProject<T>;\n}\ndeclare namespace ts.server {\n    type ActionSet = \"action::set\";\n    type ActionInvalidate = \"action::invalidate\";\n    type ActionPackageInstalled = \"action::packageInstalled\";\n    type EventTypesRegistry = \"event::typesRegistry\";\n    type EventBeginInstallTypes = \"event::beginInstallTypes\";\n    type EventEndInstallTypes = \"event::endInstallTypes\";\n    type EventInitializationFailed = \"event::initializationFailed\";\n}\ndeclare namespace ts.server {\n    interface TypingInstallerResponse {\n        readonly kind: ActionSet | ActionInvalidate | EventTypesRegistry | ActionPackageInstalled | EventBeginInstallTypes | EventEndInstallTypes | EventInitializationFailed;\n    }\n    interface TypingInstallerRequestWithProjectName {\n        readonly projectName: string;\n    }\n    interface DiscoverTypings extends TypingInstallerRequestWithProjectName {\n        readonly fileNames: string[];\n        readonly projectRootPath: Path;\n        readonly compilerOptions: CompilerOptions;\n        readonly watchOptions?: WatchOptions;\n        readonly typeAcquisition: TypeAcquisition;\n        readonly unresolvedImports: SortedReadonlyArray<string>;\n        readonly cachePath?: string;\n        readonly kind: \"discover\";\n    }\n    interface CloseProject extends TypingInstallerRequestWithProjectName {\n        readonly kind: \"closeProject\";\n    }\n    interface TypesRegistryRequest {\n        readonly kind: \"typesRegistry\";\n    }\n    interface InstallPackageRequest extends TypingInstallerRequestWithProjectName {\n        readonly kind: \"installPackage\";\n        readonly fileName: Path;\n        readonly packageName: string;\n        readonly projectRootPath: Path;\n    }\n    interface PackageInstalledResponse extends ProjectResponse {\n        readonly kind: ActionPackageInstalled;\n        readonly success: boolean;\n        readonly message: string;\n    }\n    interface InitializationFailedResponse extends TypingInstallerResponse {\n        readonly kind: EventInitializationFailed;\n        readonly message: string;\n        readonly stack?: string;\n    }\n    interface ProjectResponse extends TypingInstallerResponse {\n        readonly projectName: string;\n    }\n    interface InvalidateCachedTypings extends ProjectResponse {\n        readonly kind: ActionInvalidate;\n    }\n    interface InstallTypes extends ProjectResponse {\n        readonly kind: EventBeginInstallTypes | EventEndInstallTypes;\n        readonly eventId: number;\n        readonly typingsInstallerVersion: string;\n        readonly packagesToInstall: readonly string[];\n    }\n    interface BeginInstallTypes extends InstallTypes {\n        readonly kind: EventBeginInstallTypes;\n    }\n    interface EndInstallTypes extends InstallTypes {\n        readonly kind: EventEndInstallTypes;\n        readonly installSuccess: boolean;\n    }\n    interface SetTypings extends ProjectResponse {\n        readonly typeAcquisition: TypeAcquisition;\n        readonly compilerOptions: CompilerOptions;\n        readonly typings: string[];\n        readonly unresolvedImports: SortedReadonlyArray<string>;\n        readonly kind: ActionSet;\n    }\n}\ndeclare namespace ts {\n    interface Node {\n        getSourceFile(): SourceFile;\n        getChildCount(sourceFile?: SourceFile): number;\n        getChildAt(index: number, sourceFile?: SourceFile): Node;\n        getChildren(sourceFile?: SourceFile): Node[];\n        getStart(sourceFile?: SourceFile, includeJsDocComment?: boolean): number;\n        getFullStart(): number;\n        getEnd(): number;\n        getWidth(sourceFile?: SourceFileLike): number;\n        getFullWidth(): number;\n        getLeadingTriviaWidth(sourceFile?: SourceFile): number;\n        getFullText(sourceFile?: SourceFile): string;\n        getText(sourceFile?: SourceFile): string;\n        getFirstToken(sourceFile?: SourceFile): Node | undefined;\n        getLastToken(sourceFile?: SourceFile): Node | undefined;\n        forEachChild<T>(cbNode: (node: Node) => T | undefined, cbNodeArray?: (nodes: NodeArray<Node>) => T | undefined): T | undefined;\n    }\n    interface Identifier {\n        readonly text: string;\n    }\n    interface PrivateIdentifier {\n        readonly text: string;\n    }\n    interface Symbol {\n        readonly name: string;\n        getFlags(): SymbolFlags;\n        getEscapedName(): __String;\n        getName(): string;\n        getDeclarations(): Declaration[] | undefined;\n        getDocumentationComment(typeChecker: TypeChecker | undefined): SymbolDisplayPart[];\n        getJsDocTags(checker?: TypeChecker): JSDocTagInfo[];\n    }\n    interface Type {\n        getFlags(): TypeFlags;\n        getSymbol(): Symbol | undefined;\n        getProperties(): Symbol[];\n        getProperty(propertyName: string): Symbol | undefined;\n        getApparentProperties(): Symbol[];\n        getCallSignatures(): readonly Signature[];\n        getConstructSignatures(): readonly Signature[];\n        getStringIndexType(): Type | undefined;\n        getNumberIndexType(): Type | undefined;\n        getBaseTypes(): BaseType[] | undefined;\n        getNonNullableType(): Type;\n        getConstraint(): Type | undefined;\n        getDefault(): Type | undefined;\n        isUnion(): this is UnionType;\n        isIntersection(): this is IntersectionType;\n        isUnionOrIntersection(): this is UnionOrIntersectionType;\n        isLiteral(): this is LiteralType;\n        isStringLiteral(): this is StringLiteralType;\n        isNumberLiteral(): this is NumberLiteralType;\n        isTypeParameter(): this is TypeParameter;\n        isClassOrInterface(): this is InterfaceType;\n        isClass(): this is InterfaceType;\n        isIndexType(): this is IndexType;\n    }\n    interface TypeReference {\n        typeArguments?: readonly Type[];\n    }\n    interface Signature {\n        getDeclaration(): SignatureDeclaration;\n        getTypeParameters(): TypeParameter[] | undefined;\n        getParameters(): Symbol[];\n        getTypeParameterAtPosition(pos: number): Type;\n        getReturnType(): Type;\n        getDocumentationComment(typeChecker: TypeChecker | undefined): SymbolDisplayPart[];\n        getJsDocTags(): JSDocTagInfo[];\n    }\n    interface SourceFile {\n        getLineAndCharacterOfPosition(pos: number): LineAndCharacter;\n        getLineEndOfPosition(pos: number): number;\n        getLineStarts(): readonly number[];\n        getPositionOfLineAndCharacter(line: number, character: number): number;\n        update(newText: string, textChangeRange: TextChangeRange): SourceFile;\n    }\n    interface SourceFileLike {\n        getLineAndCharacterOfPosition(pos: number): LineAndCharacter;\n    }\n    interface SourceMapSource {\n        getLineAndCharacterOfPosition(pos: number): LineAndCharacter;\n    }\n    /**\n     * Represents an immutable snapshot of a script at a specified time.Once acquired, the\n     * snapshot is observably immutable. i.e. the same calls with the same parameters will return\n     * the same values.\n     */\n    interface IScriptSnapshot {\n        /** Gets a portion of the script snapshot specified by [start, end). */\n        getText(start: number, end: number): string;\n        /** Gets the length of this script snapshot. */\n        getLength(): number;\n        /**\n         * Gets the TextChangeRange that describe how the text changed between this text and\n         * an older version.  This information is used by the incremental parser to determine\n         * what sections of the script need to be re-parsed.  'undefined' can be returned if the\n         * change range cannot be determined.  However, in that case, incremental parsing will\n         * not happen and the entire document will be re - parsed.\n         */\n        getChangeRange(oldSnapshot: IScriptSnapshot): TextChangeRange | undefined;\n        /** Releases all resources held by this script snapshot */\n        dispose?(): void;\n    }\n    namespace ScriptSnapshot {\n        function fromString(text: string): IScriptSnapshot;\n    }\n    interface PreProcessedFileInfo {\n        referencedFiles: FileReference[];\n        typeReferenceDirectives: FileReference[];\n        libReferenceDirectives: FileReference[];\n        importedFiles: FileReference[];\n        ambientExternalModules?: string[];\n        isLibFile: boolean;\n    }\n    interface HostCancellationToken {\n        isCancellationRequested(): boolean;\n    }\n    interface InstallPackageOptions {\n        fileName: Path;\n        packageName: string;\n    }\n    interface PerformanceEvent {\n        kind: \"UpdateGraph\" | \"CreatePackageJsonAutoImportProvider\";\n        durationMs: number;\n    }\n    enum LanguageServiceMode {\n        Semantic = 0,\n        PartialSemantic = 1,\n        Syntactic = 2\n    }\n    interface IncompleteCompletionsCache {\n        get(): CompletionInfo | undefined;\n        set(response: CompletionInfo): void;\n        clear(): void;\n    }\n    interface LanguageServiceHost extends GetEffectiveTypeRootsHost, MinimalResolutionCacheHost {\n        getCompilationSettings(): CompilerOptions;\n        getNewLine?(): string;\n        getProjectVersion?(): string;\n        getScriptFileNames(): string[];\n        getScriptKind?(fileName: string): ScriptKind;\n        getScriptVersion(fileName: string): string;\n        getScriptSnapshot(fileName: string): IScriptSnapshot | undefined;\n        getProjectReferences?(): readonly ProjectReference[] | undefined;\n        getLocalizedDiagnosticMessages?(): any;\n        getCancellationToken?(): HostCancellationToken;\n        getCurrentDirectory(): string;\n        getDefaultLibFileName(options: CompilerOptions): string;\n        log?(s: string): void;\n        trace?(s: string): void;\n        error?(s: string): void;\n        useCaseSensitiveFileNames?(): boolean;\n        readDirectory?(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n        realpath?(path: string): string;\n        readFile(path: string, encoding?: string): string | undefined;\n        fileExists(path: string): boolean;\n        getTypeRootsVersion?(): number;\n        resolveModuleNames?(moduleNames: string[], containingFile: string, reusedNames: string[] | undefined, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingSourceFile?: SourceFile): (ResolvedModule | undefined)[];\n        getResolvedModuleWithFailedLookupLocationsFromCache?(modulename: string, containingFile: string, resolutionMode?: ModuleKind.CommonJS | ModuleKind.ESNext): ResolvedModuleWithFailedLookupLocations | undefined;\n        resolveTypeReferenceDirectives?(typeDirectiveNames: string[] | FileReference[], containingFile: string, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingFileMode?: SourceFile[\"impliedNodeFormat\"] | undefined): (ResolvedTypeReferenceDirective | undefined)[];\n        getDirectories?(directoryName: string): string[];\n        /**\n         * Gets a set of custom transformers to use during emit.\n         */\n        getCustomTransformers?(): CustomTransformers | undefined;\n        isKnownTypesPackageName?(name: string): boolean;\n        installPackage?(options: InstallPackageOptions): Promise<ApplyCodeActionCommandResult>;\n        writeFile?(fileName: string, content: string): void;\n        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n    }\n    type WithMetadata<T> = T & {\n        metadata?: unknown;\n    };\n    enum SemanticClassificationFormat {\n        Original = \"original\",\n        TwentyTwenty = \"2020\"\n    }\n    interface LanguageService {\n        /** This is used as a part of restarting the language service. */\n        cleanupSemanticCache(): void;\n        /**\n         * Gets errors indicating invalid syntax in a file.\n         *\n         * In English, \"this cdeo have, erorrs\" is syntactically invalid because it has typos,\n         * grammatical errors, and misplaced punctuation. Likewise, examples of syntax\n         * errors in TypeScript are missing parentheses in an `if` statement, mismatched\n         * curly braces, and using a reserved keyword as a variable name.\n         *\n         * These diagnostics are inexpensive to compute and don't require knowledge of\n         * other files. Note that a non-empty result increases the likelihood of false positives\n         * from `getSemanticDiagnostics`.\n         *\n         * While these represent the majority of syntax-related diagnostics, there are some\n         * that require the type system, which will be present in `getSemanticDiagnostics`.\n         *\n         * @param fileName A path to the file you want syntactic diagnostics for\n         */\n        getSyntacticDiagnostics(fileName: string): DiagnosticWithLocation[];\n        /**\n         * Gets warnings or errors indicating type system issues in a given file.\n         * Requesting semantic diagnostics may start up the type system and\n         * run deferred work, so the first call may take longer than subsequent calls.\n         *\n         * Unlike the other get*Diagnostics functions, these diagnostics can potentially not\n         * include a reference to a source file. Specifically, the first time this is called,\n         * it will return global diagnostics with no associated location.\n         *\n         * To contrast the differences between semantic and syntactic diagnostics, consider the\n         * sentence: \"The sun is green.\" is syntactically correct; those are real English words with\n         * correct sentence structure. However, it is semantically invalid, because it is not true.\n         *\n         * @param fileName A path to the file you want semantic diagnostics for\n         */\n        getSemanticDiagnostics(fileName: string): Diagnostic[];\n        /**\n         * Gets suggestion diagnostics for a specific file. These diagnostics tend to\n         * proactively suggest refactors, as opposed to diagnostics that indicate\n         * potentially incorrect runtime behavior.\n         *\n         * @param fileName A path to the file you want semantic diagnostics for\n         */\n        getSuggestionDiagnostics(fileName: string): DiagnosticWithLocation[];\n        /**\n         * Gets global diagnostics related to the program configuration and compiler options.\n         */\n        getCompilerOptionsDiagnostics(): Diagnostic[];\n        /** @deprecated Use getEncodedSyntacticClassifications instead. */\n        getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n        getSyntacticClassifications(fileName: string, span: TextSpan, format: SemanticClassificationFormat): ClassifiedSpan[] | ClassifiedSpan2020[];\n        /** @deprecated Use getEncodedSemanticClassifications instead. */\n        getSemanticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n        getSemanticClassifications(fileName: string, span: TextSpan, format: SemanticClassificationFormat): ClassifiedSpan[] | ClassifiedSpan2020[];\n        /** Encoded as triples of [start, length, ClassificationType]. */\n        getEncodedSyntacticClassifications(fileName: string, span: TextSpan): Classifications;\n        /**\n         * Gets semantic highlights information for a particular file. Has two formats, an older\n         * version used by VS and a format used by VS Code.\n         *\n         * @param fileName The path to the file\n         * @param position A text span to return results within\n         * @param format Which format to use, defaults to \"original\"\n         * @returns a number array encoded as triples of [start, length, ClassificationType, ...].\n         */\n        getEncodedSemanticClassifications(fileName: string, span: TextSpan, format?: SemanticClassificationFormat): Classifications;\n        /**\n         * Gets completion entries at a particular position in a file.\n         *\n         * @param fileName The path to the file\n         * @param position A zero-based index of the character where you want the entries\n         * @param options An object describing how the request was triggered and what kinds\n         * of code actions can be returned with the completions.\n         * @param formattingSettings settings needed for calling formatting functions.\n         */\n        getCompletionsAtPosition(fileName: string, position: number, options: GetCompletionsAtPositionOptions | undefined, formattingSettings?: FormatCodeSettings): WithMetadata<CompletionInfo> | undefined;\n        /**\n         * Gets the extended details for a completion entry retrieved from `getCompletionsAtPosition`.\n         *\n         * @param fileName The path to the file\n         * @param position A zero based index of the character where you want the entries\n         * @param entryName The `name` from an existing completion which came from `getCompletionsAtPosition`\n         * @param formatOptions How should code samples in the completions be formatted, can be undefined for backwards compatibility\n         * @param source `source` property from the completion entry\n         * @param preferences User settings, can be undefined for backwards compatibility\n         * @param data `data` property from the completion entry\n         */\n        getCompletionEntryDetails(fileName: string, position: number, entryName: string, formatOptions: FormatCodeOptions | FormatCodeSettings | undefined, source: string | undefined, preferences: UserPreferences | undefined, data: CompletionEntryData | undefined): CompletionEntryDetails | undefined;\n        getCompletionEntrySymbol(fileName: string, position: number, name: string, source: string | undefined): Symbol | undefined;\n        /**\n         * Gets semantic information about the identifier at a particular position in a\n         * file. Quick info is what you typically see when you hover in an editor.\n         *\n         * @param fileName The path to the file\n         * @param position A zero-based index of the character where you want the quick info\n         */\n        getQuickInfoAtPosition(fileName: string, position: number): QuickInfo | undefined;\n        getNameOrDottedNameSpan(fileName: string, startPos: number, endPos: number): TextSpan | undefined;\n        getBreakpointStatementAtPosition(fileName: string, position: number): TextSpan | undefined;\n        getSignatureHelpItems(fileName: string, position: number, options: SignatureHelpItemsOptions | undefined): SignatureHelpItems | undefined;\n        getRenameInfo(fileName: string, position: number, preferences: UserPreferences): RenameInfo;\n        /** @deprecated Use the signature with `UserPreferences` instead. */\n        getRenameInfo(fileName: string, position: number, options?: RenameInfoOptions): RenameInfo;\n        findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename?: boolean): readonly RenameLocation[] | undefined;\n        getSmartSelectionRange(fileName: string, position: number): SelectionRange;\n        getDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;\n        getDefinitionAndBoundSpan(fileName: string, position: number): DefinitionInfoAndBoundSpan | undefined;\n        getTypeDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;\n        getImplementationAtPosition(fileName: string, position: number): readonly ImplementationLocation[] | undefined;\n        getReferencesAtPosition(fileName: string, position: number): ReferenceEntry[] | undefined;\n        findReferences(fileName: string, position: number): ReferencedSymbol[] | undefined;\n        getDocumentHighlights(fileName: string, position: number, filesToSearch: string[]): DocumentHighlights[] | undefined;\n        getFileReferences(fileName: string): ReferenceEntry[];\n        /** @deprecated */\n        getOccurrencesAtPosition(fileName: string, position: number): readonly ReferenceEntry[] | undefined;\n        getNavigateToItems(searchValue: string, maxResultCount?: number, fileName?: string, excludeDtsFiles?: boolean): NavigateToItem[];\n        getNavigationBarItems(fileName: string): NavigationBarItem[];\n        getNavigationTree(fileName: string): NavigationTree;\n        prepareCallHierarchy(fileName: string, position: number): CallHierarchyItem | CallHierarchyItem[] | undefined;\n        provideCallHierarchyIncomingCalls(fileName: string, position: number): CallHierarchyIncomingCall[];\n        provideCallHierarchyOutgoingCalls(fileName: string, position: number): CallHierarchyOutgoingCall[];\n        provideInlayHints(fileName: string, span: TextSpan, preferences: UserPreferences | undefined): InlayHint[];\n        getOutliningSpans(fileName: string): OutliningSpan[];\n        getTodoComments(fileName: string, descriptors: TodoCommentDescriptor[]): TodoComment[];\n        getBraceMatchingAtPosition(fileName: string, position: number): TextSpan[];\n        getIndentationAtPosition(fileName: string, position: number, options: EditorOptions | EditorSettings): number;\n        getFormattingEditsForRange(fileName: string, start: number, end: number, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n        getFormattingEditsForDocument(fileName: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n        getFormattingEditsAfterKeystroke(fileName: string, position: number, key: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n        getDocCommentTemplateAtPosition(fileName: string, position: number, options?: DocCommentTemplateOptions): TextInsertion | undefined;\n        isValidBraceCompletionAtPosition(fileName: string, position: number, openingBrace: number): boolean;\n        /**\n         * This will return a defined result if the position is after the `>` of the opening tag, or somewhere in the text, of a JSXElement with no closing tag.\n         * Editors should call this after `>` is typed.\n         */\n        getJsxClosingTagAtPosition(fileName: string, position: number): JsxClosingTagInfo | undefined;\n        getSpanOfEnclosingComment(fileName: string, position: number, onlyMultiLine: boolean): TextSpan | undefined;\n        toLineColumnOffset?(fileName: string, position: number): LineAndCharacter;\n        getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: readonly number[], formatOptions: FormatCodeSettings, preferences: UserPreferences): readonly CodeFixAction[];\n        getCombinedCodeFix(scope: CombinedCodeFixScope, fixId: {}, formatOptions: FormatCodeSettings, preferences: UserPreferences): CombinedCodeActions;\n        applyCodeActionCommand(action: CodeActionCommand, formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult>;\n        applyCodeActionCommand(action: CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult[]>;\n        applyCodeActionCommand(action: CodeActionCommand | CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult | ApplyCodeActionCommandResult[]>;\n        /** @deprecated `fileName` will be ignored */\n        applyCodeActionCommand(fileName: string, action: CodeActionCommand): Promise<ApplyCodeActionCommandResult>;\n        /** @deprecated `fileName` will be ignored */\n        applyCodeActionCommand(fileName: string, action: CodeActionCommand[]): Promise<ApplyCodeActionCommandResult[]>;\n        /** @deprecated `fileName` will be ignored */\n        applyCodeActionCommand(fileName: string, action: CodeActionCommand | CodeActionCommand[]): Promise<ApplyCodeActionCommandResult | ApplyCodeActionCommandResult[]>;\n        getApplicableRefactors(fileName: string, positionOrRange: number | TextRange, preferences: UserPreferences | undefined, triggerReason?: RefactorTriggerReason, kind?: string): ApplicableRefactorInfo[];\n        getEditsForRefactor(fileName: string, formatOptions: FormatCodeSettings, positionOrRange: number | TextRange, refactorName: string, actionName: string, preferences: UserPreferences | undefined): RefactorEditInfo | undefined;\n        organizeImports(args: OrganizeImportsArgs, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];\n        getEditsForFileRename(oldFilePath: string, newFilePath: string, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];\n        getEmitOutput(fileName: string, emitOnlyDtsFiles?: boolean, forceDtsEmit?: boolean): EmitOutput;\n        getProgram(): Program | undefined;\n        toggleLineComment(fileName: string, textRange: TextRange): TextChange[];\n        toggleMultilineComment(fileName: string, textRange: TextRange): TextChange[];\n        commentSelection(fileName: string, textRange: TextRange): TextChange[];\n        uncommentSelection(fileName: string, textRange: TextRange): TextChange[];\n        dispose(): void;\n    }\n    interface JsxClosingTagInfo {\n        readonly newText: string;\n    }\n    interface CombinedCodeFixScope {\n        type: \"file\";\n        fileName: string;\n    }\n    interface OrganizeImportsArgs extends CombinedCodeFixScope {\n        skipDestructiveCodeActions?: boolean;\n    }\n    type CompletionsTriggerCharacter = \".\" | '\"' | \"'\" | \"`\" | \"/\" | \"@\" | \"<\" | \"#\" | \" \";\n    enum CompletionTriggerKind {\n        /** Completion was triggered by typing an identifier, manual invocation (e.g Ctrl+Space) or via API. */\n        Invoked = 1,\n        /** Completion was triggered by a trigger character. */\n        TriggerCharacter = 2,\n        /** Completion was re-triggered as the current completion list is incomplete. */\n        TriggerForIncompleteCompletions = 3\n    }\n    interface GetCompletionsAtPositionOptions extends UserPreferences {\n        /**\n         * If the editor is asking for completions because a certain character was typed\n         * (as opposed to when the user explicitly requested them) this should be set.\n         */\n        triggerCharacter?: CompletionsTriggerCharacter;\n        triggerKind?: CompletionTriggerKind;\n        /** @deprecated Use includeCompletionsForModuleExports */\n        includeExternalModuleExports?: boolean;\n        /** @deprecated Use includeCompletionsWithInsertText */\n        includeInsertTextCompletions?: boolean;\n    }\n    type SignatureHelpTriggerCharacter = \",\" | \"(\" | \"<\";\n    type SignatureHelpRetriggerCharacter = SignatureHelpTriggerCharacter | \")\";\n    interface SignatureHelpItemsOptions {\n        triggerReason?: SignatureHelpTriggerReason;\n    }\n    type SignatureHelpTriggerReason = SignatureHelpInvokedReason | SignatureHelpCharacterTypedReason | SignatureHelpRetriggeredReason;\n    /**\n     * Signals that the user manually requested signature help.\n     * The language service will unconditionally attempt to provide a result.\n     */\n    interface SignatureHelpInvokedReason {\n        kind: \"invoked\";\n        triggerCharacter?: undefined;\n    }\n    /**\n     * Signals that the signature help request came from a user typing a character.\n     * Depending on the character and the syntactic context, the request may or may not be served a result.\n     */\n    interface SignatureHelpCharacterTypedReason {\n        kind: \"characterTyped\";\n        /**\n         * Character that was responsible for triggering signature help.\n         */\n        triggerCharacter: SignatureHelpTriggerCharacter;\n    }\n    /**\n     * Signals that this signature help request came from typing a character or moving the cursor.\n     * This should only occur if a signature help session was already active and the editor needs to see if it should adjust.\n     * The language service will unconditionally attempt to provide a result.\n     * `triggerCharacter` can be `undefined` for a retrigger caused by a cursor move.\n     */\n    interface SignatureHelpRetriggeredReason {\n        kind: \"retrigger\";\n        /**\n         * Character that was responsible for triggering signature help.\n         */\n        triggerCharacter?: SignatureHelpRetriggerCharacter;\n    }\n    interface ApplyCodeActionCommandResult {\n        successMessage: string;\n    }\n    interface Classifications {\n        spans: number[];\n        endOfLineState: EndOfLineState;\n    }\n    interface ClassifiedSpan {\n        textSpan: TextSpan;\n        classificationType: ClassificationTypeNames;\n    }\n    interface ClassifiedSpan2020 {\n        textSpan: TextSpan;\n        classificationType: number;\n    }\n    /**\n     * Navigation bar interface designed for visual studio's dual-column layout.\n     * This does not form a proper tree.\n     * The navbar is returned as a list of top-level items, each of which has a list of child items.\n     * Child items always have an empty array for their `childItems`.\n     */\n    interface NavigationBarItem {\n        text: string;\n        kind: ScriptElementKind;\n        kindModifiers: string;\n        spans: TextSpan[];\n        childItems: NavigationBarItem[];\n        indent: number;\n        bolded: boolean;\n        grayed: boolean;\n    }\n    /**\n     * Node in a tree of nested declarations in a file.\n     * The top node is always a script or module node.\n     */\n    interface NavigationTree {\n        /** Name of the declaration, or a short description, e.g. \"<class>\". */\n        text: string;\n        kind: ScriptElementKind;\n        /** ScriptElementKindModifier separated by commas, e.g. \"public,abstract\" */\n        kindModifiers: string;\n        /**\n         * Spans of the nodes that generated this declaration.\n         * There will be more than one if this is the result of merging.\n         */\n        spans: TextSpan[];\n        nameSpan: TextSpan | undefined;\n        /** Present if non-empty */\n        childItems?: NavigationTree[];\n    }\n    interface CallHierarchyItem {\n        name: string;\n        kind: ScriptElementKind;\n        kindModifiers?: string;\n        file: string;\n        span: TextSpan;\n        selectionSpan: TextSpan;\n        containerName?: string;\n    }\n    interface CallHierarchyIncomingCall {\n        from: CallHierarchyItem;\n        fromSpans: TextSpan[];\n    }\n    interface CallHierarchyOutgoingCall {\n        to: CallHierarchyItem;\n        fromSpans: TextSpan[];\n    }\n    enum InlayHintKind {\n        Type = \"Type\",\n        Parameter = \"Parameter\",\n        Enum = \"Enum\"\n    }\n    interface InlayHint {\n        text: string;\n        position: number;\n        kind: InlayHintKind;\n        whitespaceBefore?: boolean;\n        whitespaceAfter?: boolean;\n    }\n    interface TodoCommentDescriptor {\n        text: string;\n        priority: number;\n    }\n    interface TodoComment {\n        descriptor: TodoCommentDescriptor;\n        message: string;\n        position: number;\n    }\n    interface TextChange {\n        span: TextSpan;\n        newText: string;\n    }\n    interface FileTextChanges {\n        fileName: string;\n        textChanges: readonly TextChange[];\n        isNewFile?: boolean;\n    }\n    interface CodeAction {\n        /** Description of the code action to display in the UI of the editor */\n        description: string;\n        /** Text changes to apply to each file as part of the code action */\n        changes: FileTextChanges[];\n        /**\n         * If the user accepts the code fix, the editor should send the action back in a `applyAction` request.\n         * This allows the language service to have side effects (e.g. installing dependencies) upon a code fix.\n         */\n        commands?: CodeActionCommand[];\n    }\n    interface CodeFixAction extends CodeAction {\n        /** Short name to identify the fix, for use by telemetry. */\n        fixName: string;\n        /**\n         * If present, one may call 'getCombinedCodeFix' with this fixId.\n         * This may be omitted to indicate that the code fix can't be applied in a group.\n         */\n        fixId?: {};\n        fixAllDescription?: string;\n    }\n    interface CombinedCodeActions {\n        changes: readonly FileTextChanges[];\n        commands?: readonly CodeActionCommand[];\n    }\n    type CodeActionCommand = InstallPackageAction;\n    interface InstallPackageAction {\n    }\n    /**\n     * A set of one or more available refactoring actions, grouped under a parent refactoring.\n     */\n    interface ApplicableRefactorInfo {\n        /**\n         * The programmatic name of the refactoring\n         */\n        name: string;\n        /**\n         * A description of this refactoring category to show to the user.\n         * If the refactoring gets inlined (see below), this text will not be visible.\n         */\n        description: string;\n        /**\n         * Inlineable refactorings can have their actions hoisted out to the top level\n         * of a context menu. Non-inlineanable refactorings should always be shown inside\n         * their parent grouping.\n         *\n         * If not specified, this value is assumed to be 'true'\n         */\n        inlineable?: boolean;\n        actions: RefactorActionInfo[];\n    }\n    /**\n     * Represents a single refactoring action - for example, the \"Extract Method...\" refactor might\n     * offer several actions, each corresponding to a surround class or closure to extract into.\n     */\n    interface RefactorActionInfo {\n        /**\n         * The programmatic name of the refactoring action\n         */\n        name: string;\n        /**\n         * A description of this refactoring action to show to the user.\n         * If the parent refactoring is inlined away, this will be the only text shown,\n         * so this description should make sense by itself if the parent is inlineable=true\n         */\n        description: string;\n        /**\n         * A message to show to the user if the refactoring cannot be applied in\n         * the current context.\n         */\n        notApplicableReason?: string;\n        /**\n         * The hierarchical dotted name of the refactor action.\n         */\n        kind?: string;\n    }\n    /**\n     * A set of edits to make in response to a refactor action, plus an optional\n     * location where renaming should be invoked from\n     */\n    interface RefactorEditInfo {\n        edits: FileTextChanges[];\n        renameFilename?: string;\n        renameLocation?: number;\n        commands?: CodeActionCommand[];\n    }\n    type RefactorTriggerReason = \"implicit\" | \"invoked\";\n    interface TextInsertion {\n        newText: string;\n        /** The position in newText the caret should point to after the insertion. */\n        caretOffset: number;\n    }\n    interface DocumentSpan {\n        textSpan: TextSpan;\n        fileName: string;\n        /**\n         * If the span represents a location that was remapped (e.g. via a .d.ts.map file),\n         * then the original filename and span will be specified here\n         */\n        originalTextSpan?: TextSpan;\n        originalFileName?: string;\n        /**\n         * If DocumentSpan.textSpan is the span for name of the declaration,\n         * then this is the span for relevant declaration\n         */\n        contextSpan?: TextSpan;\n        originalContextSpan?: TextSpan;\n    }\n    interface RenameLocation extends DocumentSpan {\n        readonly prefixText?: string;\n        readonly suffixText?: string;\n    }\n    interface ReferenceEntry extends DocumentSpan {\n        isWriteAccess: boolean;\n        isInString?: true;\n    }\n    interface ImplementationLocation extends DocumentSpan {\n        kind: ScriptElementKind;\n        displayParts: SymbolDisplayPart[];\n    }\n    enum HighlightSpanKind {\n        none = \"none\",\n        definition = \"definition\",\n        reference = \"reference\",\n        writtenReference = \"writtenReference\"\n    }\n    interface HighlightSpan {\n        fileName?: string;\n        isInString?: true;\n        textSpan: TextSpan;\n        contextSpan?: TextSpan;\n        kind: HighlightSpanKind;\n    }\n    interface NavigateToItem {\n        name: string;\n        kind: ScriptElementKind;\n        kindModifiers: string;\n        matchKind: \"exact\" | \"prefix\" | \"substring\" | \"camelCase\";\n        isCaseSensitive: boolean;\n        fileName: string;\n        textSpan: TextSpan;\n        containerName: string;\n        containerKind: ScriptElementKind;\n    }\n    enum IndentStyle {\n        None = 0,\n        Block = 1,\n        Smart = 2\n    }\n    enum SemicolonPreference {\n        Ignore = \"ignore\",\n        Insert = \"insert\",\n        Remove = \"remove\"\n    }\n    /** @deprecated - consider using EditorSettings instead */\n    interface EditorOptions {\n        BaseIndentSize?: number;\n        IndentSize: number;\n        TabSize: number;\n        NewLineCharacter: string;\n        ConvertTabsToSpaces: boolean;\n        IndentStyle: IndentStyle;\n    }\n    interface EditorSettings {\n        baseIndentSize?: number;\n        indentSize?: number;\n        tabSize?: number;\n        newLineCharacter?: string;\n        convertTabsToSpaces?: boolean;\n        indentStyle?: IndentStyle;\n        trimTrailingWhitespace?: boolean;\n    }\n    /** @deprecated - consider using FormatCodeSettings instead */\n    interface FormatCodeOptions extends EditorOptions {\n        InsertSpaceAfterCommaDelimiter: boolean;\n        InsertSpaceAfterSemicolonInForStatements: boolean;\n        InsertSpaceBeforeAndAfterBinaryOperators: boolean;\n        InsertSpaceAfterConstructor?: boolean;\n        InsertSpaceAfterKeywordsInControlFlowStatements: boolean;\n        InsertSpaceAfterFunctionKeywordForAnonymousFunctions: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBraces?: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces?: boolean;\n        InsertSpaceAfterTypeAssertion?: boolean;\n        InsertSpaceBeforeFunctionParenthesis?: boolean;\n        PlaceOpenBraceOnNewLineForFunctions: boolean;\n        PlaceOpenBraceOnNewLineForControlBlocks: boolean;\n        insertSpaceBeforeTypeAnnotation?: boolean;\n    }\n    interface FormatCodeSettings extends EditorSettings {\n        readonly insertSpaceAfterCommaDelimiter?: boolean;\n        readonly insertSpaceAfterSemicolonInForStatements?: boolean;\n        readonly insertSpaceBeforeAndAfterBinaryOperators?: boolean;\n        readonly insertSpaceAfterConstructor?: boolean;\n        readonly insertSpaceAfterKeywordsInControlFlowStatements?: boolean;\n        readonly insertSpaceAfterFunctionKeywordForAnonymousFunctions?: boolean;\n        readonly insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis?: boolean;\n        readonly insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets?: boolean;\n        readonly insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces?: boolean;\n        readonly insertSpaceAfterOpeningAndBeforeClosingEmptyBraces?: boolean;\n        readonly insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces?: boolean;\n        readonly insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces?: boolean;\n        readonly insertSpaceAfterTypeAssertion?: boolean;\n        readonly insertSpaceBeforeFunctionParenthesis?: boolean;\n        readonly placeOpenBraceOnNewLineForFunctions?: boolean;\n        readonly placeOpenBraceOnNewLineForControlBlocks?: boolean;\n        readonly insertSpaceBeforeTypeAnnotation?: boolean;\n        readonly indentMultiLineObjectLiteralBeginningOnBlankLine?: boolean;\n        readonly semicolons?: SemicolonPreference;\n    }\n    function getDefaultFormatCodeSettings(newLineCharacter?: string): FormatCodeSettings;\n    interface DefinitionInfo extends DocumentSpan {\n        kind: ScriptElementKind;\n        name: string;\n        containerKind: ScriptElementKind;\n        containerName: string;\n        unverified?: boolean;\n    }\n    interface DefinitionInfoAndBoundSpan {\n        definitions?: readonly DefinitionInfo[];\n        textSpan: TextSpan;\n    }\n    interface ReferencedSymbolDefinitionInfo extends DefinitionInfo {\n        displayParts: SymbolDisplayPart[];\n    }\n    interface ReferencedSymbol {\n        definition: ReferencedSymbolDefinitionInfo;\n        references: ReferencedSymbolEntry[];\n    }\n    interface ReferencedSymbolEntry extends ReferenceEntry {\n        isDefinition?: boolean;\n    }\n    enum SymbolDisplayPartKind {\n        aliasName = 0,\n        className = 1,\n        enumName = 2,\n        fieldName = 3,\n        interfaceName = 4,\n        keyword = 5,\n        lineBreak = 6,\n        numericLiteral = 7,\n        stringLiteral = 8,\n        localName = 9,\n        methodName = 10,\n        moduleName = 11,\n        operator = 12,\n        parameterName = 13,\n        propertyName = 14,\n        punctuation = 15,\n        space = 16,\n        text = 17,\n        typeParameterName = 18,\n        enumMemberName = 19,\n        functionName = 20,\n        regularExpressionLiteral = 21,\n        link = 22,\n        linkName = 23,\n        linkText = 24\n    }\n    interface SymbolDisplayPart {\n        text: string;\n        kind: string;\n    }\n    interface JSDocLinkDisplayPart extends SymbolDisplayPart {\n        target: DocumentSpan;\n    }\n    interface JSDocTagInfo {\n        name: string;\n        text?: SymbolDisplayPart[];\n    }\n    interface QuickInfo {\n        kind: ScriptElementKind;\n        kindModifiers: string;\n        textSpan: TextSpan;\n        displayParts?: SymbolDisplayPart[];\n        documentation?: SymbolDisplayPart[];\n        tags?: JSDocTagInfo[];\n    }\n    type RenameInfo = RenameInfoSuccess | RenameInfoFailure;\n    interface RenameInfoSuccess {\n        canRename: true;\n        /**\n         * File or directory to rename.\n         * If set, `getEditsForFileRename` should be called instead of `findRenameLocations`.\n         */\n        fileToRename?: string;\n        displayName: string;\n        fullDisplayName: string;\n        kind: ScriptElementKind;\n        kindModifiers: string;\n        triggerSpan: TextSpan;\n    }\n    interface RenameInfoFailure {\n        canRename: false;\n        localizedErrorMessage: string;\n    }\n    /**\n     * @deprecated Use `UserPreferences` instead.\n     */\n    interface RenameInfoOptions {\n        readonly allowRenameOfImportPath?: boolean;\n    }\n    interface DocCommentTemplateOptions {\n        readonly generateReturnInDocTemplate?: boolean;\n    }\n    interface SignatureHelpParameter {\n        name: string;\n        documentation: SymbolDisplayPart[];\n        displayParts: SymbolDisplayPart[];\n        isOptional: boolean;\n        isRest?: boolean;\n    }\n    interface SelectionRange {\n        textSpan: TextSpan;\n        parent?: SelectionRange;\n    }\n    /**\n     * Represents a single signature to show in signature help.\n     * The id is used for subsequent calls into the language service to ask questions about the\n     * signature help item in the context of any documents that have been updated.  i.e. after\n     * an edit has happened, while signature help is still active, the host can ask important\n     * questions like 'what parameter is the user currently contained within?'.\n     */\n    interface SignatureHelpItem {\n        isVariadic: boolean;\n        prefixDisplayParts: SymbolDisplayPart[];\n        suffixDisplayParts: SymbolDisplayPart[];\n        separatorDisplayParts: SymbolDisplayPart[];\n        parameters: SignatureHelpParameter[];\n        documentation: SymbolDisplayPart[];\n        tags: JSDocTagInfo[];\n    }\n    /**\n     * Represents a set of signature help items, and the preferred item that should be selected.\n     */\n    interface SignatureHelpItems {\n        items: SignatureHelpItem[];\n        applicableSpan: TextSpan;\n        selectedItemIndex: number;\n        argumentIndex: number;\n        argumentCount: number;\n    }\n    enum CompletionInfoFlags {\n        None = 0,\n        MayIncludeAutoImports = 1,\n        IsImportStatementCompletion = 2,\n        IsContinuation = 4,\n        ResolvedModuleSpecifiers = 8,\n        ResolvedModuleSpecifiersBeyondLimit = 16,\n        MayIncludeMethodSnippets = 32\n    }\n    interface CompletionInfo {\n        /** For performance telemetry. */\n        flags?: CompletionInfoFlags;\n        /** Not true for all global completions. This will be true if the enclosing scope matches a few syntax kinds. See `isSnippetScope`. */\n        isGlobalCompletion: boolean;\n        isMemberCompletion: boolean;\n        /**\n         * In the absence of `CompletionEntry[\"replacementSpan\"], the editor may choose whether to use\n         * this span or its default one. If `CompletionEntry[\"replacementSpan\"]` is defined, that span\n         * must be used to commit that completion entry.\n         */\n        optionalReplacementSpan?: TextSpan;\n        /**\n         * true when the current location also allows for a new identifier\n         */\n        isNewIdentifierLocation: boolean;\n        /**\n         * Indicates to client to continue requesting completions on subsequent keystrokes.\n         */\n        isIncomplete?: true;\n        entries: CompletionEntry[];\n    }\n    interface CompletionEntryDataAutoImport {\n        /**\n         * The name of the property or export in the module's symbol table. Differs from the completion name\n         * in the case of InternalSymbolName.ExportEquals and InternalSymbolName.Default.\n         */\n        exportName: string;\n        moduleSpecifier?: string;\n        /** The file name declaring the export's module symbol, if it was an external module */\n        fileName?: string;\n        /** The module name (with quotes stripped) of the export's module symbol, if it was an ambient module */\n        ambientModuleName?: string;\n        /** True if the export was found in the package.json AutoImportProvider */\n        isPackageJsonImport?: true;\n    }\n    interface CompletionEntryDataUnresolved extends CompletionEntryDataAutoImport {\n        /** The key in the `ExportMapCache` where the completion entry's `SymbolExportInfo[]` is found */\n        exportMapKey: string;\n    }\n    interface CompletionEntryDataResolved extends CompletionEntryDataAutoImport {\n        moduleSpecifier: string;\n    }\n    type CompletionEntryData = CompletionEntryDataUnresolved | CompletionEntryDataResolved;\n    interface CompletionEntry {\n        name: string;\n        kind: ScriptElementKind;\n        kindModifiers?: string;\n        sortText: string;\n        insertText?: string;\n        isSnippet?: true;\n        /**\n         * An optional span that indicates the text to be replaced by this completion item.\n         * If present, this span should be used instead of the default one.\n         * It will be set if the required span differs from the one generated by the default replacement behavior.\n         */\n        replacementSpan?: TextSpan;\n        hasAction?: true;\n        source?: string;\n        sourceDisplay?: SymbolDisplayPart[];\n        labelDetails?: CompletionEntryLabelDetails;\n        isRecommended?: true;\n        isFromUncheckedFile?: true;\n        isPackageJsonImport?: true;\n        isImportStatementCompletion?: true;\n        /**\n         * A property to be sent back to TS Server in the CompletionDetailsRequest, along with `name`,\n         * that allows TS Server to look up the symbol represented by the completion item, disambiguating\n         * items with the same name. Currently only defined for auto-import completions, but the type is\n         * `unknown` in the protocol, so it can be changed as needed to support other kinds of completions.\n         * The presence of this property should generally not be used to assume that this completion entry\n         * is an auto-import.\n         */\n        data?: CompletionEntryData;\n    }\n    interface CompletionEntryLabelDetails {\n        detail?: string;\n        description?: string;\n    }\n    interface CompletionEntryDetails {\n        name: string;\n        kind: ScriptElementKind;\n        kindModifiers: string;\n        displayParts: SymbolDisplayPart[];\n        documentation?: SymbolDisplayPart[];\n        tags?: JSDocTagInfo[];\n        codeActions?: CodeAction[];\n        /** @deprecated Use `sourceDisplay` instead. */\n        source?: SymbolDisplayPart[];\n        sourceDisplay?: SymbolDisplayPart[];\n    }\n    interface OutliningSpan {\n        /** The span of the document to actually collapse. */\n        textSpan: TextSpan;\n        /** The span of the document to display when the user hovers over the collapsed span. */\n        hintSpan: TextSpan;\n        /** The text to display in the editor for the collapsed region. */\n        bannerText: string;\n        /**\n         * Whether or not this region should be automatically collapsed when\n         * the 'Collapse to Definitions' command is invoked.\n         */\n        autoCollapse: boolean;\n        /**\n         * Classification of the contents of the span\n         */\n        kind: OutliningSpanKind;\n    }\n    enum OutliningSpanKind {\n        /** Single or multi-line comments */\n        Comment = \"comment\",\n        /** Sections marked by '// #region' and '// #endregion' comments */\n        Region = \"region\",\n        /** Declarations and expressions */\n        Code = \"code\",\n        /** Contiguous blocks of import declarations */\n        Imports = \"imports\"\n    }\n    enum OutputFileType {\n        JavaScript = 0,\n        SourceMap = 1,\n        Declaration = 2\n    }\n    enum EndOfLineState {\n        None = 0,\n        InMultiLineCommentTrivia = 1,\n        InSingleQuoteStringLiteral = 2,\n        InDoubleQuoteStringLiteral = 3,\n        InTemplateHeadOrNoSubstitutionTemplate = 4,\n        InTemplateMiddleOrTail = 5,\n        InTemplateSubstitutionPosition = 6\n    }\n    enum TokenClass {\n        Punctuation = 0,\n        Keyword = 1,\n        Operator = 2,\n        Comment = 3,\n        Whitespace = 4,\n        Identifier = 5,\n        NumberLiteral = 6,\n        BigIntLiteral = 7,\n        StringLiteral = 8,\n        RegExpLiteral = 9\n    }\n    interface ClassificationResult {\n        finalLexState: EndOfLineState;\n        entries: ClassificationInfo[];\n    }\n    interface ClassificationInfo {\n        length: number;\n        classification: TokenClass;\n    }\n    interface Classifier {\n        /**\n         * Gives lexical classifications of tokens on a line without any syntactic context.\n         * For instance, a token consisting of the text 'string' can be either an identifier\n         * named 'string' or the keyword 'string', however, because this classifier is not aware,\n         * it relies on certain heuristics to give acceptable results. For classifications where\n         * speed trumps accuracy, this function is preferable; however, for true accuracy, the\n         * syntactic classifier is ideal. In fact, in certain editing scenarios, combining the\n         * lexical, syntactic, and semantic classifiers may issue the best user experience.\n         *\n         * @param text                      The text of a line to classify.\n         * @param lexState                  The state of the lexical classifier at the end of the previous line.\n         * @param syntacticClassifierAbsent Whether the client is *not* using a syntactic classifier.\n         *                                  If there is no syntactic classifier (syntacticClassifierAbsent=true),\n         *                                  certain heuristics may be used in its place; however, if there is a\n         *                                  syntactic classifier (syntacticClassifierAbsent=false), certain\n         *                                  classifications which may be incorrectly categorized will be given\n         *                                  back as Identifiers in order to allow the syntactic classifier to\n         *                                  subsume the classification.\n         * @deprecated Use getLexicalClassifications instead.\n         */\n        getClassificationsForLine(text: string, lexState: EndOfLineState, syntacticClassifierAbsent: boolean): ClassificationResult;\n        getEncodedLexicalClassifications(text: string, endOfLineState: EndOfLineState, syntacticClassifierAbsent: boolean): Classifications;\n    }\n    enum ScriptElementKind {\n        unknown = \"\",\n        warning = \"warning\",\n        /** predefined type (void) or keyword (class) */\n        keyword = \"keyword\",\n        /** top level script node */\n        scriptElement = \"script\",\n        /** module foo {} */\n        moduleElement = \"module\",\n        /** class X {} */\n        classElement = \"class\",\n        /** var x = class X {} */\n        localClassElement = \"local class\",\n        /** interface Y {} */\n        interfaceElement = \"interface\",\n        /** type T = ... */\n        typeElement = \"type\",\n        /** enum E */\n        enumElement = \"enum\",\n        enumMemberElement = \"enum member\",\n        /**\n         * Inside module and script only\n         * const v = ..\n         */\n        variableElement = \"var\",\n        /** Inside function */\n        localVariableElement = \"local var\",\n        /**\n         * Inside module and script only\n         * function f() { }\n         */\n        functionElement = \"function\",\n        /** Inside function */\n        localFunctionElement = \"local function\",\n        /** class X { [public|private]* foo() {} } */\n        memberFunctionElement = \"method\",\n        /** class X { [public|private]* [get|set] foo:number; } */\n        memberGetAccessorElement = \"getter\",\n        memberSetAccessorElement = \"setter\",\n        /**\n         * class X { [public|private]* foo:number; }\n         * interface Y { foo:number; }\n         */\n        memberVariableElement = \"property\",\n        /**\n         * class X { constructor() { } }\n         * class X { static { } }\n         */\n        constructorImplementationElement = \"constructor\",\n        /** interface Y { ():number; } */\n        callSignatureElement = \"call\",\n        /** interface Y { []:number; } */\n        indexSignatureElement = \"index\",\n        /** interface Y { new():Y; } */\n        constructSignatureElement = \"construct\",\n        /** function foo(*Y*: string) */\n        parameterElement = \"parameter\",\n        typeParameterElement = \"type parameter\",\n        primitiveType = \"primitive type\",\n        label = \"label\",\n        alias = \"alias\",\n        constElement = \"const\",\n        letElement = \"let\",\n        directory = \"directory\",\n        externalModuleName = \"external module name\",\n        /**\n         * <JsxTagName attribute1 attribute2={0} />\n         * @deprecated\n         */\n        jsxAttribute = \"JSX attribute\",\n        /** String literal */\n        string = \"string\",\n        /** Jsdoc @link: in `{@link C link text}`, the before and after text \"{@link \" and \"}\" */\n        link = \"link\",\n        /** Jsdoc @link: in `{@link C link text}`, the entity name \"C\" */\n        linkName = \"link name\",\n        /** Jsdoc @link: in `{@link C link text}`, the link text \"link text\" */\n        linkText = \"link text\"\n    }\n    enum ScriptElementKindModifier {\n        none = \"\",\n        publicMemberModifier = \"public\",\n        privateMemberModifier = \"private\",\n        protectedMemberModifier = \"protected\",\n        exportedModifier = \"export\",\n        ambientModifier = \"declare\",\n        staticModifier = \"static\",\n        abstractModifier = \"abstract\",\n        optionalModifier = \"optional\",\n        deprecatedModifier = \"deprecated\",\n        dtsModifier = \".d.ts\",\n        tsModifier = \".ts\",\n        tsxModifier = \".tsx\",\n        jsModifier = \".js\",\n        jsxModifier = \".jsx\",\n        jsonModifier = \".json\",\n        dmtsModifier = \".d.mts\",\n        mtsModifier = \".mts\",\n        mjsModifier = \".mjs\",\n        dctsModifier = \".d.cts\",\n        ctsModifier = \".cts\",\n        cjsModifier = \".cjs\"\n    }\n    enum ClassificationTypeNames {\n        comment = \"comment\",\n        identifier = \"identifier\",\n        keyword = \"keyword\",\n        numericLiteral = \"number\",\n        bigintLiteral = \"bigint\",\n        operator = \"operator\",\n        stringLiteral = \"string\",\n        whiteSpace = \"whitespace\",\n        text = \"text\",\n        punctuation = \"punctuation\",\n        className = \"class name\",\n        enumName = \"enum name\",\n        interfaceName = \"interface name\",\n        moduleName = \"module name\",\n        typeParameterName = \"type parameter name\",\n        typeAliasName = \"type alias name\",\n        parameterName = \"parameter name\",\n        docCommentTagName = \"doc comment tag name\",\n        jsxOpenTagName = \"jsx open tag name\",\n        jsxCloseTagName = \"jsx close tag name\",\n        jsxSelfClosingTagName = \"jsx self closing tag name\",\n        jsxAttribute = \"jsx attribute\",\n        jsxText = \"jsx text\",\n        jsxAttributeStringLiteralValue = \"jsx attribute string literal value\"\n    }\n    enum ClassificationType {\n        comment = 1,\n        identifier = 2,\n        keyword = 3,\n        numericLiteral = 4,\n        operator = 5,\n        stringLiteral = 6,\n        regularExpressionLiteral = 7,\n        whiteSpace = 8,\n        text = 9,\n        punctuation = 10,\n        className = 11,\n        enumName = 12,\n        interfaceName = 13,\n        moduleName = 14,\n        typeParameterName = 15,\n        typeAliasName = 16,\n        parameterName = 17,\n        docCommentTagName = 18,\n        jsxOpenTagName = 19,\n        jsxCloseTagName = 20,\n        jsxSelfClosingTagName = 21,\n        jsxAttribute = 22,\n        jsxText = 23,\n        jsxAttributeStringLiteralValue = 24,\n        bigintLiteral = 25\n    }\n    interface InlayHintsContext {\n        file: SourceFile;\n        program: Program;\n        cancellationToken: CancellationToken;\n        host: LanguageServiceHost;\n        span: TextSpan;\n        preferences: UserPreferences;\n    }\n}\ndeclare namespace ts {\n    /** The classifier is used for syntactic highlighting in editors via the TSServer */\n    function createClassifier(): Classifier;\n}\ndeclare namespace ts {\n    interface DocumentHighlights {\n        fileName: string;\n        highlightSpans: HighlightSpan[];\n    }\n}\ndeclare namespace ts {\n    /**\n     * The document registry represents a store of SourceFile objects that can be shared between\n     * multiple LanguageService instances. A LanguageService instance holds on the SourceFile (AST)\n     * of files in the context.\n     * SourceFile objects account for most of the memory usage by the language service. Sharing\n     * the same DocumentRegistry instance between different instances of LanguageService allow\n     * for more efficient memory utilization since all projects will share at least the library\n     * file (lib.d.ts).\n     *\n     * A more advanced use of the document registry is to serialize sourceFile objects to disk\n     * and re-hydrate them when needed.\n     *\n     * To create a default DocumentRegistry, use createDocumentRegistry to create one, and pass it\n     * to all subsequent createLanguageService calls.\n     */\n    interface DocumentRegistry {\n        /**\n         * Request a stored SourceFile with a given fileName and compilationSettings.\n         * The first call to acquire will call createLanguageServiceSourceFile to generate\n         * the SourceFile if was not found in the registry.\n         *\n         * @param fileName The name of the file requested\n         * @param compilationSettingsOrHost Some compilation settings like target affects the\n         * shape of a the resulting SourceFile. This allows the DocumentRegistry to store\n         * multiple copies of the same file for different compilation settings. A minimal\n         * resolution cache is needed to fully define a source file's shape when\n         * the compilation settings include `module: node16`+, so providing a cache host\n         * object should be preferred. A common host is a language service `ConfiguredProject`.\n         * @param scriptSnapshot Text of the file. Only used if the file was not found\n         * in the registry and a new one was created.\n         * @param version Current version of the file. Only used if the file was not found\n         * in the registry and a new one was created.\n         */\n        acquireDocument(fileName: string, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, sourceFileOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile;\n        acquireDocumentWithKey(fileName: string, path: Path, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, sourceFileOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile;\n        /**\n         * Request an updated version of an already existing SourceFile with a given fileName\n         * and compilationSettings. The update will in-turn call updateLanguageServiceSourceFile\n         * to get an updated SourceFile.\n         *\n         * @param fileName The name of the file requested\n         * @param compilationSettingsOrHost Some compilation settings like target affects the\n         * shape of a the resulting SourceFile. This allows the DocumentRegistry to store\n         * multiple copies of the same file for different compilation settings. A minimal\n         * resolution cache is needed to fully define a source file's shape when\n         * the compilation settings include `module: node16`+, so providing a cache host\n         * object should be preferred. A common host is a language service `ConfiguredProject`.\n         * @param scriptSnapshot Text of the file.\n         * @param version Current version of the file.\n         */\n        updateDocument(fileName: string, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, sourceFileOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile;\n        updateDocumentWithKey(fileName: string, path: Path, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, sourceFileOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile;\n        getKeyForCompilationSettings(settings: CompilerOptions): DocumentRegistryBucketKey;\n        /**\n         * Informs the DocumentRegistry that a file is not needed any longer.\n         *\n         * Note: It is not allowed to call release on a SourceFile that was not acquired from\n         * this registry originally.\n         *\n         * @param fileName The name of the file to be released\n         * @param compilationSettings The compilation settings used to acquire the file\n         * @param scriptKind The script kind of the file to be released\n         */\n        /**@deprecated pass scriptKind and impliedNodeFormat for correctness */\n        releaseDocument(fileName: string, compilationSettings: CompilerOptions, scriptKind?: ScriptKind): void;\n        /**\n         * Informs the DocumentRegistry that a file is not needed any longer.\n         *\n         * Note: It is not allowed to call release on a SourceFile that was not acquired from\n         * this registry originally.\n         *\n         * @param fileName The name of the file to be released\n         * @param compilationSettings The compilation settings used to acquire the file\n         * @param scriptKind The script kind of the file to be released\n         * @param impliedNodeFormat The implied source file format of the file to be released\n         */\n        releaseDocument(fileName: string, compilationSettings: CompilerOptions, scriptKind: ScriptKind, impliedNodeFormat: SourceFile[\"impliedNodeFormat\"]): void;\n        /**\n         * @deprecated pass scriptKind for and impliedNodeFormat correctness */\n        releaseDocumentWithKey(path: Path, key: DocumentRegistryBucketKey, scriptKind?: ScriptKind): void;\n        releaseDocumentWithKey(path: Path, key: DocumentRegistryBucketKey, scriptKind: ScriptKind, impliedNodeFormat: SourceFile[\"impliedNodeFormat\"]): void;\n        reportStats(): string;\n    }\n    type DocumentRegistryBucketKey = string & {\n        __bucketKey: any;\n    };\n    function createDocumentRegistry(useCaseSensitiveFileNames?: boolean, currentDirectory?: string): DocumentRegistry;\n}\ndeclare namespace ts {\n    function preProcessFile(sourceText: string, readImportFiles?: boolean, detectJavaScriptImports?: boolean): PreProcessedFileInfo;\n}\ndeclare namespace ts {\n    interface TranspileOptions {\n        compilerOptions?: CompilerOptions;\n        fileName?: string;\n        reportDiagnostics?: boolean;\n        moduleName?: string;\n        renamedDependencies?: MapLike<string>;\n        transformers?: CustomTransformers;\n    }\n    interface TranspileOutput {\n        outputText: string;\n        diagnostics?: Diagnostic[];\n        sourceMapText?: string;\n    }\n    function transpileModule(input: string, transpileOptions: TranspileOptions): TranspileOutput;\n    function transpile(input: string, compilerOptions?: CompilerOptions, fileName?: string, diagnostics?: Diagnostic[], moduleName?: string): string;\n}\ndeclare namespace ts {\n    /** The version of the language service API */\n    const servicesVersion = \"0.8\";\n    function toEditorSettings(options: EditorOptions | EditorSettings): EditorSettings;\n    function displayPartsToString(displayParts: SymbolDisplayPart[] | undefined): string;\n    function getDefaultCompilerOptions(): CompilerOptions;\n    function getSupportedCodeFixes(): string[];\n    function createLanguageServiceSourceFile(fileName: string, scriptSnapshot: IScriptSnapshot, scriptTargetOrOptions: ScriptTarget | CreateSourceFileOptions, version: string, setNodeParents: boolean, scriptKind?: ScriptKind): SourceFile;\n    function updateLanguageServiceSourceFile(sourceFile: SourceFile, scriptSnapshot: IScriptSnapshot, version: string, textChangeRange: TextChangeRange | undefined, aggressiveChecks?: boolean): SourceFile;\n    function createLanguageService(host: LanguageServiceHost, documentRegistry?: DocumentRegistry, syntaxOnlyOrLanguageServiceMode?: boolean | LanguageServiceMode): LanguageService;\n    /**\n     * Get the path of the default library files (lib.d.ts) as distributed with the typescript\n     * node package.\n     * The functionality is not supported if the ts module is consumed outside of a node module.\n     */\n    function getDefaultLibFilePath(options: CompilerOptions): string;\n}\ndeclare namespace ts {\n    /**\n     * Transform one or more nodes using the supplied transformers.\n     * @param source A single `Node` or an array of `Node` objects.\n     * @param transformers An array of `TransformerFactory` callbacks used to process the transformation.\n     * @param compilerOptions Optional compiler options.\n     */\n    function transform<T extends Node>(source: T | T[], transformers: TransformerFactory<T>[], compilerOptions?: CompilerOptions): TransformationResult<T>;\n}\ndeclare namespace ts {\n    /** @deprecated Use `factory.createNodeArray` or the factory supplied by your transformation context instead. */\n    const createNodeArray: <T extends Node>(elements?: readonly T[] | undefined, hasTrailingComma?: boolean | undefined) => NodeArray<T>;\n    /** @deprecated Use `factory.createNumericLiteral` or the factory supplied by your transformation context instead. */\n    const createNumericLiteral: (value: string | number, numericLiteralFlags?: TokenFlags | undefined) => NumericLiteral;\n    /** @deprecated Use `factory.createBigIntLiteral` or the factory supplied by your transformation context instead. */\n    const createBigIntLiteral: (value: string | PseudoBigInt) => BigIntLiteral;\n    /** @deprecated Use `factory.createStringLiteral` or the factory supplied by your transformation context instead. */\n    const createStringLiteral: {\n        (text: string, isSingleQuote?: boolean | undefined): StringLiteral;\n        (text: string, isSingleQuote?: boolean | undefined, hasExtendedUnicodeEscape?: boolean | undefined): StringLiteral;\n    };\n    /** @deprecated Use `factory.createStringLiteralFromNode` or the factory supplied by your transformation context instead. */\n    const createStringLiteralFromNode: (sourceNode: PropertyNameLiteral, isSingleQuote?: boolean | undefined) => StringLiteral;\n    /** @deprecated Use `factory.createRegularExpressionLiteral` or the factory supplied by your transformation context instead. */\n    const createRegularExpressionLiteral: (text: string) => RegularExpressionLiteral;\n    /** @deprecated Use `factory.createLoopVariable` or the factory supplied by your transformation context instead. */\n    const createLoopVariable: (reservedInNestedScopes?: boolean | undefined) => Identifier;\n    /** @deprecated Use `factory.createUniqueName` or the factory supplied by your transformation context instead. */\n    const createUniqueName: (text: string, flags?: GeneratedIdentifierFlags | undefined) => Identifier;\n    /** @deprecated Use `factory.createPrivateIdentifier` or the factory supplied by your transformation context instead. */\n    const createPrivateIdentifier: (text: string) => PrivateIdentifier;\n    /** @deprecated Use `factory.createSuper` or the factory supplied by your transformation context instead. */\n    const createSuper: () => SuperExpression;\n    /** @deprecated Use `factory.createThis` or the factory supplied by your transformation context instead. */\n    const createThis: () => ThisExpression;\n    /** @deprecated Use `factory.createNull` or the factory supplied by your transformation context instead. */\n    const createNull: () => NullLiteral;\n    /** @deprecated Use `factory.createTrue` or the factory supplied by your transformation context instead. */\n    const createTrue: () => TrueLiteral;\n    /** @deprecated Use `factory.createFalse` or the factory supplied by your transformation context instead. */\n    const createFalse: () => FalseLiteral;\n    /** @deprecated Use `factory.createModifier` or the factory supplied by your transformation context instead. */\n    const createModifier: <T extends ModifierSyntaxKind>(kind: T) => ModifierToken<T>;\n    /** @deprecated Use `factory.createModifiersFromModifierFlags` or the factory supplied by your transformation context instead. */\n    const createModifiersFromModifierFlags: (flags: ModifierFlags) => Modifier[] | undefined;\n    /** @deprecated Use `factory.createQualifiedName` or the factory supplied by your transformation context instead. */\n    const createQualifiedName: (left: EntityName, right: string | Identifier) => QualifiedName;\n    /** @deprecated Use `factory.updateQualifiedName` or the factory supplied by your transformation context instead. */\n    const updateQualifiedName: (node: QualifiedName, left: EntityName, right: Identifier) => QualifiedName;\n    /** @deprecated Use `factory.createComputedPropertyName` or the factory supplied by your transformation context instead. */\n    const createComputedPropertyName: (expression: Expression) => ComputedPropertyName;\n    /** @deprecated Use `factory.updateComputedPropertyName` or the factory supplied by your transformation context instead. */\n    const updateComputedPropertyName: (node: ComputedPropertyName, expression: Expression) => ComputedPropertyName;\n    /** @deprecated Use `factory.createTypeParameterDeclaration` or the factory supplied by your transformation context instead. */\n    const createTypeParameterDeclaration: {\n        (modifiers: readonly Modifier[] | undefined, name: string | Identifier, constraint?: TypeNode | undefined, defaultType?: TypeNode | undefined): TypeParameterDeclaration;\n        (name: string | Identifier, constraint?: TypeNode | undefined, defaultType?: TypeNode | undefined): TypeParameterDeclaration;\n    };\n    /** @deprecated Use `factory.updateTypeParameterDeclaration` or the factory supplied by your transformation context instead. */\n    const updateTypeParameterDeclaration: {\n        (node: TypeParameterDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n        (node: TypeParameterDeclaration, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n    };\n    /** @deprecated Use `factory.createParameterDeclaration` or the factory supplied by your transformation context instead. */\n    const createParameter: {\n        (modifiers: readonly ModifierLike[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken?: QuestionToken | undefined, type?: TypeNode | undefined, initializer?: Expression | undefined): ParameterDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken?: QuestionToken | undefined, type?: TypeNode | undefined, initializer?: Expression | undefined): ParameterDeclaration;\n    };\n    /** @deprecated Use `factory.updateParameterDeclaration` or the factory supplied by your transformation context instead. */\n    const updateParameter: {\n        (node: ParameterDeclaration, modifiers: readonly ModifierLike[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): ParameterDeclaration;\n        (node: ParameterDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): ParameterDeclaration;\n    };\n    /** @deprecated Use `factory.createDecorator` or the factory supplied by your transformation context instead. */\n    const createDecorator: (expression: Expression) => Decorator;\n    /** @deprecated Use `factory.updateDecorator` or the factory supplied by your transformation context instead. */\n    const updateDecorator: (node: Decorator, expression: Expression) => Decorator;\n    /** @deprecated Use `factory.createPropertyDeclaration` or the factory supplied by your transformation context instead. */\n    const createProperty: {\n        (modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n    };\n    /** @deprecated Use `factory.updatePropertyDeclaration` or the factory supplied by your transformation context instead. */\n    const updateProperty: {\n        (node: PropertyDeclaration, modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n        (node: PropertyDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n    };\n    /** @deprecated Use `factory.createMethodDeclaration` or the factory supplied by your transformation context instead. */\n    const createMethod: {\n        (modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n    };\n    /** @deprecated Use `factory.updateMethodDeclaration` or the factory supplied by your transformation context instead. */\n    const updateMethod: {\n        (node: MethodDeclaration, modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n        (node: MethodDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n    };\n    /** @deprecated Use `factory.createConstructorDeclaration` or the factory supplied by your transformation context instead. */\n    const createConstructor: {\n        (modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n    };\n    /** @deprecated Use `factory.updateConstructorDeclaration` or the factory supplied by your transformation context instead. */\n    const updateConstructor: {\n        (node: ConstructorDeclaration, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n        (node: ConstructorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n    };\n    /** @deprecated Use `factory.createGetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n    const createGetAccessor: {\n        (modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n    };\n    /** @deprecated Use `factory.updateGetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n    const updateGetAccessor: {\n        (node: GetAccessorDeclaration, modifiers: readonly ModifierLike[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n        (node: GetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n    };\n    /** @deprecated Use `factory.createSetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n    const createSetAccessor: {\n        (modifiers: readonly ModifierLike[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n    };\n    /** @deprecated Use `factory.updateSetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n    const updateSetAccessor: {\n        (node: SetAccessorDeclaration, modifiers: readonly ModifierLike[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n        (node: SetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n    };\n    /** @deprecated Use `factory.createCallSignature` or the factory supplied by your transformation context instead. */\n    const createCallSignature: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined) => CallSignatureDeclaration;\n    /** @deprecated Use `factory.updateCallSignature` or the factory supplied by your transformation context instead. */\n    const updateCallSignature: (node: CallSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined) => CallSignatureDeclaration;\n    /** @deprecated Use `factory.createConstructSignature` or the factory supplied by your transformation context instead. */\n    const createConstructSignature: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined) => ConstructSignatureDeclaration;\n    /** @deprecated Use `factory.updateConstructSignature` or the factory supplied by your transformation context instead. */\n    const updateConstructSignature: (node: ConstructSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined) => ConstructSignatureDeclaration;\n    /** @deprecated Use `factory.updateIndexSignature` or the factory supplied by your transformation context instead. */\n    const updateIndexSignature: {\n        (node: IndexSignatureDeclaration, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n        (node: IndexSignatureDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n    };\n    /** @deprecated Use `factory.createKeywordTypeNode` or the factory supplied by your transformation context instead. */\n    const createKeywordTypeNode: <TKind extends KeywordTypeSyntaxKind>(kind: TKind) => KeywordTypeNode<TKind>;\n    /** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. */\n    const createTypePredicateNodeWithModifier: (assertsModifier: AssertsKeyword | undefined, parameterName: string | Identifier | ThisTypeNode, type: TypeNode | undefined) => TypePredicateNode;\n    /** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. */\n    const updateTypePredicateNodeWithModifier: (node: TypePredicateNode, assertsModifier: AssertsKeyword | undefined, parameterName: Identifier | ThisTypeNode, type: TypeNode | undefined) => TypePredicateNode;\n    /** @deprecated Use `factory.createTypeReferenceNode` or the factory supplied by your transformation context instead. */\n    const createTypeReferenceNode: (typeName: string | EntityName, typeArguments?: readonly TypeNode[] | undefined) => TypeReferenceNode;\n    /** @deprecated Use `factory.updateTypeReferenceNode` or the factory supplied by your transformation context instead. */\n    const updateTypeReferenceNode: (node: TypeReferenceNode, typeName: EntityName, typeArguments: NodeArray<TypeNode> | undefined) => TypeReferenceNode;\n    /** @deprecated Use `factory.createFunctionTypeNode` or the factory supplied by your transformation context instead. */\n    const createFunctionTypeNode: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode) => FunctionTypeNode;\n    /** @deprecated Use `factory.updateFunctionTypeNode` or the factory supplied by your transformation context instead. */\n    const updateFunctionTypeNode: (node: FunctionTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode) => FunctionTypeNode;\n    /** @deprecated Use `factory.createConstructorTypeNode` or the factory supplied by your transformation context instead. */\n    const createConstructorTypeNode: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode) => ConstructorTypeNode;\n    /** @deprecated Use `factory.updateConstructorTypeNode` or the factory supplied by your transformation context instead. */\n    const updateConstructorTypeNode: (node: ConstructorTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode) => ConstructorTypeNode;\n    /** @deprecated Use `factory.createTypeQueryNode` or the factory supplied by your transformation context instead. */\n    const createTypeQueryNode: (exprName: EntityName, typeArguments?: readonly TypeNode[] | undefined) => TypeQueryNode;\n    /** @deprecated Use `factory.updateTypeQueryNode` or the factory supplied by your transformation context instead. */\n    const updateTypeQueryNode: (node: TypeQueryNode, exprName: EntityName, typeArguments?: readonly TypeNode[] | undefined) => TypeQueryNode;\n    /** @deprecated Use `factory.createTypeLiteralNode` or the factory supplied by your transformation context instead. */\n    const createTypeLiteralNode: (members: readonly TypeElement[] | undefined) => TypeLiteralNode;\n    /** @deprecated Use `factory.updateTypeLiteralNode` or the factory supplied by your transformation context instead. */\n    const updateTypeLiteralNode: (node: TypeLiteralNode, members: NodeArray<TypeElement>) => TypeLiteralNode;\n    /** @deprecated Use `factory.createArrayTypeNode` or the factory supplied by your transformation context instead. */\n    const createArrayTypeNode: (elementType: TypeNode) => ArrayTypeNode;\n    /** @deprecated Use `factory.updateArrayTypeNode` or the factory supplied by your transformation context instead. */\n    const updateArrayTypeNode: (node: ArrayTypeNode, elementType: TypeNode) => ArrayTypeNode;\n    /** @deprecated Use `factory.createTupleTypeNode` or the factory supplied by your transformation context instead. */\n    const createTupleTypeNode: (elements: readonly (TypeNode | NamedTupleMember)[]) => TupleTypeNode;\n    /** @deprecated Use `factory.updateTupleTypeNode` or the factory supplied by your transformation context instead. */\n    const updateTupleTypeNode: (node: TupleTypeNode, elements: readonly (TypeNode | NamedTupleMember)[]) => TupleTypeNode;\n    /** @deprecated Use `factory.createOptionalTypeNode` or the factory supplied by your transformation context instead. */\n    const createOptionalTypeNode: (type: TypeNode) => OptionalTypeNode;\n    /** @deprecated Use `factory.updateOptionalTypeNode` or the factory supplied by your transformation context instead. */\n    const updateOptionalTypeNode: (node: OptionalTypeNode, type: TypeNode) => OptionalTypeNode;\n    /** @deprecated Use `factory.createRestTypeNode` or the factory supplied by your transformation context instead. */\n    const createRestTypeNode: (type: TypeNode) => RestTypeNode;\n    /** @deprecated Use `factory.updateRestTypeNode` or the factory supplied by your transformation context instead. */\n    const updateRestTypeNode: (node: RestTypeNode, type: TypeNode) => RestTypeNode;\n    /** @deprecated Use `factory.createUnionTypeNode` or the factory supplied by your transformation context instead. */\n    const createUnionTypeNode: (types: readonly TypeNode[]) => UnionTypeNode;\n    /** @deprecated Use `factory.updateUnionTypeNode` or the factory supplied by your transformation context instead. */\n    const updateUnionTypeNode: (node: UnionTypeNode, types: NodeArray<TypeNode>) => UnionTypeNode;\n    /** @deprecated Use `factory.createIntersectionTypeNode` or the factory supplied by your transformation context instead. */\n    const createIntersectionTypeNode: (types: readonly TypeNode[]) => IntersectionTypeNode;\n    /** @deprecated Use `factory.updateIntersectionTypeNode` or the factory supplied by your transformation context instead. */\n    const updateIntersectionTypeNode: (node: IntersectionTypeNode, types: NodeArray<TypeNode>) => IntersectionTypeNode;\n    /** @deprecated Use `factory.createConditionalTypeNode` or the factory supplied by your transformation context instead. */\n    const createConditionalTypeNode: (checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode) => ConditionalTypeNode;\n    /** @deprecated Use `factory.updateConditionalTypeNode` or the factory supplied by your transformation context instead. */\n    const updateConditionalTypeNode: (node: ConditionalTypeNode, checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode) => ConditionalTypeNode;\n    /** @deprecated Use `factory.createInferTypeNode` or the factory supplied by your transformation context instead. */\n    const createInferTypeNode: (typeParameter: TypeParameterDeclaration) => InferTypeNode;\n    /** @deprecated Use `factory.updateInferTypeNode` or the factory supplied by your transformation context instead. */\n    const updateInferTypeNode: (node: InferTypeNode, typeParameter: TypeParameterDeclaration) => InferTypeNode;\n    /** @deprecated Use `factory.createImportTypeNode` or the factory supplied by your transformation context instead. */\n    const createImportTypeNode: {\n        (argument: TypeNode, assertions?: ImportTypeAssertionContainer | undefined, qualifier?: EntityName | undefined, typeArguments?: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n        (argument: TypeNode, assertions?: ImportTypeAssertionContainer | undefined, qualifier?: EntityName | undefined, typeArguments?: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n        (argument: TypeNode, qualifier?: EntityName | undefined, typeArguments?: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n    };\n    /** @deprecated Use `factory.updateImportTypeNode` or the factory supplied by your transformation context instead. */\n    const updateImportTypeNode: {\n        (node: ImportTypeNode, argument: TypeNode, assertions: ImportTypeAssertionContainer | undefined, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n        (node: ImportTypeNode, argument: TypeNode, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n    };\n    /** @deprecated Use `factory.createParenthesizedType` or the factory supplied by your transformation context instead. */\n    const createParenthesizedType: (type: TypeNode) => ParenthesizedTypeNode;\n    /** @deprecated Use `factory.updateParenthesizedType` or the factory supplied by your transformation context instead. */\n    const updateParenthesizedType: (node: ParenthesizedTypeNode, type: TypeNode) => ParenthesizedTypeNode;\n    /** @deprecated Use `factory.createThisTypeNode` or the factory supplied by your transformation context instead. */\n    const createThisTypeNode: () => ThisTypeNode;\n    /** @deprecated Use `factory.updateTypeOperatorNode` or the factory supplied by your transformation context instead. */\n    const updateTypeOperatorNode: (node: TypeOperatorNode, type: TypeNode) => TypeOperatorNode;\n    /** @deprecated Use `factory.createIndexedAccessTypeNode` or the factory supplied by your transformation context instead. */\n    const createIndexedAccessTypeNode: (objectType: TypeNode, indexType: TypeNode) => IndexedAccessTypeNode;\n    /** @deprecated Use `factory.updateIndexedAccessTypeNode` or the factory supplied by your transformation context instead. */\n    const updateIndexedAccessTypeNode: (node: IndexedAccessTypeNode, objectType: TypeNode, indexType: TypeNode) => IndexedAccessTypeNode;\n    /** @deprecated Use `factory.createMappedTypeNode` or the factory supplied by your transformation context instead. */\n    const createMappedTypeNode: (readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined) => MappedTypeNode;\n    /** @deprecated Use `factory.updateMappedTypeNode` or the factory supplied by your transformation context instead. */\n    const updateMappedTypeNode: (node: MappedTypeNode, readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined) => MappedTypeNode;\n    /** @deprecated Use `factory.createLiteralTypeNode` or the factory supplied by your transformation context instead. */\n    const createLiteralTypeNode: (literal: LiteralExpression | BooleanLiteral | PrefixUnaryExpression | NullLiteral) => LiteralTypeNode;\n    /** @deprecated Use `factory.updateLiteralTypeNode` or the factory supplied by your transformation context instead. */\n    const updateLiteralTypeNode: (node: LiteralTypeNode, literal: LiteralExpression | BooleanLiteral | PrefixUnaryExpression | NullLiteral) => LiteralTypeNode;\n    /** @deprecated Use `factory.createObjectBindingPattern` or the factory supplied by your transformation context instead. */\n    const createObjectBindingPattern: (elements: readonly BindingElement[]) => ObjectBindingPattern;\n    /** @deprecated Use `factory.updateObjectBindingPattern` or the factory supplied by your transformation context instead. */\n    const updateObjectBindingPattern: (node: ObjectBindingPattern, elements: readonly BindingElement[]) => ObjectBindingPattern;\n    /** @deprecated Use `factory.createArrayBindingPattern` or the factory supplied by your transformation context instead. */\n    const createArrayBindingPattern: (elements: readonly ArrayBindingElement[]) => ArrayBindingPattern;\n    /** @deprecated Use `factory.updateArrayBindingPattern` or the factory supplied by your transformation context instead. */\n    const updateArrayBindingPattern: (node: ArrayBindingPattern, elements: readonly ArrayBindingElement[]) => ArrayBindingPattern;\n    /** @deprecated Use `factory.createBindingElement` or the factory supplied by your transformation context instead. */\n    const createBindingElement: (dotDotDotToken: DotDotDotToken | undefined, propertyName: string | PropertyName | undefined, name: string | BindingName, initializer?: Expression | undefined) => BindingElement;\n    /** @deprecated Use `factory.updateBindingElement` or the factory supplied by your transformation context instead. */\n    const updateBindingElement: (node: BindingElement, dotDotDotToken: DotDotDotToken | undefined, propertyName: PropertyName | undefined, name: BindingName, initializer: Expression | undefined) => BindingElement;\n    /** @deprecated Use `factory.createArrayLiteralExpression` or the factory supplied by your transformation context instead. */\n    const createArrayLiteral: (elements?: readonly Expression[] | undefined, multiLine?: boolean | undefined) => ArrayLiteralExpression;\n    /** @deprecated Use `factory.updateArrayLiteralExpression` or the factory supplied by your transformation context instead. */\n    const updateArrayLiteral: (node: ArrayLiteralExpression, elements: readonly Expression[]) => ArrayLiteralExpression;\n    /** @deprecated Use `factory.createObjectLiteralExpression` or the factory supplied by your transformation context instead. */\n    const createObjectLiteral: (properties?: readonly ObjectLiteralElementLike[] | undefined, multiLine?: boolean | undefined) => ObjectLiteralExpression;\n    /** @deprecated Use `factory.updateObjectLiteralExpression` or the factory supplied by your transformation context instead. */\n    const updateObjectLiteral: (node: ObjectLiteralExpression, properties: readonly ObjectLiteralElementLike[]) => ObjectLiteralExpression;\n    /** @deprecated Use `factory.createPropertyAccessExpression` or the factory supplied by your transformation context instead. */\n    const createPropertyAccess: (expression: Expression, name: string | MemberName) => PropertyAccessExpression;\n    /** @deprecated Use `factory.updatePropertyAccessExpression` or the factory supplied by your transformation context instead. */\n    const updatePropertyAccess: (node: PropertyAccessExpression, expression: Expression, name: MemberName) => PropertyAccessExpression;\n    /** @deprecated Use `factory.createPropertyAccessChain` or the factory supplied by your transformation context instead. */\n    const createPropertyAccessChain: (expression: Expression, questionDotToken: QuestionDotToken | undefined, name: string | MemberName) => PropertyAccessChain;\n    /** @deprecated Use `factory.updatePropertyAccessChain` or the factory supplied by your transformation context instead. */\n    const updatePropertyAccessChain: (node: PropertyAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, name: MemberName) => PropertyAccessChain;\n    /** @deprecated Use `factory.createElementAccessExpression` or the factory supplied by your transformation context instead. */\n    const createElementAccess: (expression: Expression, index: number | Expression) => ElementAccessExpression;\n    /** @deprecated Use `factory.updateElementAccessExpression` or the factory supplied by your transformation context instead. */\n    const updateElementAccess: (node: ElementAccessExpression, expression: Expression, argumentExpression: Expression) => ElementAccessExpression;\n    /** @deprecated Use `factory.createElementAccessChain` or the factory supplied by your transformation context instead. */\n    const createElementAccessChain: (expression: Expression, questionDotToken: QuestionDotToken | undefined, index: number | Expression) => ElementAccessChain;\n    /** @deprecated Use `factory.updateElementAccessChain` or the factory supplied by your transformation context instead. */\n    const updateElementAccessChain: (node: ElementAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, argumentExpression: Expression) => ElementAccessChain;\n    /** @deprecated Use `factory.createCallExpression` or the factory supplied by your transformation context instead. */\n    const createCall: (expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => CallExpression;\n    /** @deprecated Use `factory.updateCallExpression` or the factory supplied by your transformation context instead. */\n    const updateCall: (node: CallExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]) => CallExpression;\n    /** @deprecated Use `factory.createCallChain` or the factory supplied by your transformation context instead. */\n    const createCallChain: (expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => CallChain;\n    /** @deprecated Use `factory.updateCallChain` or the factory supplied by your transformation context instead. */\n    const updateCallChain: (node: CallChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]) => CallChain;\n    /** @deprecated Use `factory.createNewExpression` or the factory supplied by your transformation context instead. */\n    const createNew: (expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => NewExpression;\n    /** @deprecated Use `factory.updateNewExpression` or the factory supplied by your transformation context instead. */\n    const updateNew: (node: NewExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => NewExpression;\n    /** @deprecated Use `factory.createTypeAssertion` or the factory supplied by your transformation context instead. */\n    const createTypeAssertion: (type: TypeNode, expression: Expression) => TypeAssertion;\n    /** @deprecated Use `factory.updateTypeAssertion` or the factory supplied by your transformation context instead. */\n    const updateTypeAssertion: (node: TypeAssertion, type: TypeNode, expression: Expression) => TypeAssertion;\n    /** @deprecated Use `factory.createParenthesizedExpression` or the factory supplied by your transformation context instead. */\n    const createParen: (expression: Expression) => ParenthesizedExpression;\n    /** @deprecated Use `factory.updateParenthesizedExpression` or the factory supplied by your transformation context instead. */\n    const updateParen: (node: ParenthesizedExpression, expression: Expression) => ParenthesizedExpression;\n    /** @deprecated Use `factory.createFunctionExpression` or the factory supplied by your transformation context instead. */\n    const createFunctionExpression: (modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[] | undefined, type: TypeNode | undefined, body: Block) => FunctionExpression;\n    /** @deprecated Use `factory.updateFunctionExpression` or the factory supplied by your transformation context instead. */\n    const updateFunctionExpression: (node: FunctionExpression, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block) => FunctionExpression;\n    /** @deprecated Use `factory.createDeleteExpression` or the factory supplied by your transformation context instead. */\n    const createDelete: (expression: Expression) => DeleteExpression;\n    /** @deprecated Use `factory.updateDeleteExpression` or the factory supplied by your transformation context instead. */\n    const updateDelete: (node: DeleteExpression, expression: Expression) => DeleteExpression;\n    /** @deprecated Use `factory.createTypeOfExpression` or the factory supplied by your transformation context instead. */\n    const createTypeOf: (expression: Expression) => TypeOfExpression;\n    /** @deprecated Use `factory.updateTypeOfExpression` or the factory supplied by your transformation context instead. */\n    const updateTypeOf: (node: TypeOfExpression, expression: Expression) => TypeOfExpression;\n    /** @deprecated Use `factory.createVoidExpression` or the factory supplied by your transformation context instead. */\n    const createVoid: (expression: Expression) => VoidExpression;\n    /** @deprecated Use `factory.updateVoidExpression` or the factory supplied by your transformation context instead. */\n    const updateVoid: (node: VoidExpression, expression: Expression) => VoidExpression;\n    /** @deprecated Use `factory.createAwaitExpression` or the factory supplied by your transformation context instead. */\n    const createAwait: (expression: Expression) => AwaitExpression;\n    /** @deprecated Use `factory.updateAwaitExpression` or the factory supplied by your transformation context instead. */\n    const updateAwait: (node: AwaitExpression, expression: Expression) => AwaitExpression;\n    /** @deprecated Use `factory.createPrefixExpression` or the factory supplied by your transformation context instead. */\n    const createPrefix: (operator: PrefixUnaryOperator, operand: Expression) => PrefixUnaryExpression;\n    /** @deprecated Use `factory.updatePrefixExpression` or the factory supplied by your transformation context instead. */\n    const updatePrefix: (node: PrefixUnaryExpression, operand: Expression) => PrefixUnaryExpression;\n    /** @deprecated Use `factory.createPostfixUnaryExpression` or the factory supplied by your transformation context instead. */\n    const createPostfix: (operand: Expression, operator: PostfixUnaryOperator) => PostfixUnaryExpression;\n    /** @deprecated Use `factory.updatePostfixUnaryExpression` or the factory supplied by your transformation context instead. */\n    const updatePostfix: (node: PostfixUnaryExpression, operand: Expression) => PostfixUnaryExpression;\n    /** @deprecated Use `factory.createBinaryExpression` or the factory supplied by your transformation context instead. */\n    const createBinary: (left: Expression, operator: BinaryOperator | BinaryOperatorToken, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.updateConditionalExpression` or the factory supplied by your transformation context instead. */\n    const updateConditional: (node: ConditionalExpression, condition: Expression, questionToken: QuestionToken, whenTrue: Expression, colonToken: ColonToken, whenFalse: Expression) => ConditionalExpression;\n    /** @deprecated Use `factory.createTemplateExpression` or the factory supplied by your transformation context instead. */\n    const createTemplateExpression: (head: TemplateHead, templateSpans: readonly TemplateSpan[]) => TemplateExpression;\n    /** @deprecated Use `factory.updateTemplateExpression` or the factory supplied by your transformation context instead. */\n    const updateTemplateExpression: (node: TemplateExpression, head: TemplateHead, templateSpans: readonly TemplateSpan[]) => TemplateExpression;\n    /** @deprecated Use `factory.createTemplateHead` or the factory supplied by your transformation context instead. */\n    const createTemplateHead: {\n        (text: string, rawText?: string | undefined, templateFlags?: TokenFlags | undefined): TemplateHead;\n        (text: string | undefined, rawText: string, templateFlags?: TokenFlags | undefined): TemplateHead;\n    };\n    /** @deprecated Use `factory.createTemplateMiddle` or the factory supplied by your transformation context instead. */\n    const createTemplateMiddle: {\n        (text: string, rawText?: string | undefined, templateFlags?: TokenFlags | undefined): TemplateMiddle;\n        (text: string | undefined, rawText: string, templateFlags?: TokenFlags | undefined): TemplateMiddle;\n    };\n    /** @deprecated Use `factory.createTemplateTail` or the factory supplied by your transformation context instead. */\n    const createTemplateTail: {\n        (text: string, rawText?: string | undefined, templateFlags?: TokenFlags | undefined): TemplateTail;\n        (text: string | undefined, rawText: string, templateFlags?: TokenFlags | undefined): TemplateTail;\n    };\n    /** @deprecated Use `factory.createNoSubstitutionTemplateLiteral` or the factory supplied by your transformation context instead. */\n    const createNoSubstitutionTemplateLiteral: {\n        (text: string, rawText?: string | undefined): NoSubstitutionTemplateLiteral;\n        (text: string | undefined, rawText: string): NoSubstitutionTemplateLiteral;\n    };\n    /** @deprecated Use `factory.updateYieldExpression` or the factory supplied by your transformation context instead. */\n    const updateYield: (node: YieldExpression, asteriskToken: AsteriskToken | undefined, expression: Expression | undefined) => YieldExpression;\n    /** @deprecated Use `factory.createSpreadExpression` or the factory supplied by your transformation context instead. */\n    const createSpread: (expression: Expression) => SpreadElement;\n    /** @deprecated Use `factory.updateSpreadExpression` or the factory supplied by your transformation context instead. */\n    const updateSpread: (node: SpreadElement, expression: Expression) => SpreadElement;\n    /** @deprecated Use `factory.createOmittedExpression` or the factory supplied by your transformation context instead. */\n    const createOmittedExpression: () => OmittedExpression;\n    /** @deprecated Use `factory.createAsExpression` or the factory supplied by your transformation context instead. */\n    const createAsExpression: (expression: Expression, type: TypeNode) => AsExpression;\n    /** @deprecated Use `factory.updateAsExpression` or the factory supplied by your transformation context instead. */\n    const updateAsExpression: (node: AsExpression, expression: Expression, type: TypeNode) => AsExpression;\n    /** @deprecated Use `factory.createNonNullExpression` or the factory supplied by your transformation context instead. */\n    const createNonNullExpression: (expression: Expression) => NonNullExpression;\n    /** @deprecated Use `factory.updateNonNullExpression` or the factory supplied by your transformation context instead. */\n    const updateNonNullExpression: (node: NonNullExpression, expression: Expression) => NonNullExpression;\n    /** @deprecated Use `factory.createNonNullChain` or the factory supplied by your transformation context instead. */\n    const createNonNullChain: (expression: Expression) => NonNullChain;\n    /** @deprecated Use `factory.updateNonNullChain` or the factory supplied by your transformation context instead. */\n    const updateNonNullChain: (node: NonNullChain, expression: Expression) => NonNullChain;\n    /** @deprecated Use `factory.createMetaProperty` or the factory supplied by your transformation context instead. */\n    const createMetaProperty: (keywordToken: SyntaxKind.ImportKeyword | SyntaxKind.NewKeyword, name: Identifier) => MetaProperty;\n    /** @deprecated Use `factory.updateMetaProperty` or the factory supplied by your transformation context instead. */\n    const updateMetaProperty: (node: MetaProperty, name: Identifier) => MetaProperty;\n    /** @deprecated Use `factory.createTemplateSpan` or the factory supplied by your transformation context instead. */\n    const createTemplateSpan: (expression: Expression, literal: TemplateMiddle | TemplateTail) => TemplateSpan;\n    /** @deprecated Use `factory.updateTemplateSpan` or the factory supplied by your transformation context instead. */\n    const updateTemplateSpan: (node: TemplateSpan, expression: Expression, literal: TemplateMiddle | TemplateTail) => TemplateSpan;\n    /** @deprecated Use `factory.createSemicolonClassElement` or the factory supplied by your transformation context instead. */\n    const createSemicolonClassElement: () => SemicolonClassElement;\n    /** @deprecated Use `factory.createBlock` or the factory supplied by your transformation context instead. */\n    const createBlock: (statements: readonly Statement[], multiLine?: boolean | undefined) => Block;\n    /** @deprecated Use `factory.updateBlock` or the factory supplied by your transformation context instead. */\n    const updateBlock: (node: Block, statements: readonly Statement[]) => Block;\n    /** @deprecated Use `factory.createVariableStatement` or the factory supplied by your transformation context instead. */\n    const createVariableStatement: (modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList | readonly VariableDeclaration[]) => VariableStatement;\n    /** @deprecated Use `factory.updateVariableStatement` or the factory supplied by your transformation context instead. */\n    const updateVariableStatement: (node: VariableStatement, modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList) => VariableStatement;\n    /** @deprecated Use `factory.createEmptyStatement` or the factory supplied by your transformation context instead. */\n    const createEmptyStatement: () => EmptyStatement;\n    /** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. */\n    const createExpressionStatement: (expression: Expression) => ExpressionStatement;\n    /** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. */\n    const updateExpressionStatement: (node: ExpressionStatement, expression: Expression) => ExpressionStatement;\n    /** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. */\n    const createStatement: (expression: Expression) => ExpressionStatement;\n    /** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. */\n    const updateStatement: (node: ExpressionStatement, expression: Expression) => ExpressionStatement;\n    /** @deprecated Use `factory.createIfStatement` or the factory supplied by your transformation context instead. */\n    const createIf: (expression: Expression, thenStatement: Statement, elseStatement?: Statement | undefined) => IfStatement;\n    /** @deprecated Use `factory.updateIfStatement` or the factory supplied by your transformation context instead. */\n    const updateIf: (node: IfStatement, expression: Expression, thenStatement: Statement, elseStatement: Statement | undefined) => IfStatement;\n    /** @deprecated Use `factory.createDoStatement` or the factory supplied by your transformation context instead. */\n    const createDo: (statement: Statement, expression: Expression) => DoStatement;\n    /** @deprecated Use `factory.updateDoStatement` or the factory supplied by your transformation context instead. */\n    const updateDo: (node: DoStatement, statement: Statement, expression: Expression) => DoStatement;\n    /** @deprecated Use `factory.createWhileStatement` or the factory supplied by your transformation context instead. */\n    const createWhile: (expression: Expression, statement: Statement) => WhileStatement;\n    /** @deprecated Use `factory.updateWhileStatement` or the factory supplied by your transformation context instead. */\n    const updateWhile: (node: WhileStatement, expression: Expression, statement: Statement) => WhileStatement;\n    /** @deprecated Use `factory.createForStatement` or the factory supplied by your transformation context instead. */\n    const createFor: (initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement) => ForStatement;\n    /** @deprecated Use `factory.updateForStatement` or the factory supplied by your transformation context instead. */\n    const updateFor: (node: ForStatement, initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement) => ForStatement;\n    /** @deprecated Use `factory.createForInStatement` or the factory supplied by your transformation context instead. */\n    const createForIn: (initializer: ForInitializer, expression: Expression, statement: Statement) => ForInStatement;\n    /** @deprecated Use `factory.updateForInStatement` or the factory supplied by your transformation context instead. */\n    const updateForIn: (node: ForInStatement, initializer: ForInitializer, expression: Expression, statement: Statement) => ForInStatement;\n    /** @deprecated Use `factory.createForOfStatement` or the factory supplied by your transformation context instead. */\n    const createForOf: (awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement) => ForOfStatement;\n    /** @deprecated Use `factory.updateForOfStatement` or the factory supplied by your transformation context instead. */\n    const updateForOf: (node: ForOfStatement, awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement) => ForOfStatement;\n    /** @deprecated Use `factory.createContinueStatement` or the factory supplied by your transformation context instead. */\n    const createContinue: (label?: string | Identifier | undefined) => ContinueStatement;\n    /** @deprecated Use `factory.updateContinueStatement` or the factory supplied by your transformation context instead. */\n    const updateContinue: (node: ContinueStatement, label: Identifier | undefined) => ContinueStatement;\n    /** @deprecated Use `factory.createBreakStatement` or the factory supplied by your transformation context instead. */\n    const createBreak: (label?: string | Identifier | undefined) => BreakStatement;\n    /** @deprecated Use `factory.updateBreakStatement` or the factory supplied by your transformation context instead. */\n    const updateBreak: (node: BreakStatement, label: Identifier | undefined) => BreakStatement;\n    /** @deprecated Use `factory.createReturnStatement` or the factory supplied by your transformation context instead. */\n    const createReturn: (expression?: Expression | undefined) => ReturnStatement;\n    /** @deprecated Use `factory.updateReturnStatement` or the factory supplied by your transformation context instead. */\n    const updateReturn: (node: ReturnStatement, expression: Expression | undefined) => ReturnStatement;\n    /** @deprecated Use `factory.createWithStatement` or the factory supplied by your transformation context instead. */\n    const createWith: (expression: Expression, statement: Statement) => WithStatement;\n    /** @deprecated Use `factory.updateWithStatement` or the factory supplied by your transformation context instead. */\n    const updateWith: (node: WithStatement, expression: Expression, statement: Statement) => WithStatement;\n    /** @deprecated Use `factory.createSwitchStatement` or the factory supplied by your transformation context instead. */\n    const createSwitch: (expression: Expression, caseBlock: CaseBlock) => SwitchStatement;\n    /** @deprecated Use `factory.updateSwitchStatement` or the factory supplied by your transformation context instead. */\n    const updateSwitch: (node: SwitchStatement, expression: Expression, caseBlock: CaseBlock) => SwitchStatement;\n    /** @deprecated Use `factory.createLabelStatement` or the factory supplied by your transformation context instead. */\n    const createLabel: (label: string | Identifier, statement: Statement) => LabeledStatement;\n    /** @deprecated Use `factory.updateLabelStatement` or the factory supplied by your transformation context instead. */\n    const updateLabel: (node: LabeledStatement, label: Identifier, statement: Statement) => LabeledStatement;\n    /** @deprecated Use `factory.createThrowStatement` or the factory supplied by your transformation context instead. */\n    const createThrow: (expression: Expression) => ThrowStatement;\n    /** @deprecated Use `factory.updateThrowStatement` or the factory supplied by your transformation context instead. */\n    const updateThrow: (node: ThrowStatement, expression: Expression) => ThrowStatement;\n    /** @deprecated Use `factory.createTryStatement` or the factory supplied by your transformation context instead. */\n    const createTry: (tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined) => TryStatement;\n    /** @deprecated Use `factory.updateTryStatement` or the factory supplied by your transformation context instead. */\n    const updateTry: (node: TryStatement, tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined) => TryStatement;\n    /** @deprecated Use `factory.createDebuggerStatement` or the factory supplied by your transformation context instead. */\n    const createDebuggerStatement: () => DebuggerStatement;\n    /** @deprecated Use `factory.createVariableDeclarationList` or the factory supplied by your transformation context instead. */\n    const createVariableDeclarationList: (declarations: readonly VariableDeclaration[], flags?: NodeFlags | undefined) => VariableDeclarationList;\n    /** @deprecated Use `factory.updateVariableDeclarationList` or the factory supplied by your transformation context instead. */\n    const updateVariableDeclarationList: (node: VariableDeclarationList, declarations: readonly VariableDeclaration[]) => VariableDeclarationList;\n    /** @deprecated Use `factory.createFunctionDeclaration` or the factory supplied by your transformation context instead. */\n    const createFunctionDeclaration: {\n        (modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n    };\n    /** @deprecated Use `factory.updateFunctionDeclaration` or the factory supplied by your transformation context instead. */\n    const updateFunctionDeclaration: {\n        (node: FunctionDeclaration, modifiers: readonly ModifierLike[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n        (node: FunctionDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n    };\n    /** @deprecated Use `factory.createClassDeclaration` or the factory supplied by your transformation context instead. */\n    const createClassDeclaration: {\n        (modifiers: readonly ModifierLike[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n    };\n    /** @deprecated Use `factory.updateClassDeclaration` or the factory supplied by your transformation context instead. */\n    const updateClassDeclaration: {\n        (node: ClassDeclaration, modifiers: readonly ModifierLike[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n        (node: ClassDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n    };\n    /** @deprecated Use `factory.createInterfaceDeclaration` or the factory supplied by your transformation context instead. */\n    const createInterfaceDeclaration: {\n        (modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n    };\n    /** @deprecated Use `factory.updateInterfaceDeclaration` or the factory supplied by your transformation context instead. */\n    const updateInterfaceDeclaration: {\n        (node: InterfaceDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n        (node: InterfaceDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n    };\n    /** @deprecated Use `factory.createTypeAliasDeclaration` or the factory supplied by your transformation context instead. */\n    const createTypeAliasDeclaration: {\n        (modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n    };\n    /** @deprecated Use `factory.updateTypeAliasDeclaration` or the factory supplied by your transformation context instead. */\n    const updateTypeAliasDeclaration: {\n        (node: TypeAliasDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n        (node: TypeAliasDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n    };\n    /** @deprecated Use `factory.createEnumDeclaration` or the factory supplied by your transformation context instead. */\n    const createEnumDeclaration: {\n        (modifiers: readonly Modifier[] | undefined, name: string | Identifier, members: readonly EnumMember[]): EnumDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, members: readonly EnumMember[]): EnumDeclaration;\n    };\n    /** @deprecated Use `factory.updateEnumDeclaration` or the factory supplied by your transformation context instead. */\n    const updateEnumDeclaration: {\n        (node: EnumDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, members: readonly EnumMember[]): EnumDeclaration;\n        (node: EnumDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, members: readonly EnumMember[]): EnumDeclaration;\n    };\n    /** @deprecated Use `factory.createModuleDeclaration` or the factory supplied by your transformation context instead. */\n    const createModuleDeclaration: {\n        (modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined, flags?: NodeFlags | undefined): ModuleDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined, flags?: NodeFlags | undefined): ModuleDeclaration;\n    };\n    /** @deprecated Use `factory.updateModuleDeclaration` or the factory supplied by your transformation context instead. */\n    const updateModuleDeclaration: {\n        (node: ModuleDeclaration, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined): ModuleDeclaration;\n        (node: ModuleDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined): ModuleDeclaration;\n    };\n    /** @deprecated Use `factory.createModuleBlock` or the factory supplied by your transformation context instead. */\n    const createModuleBlock: (statements: readonly Statement[]) => ModuleBlock;\n    /** @deprecated Use `factory.updateModuleBlock` or the factory supplied by your transformation context instead. */\n    const updateModuleBlock: (node: ModuleBlock, statements: readonly Statement[]) => ModuleBlock;\n    /** @deprecated Use `factory.createCaseBlock` or the factory supplied by your transformation context instead. */\n    const createCaseBlock: (clauses: readonly CaseOrDefaultClause[]) => CaseBlock;\n    /** @deprecated Use `factory.updateCaseBlock` or the factory supplied by your transformation context instead. */\n    const updateCaseBlock: (node: CaseBlock, clauses: readonly CaseOrDefaultClause[]) => CaseBlock;\n    /** @deprecated Use `factory.createNamespaceExportDeclaration` or the factory supplied by your transformation context instead. */\n    const createNamespaceExportDeclaration: (name: string | Identifier) => NamespaceExportDeclaration;\n    /** @deprecated Use `factory.updateNamespaceExportDeclaration` or the factory supplied by your transformation context instead. */\n    const updateNamespaceExportDeclaration: (node: NamespaceExportDeclaration, name: Identifier) => NamespaceExportDeclaration;\n    /** @deprecated Use `factory.createImportEqualsDeclaration` or the factory supplied by your transformation context instead. */\n    const createImportEqualsDeclaration: {\n        (modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: string | Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: string | Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n    };\n    /** @deprecated Use `factory.updateImportEqualsDeclaration` or the factory supplied by your transformation context instead. */\n    const updateImportEqualsDeclaration: {\n        (node: ImportEqualsDeclaration, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n        (node: ImportEqualsDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n    };\n    /** @deprecated Use `factory.createImportDeclaration` or the factory supplied by your transformation context instead. */\n    const createImportDeclaration: {\n        (modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause?: AssertClause | undefined): ImportDeclaration;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause?: AssertClause | undefined): ImportDeclaration;\n    };\n    /** @deprecated Use `factory.updateImportDeclaration` or the factory supplied by your transformation context instead. */\n    const updateImportDeclaration: {\n        (node: ImportDeclaration, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause: AssertClause | undefined): ImportDeclaration;\n        (node: ImportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause: AssertClause | undefined): ImportDeclaration;\n    };\n    /** @deprecated Use `factory.createNamespaceImport` or the factory supplied by your transformation context instead. */\n    const createNamespaceImport: (name: Identifier) => NamespaceImport;\n    /** @deprecated Use `factory.updateNamespaceImport` or the factory supplied by your transformation context instead. */\n    const updateNamespaceImport: (node: NamespaceImport, name: Identifier) => NamespaceImport;\n    /** @deprecated Use `factory.createNamedImports` or the factory supplied by your transformation context instead. */\n    const createNamedImports: (elements: readonly ImportSpecifier[]) => NamedImports;\n    /** @deprecated Use `factory.updateNamedImports` or the factory supplied by your transformation context instead. */\n    const updateNamedImports: (node: NamedImports, elements: readonly ImportSpecifier[]) => NamedImports;\n    /** @deprecated Use `factory.createImportSpecifier` or the factory supplied by your transformation context instead. */\n    const createImportSpecifier: (isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier) => ImportSpecifier;\n    /** @deprecated Use `factory.updateImportSpecifier` or the factory supplied by your transformation context instead. */\n    const updateImportSpecifier: (node: ImportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier) => ImportSpecifier;\n    /** @deprecated Use `factory.createExportAssignment` or the factory supplied by your transformation context instead. */\n    const createExportAssignment: {\n        (modifiers: readonly Modifier[] | undefined, isExportEquals: boolean | undefined, expression: Expression): ExportAssignment;\n        (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isExportEquals: boolean | undefined, expression: Expression): ExportAssignment;\n    };\n    /** @deprecated Use `factory.updateExportAssignment` or the factory supplied by your transformation context instead. */\n    const updateExportAssignment: {\n        (node: ExportAssignment, modifiers: readonly Modifier[] | undefined, expression: Expression): ExportAssignment;\n        (node: ExportAssignment, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, expression: Expression): ExportAssignment;\n    };\n    /** @deprecated Use `factory.createNamedExports` or the factory supplied by your transformation context instead. */\n    const createNamedExports: (elements: readonly ExportSpecifier[]) => NamedExports;\n    /** @deprecated Use `factory.updateNamedExports` or the factory supplied by your transformation context instead. */\n    const updateNamedExports: (node: NamedExports, elements: readonly ExportSpecifier[]) => NamedExports;\n    /** @deprecated Use `factory.createExportSpecifier` or the factory supplied by your transformation context instead. */\n    const createExportSpecifier: (isTypeOnly: boolean, propertyName: string | Identifier | undefined, name: string | Identifier) => ExportSpecifier;\n    /** @deprecated Use `factory.updateExportSpecifier` or the factory supplied by your transformation context instead. */\n    const updateExportSpecifier: (node: ExportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier) => ExportSpecifier;\n    /** @deprecated Use `factory.createExternalModuleReference` or the factory supplied by your transformation context instead. */\n    const createExternalModuleReference: (expression: Expression) => ExternalModuleReference;\n    /** @deprecated Use `factory.updateExternalModuleReference` or the factory supplied by your transformation context instead. */\n    const updateExternalModuleReference: (node: ExternalModuleReference, expression: Expression) => ExternalModuleReference;\n    /** @deprecated Use `factory.createJSDocTypeExpression` or the factory supplied by your transformation context instead. */\n    const createJSDocTypeExpression: (type: TypeNode) => JSDocTypeExpression;\n    /** @deprecated Use `factory.createJSDocTypeTag` or the factory supplied by your transformation context instead. */\n    const createJSDocTypeTag: (tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocTypeTag;\n    /** @deprecated Use `factory.createJSDocReturnTag` or the factory supplied by your transformation context instead. */\n    const createJSDocReturnTag: (tagName: Identifier | undefined, typeExpression?: JSDocTypeExpression | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocReturnTag;\n    /** @deprecated Use `factory.createJSDocThisTag` or the factory supplied by your transformation context instead. */\n    const createJSDocThisTag: (tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocThisTag;\n    /** @deprecated Use `factory.createJSDocComment` or the factory supplied by your transformation context instead. */\n    const createJSDocComment: (comment?: string | NodeArray<JSDocComment> | undefined, tags?: readonly JSDocTag[] | undefined) => JSDoc;\n    /** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. */\n    const createJSDocParameterTag: (tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression | undefined, isNameFirst?: boolean | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocParameterTag;\n    /** @deprecated Use `factory.createJSDocClassTag` or the factory supplied by your transformation context instead. */\n    const createJSDocClassTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocClassTag;\n    /** @deprecated Use `factory.createJSDocAugmentsTag` or the factory supplied by your transformation context instead. */\n    const createJSDocAugmentsTag: (tagName: Identifier | undefined, className: ExpressionWithTypeArguments & {\n        readonly expression: Identifier | PropertyAccessEntityNameExpression;\n    }, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocAugmentsTag;\n    /** @deprecated Use `factory.createJSDocEnumTag` or the factory supplied by your transformation context instead. */\n    const createJSDocEnumTag: (tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocEnumTag;\n    /** @deprecated Use `factory.createJSDocTemplateTag` or the factory supplied by your transformation context instead. */\n    const createJSDocTemplateTag: (tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment?: string | NodeArray<JSDocComment> | undefined) => JSDocTemplateTag;\n    /** @deprecated Use `factory.createJSDocTypedefTag` or the factory supplied by your transformation context instead. */\n    const createJSDocTypedefTag: (tagName: Identifier | undefined, typeExpression?: JSDocTypeLiteral | JSDocTypeExpression | undefined, fullName?: Identifier | JSDocNamespaceDeclaration | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocTypedefTag;\n    /** @deprecated Use `factory.createJSDocCallbackTag` or the factory supplied by your transformation context instead. */\n    const createJSDocCallbackTag: (tagName: Identifier | undefined, typeExpression: JSDocSignature, fullName?: Identifier | JSDocNamespaceDeclaration | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocCallbackTag;\n    /** @deprecated Use `factory.createJSDocSignature` or the factory supplied by your transformation context instead. */\n    const createJSDocSignature: (typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type?: JSDocReturnTag | undefined) => JSDocSignature;\n    /** @deprecated Use `factory.createJSDocPropertyTag` or the factory supplied by your transformation context instead. */\n    const createJSDocPropertyTag: (tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression | undefined, isNameFirst?: boolean | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocPropertyTag;\n    /** @deprecated Use `factory.createJSDocTypeLiteral` or the factory supplied by your transformation context instead. */\n    const createJSDocTypeLiteral: (jsDocPropertyTags?: readonly JSDocPropertyLikeTag[] | undefined, isArrayType?: boolean | undefined) => JSDocTypeLiteral;\n    /** @deprecated Use `factory.createJSDocImplementsTag` or the factory supplied by your transformation context instead. */\n    const createJSDocImplementsTag: (tagName: Identifier | undefined, className: ExpressionWithTypeArguments & {\n        readonly expression: Identifier | PropertyAccessEntityNameExpression;\n    }, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocImplementsTag;\n    /** @deprecated Use `factory.createJSDocAuthorTag` or the factory supplied by your transformation context instead. */\n    const createJSDocAuthorTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocAuthorTag;\n    /** @deprecated Use `factory.createJSDocPublicTag` or the factory supplied by your transformation context instead. */\n    const createJSDocPublicTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocPublicTag;\n    /** @deprecated Use `factory.createJSDocPrivateTag` or the factory supplied by your transformation context instead. */\n    const createJSDocPrivateTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocPrivateTag;\n    /** @deprecated Use `factory.createJSDocProtectedTag` or the factory supplied by your transformation context instead. */\n    const createJSDocProtectedTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocProtectedTag;\n    /** @deprecated Use `factory.createJSDocReadonlyTag` or the factory supplied by your transformation context instead. */\n    const createJSDocReadonlyTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocReadonlyTag;\n    /** @deprecated Use `factory.createJSDocUnknownTag` or the factory supplied by your transformation context instead. */\n    const createJSDocTag: (tagName: Identifier, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocUnknownTag;\n    /** @deprecated Use `factory.createJsxElement` or the factory supplied by your transformation context instead. */\n    const createJsxElement: (openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement) => JsxElement;\n    /** @deprecated Use `factory.updateJsxElement` or the factory supplied by your transformation context instead. */\n    const updateJsxElement: (node: JsxElement, openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement) => JsxElement;\n    /** @deprecated Use `factory.createJsxSelfClosingElement` or the factory supplied by your transformation context instead. */\n    const createJsxSelfClosingElement: (tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxSelfClosingElement;\n    /** @deprecated Use `factory.updateJsxSelfClosingElement` or the factory supplied by your transformation context instead. */\n    const updateJsxSelfClosingElement: (node: JsxSelfClosingElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxSelfClosingElement;\n    /** @deprecated Use `factory.createJsxOpeningElement` or the factory supplied by your transformation context instead. */\n    const createJsxOpeningElement: (tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxOpeningElement;\n    /** @deprecated Use `factory.updateJsxOpeningElement` or the factory supplied by your transformation context instead. */\n    const updateJsxOpeningElement: (node: JsxOpeningElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxOpeningElement;\n    /** @deprecated Use `factory.createJsxClosingElement` or the factory supplied by your transformation context instead. */\n    const createJsxClosingElement: (tagName: JsxTagNameExpression) => JsxClosingElement;\n    /** @deprecated Use `factory.updateJsxClosingElement` or the factory supplied by your transformation context instead. */\n    const updateJsxClosingElement: (node: JsxClosingElement, tagName: JsxTagNameExpression) => JsxClosingElement;\n    /** @deprecated Use `factory.createJsxFragment` or the factory supplied by your transformation context instead. */\n    const createJsxFragment: (openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment) => JsxFragment;\n    /** @deprecated Use `factory.createJsxText` or the factory supplied by your transformation context instead. */\n    const createJsxText: (text: string, containsOnlyTriviaWhiteSpaces?: boolean | undefined) => JsxText;\n    /** @deprecated Use `factory.updateJsxText` or the factory supplied by your transformation context instead. */\n    const updateJsxText: (node: JsxText, text: string, containsOnlyTriviaWhiteSpaces?: boolean | undefined) => JsxText;\n    /** @deprecated Use `factory.createJsxOpeningFragment` or the factory supplied by your transformation context instead. */\n    const createJsxOpeningFragment: () => JsxOpeningFragment;\n    /** @deprecated Use `factory.createJsxJsxClosingFragment` or the factory supplied by your transformation context instead. */\n    const createJsxJsxClosingFragment: () => JsxClosingFragment;\n    /** @deprecated Use `factory.updateJsxFragment` or the factory supplied by your transformation context instead. */\n    const updateJsxFragment: (node: JsxFragment, openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment) => JsxFragment;\n    /** @deprecated Use `factory.createJsxAttribute` or the factory supplied by your transformation context instead. */\n    const createJsxAttribute: (name: Identifier, initializer: JsxAttributeValue | undefined) => JsxAttribute;\n    /** @deprecated Use `factory.updateJsxAttribute` or the factory supplied by your transformation context instead. */\n    const updateJsxAttribute: (node: JsxAttribute, name: Identifier, initializer: JsxAttributeValue | undefined) => JsxAttribute;\n    /** @deprecated Use `factory.createJsxAttributes` or the factory supplied by your transformation context instead. */\n    const createJsxAttributes: (properties: readonly JsxAttributeLike[]) => JsxAttributes;\n    /** @deprecated Use `factory.updateJsxAttributes` or the factory supplied by your transformation context instead. */\n    const updateJsxAttributes: (node: JsxAttributes, properties: readonly JsxAttributeLike[]) => JsxAttributes;\n    /** @deprecated Use `factory.createJsxSpreadAttribute` or the factory supplied by your transformation context instead. */\n    const createJsxSpreadAttribute: (expression: Expression) => JsxSpreadAttribute;\n    /** @deprecated Use `factory.updateJsxSpreadAttribute` or the factory supplied by your transformation context instead. */\n    const updateJsxSpreadAttribute: (node: JsxSpreadAttribute, expression: Expression) => JsxSpreadAttribute;\n    /** @deprecated Use `factory.createJsxExpression` or the factory supplied by your transformation context instead. */\n    const createJsxExpression: (dotDotDotToken: DotDotDotToken | undefined, expression: Expression | undefined) => JsxExpression;\n    /** @deprecated Use `factory.updateJsxExpression` or the factory supplied by your transformation context instead. */\n    const updateJsxExpression: (node: JsxExpression, expression: Expression | undefined) => JsxExpression;\n    /** @deprecated Use `factory.createCaseClause` or the factory supplied by your transformation context instead. */\n    const createCaseClause: (expression: Expression, statements: readonly Statement[]) => CaseClause;\n    /** @deprecated Use `factory.updateCaseClause` or the factory supplied by your transformation context instead. */\n    const updateCaseClause: (node: CaseClause, expression: Expression, statements: readonly Statement[]) => CaseClause;\n    /** @deprecated Use `factory.createDefaultClause` or the factory supplied by your transformation context instead. */\n    const createDefaultClause: (statements: readonly Statement[]) => DefaultClause;\n    /** @deprecated Use `factory.updateDefaultClause` or the factory supplied by your transformation context instead. */\n    const updateDefaultClause: (node: DefaultClause, statements: readonly Statement[]) => DefaultClause;\n    /** @deprecated Use `factory.createHeritageClause` or the factory supplied by your transformation context instead. */\n    const createHeritageClause: (token: SyntaxKind.ExtendsKeyword | SyntaxKind.ImplementsKeyword, types: readonly ExpressionWithTypeArguments[]) => HeritageClause;\n    /** @deprecated Use `factory.updateHeritageClause` or the factory supplied by your transformation context instead. */\n    const updateHeritageClause: (node: HeritageClause, types: readonly ExpressionWithTypeArguments[]) => HeritageClause;\n    /** @deprecated Use `factory.createCatchClause` or the factory supplied by your transformation context instead. */\n    const createCatchClause: (variableDeclaration: string | VariableDeclaration | BindingName | undefined, block: Block) => CatchClause;\n    /** @deprecated Use `factory.updateCatchClause` or the factory supplied by your transformation context instead. */\n    const updateCatchClause: (node: CatchClause, variableDeclaration: VariableDeclaration | undefined, block: Block) => CatchClause;\n    /** @deprecated Use `factory.createPropertyAssignment` or the factory supplied by your transformation context instead. */\n    const createPropertyAssignment: (name: string | PropertyName, initializer: Expression) => PropertyAssignment;\n    /** @deprecated Use `factory.updatePropertyAssignment` or the factory supplied by your transformation context instead. */\n    const updatePropertyAssignment: (node: PropertyAssignment, name: PropertyName, initializer: Expression) => PropertyAssignment;\n    /** @deprecated Use `factory.createShorthandPropertyAssignment` or the factory supplied by your transformation context instead. */\n    const createShorthandPropertyAssignment: (name: string | Identifier, objectAssignmentInitializer?: Expression | undefined) => ShorthandPropertyAssignment;\n    /** @deprecated Use `factory.updateShorthandPropertyAssignment` or the factory supplied by your transformation context instead. */\n    const updateShorthandPropertyAssignment: (node: ShorthandPropertyAssignment, name: Identifier, objectAssignmentInitializer: Expression | undefined) => ShorthandPropertyAssignment;\n    /** @deprecated Use `factory.createSpreadAssignment` or the factory supplied by your transformation context instead. */\n    const createSpreadAssignment: (expression: Expression) => SpreadAssignment;\n    /** @deprecated Use `factory.updateSpreadAssignment` or the factory supplied by your transformation context instead. */\n    const updateSpreadAssignment: (node: SpreadAssignment, expression: Expression) => SpreadAssignment;\n    /** @deprecated Use `factory.createEnumMember` or the factory supplied by your transformation context instead. */\n    const createEnumMember: (name: string | PropertyName, initializer?: Expression | undefined) => EnumMember;\n    /** @deprecated Use `factory.updateEnumMember` or the factory supplied by your transformation context instead. */\n    const updateEnumMember: (node: EnumMember, name: PropertyName, initializer: Expression | undefined) => EnumMember;\n    /** @deprecated Use `factory.updateSourceFile` or the factory supplied by your transformation context instead. */\n    const updateSourceFileNode: (node: SourceFile, statements: readonly Statement[], isDeclarationFile?: boolean | undefined, referencedFiles?: readonly FileReference[] | undefined, typeReferences?: readonly FileReference[] | undefined, hasNoDefaultLib?: boolean | undefined, libReferences?: readonly FileReference[] | undefined) => SourceFile;\n    /** @deprecated Use `factory.createNotEmittedStatement` or the factory supplied by your transformation context instead. */\n    const createNotEmittedStatement: (original: Node) => NotEmittedStatement;\n    /** @deprecated Use `factory.createPartiallyEmittedExpression` or the factory supplied by your transformation context instead. */\n    const createPartiallyEmittedExpression: (expression: Expression, original?: Node | undefined) => PartiallyEmittedExpression;\n    /** @deprecated Use `factory.updatePartiallyEmittedExpression` or the factory supplied by your transformation context instead. */\n    const updatePartiallyEmittedExpression: (node: PartiallyEmittedExpression, expression: Expression) => PartiallyEmittedExpression;\n    /** @deprecated Use `factory.createCommaListExpression` or the factory supplied by your transformation context instead. */\n    const createCommaList: (elements: readonly Expression[]) => CommaListExpression;\n    /** @deprecated Use `factory.updateCommaListExpression` or the factory supplied by your transformation context instead. */\n    const updateCommaList: (node: CommaListExpression, elements: readonly Expression[]) => CommaListExpression;\n    /** @deprecated Use `factory.createBundle` or the factory supplied by your transformation context instead. */\n    const createBundle: (sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[] | undefined) => Bundle;\n    /** @deprecated Use `factory.updateBundle` or the factory supplied by your transformation context instead. */\n    const updateBundle: (node: Bundle, sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[] | undefined) => Bundle;\n    /** @deprecated Use `factory.createImmediatelyInvokedFunctionExpression` or the factory supplied by your transformation context instead. */\n    const createImmediatelyInvokedFunctionExpression: {\n        (statements: readonly Statement[]): CallExpression;\n        (statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n    };\n    /** @deprecated Use `factory.createImmediatelyInvokedArrowFunction` or the factory supplied by your transformation context instead. */\n    const createImmediatelyInvokedArrowFunction: {\n        (statements: readonly Statement[]): CallExpression;\n        (statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n    };\n    /** @deprecated Use `factory.createVoidZero` or the factory supplied by your transformation context instead. */\n    const createVoidZero: () => VoidExpression;\n    /** @deprecated Use `factory.createExportDefault` or the factory supplied by your transformation context instead. */\n    const createExportDefault: (expression: Expression) => ExportAssignment;\n    /** @deprecated Use `factory.createExternalModuleExport` or the factory supplied by your transformation context instead. */\n    const createExternalModuleExport: (exportName: Identifier) => ExportDeclaration;\n    /** @deprecated Use `factory.createNamespaceExport` or the factory supplied by your transformation context instead. */\n    const createNamespaceExport: (name: Identifier) => NamespaceExport;\n    /** @deprecated Use `factory.updateNamespaceExport` or the factory supplied by your transformation context instead. */\n    const updateNamespaceExport: (node: NamespaceExport, name: Identifier) => NamespaceExport;\n    /** @deprecated Use `factory.createToken` or the factory supplied by your transformation context instead. */\n    const createToken: <TKind extends SyntaxKind>(kind: TKind) => Token<TKind>;\n    /** @deprecated Use `factory.createIdentifier` or the factory supplied by your transformation context instead. */\n    const createIdentifier: (text: string) => Identifier;\n    /** @deprecated Use `factory.createTempVariable` or the factory supplied by your transformation context instead. */\n    const createTempVariable: (recordTempVariable: ((node: Identifier) => void) | undefined) => Identifier;\n    /** @deprecated Use `factory.getGeneratedNameForNode` or the factory supplied by your transformation context instead. */\n    const getGeneratedNameForNode: (node: Node | undefined) => Identifier;\n    /** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic)` or the factory supplied by your transformation context instead. */\n    const createOptimisticUniqueName: (text: string) => Identifier;\n    /** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic | GeneratedIdentifierFlags.FileLevel)` or the factory supplied by your transformation context instead. */\n    const createFileLevelUniqueName: (text: string) => Identifier;\n    /** @deprecated Use `factory.createIndexSignature` or the factory supplied by your transformation context instead. */\n    const createIndexSignature: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode) => IndexSignatureDeclaration;\n    /** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. */\n    const createTypePredicateNode: (parameterName: Identifier | ThisTypeNode | string, type: TypeNode) => TypePredicateNode;\n    /** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. */\n    const updateTypePredicateNode: (node: TypePredicateNode, parameterName: Identifier | ThisTypeNode, type: TypeNode) => TypePredicateNode;\n    /** @deprecated Use `factory.createStringLiteral`, `factory.createStringLiteralFromNode`, `factory.createNumericLiteral`, `factory.createBigIntLiteral`, `factory.createTrue`, `factory.createFalse`, or the factory supplied by your transformation context instead. */\n    const createLiteral: {\n        (value: string | StringLiteral | NoSubstitutionTemplateLiteral | NumericLiteral | Identifier): StringLiteral;\n        (value: number | PseudoBigInt): NumericLiteral;\n        (value: boolean): BooleanLiteral;\n        (value: string | number | PseudoBigInt | boolean): PrimaryExpression;\n    };\n    /** @deprecated Use `factory.createMethodSignature` or the factory supplied by your transformation context instead. */\n    const createMethodSignature: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined) => MethodSignature;\n    /** @deprecated Use `factory.updateMethodSignature` or the factory supplied by your transformation context instead. */\n    const updateMethodSignature: (node: MethodSignature, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined, name: PropertyName, questionToken: QuestionToken | undefined) => MethodSignature;\n    /** @deprecated Use `factory.createTypeOperatorNode` or the factory supplied by your transformation context instead. */\n    const createTypeOperatorNode: {\n        (type: TypeNode): TypeOperatorNode;\n        (operator: SyntaxKind.KeyOfKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.ReadonlyKeyword, type: TypeNode): TypeOperatorNode;\n    };\n    /** @deprecated Use `factory.createTaggedTemplate` or the factory supplied by your transformation context instead. */\n    const createTaggedTemplate: {\n        (tag: Expression, template: TemplateLiteral): TaggedTemplateExpression;\n        (tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n    };\n    /** @deprecated Use `factory.updateTaggedTemplate` or the factory supplied by your transformation context instead. */\n    const updateTaggedTemplate: {\n        (node: TaggedTemplateExpression, tag: Expression, template: TemplateLiteral): TaggedTemplateExpression;\n        (node: TaggedTemplateExpression, tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n    };\n    /** @deprecated Use `factory.updateBinary` or the factory supplied by your transformation context instead. */\n    const updateBinary: (node: BinaryExpression, left: Expression, right: Expression, operator?: BinaryOperator | BinaryOperatorToken) => BinaryExpression;\n    /** @deprecated Use `factory.createConditional` or the factory supplied by your transformation context instead. */\n    const createConditional: {\n        (condition: Expression, whenTrue: Expression, whenFalse: Expression): ConditionalExpression;\n        (condition: Expression, questionToken: QuestionToken, whenTrue: Expression, colonToken: ColonToken, whenFalse: Expression): ConditionalExpression;\n    };\n    /** @deprecated Use `factory.createYield` or the factory supplied by your transformation context instead. */\n    const createYield: {\n        (expression?: Expression | undefined): YieldExpression;\n        (asteriskToken: AsteriskToken | undefined, expression: Expression): YieldExpression;\n    };\n    /** @deprecated Use `factory.createClassExpression` or the factory supplied by your transformation context instead. */\n    const createClassExpression: (modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]) => ClassExpression;\n    /** @deprecated Use `factory.updateClassExpression` or the factory supplied by your transformation context instead. */\n    const updateClassExpression: (node: ClassExpression, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]) => ClassExpression;\n    /** @deprecated Use `factory.createPropertySignature` or the factory supplied by your transformation context instead. */\n    const createPropertySignature: (modifiers: readonly Modifier[] | undefined, name: PropertyName | string, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer?: Expression | undefined) => PropertySignature;\n    /** @deprecated Use `factory.updatePropertySignature` or the factory supplied by your transformation context instead. */\n    const updatePropertySignature: (node: PropertySignature, modifiers: readonly Modifier[] | undefined, name: PropertyName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined) => PropertySignature;\n    /** @deprecated Use `factory.createExpressionWithTypeArguments` or the factory supplied by your transformation context instead. */\n    const createExpressionWithTypeArguments: (typeArguments: readonly TypeNode[] | undefined, expression: Expression) => ExpressionWithTypeArguments;\n    /** @deprecated Use `factory.updateExpressionWithTypeArguments` or the factory supplied by your transformation context instead. */\n    const updateExpressionWithTypeArguments: (node: ExpressionWithTypeArguments, typeArguments: readonly TypeNode[] | undefined, expression: Expression) => ExpressionWithTypeArguments;\n    /** @deprecated Use `factory.createArrowFunction` or the factory supplied by your transformation context instead. */\n    const createArrowFunction: {\n        (modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken | undefined, body: ConciseBody): ArrowFunction;\n        (modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: ConciseBody): ArrowFunction;\n    };\n    /** @deprecated Use `factory.updateArrowFunction` or the factory supplied by your transformation context instead. */\n    const updateArrowFunction: {\n        (node: ArrowFunction, modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken, body: ConciseBody): ArrowFunction;\n        (node: ArrowFunction, modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: ConciseBody): ArrowFunction;\n    };\n    /** @deprecated Use `factory.createVariableDeclaration` or the factory supplied by your transformation context instead. */\n    const createVariableDeclaration: {\n        (name: string | BindingName, type?: TypeNode | undefined, initializer?: Expression | undefined): VariableDeclaration;\n        (name: string | BindingName, exclamationToken: ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n    };\n    /** @deprecated Use `factory.updateVariableDeclaration` or the factory supplied by your transformation context instead. */\n    const updateVariableDeclaration: {\n        (node: VariableDeclaration, name: BindingName, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n        (node: VariableDeclaration, name: BindingName, exclamationToken: ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n    };\n    /** @deprecated Use `factory.createImportClause` or the factory supplied by your transformation context instead. */\n    const createImportClause: (name: Identifier | undefined, namedBindings: NamedImportBindings | undefined, isTypeOnly?: any) => ImportClause;\n    /** @deprecated Use `factory.updateImportClause` or the factory supplied by your transformation context instead. */\n    const updateImportClause: (node: ImportClause, name: Identifier | undefined, namedBindings: NamedImportBindings | undefined, isTypeOnly: boolean) => ImportClause;\n    /** @deprecated Use `factory.createExportDeclaration` or the factory supplied by your transformation context instead. */\n    const createExportDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, exportClause: NamedExportBindings | undefined, moduleSpecifier?: Expression | undefined, isTypeOnly?: any) => ExportDeclaration;\n    /** @deprecated Use `factory.updateExportDeclaration` or the factory supplied by your transformation context instead. */\n    const updateExportDeclaration: (node: ExportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, exportClause: NamedExportBindings | undefined, moduleSpecifier: Expression | undefined, isTypeOnly: boolean) => ExportDeclaration;\n    /** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. */\n    const createJSDocParamTag: (name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression | undefined, comment?: string | undefined) => JSDocParameterTag;\n    /** @deprecated Use `factory.createComma` or the factory supplied by your transformation context instead. */\n    const createComma: (left: Expression, right: Expression) => Expression;\n    /** @deprecated Use `factory.createLessThan` or the factory supplied by your transformation context instead. */\n    const createLessThan: (left: Expression, right: Expression) => Expression;\n    /** @deprecated Use `factory.createAssignment` or the factory supplied by your transformation context instead. */\n    const createAssignment: (left: Expression, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.createStrictEquality` or the factory supplied by your transformation context instead. */\n    const createStrictEquality: (left: Expression, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.createStrictInequality` or the factory supplied by your transformation context instead. */\n    const createStrictInequality: (left: Expression, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.createAdd` or the factory supplied by your transformation context instead. */\n    const createAdd: (left: Expression, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.createSubtract` or the factory supplied by your transformation context instead. */\n    const createSubtract: (left: Expression, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.createLogicalAnd` or the factory supplied by your transformation context instead. */\n    const createLogicalAnd: (left: Expression, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.createLogicalOr` or the factory supplied by your transformation context instead. */\n    const createLogicalOr: (left: Expression, right: Expression) => BinaryExpression;\n    /** @deprecated Use `factory.createPostfixIncrement` or the factory supplied by your transformation context instead. */\n    const createPostfixIncrement: (operand: Expression) => PostfixUnaryExpression;\n    /** @deprecated Use `factory.createLogicalNot` or the factory supplied by your transformation context instead. */\n    const createLogicalNot: (operand: Expression) => PrefixUnaryExpression;\n    /** @deprecated Use an appropriate `factory` method instead. */\n    const createNode: (kind: SyntaxKind, pos?: any, end?: any) => Node;\n    /**\n     * Creates a shallow, memberwise clone of a node ~for mutation~ with its `pos`, `end`, and `parent` set.\n     *\n     * NOTE: It is unsafe to change any properties of a `Node` that relate to its AST children, as those changes won't be\n     * captured with respect to transformations.\n     *\n     * @deprecated Use an appropriate `factory.update...` method instead, use `setCommentRange` or `setSourceMapRange`, and avoid setting `parent`.\n     */\n    const getMutableClone: <T extends Node>(node: T) => T;\n}\ndeclare namespace ts {\n    /** @deprecated Use `isTypeAssertionExpression` instead. */\n    const isTypeAssertion: (node: Node) => node is TypeAssertion;\n}\ndeclare namespace ts {\n    /**\n     * @deprecated Use `ts.ReadonlyESMap<K, V>` instead.\n     */\n    interface ReadonlyMap<T> extends ReadonlyESMap<string, T> {\n    }\n    /**\n     * @deprecated Use `ts.ESMap<K, V>` instead.\n     */\n    interface Map<T> extends ESMap<string, T> {\n    }\n}\ndeclare namespace ts {\n    /**\n     * @deprecated Use `isMemberName` instead.\n     */\n    const isIdentifierOrPrivateIdentifier: (node: Node) => node is MemberName;\n}\ndeclare namespace ts {\n    interface NodeFactory {\n        /** @deprecated Use the overload that accepts 'modifiers' */\n        createConstructorTypeNode(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): ConstructorTypeNode;\n        /** @deprecated Use the overload that accepts 'modifiers' */\n        updateConstructorTypeNode(node: ConstructorTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode): ConstructorTypeNode;\n    }\n}\ndeclare namespace ts {\n    interface NodeFactory {\n        createImportTypeNode(argument: TypeNode, assertions?: ImportTypeAssertionContainer, qualifier?: EntityName, typeArguments?: readonly TypeNode[], isTypeOf?: boolean): ImportTypeNode;\n        /** @deprecated Use the overload that accepts 'assertions' */\n        createImportTypeNode(argument: TypeNode, qualifier?: EntityName, typeArguments?: readonly TypeNode[], isTypeOf?: boolean): ImportTypeNode;\n        /** @deprecated Use the overload that accepts 'assertions' */\n        updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean): ImportTypeNode;\n    }\n}\ndeclare namespace ts {\n    interface NodeFactory {\n        /** @deprecated Use the overload that accepts 'modifiers' */\n        createTypeParameterDeclaration(name: string | Identifier, constraint?: TypeNode, defaultType?: TypeNode): TypeParameterDeclaration;\n        /** @deprecated Use the overload that accepts 'modifiers' */\n        updateTypeParameterDeclaration(node: TypeParameterDeclaration, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n    }\n}\ndeclare namespace ts {\n    interface Node {\n        /**\n         * @deprecated `decorators` has been removed from `Node` and merged with `modifiers` on the `Node` subtypes that support them.\n         * Use `ts.canHaveDecorators()` to test whether a `Node` can have decorators.\n         * Use `ts.getDecorators()` to get the decorators of a `Node`.\n         *\n         * For example:\n         * ```ts\n         * const decorators = ts.canHaveDecorators(node) ? ts.getDecorators(node) : undefined;\n         * ```\n         */\n        readonly decorators?: undefined;\n        /**\n         * @deprecated `modifiers` has been removed from `Node` and moved to the `Node` subtypes that support them.\n         * Use `ts.canHaveModifiers()` to test whether a `Node` can have modifiers.\n         * Use `ts.getModifiers()` to get the modifiers of a `Node`.\n         *\n         * For example:\n         * ```ts\n         * const modifiers = ts.canHaveModifiers(node) ? ts.getModifiers(node) : undefined;\n         * ```\n         */\n        readonly modifiers?: NodeArray<ModifierLike> | undefined;\n    }\n    interface PropertySignature {\n        /** @deprecated A property signature cannot have an initializer */\n        readonly initializer?: Expression | undefined;\n    }\n    interface PropertyAssignment {\n        /** @deprecated A property assignment cannot have a question token */\n        readonly questionToken?: QuestionToken | undefined;\n        /** @deprecated A property assignment cannot have an exclamation token */\n        readonly exclamationToken?: ExclamationToken | undefined;\n    }\n    interface ShorthandPropertyAssignment {\n        /** @deprecated A shorthand property assignment cannot have modifiers */\n        readonly modifiers?: NodeArray<Modifier> | undefined;\n        /** @deprecated A shorthand property assignment cannot have a question token */\n        readonly questionToken?: QuestionToken | undefined;\n        /** @deprecated A shorthand property assignment cannot have an exclamation token */\n        readonly exclamationToken?: ExclamationToken | undefined;\n    }\n    interface FunctionTypeNode {\n        /** @deprecated A function type cannot have modifiers */\n        readonly modifiers?: NodeArray<Modifier> | undefined;\n    }\n    interface NodeFactory {\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createParameterDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken?: QuestionToken, type?: TypeNode, initializer?: Expression): ParameterDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateParameterDeclaration(node: ParameterDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): ParameterDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createPropertyDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updatePropertyDeclaration(node: PropertyDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createMethodDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateMethodDeclaration(node: MethodDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n        /**\n         * @deprecated This node does not support Decorators. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createConstructorDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n        /**\n         * @deprecated This node does not support Decorators. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateConstructorDeclaration(node: ConstructorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createGetAccessorDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateGetAccessorDeclaration(node: GetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createSetAccessorDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateSetAccessorDeclaration(node: SetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createIndexSignature(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n        /**\n         * @deprecated Decorators and modifiers are no longer supported for this function. Callers should use an overload that does not accept the `decorators` and `modifiers` parameters.\n         */\n        updateIndexSignature(node: IndexSignatureDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n        /**\n         * @deprecated Decorators and modifiers are no longer supported for this function. Callers should use an overload that does not accept the `decorators` and `modifiers` parameters.\n         */\n        createClassStaticBlockDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, body: Block): ClassStaticBlockDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateClassStaticBlockDeclaration(node: ClassStaticBlockDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, body: Block): ClassStaticBlockDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createClassExpression(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassExpression;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateClassExpression(node: ClassExpression, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassExpression;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createFunctionDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateFunctionDeclaration(node: FunctionDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createClassDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n        /**\n         * @deprecated Decorators have been combined with modifiers. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateClassDeclaration(node: ClassDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createInterfaceDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateInterfaceDeclaration(node: InterfaceDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createTypeAliasDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateTypeAliasDeclaration(node: TypeAliasDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createEnumDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, members: readonly EnumMember[]): EnumDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateEnumDeclaration(node: EnumDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, members: readonly EnumMember[]): EnumDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createModuleDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined, flags?: NodeFlags): ModuleDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateModuleDeclaration(node: ModuleDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined): ModuleDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createImportEqualsDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: string | Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateImportEqualsDeclaration(node: ImportEqualsDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createImportDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause?: AssertClause): ImportDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateImportDeclaration(node: ImportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause: AssertClause | undefined): ImportDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createExportAssignment(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isExportEquals: boolean | undefined, expression: Expression): ExportAssignment;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateExportAssignment(node: ExportAssignment, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, expression: Expression): ExportAssignment;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        createExportDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, exportClause: NamedExportBindings | undefined, moduleSpecifier?: Expression, assertClause?: AssertClause): ExportDeclaration;\n        /**\n         * @deprecated Decorators are no longer supported for this function. Callers should use an overload that does not accept a `decorators` parameter.\n         */\n        updateExportDeclaration(node: ExportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, exportClause: NamedExportBindings | undefined, moduleSpecifier: Expression | undefined, assertClause: AssertClause | undefined): ExportDeclaration;\n    }\n}\n\nexport = ts;"}