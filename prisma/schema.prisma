// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model App {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @default(now())
  slug            String    @db.VarChar(60) @unique
  name            String?
  description     String?
  datastore       Json?
  isPrivate       Boolean   @default(true)
  submissionState Int       @default(0)
  categories      String[]
  parentId        String?
  lastDeploymentVersion String?

  scriptMain ScriptMain?

  scripts   Script[]
  secrets   Secret[]
  schedules Schedule[]
  runs      AppRun[]
  editors   AppEditor[]

  parent  App?  @relation("AppForks", fields: [parentId], references: [id])
  forks   App[] @relation("AppForks")
  settings AppSetting[]
  connectors AppConnector[]

  @@map("apps")
}

model AppSetting {
  settingName  String    @db.VarChar
  settingValue String    @db.VarChar
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  appId        String

  app          App       @relation(fields: [appId], references: [id])

  @@id([settingName, appId])
  @@unique([appId, settingName])
  @@map("app_settings")
}

model AppEditor {
  userId        String
  appId         String
  isOwner       Boolean

  app           App        @relation(fields: [appId], references: [id])
  user          User       @relation(fields: [userId], references: [id])

  @@map("app_editors")
  @@id([userId, appId])
}

model AppEvent {
  id           String @id @default(uuid())
  timestamp    String
  deploymentId String
  eventType    String
  eventPayload Json

  @@map("apps_events")
}

model AppRun {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @default(now())
  success      Boolean
  deploymentId String
  scheduled    Boolean   @default(false)
  result       Json?
  inputs       Json?

  appId String
  app   App?   @relation(fields: [appId], references: [id])

  @@map("apps_runs")
}

model AppConnector {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  deletedAt DateTime? @db.Timestamp(6)
  type      String
  appId     String

  app       App      @relation(fields: [appId], references: [id])

  @@unique([appId, type])
  @@map("app_connectors")
}

model Secret {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @default(now())
  key            String
  encryptedValue String

  appId String
  app   App?   @relation(fields: [appId], references: [id])

  @@map("secrets")
}

model Schedule {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  crontab   String
  inputs    Json?

  appId String
  app   App?   @relation(fields: [appId], references: [id])

  @@map("schedules")
}

model Script {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @default(now())
  name          String
  filename      String
  description   String?
  code          String
  order         Int?      @default(0)
  appId         String
  inputSchema   Json?
  outputSchema  Json?
  connectorId   String?

  app        App         @relation(fields: [appId], references: [id])
  scriptMain ScriptMain?

  @@map("scripts")
}

model ScriptMain {
  appId    String @id
  scriptId String @unique

  app    App    @relation(fields: [appId], references: [id])
  script Script @relation(fields: [scriptId], references: [id])

  @@map("script_main")
}

model ResourceInstance {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  @@map("resoure_instances")
}

model ThirdPartyAccount {
  id                String    @id
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @default(now())
  userId            String
  provider          String
  providerAccountId String    @unique
  scope             String?
  id_token          String?   @db.Text
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        DateTime?
  user              User      @relation(fields: [userId], references: [id])

  @@map("third_party_accounts")
}

model User {
  id           String    @id @default(uuid())
  superTokenId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @default(now())
  name         String?
  email        String    @unique
  picture      String?
  registered   Boolean

  thirdPartyAccounts ThirdPartyAccount[]
  editorOf           AppEditor[]

  @@map("users")
}
